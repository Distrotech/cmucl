;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: STREAM -*-
;;;
;;; **********************************************************************
;;; This code was written by Paul Foley and has been placed in the public
;;; domain.
;;;
(ext:file-comment "$Header: /Volumes/share2/src/cmucl/cvs2git/cvsroot/src/pcl/simple-streams/external-formats/utf-8.lisp,v 1.2.4.1.2.6 2009/04/10 17:24:48 rtoy Exp $")

(in-package "STREAM")

;; This format converts utf8 into our internal utf16 strings, with
;; proper support for surrogate pairs in the utf16 string.
(define-external-format :utf-8 (:min 1 :max 4)
  ()

  (octets-to-code (state input unput c i j n)
    `(flet ((utf8 (,c ,i)
	     (declare (type (unsigned-byte 8) ,c)
		      (type (integer 1 5) ,i))
	     (let ((,n (ash (ldb (byte (- 6 ,i) 0) ,c) (* 6 ,i))))
	       (declare (type (unsigned-byte 31) ,n))
	       (dotimes (,j ,i (values ,n (1+ ,i)))
		 (declare (type (integer 0 10) ,j))
		 (setf (ldb (byte 6 (* 6 (- ,i ,j 1))) ,n)
		       (ldb (byte 6 0) ,input)))))
	    (utf16 (,c ,n)
	     (declare (type (unsigned-byte 21) ,c)
		      (type (member 3 4) ,n))
	     (if (< ,c #x10000)
		 (values ,c ,n)
		 (let* ((,c (- ,c #x10000))
			(,i (+ (ldb (byte 10 10) ,c) #xD800))
			(,j (+ (ldb (byte 10 0) ,c) #xDC00)))
		   (setf ,state ,j)
		   (values ,i ,n)))))
      (let ((,c ,input))
	(if ,state
	    (multiple-value-prog1 (values ,state 0) (setf ,state nil))
	    (cond ((null ,c) (values nil 0))
		  ((< ,c #b10000000) (values ,c 1))
		  ((< ,c #b11000000) (error "UTF-8 desync"))
		  ((< ,c #b11100000) (utf8 ,c 1))
		  ((< ,c #b11110000) (utf16 (utf8 ,c 2) 3))
		  ((< ,c #b11111000) (utf16 (utf8 ,c 3) 4))
		  (t (error "Invalid UTF-8 character")))))))
  (code-to-octets (code state output i j n p init)
    `(flet ((utf8 (,n ,i)
	     (declare (type (unsigned-byte 21) ,n)
		      (type (member 1 2 3) ,i))
	     (let* ((,j (- 6 ,i))
		    (,p (* 6 ,i))
		    (,init (logand #xFF (ash #b01111110 ,j))))
	       (declare (type (integer 0 18) ,p))
	       (,output (logior ,init (ldb (byte ,j ,p) ,n)))
	       (dotimes (,i ,i)
		 (declare (type (integer 0 10) ,i))
		 (decf ,p 6)
		 (,output (logior 128 (ldb (byte 6 ,p) ,n)))))))
      (when ,state
	(unless (<= #xDC00 ,code #xDFFF)
	  (error "High surrogate without low!"))
	(setf ,code (+ (ash (- (the (integer #xd800 #xdbff) ,state) #xD800)
			    10)
		       (the (unsigned-byte 16) ,code) #x2400))
	(setf ,state nil))
      (cond ((<= #xD800 ,code #xDBFF) (setf ,state ,code))
	    ((<= #xDC00 ,code #xDFFF) (error "Low surrogate without high!"))
	    ((< ,code #x80) (,output ,code))
	    ((< ,code #x800) (utf8 ,code 1))
	    ((< ,code #x10000) (utf8 ,code 2))
	    ((< ,code #x110000) (utf8 ,code 3))
	    (t (error "Invalid UTF-8 character"))))))
