4/3/93 to 4/4/93

Added serveral new classes needed to bootstrap dylan.  There should be no
user visable changes, except that you might have to recompile stuff if
something depends on the superclasses of sequence.  The loader will tell
you if so.



3/15/93 to 4/3/93  [no PCL or CLM]

Compiler:

Fixed call to CONTINUATION-DERIVED-TYPE to be CONTINUATION-TYPE so that we
don't choke on values types in the functional position.

Fixed FREEZE-TYPE to seal all subclasses.

Profile.lisp updated for new assembler and block-compiler ir1opt.

Fixed sparc GET-TYPE vop.


Purify:

Fixed ptrans_instance to actually return the result of calling ptrans_boxed
instead of relying on the result still being in the correct register.



Interface: [note, not loaded in this release, because of PCL]
The debugger will now reuse old debugging panes rather than creating
new ones all the time.  In addition, the stack backtrace is no longer
displayed by default.

Replaced uses of Motif gadgets with corresponding widgets.  This
also fixes the problem with warnings about 'alignment' not being
a valid resource.

Invoking LISP-CONTROL-PANEL from the TTY now works correctly and
QUIT will kill off any Motif servers that you have started.
The "Edit Source" button now works.
A new button, "Dump Backtrace" has been added.  This is for dumping
a copy of the stack backtrace for use in bug reports.  At the moment,
it just prints a copy of the backtrace on the standard output stream.

Added support for deleting all active inspection panes.
Added comments and descriptions on how to implement inspector
display methods for view customization.


3/1/93 to 3/15/93 [PMAX only, no PCL]

New & improved support for funcallable instances so that we can easily define
generic function classes for Dylan & CLOS.  Also, fixed some bugs in the new
structure type stuff:
 -- Redefinition failing or resulting in spurious errors, #<foo> is not a FOO
    errors, etc.
 -- Fixed BOA constructors to ignore package when determining if a slot appears
    as an arg.
 -- Fixed CIRCLE-SUBST to not bother looking down the instance-layout slot so
    that splicing structures into the read input doesn't result in CIRCLE-SUBST
    searching though the entire type system for places to fix up #n#'s.

Fixed a bug introduced by tuning (was breaking TTY redisplay):
 -- Fixed type decls in FILE-POSITION to allow :START and :END for positions.

Misc bug fixes:
 -- Fixed FORMAT-EXP-AUX to correctly handle variable width fields when the
    argument is negative.
 -- Fixed info-hash to work again on weird (not SETF) lists.

Misc enhancements:
 -- Improved usefulness of VM:CODE-BREAKDOWN :HOW :FILE by subdividing the
    files by package.
 -- Most of the support for Sean's block-counting profiler is in this core,
    but it's not all there yet. 

Compiler:
 -- Fixed a bug in type inference which seems to have generally prevented
    anything from being inferred about function result types of user-defined
    functions.
 -- CTYPE-OF now extracts the function type from function objects, rather than
    just returning FUNCTION.
 -- Added FUNCTIONAL-PLIST slot for adding random annotations to functions
    within the compiler (such as this function is destined to be a funcallable
    instance.)
 -- Improved type predicate compilation for sealed classes in general (not just
    structure classes.)


2/27/93 to 3/1/93 [PMAX only, no PCL]

Fixed load to not always consider files with NIL type to be source files.  If
the file exists as specified, then look at the header instead of trying to
default the type.  If :CONTENTS is specified, then don't try defaulting types.

Replaced ISQRT with the fast version discussed on the net many moons ago.

Removed ROOM's load-time dependence on the compiler.  Add
LIST-ALLOCATED-OBJECTS and LIST-REFERENCING-OBJECTS for finding out why stuff
isn't being GC'd.

Fixed type system to recognize the codes for internal BUILT-IN-CLASSes such as
CODE-COMPONENT.  Ripped out NS-BOOT conditionals.

Load the byte compiler and interpreter.  They don't really work yet, but will
be easier to debug if they're in the core.

The compiler now has an event counter for compiling a MAKE-VALUE-CELL op.

Reduced the size of static space (and the total core) by 1meg by clobbering the
hash-table vectors of the obsolete VOLATILE-INFO-ENVs in worldload.lisp.  For
some reason (probably residual stack or register pointers), the
VOLATILE-INFO-ENV doesn't get reclaimed by purify.  This meant that much static
space was being wasted by the unused SIMPLE-VECTORs and alists, even though the
compact version was the one actually being referenced.  This was exacerbated by
the change to multiple purifies, but has always been present in the
new-compiler systems.  Also, the Hemlock/CLX info environment wasn't being
compacted before the purify at all.


2/9/93 to 2/26/93 [PMAX only, no PCL]

New structure format and class support in the type system.  Some I/O tuning.
New fasl file format (you must recompile.)  This core does not contain PCL or
the GUI (which depends on PCL.)  The old core and startup code are in
    /afs/cs/project/clisp-3/alphas/olisp.core, olisp.

Structures & classes:

ANSI changes:
 -- Default defstruct keyword constructors can no longer reference argument
    values in slot init forms.  BOA constructors can still do this, so defining
    a BOA constructor with all keyword args will have the old effect.
 -- Class objects are now implemented, see FIND-CLASS, CLASS-NAME, TYPEP,
    CLASS-OF.  TYPE-OF is now based on CLASS-OF, and returns slightly different
    results than before.
 -- STRUCTURE-CLASSes now exist.  See also the STRUCTURE-OBJECT type.
 -- BUILT-IN-CLASSes also exist.  In some cases CLASS-OF (legally) returns
    non-standard subclasses of the standard class, e.g. for a float vector, the
    result is KERNEL::SIMPLE-ARRAY-SINGLE-FLOAT.  STANDARD-CHAR and KEYWORD are
    now DEFTYPEs.

Bug fix:
 -- Typed structures now have the correct (though rather odd) semantics of
    :offset and :named when inclusion is done.

Raw slots:
 -- Structure slots of subtypes of SINGLE-FLOAT, DOUBLE-FLOAT and
    (UNSIGNED-BYTE 32) are now allocated in non-descriptor storage, and can be
    read/written without number-consing overhead.

Type tests:
 -- The default (non-frozen) structure type predicate is now significantly more
    faster (no function call) in the case where the argument is a structure
    of another type or the type is a supertype of the object's type.  The code
    is also somewhat smaller.

Redefinition:
 -- Handing of structure redefinition is now much more comprehensive.
 -- Definitions are only considered incompatible when slots have moved or been
    added, slot types are changed to a type that is not a subtype of the old
    type, or the inheritance structure has changed.  Previously any change at
    all would produce a warning.
 -- When a change is compatible, the default restart (CONTINUE) invalidates old
    instances, constructors and predicate uses.  When speed <= safety, a
    LAYOUT-INVALID error will be signalled when obsolete instances are passed
    to a type test (e.g. for type checking.)  Use of old code on new instances
    or old instances when speed > safety > 0 will result in type errors.
    Other restarts allow you to ignore the redefinition or to clobber the
    existing information, preserving the old code (in case the change is really
    compatible.)
 -- If the structure length or inheritance structure has changed, an error
    is signalled when you load code that was compiled with a different
    structure definition than the one currently in effect.

Internals:
 -- VM:STRUCTURE-USAGE renamed to VM:INSTANCE-USAGE.  Internally, the structure
    type and accessors have also been renamed, e.g. 
    STRUCTURE-REF => %INSTANCE-REF.
 -- The non-standard STRUCTURE type has become has become EXT:INSTANCE.  To
    (portably) test whether something is really a structure object, do 
    (TYPEP X 'STRUCTURE-OBJECT)


Misc changes:

ANSI changes:
 -- #S readed no longer forces keywords into the keyword package. (ANSI)
 -- Added OPEN-STREAM-P.

Added EXT:DO-HASH.

Stream internals:
 -- Deleted read-line methods.  For simplicity, this rather unimportant
    operation is now implemented using read-char.
 -- READ-N-BYTES eof-error-p nil is now mostly non-blocking (it only reads what
    is in the buffer, or what unix-read returns if the buffer is empty.)  To be
    sure it won't block, you must guard it with a LISTEN.


Misc bug-fixes:

Compiler:
 -- Weaken (not (component-new-functions component)) assertion to allow
    deleted functions.
 -- Fixed LET* to correctly use the internal policy (not the interface policy)
    for all bindings, not just the first.
 -- Fixed a problem with functions losing their type declaration info when
    there is an inline expansion available.
 -- In local call VOPs, must load CALLEE-NFP with MAYBE-LOAD-STACK-TN, since it
    might not be in a register. [mips]

Debugger:
 -- Changed HANDLE-BREAKPOINT to allow breakpoints that nobody wants.  This
    can happen if a function-end breakpoint was deactivated while the function
    was on the stack, because there is no way to convert the bogus-lra back
    into the real lra.

Misc:
 -- Fixed a type error in DEFPACKAGE's detection of defining a package which is
    really a nickname.  Improved handling of deleted packages (most operations
    signal an error.)


Tuning:

 -- Added declarations from efficiency notes in load, package, reader, char and
    hash. 
 -- Revived the support for FAST-READ-CHAR and the STREAM-IN-BUFFER, which
    allows READ-CHAR and READ-BYTE to be done with 0 function calls rather than
    2.
 -- Because of above two changes, both the reader and the fasloader are now
    significantly faster (reader 2x.)
 -- Default (non-frozen) structure type tests are now significantly faster (no
    function calls), and somewhat smaller.  This and the reader improvement
    have sped up the compiler somewhat.
 -- Many debug-info and compiler data structures are now annotated as pure,
    alloing them to be put in read-only space.  This reduces the amound of
    stuff in static space, speeding GC.
 -- Real-valued hash-table parameters (rehash-threshold etc.) are
    canonicalized to single-floats. 
 -- serve-event now uses UNIX-FAST-SELECT, so it can can handle >32 file
    descriptors and is more efficient.
 -- Changed UNIX-FAST-SELECT to a macro so that it can be efficient.  Changed 
    FD-SET stuff to be efficiently compilable.


2/4/93 to 2/9/93:

Code:

Moved foreign-segment-{start,size} from mumble-os.lisp into foreign.lisp,
and changed it on the sparc to no longer conflict with read-only space.

Changed software-version to use /usr/bin/uname instead of stringing the
kernel.  [SunOS only]

Don't try the (SETF (APPLY ...)) hack for functions with non-fixed args, since
it doesn't do anything useful (just converts to a call to the (SETF FUNCTION).


Compiler:

Fixed listify-rest-arg.  It was leaving a tagged pointer to unallocated
memory in a descriptor register, which would confuse the garbage collector
if this value was still around.

Added all the info for the scheduler to the instruction files.

Redefined li on the sparc with define-instruction-macro.  This allows the
schedular to do a better job because the li gets broken up into the
seperate component instructions earlier.

Fixed make-array-header on the pmax to not seg fault.

Fixed the call to note-assembler-routine on the pmax.  This was breaking
DISASSEMBLE.

Changed more occurrences of function-header-code-offset to
function-code-offset.  (should have them all by now...)


PCL:

Changed definition of *subtypep to speed up method definition
using code provided by Richard Harris.

Updated definition of *pcl-system-date* as recommended by Richard Harris.

Changed the definition of force-cache-flushes by removing unnecessary
call to update-constructors, as suggested by Richard Harris.


HP support:

Fixed the stuff to emulate the ``addit imm,ALLOC,ALLOC'' instruction at the
end of pseudo-atomic to use all 11 bits of the immediate field instead of
just 5.


Graphical Interface:

The inspector/debugger was not behaving properly in the absence of
the DISPLAY environment variable.  It now correctly senses the lack
of X and quietly uses the TTY.



2/2/93 to 2/4/93:

Compiler:

Fixed VALIDATE-CALL-TYPE to correctly handle calls where there is no
function type guarding the call (for example, calls to lambdas).  In this
case, we still want to call RECOGNIZE-KNOWN-CALL, since it will figure
out what leaf we are referencing, and might also do something else
interesting: inline expansion, etc.

Replaced the FORMAT transform with one that uses FORMATTER for more
complete handling of format directives.

Fixed make-array-header to not seg fault.

Changed more references to function-header-code-offset to
function-code-offset.


Motif Stuff:

Fixed things up so that the StringTable.h file gets written out
properly with all the other header files.

The debugger should now notice the absence of the Motif server and
print an error message to that effect.



1/13/93 to 2/2/93:

Code:

Fixed COMPUTE-CALLING-FRAME to not try using %CODE-DEBUG-INFO on things
that arn't code components.  This broke backtracing in the debugger.

Don't deftype POSITION, because it is a CL symbol.


Compiler:

Changed internal error signaling vops to be :translates instead of being
accessed via %primitive.

Fixed a problem with ASSERT-DEFINITION-TYPE when we have a keyword arg with a
non-constant default.

Added (values) to the end of %verify-argument-count so it matched the
defknown.

Changed the defknown for %verify-argument-count to be more precise.

Chagned make-xep-lambda to declare the number of supplied arguments as an
index instead of a fixnum, because it cannot be negative.

Changed def-source-transform to work with setf functions also.

Removed source-transforms for internal error things, because we just
:translate to them now.  Removed header-ref and %string-char-p source-
transforms, because we don't need them anymore.


Startup Code:

Allocate, but protect against reading or writing, the page following each
of the heaps or stacks.  This keeps os_allocate from deciding to use one
of those pages for something else.



12/5/92 to 1/13/93

Code:

Backed out the new LOOP, because it breaks something which causes the
compiler to generate bad code.

Export ARRAY-DISPLACEMENT from the CL package.

Changed kernel:code-debug-info to kernel:%code-debug-info.

Changed several uses of %primitive to eqv functions now that eqv functions
exist.

Added COPY-STRUCTURE.

Changed %function-header-mumble to %function-mumble.

Exported FLOATING-POINT-INEXACT from CL, and renamed & exported
FLOATING-POINT-INVALID-OPERATION.

Changed di::code-debug-info to kernel:%code-debug-info.

Added DO-HASH

Export FILE-STREAM from LISP as a synonym for FD-STREAM.  Add :INTERACTIVE-P
misc method.

Call *setf-fdefinition-hook* before we check for encapsulation, since the
hook might change the encapsulation.

Changed (code-header-ref component vm:code-debug-info-slot) to
(%code-debug-info component).

Added a #.vm:dylan-function-header-type branch to OUTPUT-FUNCTION.  Also
added a T branch that prints "Unknown Function" so we get some output when
we stumble across unknown functions.

Added :cmu17 to the features list so that PCL can tell if it is in a
version 16 or a version 17 series core.

Fixed a bug in pprint-let that caused to to barf on (let (nil) ...).

Added support for dylan funciton subtypes.

Changed %print-request-server to use print-unreadable-object to get rid of
a spelling error in the old version from pre-puo days.

Weaken type declaration on third SELECT result, since it can be NIL if we get
an error.

Delete #+CLX conditional on HANDLE-QUEUED-CLX-EVENT, since we want to be able
to load-time conditionalize whether CLX is present.

Exported various slot accessors of streams now part of the standard.  Made
these read-only slots.  Added open-stream-p and interactive-stream-p.

Fixed GENTEMP to use its own counter, instead of *gensym-counter*.

Added pretty-printer directives to trace so that arg lists and results
print better.

Fixed untrace-1 not to flame out when untracing untraced functions.

Added module.lisp back in, because ANSI added provide and require back in.


Compiler:

Re-worked the way allocation and primitive slot access are compiled, which
should (hopefully) reduce the size of the backend.

Fixed defknown of %verify-argument-count to have * for the result type
instead of nil.

Extended INFO to take the env-list as an optional fourth argument so that
we don't have to re-bind *info-environment* to get at info environemnts
other then the regular one.

In FINALIZE-XEP-DEFINITION, if not the current global definition, just leave
the defined type alone, instead of clobbering it with FUNCTION.  A benefit of
this is that COMPILE doesn't trash the function type.

Allow non-keyword keyword names when the &key keyword is specified separately
from the variable.

Prevent recursive opportunistic inline expansion during IR1 conversion by
temporarily clearing the DEFINED-FUNCTION-INLINE-EXPANSION when doing the
conversion.

Changed the make-closure vop to take the length as an info argument because
it is always known at compile time.  Changed the set vop to not have a result
because we don't want it.

Added ANNOTATE-FUNNY-CALL for use with new define-primitive-object stuff.


Startup code:

Increased the size of the sparc's heap.

Changed "environment too big" message to suggest probably a sparc 10.


PCL:

September-16-92-PCL-e has been incorporated into the CMUCL sources thanks
to Rick Harris. 



11/23/92 to 12/5/92:

Code:

Minor fixes to LOOP and DELETE-PACKAGE.

Low level support for various subtypes of function for use with Dylan.



Pre 12/5/92:

For the release notes corresponding to releases prior to 12/5/92, please
see the file:

	alpha-notes-thru-92.txt
