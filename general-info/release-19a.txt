========================== C M U C L  18 e =============================

[--- WORK IN PROGRESS --- DO NOT DISTRIBUTE ---]

The CMUCL project is pleased to announce the release of CMUCL 19a.
This is a major release which contains numerous enhancements and
bugfixes from the 18e release.

CMUCL is a free, high performance implementation of the Common Lisp
programming language which runs on most major Unix platforms. It
mainly conforms to the ANSI Common Lisp standard. CMUCL provides a
sophisticated native code compiler; a powerful foreign function
interface; an implementation of CLOS, the Common Lisp Object System,
which includes multimethods and a metaobject protocol; a source-level
debugger and code profiler; and an Emacs-like editor implemented in
Common Lisp. CMUCL is maintained by a team of volunteers collaborating
over the Internet, and is mostly in the public domain.

New in this release:
       
  * Feature enhancements:
     - Stack overflow checking added for FreeBSD/x86 and Linux/x86.
     - LISP:FIND-CLASS and LISP:CLASS-OF now return CLOS classes.  The
       symbols LISP:STANDARD-CLASS, LISP:BUILT-IN-CLASS, and
       LISP:STRUCTURE-CLASS name CLOS classes.  It is no longer
       necessary to SHADOWING-IMPORT these from PCL when doing MOP
       programming, and it fixes some non-compliances as well.
     - Weak hash tables have been added for x86 systems.
     - Local functions are now named (FLET <name> ...) or 
       (LABELS <name> ...).
     - Compiler checking control string and number of args to FORMAT.

  * Numerous ANSI compliance fixes:
     - Many bugs in CMUCL's type system detected by Paul Dietz'
       ANSI test suite have been fixed.
     - Non-keyword keyword names in lambda lists are now accepted.
     - Condition slot initialization fixed for the case that two
       or more slots have the same :INITARG.
     - Initforms are now evaluated once only during condition slot
       initialization.
     - USE-VALUE, STORE-VALUE, CONTINUE behavior corrected in presence
       of multiple restarts having the same name.
     - RESTART-CASE's interaction with local macros fixed.
     - Interaction of COMPUTE-RESTARTS and RESTART-CASE fixed in
       presence of multiple restarts having the same name.
     - Condition slot readers/writers are generic functions.
     - &WHOLE, &REST, &BODY in macro lambda lists can be followed
       by destructuring patterns.  The previous behavior of &BODY
       when followed by (<body> <declarations> <doc>) is available
       through the new lambda-list keyword EXT:&PARSE-BODY.
     - ELT now signals an error in safe code when used on lists
       with an out-of-bounds index.
     - Accessing arrays in compiled code with out-of-bounds indices
       now signals a TYPE-ERROR.
     - DECLARE no longer being a special operator.
     - DEFINE-CONDITION accepts slot option :DOCUMENTATION.
     - Behavior of (... &KEY &ALLOW-OTHER-KEYS) fixed for 
       DESTRUCTURING-BIND and macros.
     - Stricter checking of keyword argument list in CLOS methods.
     - &ENVIRONMENT variable bound bound before other vars, regardless
       of where it appears in a lambda-list.
     - VALUES types no longer accepting &KEY or &ALLOW-OTHER-KEYS.
     - THE conforming to ANSI.

  * Numerous bugfixes:
     - NSET-EXCLUSIVE-OR returns the same results as SET-EXCLUSIVE-OR
       wrt to duplicate elements.
     - Forms like (MULTIPLE-VALUE-BIND 'LIST) no longer trapping
       an internal compiler error when compiled.
     - PARSE-INTEGER signaling PARSE-ERROR.
     - Compiler eliminating some type checks in safe code.

  * Other changes:
     - Removed obsolete alias from MAKE-VECTOR to MAKE-ARRAY

  * Numerous improvements to the PCL implementation of CLOS:
     - Gerd's PCL has been added, which fixes numerous bugs and ANSI/
       AMOP non-compliances, and adds various new optimizations (also
       see the CMU User Manual).
     - PCL's class hierarchy has been changed to conform to AMOP, for
       instance, GENERIC-FUNCTION is now a subclass of
       STANDARD-OBJECT.
     - ENSURE-CLASS-USING-CLASS's argument list has been changed
       to conform to AMOP.
     - COMPUTE-EFFECTIVE-SLOT-DEFINITION now takes a slot name as
       argument, for AMOP compliance.
     - SUBTYPEP works in presence of forward-referenced classes.
     - Accessing slots of specialized parameters in (SETF
       SLOT-VALUE-USING-CLASS) methods works.
     - DIRECT-SLOT-DEFINITION-CLASS and EFFECTIVE-SLOT-DEFINITION-CLASS
       AMOP compliant.
     - ALLOCATE-INSTANCE working with structures defined with DEFSTRUCT.
     - With (DEFGENERIC FOO (&REST X &KEY)) (DEFMETHOD FOO (&REST X) X),
       (FOO 1) now signals an error.

  * Improvements to Hemlock, the Emacs-like editor:

  * Changes to rebuilding procedure:
      
  * Deprecated features:
  

This release is not binary compatible with code compiled using CMUCL
18e; you will need to recompile FASL files. 

See <URL:http://www.cons.org/cmucl/> for download information,
guidelines on reporting bugs, and mailing list details.


We hope you enjoy using this release of CMUCL!

