%!PS-Adobe-1.0
%%Title: defsystem.mss
%%DocumentFonts: (atend)
%%Creator: Mark Kantrowitz and Scribe 6(1600)
%%CreationDate: 31 January 1990 12:40
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale /showpage {} def} bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
%%EndProlog
%%Page: 1 1
BS
0 SI
15 /Helvetica-Bold AF
11090 8294 MT
(Defsystem: A Portable Make Facility for Common Lisp)SH
13 SS 
24641 15620 MT
(by Mark Kantrowitz)SH
21752 19236 MT
(School of Computer Science)SH
22256 22852 MT
(Carnegie Mellon University)SH
26480 26468 MT
(January 1990)SH
12 SS 
7200 32344 MT
(Introduction)SH
10 /Helvetica AF
7200 35777 MT
(This document describes the defsystem system definition macro, a portable "Make" facility for)
87 W( Common)86 W
7200 37297 MT
(Lisp.)SH
7200 40793 MT
(Support is provided for organizing systems into hierarchical layers of modules, with matching directory)133 W
7200 42313 MT
(structure. Moreover, the components of the system may be listed in any order)
49 W( the user desires, because)48 W
7200 43833 MT
(the defsystem command reorganizes them according)
69 W( to the file-dependency constraints specified by the)70 W
7200 45353 MT
(user. Since it accomplishes this by performing a topological sort of the constraint-graph,)
351 W( cyclical)350 W
7200 46873 MT
(dependencies are not supported \050the graph must be a DAG\051.)SH
7200 50369 MT
(Only two operations, compile and load, are currently defined. The)
87 W( interface for defining new operations,)88 W
7200 51889 MT
(however, is simple and extendible.)SH
7200 55385 MT
(Though home-grown, the syntax was inspired by fond)
108 W( memories of the defsystem facility on Symbolics)107 W
7200 56905 MT
(3600 series lisp)
100 W( machines. The exhaustive lists of filename extensions for various lisps and the idea to)101 W
7200 58425 MT
(have one)240 W
/Helvetica-Oblique SF
12072 XM
(operate-on-system)SH
/Helvetica SF
20925 XM
(function instead of separate)239 W
/Helvetica-Oblique SF
34444 XM
(compile-system)SH
/Helvetica SF
41906 XM
(and)SH
/Helvetica-Oblique SF
44091 XM
(load-system)SH
/Helvetica SF
49998 XM
(functions)SH
7200 59945 MT
(were taken from Xerox Corporation's PCL \050Portable Common Loops\051 system.)SH
7200 63441 MT
(The code for the defsystem facility and this documentation may be found in the files)SH
11648 65030 MT
(/afs/cs.cmu.edu/user/mkant/Defsystem/defsystem.{text,lisp})SH
7200 68526 MT
(Please send bug reports, comments and suggestions to mkant@cs.cmu.edu.)SH
ES
%%Page: 2 2
BS
0 SI
10 /Helvetica-Bold AF
30322 4329 MT
(2)SH
12 SS 
7200 8075 MT
(Using the System)SH
10 /Helvetica AF
7200 11508 MT
(To use this system,)SH
9424 12909 MT
(1.)SH
10536 XM
(If you want to have a central)
55 W( directory where system definition files will be kept, modify the)56 W
10536 14052 MT
(value of *central-registry* in defsystem.lisp to be the pathname of that directory.)SH
9424 15867 MT
(2.)SH
10536 XM
(Save and load the file defsystem.lisp)SH
9424 17682 MT
(3.)SH
10536 XM
(Load the)
235 W( file containing the defsystem form defining your system. If the name of your)234 W
10536 18825 MT
(system is foo, the)
43 W( file will be named "foo.system".  [If you are going to load the system and)44 W
10536 19968 MT
(not compile it, you can use \050require "foo"\051)
10 W( to load it if the definition file is in either the current)9 W
10536 21111 MT
(directory or the central registry.])SH
9424 22926 MT
(4.)SH
10536 XM
(Use the function)60 W
/Helvetica-Oblique SF
18220 XM
(operate-on-system)SH
/Helvetica SF
26894 XM
(to do things to your system.)
60 W( For example \050operate-on-)61 W
10536 24069 MT
(system "foo" 'load\051 will load the system, while \050operate-on-system "foo" 'compile\051 will)306 W
10536 25212 MT
(compile it.)SH
12 /Helvetica-Bold AF
7200 29013 MT
(External Interface)SH
10 /Helvetica AF
7200 32446 MT
(The external interface to)
226 W( the defsystem facility are the defsystem macro and the operate-on-system)227 W
7200 33966 MT
(function. Defsystem is used to define a new system and operate-on-system)
43 W( to compile it and load it. The)42 W
7200 35486 MT
(definition of require has been modified to mesh well with systems)
104 W( defined using defsystem, and is fully)105 W
7200 37006 MT
(backward-compatible.)SH
7200 40502 MT
(In addition, the function)
107 W( afs-binary-directory has been provided for immitating the behavior of the @sys)106 W
7200 42022 MT
(feature of the Andrew File System on systems not)
123 W( running AFS. The @sys feature allows soft links to)124 W
7200 43542 MT
(point to different directories depending on)
86 W( which platform is accessing the files. A common setup would)85 W
7200 45062 MT
(be to have the bin directory soft linked to .bin/@sys and to have subdirectories of .bin corresponding)
84 W( to)85 W
7200 46582 MT
(each platform \050.bin/vax_mach, .bin/unix, .bin/pmax_mach, etc.\051. The afs-binary-directory)
81 W( function returns)80 W
7200 48102 MT
(the appropriate binary directory for use as the :binary-pathname)
99 W( argument in the defsystem macro. For)100 W
7200 49622 MT
(example, if we evaluate \050afs-binary-directory)
220 W( "foodir/"\051 on a vax running the Mach operating system,)219 W
7200 51142 MT
("foodir/.bin/vax_mach/" would be returned.)SH
12 /Helvetica-Bold AF
7200 54485 MT
(Defining Systems with Defsystem)SH
10 /Helvetica AF
7200 57918 MT
(A system is a set of components with associated properties. These properties include the type,)
126 W( name,)127 W
7200 59438 MT
(source and binary pathnames,)
523 W( package, component-dependencies, initializations, and a set of)522 W
7200 60958 MT
(components.)SH
7200 64454 MT
(Components may be of three types: :system, :module, or)
259 W( :file.  Components of type :system have)260 W
7200 65974 MT
(absolute pathnames and are used to define a multi-system system. The)
93 W( toplevel system defined by the)92 W
7200 67494 MT
(defsystem macro)
174 W( is implicitly of type :system. Components of type :module have pathnames that are)175 W
7200 69014 MT
(relative to their containing system or module,)
89 W( and may contain a set of files and modules. This enables)88 W
7200 70534 MT
(one to define subsystems, subsubsystems, submodules, and so on.)SH
ES
%%Page: 3 3
BS
0 SI
10 /Helvetica-Bold AF
30322 4329 MT
(3)SH
/Helvetica SF
7200 7929 MT
(Foreign systems \050systems defined using some other system definition tool\051, may be)
16 W( included by providing)17 W
7200 9449 MT
(separate compile and load forms for them \050using)
189 W( the :compile-form and :load-form keywords\051. These)188 W
7200 10969 MT
(forms will be run if and only if they are included in)
33 W( a module with no components. [In some future version)34 W
7200 12489 MT
(of the defsystem)
120 W( facility there will be new component types corresponding to each possible operation.])119 W
7200 14009 MT
(This is useful if it isn't possible to convert these systems to the defsystem format all at once.)SH
7200 17505 MT
(The name of a component may be a symbol or a string. For ease of access the definition)
29 W( of a system \050its)30 W
7200 19025 MT
(component\051 is stored under the system properties of the symbol corresponding to its uppercase name.)
28 W( If)332 W
7200 20545 MT
(the system name is a symbol, for all other purposes the name is converted to)
34 W( a lowercase string \050system)35 W
7200 22065 MT
(names that are strings are left alone\051. It is usually best to)
20 W( use the string version of a system's name when)19 W
7200 23585 MT
(defining or referring to it. A system defined as 'foo will)
16 W( have an internal name of "foo" and will be stored in)17 W
7200 25105 MT
(the file "foo.system". A system defined as "Foo" will have an internal name of "Foo" and)
52 W( will be stored in)51 W
7200 26625 MT
(the file "Foo.system".)SH
7200 30121 MT
(The absolute \050for components of type :system\051 and relative)
70 W( \050for all other components\051 pathnames of the)71 W
7200 31641 MT
(binary and source files may be specified using the :source-pathname and :binary-pathname keywords in)60 W
7200 33161 MT
(the component definition. The pathnames associated with a module correspond to subdirectories of the)94 W
7200 34681 MT
(containing module or system. If)
86 W( no binary pathname is specified, the binaries are distributed among the)85 W
7200 36201 MT
(sources. If no source pathname is given for a component, it defaults to the name of the)
9 W( component. Since)10 W
7200 37721 MT
(the names are converted to lowercase, pathnames must be provided for each component if)
26 W( the operating)25 W
7200 39241 MT
(system is)
244 W( case sensitive \050unless the pathnames are all lowercase\051. Similarly, if a module does not)245 W
7200 40761 MT
(correspond to a subdirectory, a null-string pathname \050""\051 must be provided.)SH
7200 44257 MT
(File types \050e.g., "lisp" and "fasl"\051 for source and binary files may be specified using the)
40 W( :source-extension)39 W
7200 45777 MT
(and :binary-extension keywords. If)
27 W( these are not specified or given as nil, the makes a reasonable choice)28 W
7200 47297 MT
(of defaults based on the machine type and underlying operating system. These)
28 W( file types are inherited by)27 W
7200 48817 MT
(the components of the system.)SH
7200 52313 MT
(At system definition time, every relative directory is replaced with the corresponding cumulative)
103 W( relative)104 W
7200 53833 MT
(pathname with all the components incorporated.)SH
7200 57329 MT
(One may also specify the package)
219 W( to be used and any initializations and finalizations. Initializations)218 W
7200 58849 MT
(\050specified with the keyword :initially-do\051 are)
210 W( evaluated before the system is loaded or compiled, and)211 W
7200 60369 MT
(finalizations \050specified with the keyword :finally-do\051 are evaluated after)
92 W( the system is finished loading or)91 W
7200 61889 MT
(compiling. The argument to the keyword is a form which is evaluated. Multiple forms may be evaluated)
10 W( by)11 W
7200 63409 MT
(wrapping a progn around the forms.)SH
7200 66905 MT
(The components of a system, module or file are specified with the :components keyword, and are)
14 W( defined)13 W
7200 68425 MT
(in a manner analogous to the way in which a system is defined.)SH
7200 71921 MT
(The dependencies of a system, module or file are specified with the :depends-on keyword,)
45 W( followed by a)46 W
ES
%%Page: 4 4
BS
0 SI
10 /Helvetica-Bold AF
30322 4329 MT
(4)SH
/Helvetica SF
7200 7929 MT
(list of the names of the components the system, module)
56 W( or file depends on. The components referred to)55 W
7200 9449 MT
(must exist at the same level of the hierarchy as the referring component.  This enforces the modularity of)31 W
7200 10969 MT
(the defined system. If module A depends on a file)
25 W( contained within module B, then module A depends on)24 W
7200 12489 MT
(module B)
175 W( and should be specified as such. Any other use would make a mockery of the concept of)176 W
7200 14009 MT
(modularity. This requirement is not enforced in the software, but)
216 W( any use contrary to it will produce)215 W
7200 15529 MT
(unpredictable results.)SH
7200 19025 MT
(Thus the only requirement in how the files are organized is that at the)
8 W( level of each module or system, the)9 W
7200 20545 MT
(dependency graph)
312 W( of the components must be a DAG \050directed)311 W
/Helvetica-Bold SF
38659 XM
(acyclic)SH
/Helvetica SF
42584 XM
(graph\051. If there are any)311 W
7200 22065 MT
(dependency cycles \050i.e., module A uses definitions from module)
96 W( B, and module B uses definitions from)97 W
7200 23585 MT
(module A\051, the defsystem macro will not be)
48 W( able to compute a total ordering of the files \050a linear order in)47 W
7200 25105 MT
(which they should be compiled and loaded\051. Usually the defsystem will detect such cycles and halt)
80 W( with)81 W
7200 26625 MT
(an error.)SH
7200 30121 MT
(If no dependencies are provided for the system, modules and files, it may load them in)
229 W( any order.)228 W
7200 31641 MT
(Currently, however, it loads them in serial order. In a future version of defsystem this will)
233 W( probably)234 W
7200 33161 MT
(become a supported feature. [In other words, this)
56 W( feature hasn't been tested to make sure that they files)55 W
7200 34681 MT
(are not)
2 W( accidentally loaded in the opposite order in some cases. It all depends on whether the definition of)3 W
7200 36201 MT
(topological-sort used is a stable sort or not.])SH
7200 39697 MT
(The basic algorithm used is to topologically sort the DAG at each level)
195 W( of abstraction \050system level,)194 W
7200 41217 MT
(module level, submodule)
45 W( level, etc.\051 to insure that the system's files are compiled and loaded in the right)46 W
7200 42737 MT
(order. This occurs at system)
86 W( definition time, rather than at system use time, since it probably saves the)85 W
7200 44257 MT
(user some time.)SH
12 /Helvetica-Bold AF
7200 47600 MT
(BNF for Components)SH
10 /Helvetica AF
7200 51033 MT
(The general format of a component's definition is:)SH
/Courier-Bold SF
7200 52838 MT
(<definition> ::= \050<type> <name> [:host <host>] [:device <device>])SH
26400 53969 MT
([:source-pathname <pathname>])SH
26400 55100 MT
([:source-extension <extension>])SH
26400 56231 MT
([:binary-pathname <pathname>])SH
26400 57362 MT
([:binary-extension <extension>])SH
26400 58493 MT
([:package <package>])SH
26400 59624 MT
([:initially-do <form>])SH
26400 60755 MT
([:finally-do <form>])SH
26400 61886 MT
([:components \050<definition>*\051])SH
26400 63017 MT
([:depends-on \050<name>*\051])SH
26400 64148 MT
([:compile-form <form>])SH
26400 65279 MT
([:load-form <form>]\051)SH
7200 66410 MT
(<type> ::= :system | :module | :file)SH
/Helvetica SF
7200 69906 MT
(The toplevel defsystem form substitutes defsystem for :system.)SH
ES
%%Page: 5 5
BS
0 SI
10 /Helvetica-Bold AF
30322 4329 MT
(5)SH
12 SS 
7200 8075 MT
(Using Systems with Operate-on-System)SH
10 /Helvetica AF
7200 11508 MT
(The function operate-on-system is used)
166 W( to compile or load a system, or do any other operation on a)167 W
7200 13028 MT
(system. At present only compile and load operations are defined, but other operations such as edit,)200 W
7200 14548 MT
(hardcopy, or applying arbitrary functions \050e.g., enscript, lpr\051 to every file in the system)
125 W( could be added)126 W
7200 16068 MT
(easily.)SH
7200 19564 MT
(The syntax of operate-on-system is as follows:)SH
/Helvetica-Bold SF
7200 23060 MT
(OPERATE-ON-SYSTEM)SH
/Helvetica-Oblique SF
18640 XM
(system-name operation)50 W
/Helvetica SF
29466 XM
(&key)SH
/Helvetica-Oblique SF
32017 XM
(force test)
50 W( verbose dribble load-source-instead-of-)49 W
7200 24580 MT
(binary load-source-if-no-binary bother-user-if-no-binary)SH
/Symbol SF
9242 26052 MT
(\267)SH
/Helvetica-Bold SF
9980 XM
(system-name)SH
/Helvetica SF
16649 XM
(is the name of the system and may be a symbol or string.)SH
/Symbol SF
9242 27867 MT
(\267)SH
/Helvetica-Bold SF
9980 XM
(operation)SH
/Helvetica SF
14940 XM
(is 'compile \050or :compile\051 or 'load \050or :load\051 or any new operation)
126 W( defined by the)127 W
9980 29010 MT
(user.)SH
/Symbol SF
9242 30825 MT
(\267)SH
/Helvetica-Bold SF
9980 XM
(force)SH
/Helvetica SF
12703 XM
(determines what files are operated on:)SH
7 /Symbol AF
12160 32076 MT
(\267)SH
10 /Helvetica-Oblique AF
12760 32226 MT
(:all)SH
/Helvetica SF
14316 XM
(\050or T\051 specifies that all files in the system should be used)SH
7 /Symbol AF
12160 33891 MT
(\267)SH
10 /Helvetica-Oblique AF
12760 34041 MT
(:new-source)SH
/Helvetica SF
18573 XM
(If the operation is 'compile, compiles only those files whose sources are)88 W
12760 35184 MT
(more recent than the binaries. If the operation is)
114 W( 'load, loads the source if it is more)115 W
12760 36327 MT
(recent than the binaries. This allows you to load the most up)
139 W( to date version of the)138 W
12760 37470 MT
(system even if it isn't compiled.)SH
7 /Symbol AF
12160 39135 MT
(\267)SH
10 /Helvetica-Oblique AF
12760 39285 MT
(:new-sources-and-dependents)SH
/Helvetica SF
26688 XM
(uses all files used by :new-source,)
144 W( plus any files that)145 W
12760 40428 MT
(depend on the those files or their dependents \050recursively\051.)SH
7 /Symbol AF
12160 42093 MT
(\267)SH
10 /Helvetica AF
12760 42243 MT
(Force may also be a list)
289 W( of the specific modules or files to be used \050plus their)288 W
12760 43386 MT
(dependents\051.)SH
9980 44787 MT
(The default for 'load is :all and for 'compile is :new-source-and-dependents.)SH
/Symbol SF
9242 46602 MT
(\267)SH
/Helvetica-Bold SF
9980 XM
(version)SH
/Helvetica SF
13989 XM
(indicates which version of the system should be used. If nil, then the usual root)174 W
9980 47745 MT
(directory is)
101 W( used. If a symbol, such as 'alpha, 'beta, 'omega, :alpha, or 'mark, it substitutes)100 W
9980 48888 MT
(the appropriate)
19 W( \050lowercase\051 subdirectory of the root directory for the root directory. If a string,)20 W
9980 50031 MT
(it replaces the entire root directory with the given directory. \050default *version*, which is nil\051)SH
/Symbol SF
9242 51846 MT
(\267)SH
/Helvetica-Bold SF
9980 XM
(verbose)SH
/Helvetica SF
14146 XM
(is T to print out what it is doing)
53 W( \050compiling, loading of modules and files\051 as it does)52 W
9980 52989 MT
(it. \050default nil\051)SH
/Symbol SF
9242 54804 MT
(\267)SH
/Helvetica-Bold SF
9980 XM
(test)SH
/Helvetica SF
12051 XM
(is T)
15 W( to print out what it would do without actually doing it.  If test is T it automatically sets)16 W
9980 55947 MT
(verbose to T. \050default nil\051)SH
/Symbol SF
9242 57762 MT
(\267)SH
/Helvetica-Bold SF
9980 XM
(dribble)SH
/Helvetica SF
13873 XM
(should be the pathname of a dribble file if you want to keep a record of)
281 W( the)280 W
9980 58905 MT
(compilation. \050default nil\051)SH
/Symbol SF
9242 60720 MT
(\267)SH
/Helvetica-Bold SF
9980 XM
(load-source-instead-of-binary)SH
/Helvetica SF
24392 XM
(is T to force)
21 W( the system to load source files instead of binary)22 W
9980 61863 MT
(files. \050default nil\051)SH
/Symbol SF
9242 63678 MT
(\267)SH
/Helvetica-Bold SF
9980 XM
(load-source-if-no-binary)SH
/Helvetica SF
22022 XM
(is T to have the)
263 W( system load source files if the binary file is)262 W
9980 64821 MT
(missing. \050default nil\051)SH
/Symbol SF
9242 66636 MT
(\267)SH
/Helvetica-Bold SF
9980 XM
(bother-user-if-no-binary)SH
/Helvetica SF
21818 XM
(is T to)
171 W( have the system bother the user about missing binaries)172 W
9980 67779 MT
(before it goes ahead and loads them if load-source-if-no-binary is T. \050default)
67 W( t\051 Times out in)66 W
9980 68922 MT
(60 seconds unless *use-timeouts* is set to nil.)SH
ES
%%Page: 6 6
BS
0 SI
10 /Helvetica-Bold AF
30322 4329 MT
(6)SH
/Helvetica SF
7200 7929 MT
(An implicit assumption is that if we need to)
10 W( load a file for some reason, then we should be able to compile)11 W
7200 9449 MT
(it immediately before we need to)
138 W( load it. This obviates the need to specify separate load and compile)137 W
7200 10969 MT
(dependencies in the modules.)SH
7200 14465 MT
(Files which must not)
117 W( be compiled should be loaded in the initializations or finalizations of a module by)118 W
7200 15985 MT
(means of an explicit load form.)SH
7200 19481 MT
(Note that under this assumption, the example given)
207 W( in the PCL defsystem becomes quite ludicrous.)206 W
7200 21001 MT
(Those constraints are of the form:)SH
9424 22402 MT
(1.)SH
10536 XM
(C must be loaded before A&B are loaded)SH
9424 24217 MT
(2.)SH
10536 XM
(A&B must be loaded before C is compiled)SH
7200 25737 MT
(When you add in the reasonable assumption that before you load C, you must compile C, you get a cycle.)SH
7200 29233 MT
(The only case is which this might not be true is in a system which worked on)
86 W( the dependency graph of)87 W
7200 30753 MT
(individual definitions. But we have restricted)
112 W( ourselves to file dependencies and will stick with that.  \050In)111 W
7200 32273 MT
(situations where a file defining macros must have the sources loaded before compiling them, most often)
7 W( it)8 W
7200 33793 MT
(is because the macros are used before they are defined, and)
82 W( hence assumed to be functions. This can)81 W
7200 35313 MT
(be fixed by organizing the macros better, or including them in a separate file.\051)SH
12 /Helvetica-Bold AF
7200 38656 MT
(Defining New Operations)SH
10 /Helvetica AF
7200 42089 MT
(To define a new)
203 W( operation, write a function with parameters component and force that performs the)204 W
7200 43609 MT
(operation. The)
82 W( function component-pathname may be used to extract the source and binary pathnames)81 W
7200 45129 MT
(from the component. [Component-pathname takes parameters component and file-type,)
10 W( where file-type is)11 W
7200 46649 MT
(either :source or :binary,)
120 W( and returns the appropriate pathname.] If the component has "changed" as a)119 W
7200 48169 MT
(result of the operation, T should)
3 W( be returned; otherwise nil. See the definition of compile-file-operation and)4 W
7200 49689 MT
(load-file-operation for examples.)SH
7200 53185 MT
(Then install the definition using component-operation, which takes as)
99 W( parameters the symbol which will)98 W
7200 54705 MT
(be used)
58 W( to name the operation in operate-on-system, and the name of the function. For example, here's)59 W
7200 56225 MT
(the definition of the 'compile and :compile operations:)SH
/Courier-Bold SF
13200 58030 MT
(\050component-operation :compile  'compile-and-load-operation\051)SH
13200 59161 MT
(\050component-operation 'compile  'compile-and-load-operation\051)SH
/Helvetica SF
7200 61021 MT
(Eventually this system will include portable definitions of 'hardcopy and 'edit.)SH
12 /Helvetica-Bold AF
7200 64364 MT
(Changes to Require)SH
10 /Helvetica AF
7200 67797 MT
(This defsystem interacts smoothly)
138 W( with the require and provide facilities of Common Lisp. Operate-on-)137 W
7200 69317 MT
(system automatically provides the name of any system it loads, and uses the new definition of)
49 W( require to)50 W
7200 70837 MT
(load any dependencies of the toplevel system.)SH
ES
%%Page: 7 7
BS
0 SI
10 /Helvetica-Bold AF
30322 4329 MT
(7)SH
/Helvetica SF
7200 7929 MT
(To facilitate this, three new optional arguments have been added)
174 W( to require. Thus the new syntax of)173 W
7200 9449 MT
(require is as follows:)SH
/Helvetica-Bold SF
7200 12945 MT
(REQUIRE)SH
/Helvetica-Oblique SF
12034 XM
(system-name)SH
/Helvetica SF
18313 XM
(&optional)SH
/Helvetica-Oblique SF
22760 XM
(pathname definition-pname default-action version)SH
/Helvetica SF
7200 16441 MT
(If pathname is provided, the new require behaves just like the old)
46 W( definition. Otherwise it first tries to find)47 W
7200 17961 MT
(the definition of the system-name \050if it is not already defined it will load the definition file if it is in the)143 W
7200 19481 MT
(current-directory, the central-registry directory, or the directory specified by definition-pname\051 and)
147 W( runs)148 W
7200 21001 MT
(operate-on-system on the system definition. If no definition is to be found, it)
160 W( will evaluate the default-)159 W
7200 22521 MT
(action if there)
52 W( is one. Otherwise it will try running the old definition of require on just the system name. If)53 W
7200 24041 MT
(all else fails, it will print out a warning.)SH
12 /Helvetica-Bold AF
7200 27384 MT
(A Sample System Definition and Its Use)SH
10 /Helvetica AF
7200 30817 MT
(Here's a system definition for the files in the following directory structure:)SH
/Courier-Bold SF
8400 32622 MT
(% du -a test)SH
8400 33753 MT
(1 test/fancy/macros.lisp)3600 W
8400 34884 MT
(1 test/fancy/primitives.lisp)3600 W
8400 36015 MT
(3 test/fancy)3600 W
8400 37146 MT
(1 test/macros.lisp)3600 W
8400 38277 MT
(1 test/primitives.lisp)3600 W
8400 39408 MT
(1 test/graphics/macros.lisp)3600 W
8400 40539 MT
(1 test/graphics/primitives.lisp)3600 W
8400 41670 MT
(3 test/graphics)3600 W
8400 42801 MT
(1 test/os/macros.lisp)3600 W
8400 43932 MT
(1 test/os/primitives.lisp)3600 W
8400 45063 MT
(3 test/os)3600 W
8400 46194 MT
(12 test)3000 W
8400 49587 MT
(\050defsystem test)SH
9600 50718 MT
(:source-pathname "/afs/cs.cmu.edu/user/mkant/Defsystem/test/")SH
9600 51849 MT
(:source-extension "lisp")SH
9600 52980 MT
(:binary-pathname nil)SH
9600 54111 MT
(:binary-extension nil)SH
9600 55242 MT
(:components \050\050:module basic)SH
22800 56373 MT
(:source-pathname "")SH
22800 57504 MT
(:components \050\050:file "primitives"\051)SH
30600 58635 MT
(\050:file "macros")SH
34800 59766 MT
(:depends-on \050"primitives"\051\051\051\051)SH
17400 60897 MT
(\050:module graphics)SH
22800 62028 MT
(:source-pathname "graphics")SH
22800 63159 MT
(:components \050\050:file "macros")SH
34800 64290 MT
(:depends-on \050"primitives"\051\051)SH
30600 65421 MT
(\050:file "primitives"\051\051)SH
22800 66552 MT
(:depends-on \050basic\051\051)SH
17400 67683 MT
(\050:module fancy-stuff)SH
22800 68814 MT
(:source-pathname "fancy")SH
22800 69945 MT
(:components \050\050:file "macros")SH
34800 71076 MT
(:depends-on \050"primitives"\051\051)SH
ES
%%Page: 8 8
BS
0 SI
10 /Helvetica-Bold AF
30322 4329 MT
(8)SH
/Courier-Bold SF
30600 7874 MT
(\050:file "primitives"\051\051)SH
22800 9005 MT
(:depends-on \050graphics operating-system\051\051)SH
17400 10136 MT
(\050:module operating-system)SH
22800 11267 MT
(:source-pathname "os")SH
22800 12398 MT
(:components \050\050:file "primitives"\051)SH
30600 13529 MT
(\050:file "macros")SH
34800 14660 MT
(:depends-on \050"primitives"\051\051\051)SH
22800 15791 MT
(:depends-on \050basic\051\051\051)SH
9600 16922 MT
(:depends-on nil\051)SH
8400 19184 MT
(<cl> \050operate-on-system 'test 'compile :verbose t\051)SH
8400 21446 MT
(; -)
600 W( Compiling system "test")SH
8400 22577 MT
(; -)
1800 W( Compiling module "basic")SH
8400 23708 MT
(; -)
3000 W( Compiling source file)SH
8400 24839 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/primitives.lisp")4200 W
8400 25970 MT
(; -)
3000 W( Loading binary file)SH
8400 27101 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/primitives.fasl")4200 W
8400 28232 MT
(; -)
3000 W( Compiling source file)SH
8400 29363 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/macros.lisp")4200 W
8400 30494 MT
(; -)
3000 W( Loading binary file)SH
8400 31625 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/macros.fasl")4200 W
8400 32756 MT
(; -)
1800 W( Compiling module "graphics")SH
8400 33887 MT
(; -)
3000 W( Compiling source file)SH
8400 35018 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/primitives.lisp)4200 W
8400 36149 MT
(; -)
3000 W( Loading binary file)SH
8400 37280 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/primitives.fasl)4200 W
8400 38411 MT
(; -)
3000 W( Compiling source file)SH
8400 39542 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/macros.lisp")4200 W
8400 40673 MT
(; -)
3000 W( Loading binary file)SH
8400 41804 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/macros.fasl")4200 W
8400 42935 MT
(; -)
1800 W( Compiling module "operating-system")SH
8400 44066 MT
(; -)
3000 W( Compiling source file)SH
8400 45197 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/primitives.lisp")4200 W
8400 46328 MT
(; -)
3000 W( Loading binary file)SH
8400 47459 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/primitives.fasl")4200 W
8400 48590 MT
(; -)
3000 W( Compiling source file)SH
8400 49721 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/macros.lisp")4200 W
8400 50852 MT
(; -)
3000 W( Loading binary file)SH
8400 51983 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/macros.fasl")4200 W
8400 53114 MT
(; -)
1800 W( Compiling module "fancy-stuff")SH
8400 54245 MT
(; -)
3000 W( Compiling source file)SH
8400 55376 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/primitives.lisp")4200 W
8400 56507 MT
(; -)
3000 W( Loading binary file)SH
8400 57638 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/primitives.fasl")4200 W
8400 58769 MT
(; -)
3000 W( Compiling source file)SH
8400 59900 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/macros.lisp")4200 W
8400 61031 MT
(; -)
3000 W( Loading binary file)SH
8400 62162 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/macros.fasl")4200 W
8400 63293 MT
(; -)
600 W( Providing system test)SH
8400 64424 MT
(NIL)SH
8400 66686 MT
(<cl> \050operate-on-system 'test 'load :verbose t\051)SH
8400 68948 MT
(; -)
600 W( Loading system "test")SH
8400 70079 MT
(; -)
1800 W( Loading module "basic")SH
8400 71210 MT
(; -)
3000 W( Loading binary file)SH
ES
%%Page: 9 9
BS
0 SI
10 /Helvetica-Bold AF
30322 4329 MT
(9)SH
/Courier-Bold SF
8400 7874 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/primitives.fasl")4200 W
8400 9005 MT
(; -)
3000 W( Loading binary file)SH
8400 10136 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/macros.fasl")4200 W
8400 11267 MT
(; -)
1800 W( Loading module "graphics")SH
8400 12398 MT
(; -)
3000 W( Loading binary file)SH
8400 13529 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/primitives.fasl)4200 W
8400 14660 MT
(; -)
3000 W( Loading binary file)SH
8400 15791 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/macros.fasl")4200 W
8400 16922 MT
(; -)
1800 W( Loading module "operating-system")SH
8400 18053 MT
(; -)
3000 W( Loading binary file)SH
8400 19184 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/primitives.fasl")4200 W
8400 20315 MT
(; -)
3000 W( Loading binary file)SH
8400 21446 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/macros.fasl")4200 W
8400 22577 MT
(; -)
1800 W( Loading module "fancy-stuff")SH
8400 23708 MT
(; -)
3000 W( Loading binary file)SH
8400 24839 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/primitives.fasl")4200 W
8400 25970 MT
(; -)
3000 W( Loading binary file)SH
8400 27101 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/macros.fasl")4200 W
8400 28232 MT
(; -)
600 W( Providing system test)SH
8400 29363 MT
(NIL)SH
12 /Helvetica-Bold AF
7200 33623 MT
(Miscellaneous Notes)SH
10 /Helvetica AF
7200 37056 MT
(Macintosh pathnames are)
27 W( not fully supported at this time because of irregularities in the Allegro Common)26 W
7200 38576 MT
(Lisp definition of the pathname functions. Thus)
92 W( system definitions will not be portable to the Macintosh.)93 W
7200 40096 MT
(To convert them, include the device in the toplevel pathname and include trailing colons in)
7 W( the pathnames)6 W
7200 41616 MT
(of each module.)SH
7200 45112 MT
(We currently assume that)
205 W( compilation-load dependencies and if-changed dependencies are identical.)206 W
7200 46632 MT
(However, in some cases this might not be true. For example, if we change)
21 W( a macro we have to recompile)20 W
7200 48152 MT
(functions that depend on it, but not if we change)
239 W( a function. Splitting these apart \050with appropriate)240 W
7200 49672 MT
(defaulting\051 would be nice, but not worth doing immediately since it may save only a)
252 W( couple of file)251 W
7200 51192 MT
(recompilations, while making the defsystem much)
222 W( more complex. And if someone has such a large)223 W
7200 52712 MT
(system that this matters, they've got more important problems.)SH
ES
%%Trailer
%%Pages: 9 
%%DocumentFonts: Helvetica Helvetica-Bold Helvetica-Oblique Courier-Bold Symbol
