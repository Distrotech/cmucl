# @ cmucl
# SOME DESCRIPTIVE TITLE
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMUCL 20A\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI +ZONE\n"
"Last-Translator: Automatic translation\n"
"Language-Team: Pig Latin (auto-translated)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: target:code/intl.lisp
msgid ""
"The message-lookup domain used by INTL:GETTEXT and INTL:NGETTEXT.\n"
"  Use (INTL:TEXTDOMAIN \"whatever\") in each source file to set this."
msgstr ""
"Ethay essagemay-ookuplay omainday usedway ybay INTLWAY:ETTEXTGAY andway "
"INTLWAY:GETTEXTNAY.\n"
"  Useway (INTLWAY:EXTDOMAINTAY \"ateverwhay\") inway eachway ourcesay ilefay "
"otay etsay isthay."

#: target:pcl/cpl.lisp target:pcl/dfun.lisp target:pcl/vector.lisp
#: target:pcl/boot.lisp target:pcl/cache.lisp target:pcl/fngen.lisp
#: target:pcl/defs.lisp target:pcl/info.lisp pcl:defsys.lisp
#: target:compiler/byte-comp.lisp target:compiler/eval-comp.lisp
#: target:compiler/generic/new-genesis.lisp target:compiler/generic/core.lisp
#: target:compiler/dump.lisp target:compiler/dyncount.lisp
#: target:compiler/xref.lisp target:compiler/x86/c-call.lisp
#: target:compiler/x86/insts.lisp target:compiler/srctran.lisp
#: target:compiler/typetran.lisp target:compiler/ir1util.lisp
#: target:compiler/main.lisp target:compiler/knownfun.lisp
#: target:compiler/new-assem.lisp target:compiler/disassem.lisp
#: target:compiler/meta-vmdef.lisp target:compiler/vop.lisp
#: target:compiler/ctype.lisp target:compiler/node.lisp
#: target:compiler/sset.lisp target:compiler/backend.lisp
#: target:compiler/generic/vm-macs.lisp target:compiler/macros.lisp
#: target:code/intl.lisp target:compiler/globaldb.lisp
#: target:code/defstruct.lisp target:code/multi-proc.lisp
#: target:code/remote.lisp target:code/wire.lisp target:code/internet.lisp
#: target:code/loop.lisp target:code/run-program.lisp
#: target:code/parse-time.lisp target:code/profile.lisp
#: target:code/ntrace.lisp target:code/rand-mt19937.lisp
#: target:code/debug.lisp target:code/debug-int.lisp
#: target:code/debug-info.lisp target:code/eval.lisp target:code/filesys.lisp
#: target:code/pathname.lisp target:code/fd-stream.lisp
#: target:code/extfmts.lisp target:code/serve-event.lisp
#: target:code/reader.lisp target:code/package.lisp target:code/format.lisp
#: target:code/pprint.lisp target:code/stream.lisp target:code/room.lisp
#: target:code/dfixnum.lisp target:code/commandline.lisp
#: target:code/unidata.lisp target:compiler/proclaim.lisp
#: target:code/unix.lisp target:code/hash-new.lisp
#: target:code/byte-interp.lisp target:code/c-call.lisp
#: target:code/alieneval.lisp target:code/type.lisp target:code/class.lisp
#: target:code/typedefs.lisp target:code/error.lisp target:code/fwrappers.lisp
#: target:assembly/assemfile.lisp target:code/struct.lisp
msgid "Class not yet defined: ~S"
msgstr "Assclay otnay etyay efinedday: ~S"

#: target:code/intl.lisp
msgid "Encountered illegal token: ="
msgstr "Encounteredway illegalway okentay: ="

#: target:code/intl.lisp
msgid "Encountered illegal token: ~C"
msgstr "Encounteredway illegalway okentay: ~C"

#: target:code/intl.lisp
msgid "Expected : in ?: construct"
msgstr "Expectedway : inway ?: onstructcay"

#: target:code/intl.lisp
msgid "Expected close-paren."
msgstr "Expectedway oseclay-arenpay."

#: target:code/intl.lisp
msgid "Unexpected token: ~S."
msgstr "Unexpectedway okentay: ~S."

#: target:code/intl.lisp
msgid "Expecting end of expression.  ~S."
msgstr "Expectingway endway ofway expressionway.  ~S."

#: target:code/intl.lisp
msgid ""
"Look up STRING in the current message domain and return its translation."
msgstr ""
"Ooklay upway INGSTRAY inway ethay urrentcay essagemay omainday andway "
"eturnray itsway anslationtray."

#: target:code/intl.lisp
msgid "Look up the singular or plural form of a message in the current domain."
msgstr ""
"Ooklay upway ethay ingularsay orway uralplay ormfay ofway away essagemay "
"inway ethay urrentcay omainday."

#: target:code/intl.lisp
msgid ""
"Look up STRING in the specified message domain and return its translation."
msgstr ""
"Ooklay upway INGSTRAY inway ethay ecifiedspay essagemay omainday andway "
"eturnray itsway anslationtray."

#: target:code/intl.lisp
msgid ""
"Look up the singular or plural form of a message in the specified domain."
msgstr ""
"Ooklay upway ethay ingularsay orway uralplay ormfay ofway away essagemay "
"inway ethay ecifiedspay omainday."

#: target:code/intl.lisp
msgid "_@ is a reserved reader macro prefix."
msgstr "_@ isway away eservedray eaderray acromay efixpray."

#: target:code/intl.lisp
msgid "~&Dumping ~D messages for domain ~S~%"
msgstr "~&Umpingday ~D essagesmay orfay omainday ~S~%"

#: target:code/struct.lisp
msgid "The size of a stream in-buffer."
msgstr "Ethay izesay ofway away eamstray inway-ufferbay."

#: target:code/sysmacs.lisp
msgid "Register the feature as having influenced the CMUCL build process."
msgstr ""
"Egisterray ethay eaturefay asway avinghay influencedway ethay MUCLCAY "
"uildbay ocesspray."

#: target:code/sysmacs.lisp
msgid ""
"Register the feature as having influenced the CMUCL build process,\n"
"and also the CMUCL C runtime."
msgstr ""
"Egisterray ethay eaturefay asway avinghay influencedway ethay MUCLCAY "
"uildbay ocesspray,\n"
"andway alsoway ethay MUCLCAY C untimeray."

#: target:code/sysmacs.lisp
msgid ""
"Given any Array, binds Data-Var to the array's data vector and Start-Var "
"and\n"
"  End-Var to the start and end of the designated portion of the data "
"vector.\n"
"  Svalue and Evalue are any start and end specified to the original "
"operation,\n"
"  and are factored into the bindings of Start-Var and End-Var.  Offset-Var "
"is\n"
"  the cumulative offset of all displacements encountered, and does not\n"
"  include Svalue."
msgstr ""
"Ivengay anyway Arrayway, indsbay Ataday-Arvay otay ethay arrayway's ataday "
"ectorvay andway Tartsay-Arvay andway\n"
"  Endway-Arvay otay ethay tartsay andway endway ofway ethay esignatedday "
"ortionpay ofway ethay ataday ectorvay.\n"
"  Valuesay andway Evalueway areway anyway tartsay andway endway ecifiedspay "
"otay ethay originalway operatiowayn,\n"
"  andway areway actoredfay intoway ethay indingsbay ofway Tartsay-Arvay "
"andway Endway-Arvay.  Offsetway-Arvay isway\n"
"  ethay umulativecay offsetway ofway allway isplacementsday encounteredway, "
"andway oesday otnay\n"
"  includeway Valuesay."

#: target:code/sysmacs.lisp
msgid "Executes the forms in the body without doing a garbage collection."
msgstr ""
"Executesway ethay ormsfay inway ethay odybay ithoutway oingday away "
"arbagegay ollectioncay."

#: target:code/kernel.lisp
msgid ""
"Return the 24 bits of data in the header of object X, which must be an\n"
"  other-pointer object."
msgstr ""
"Eturnray ethay 24 itsbay ofway ataday inway ethay eaderhay ofway objectway "
"X, ichwhay ustmay ebay anway\n"
"  otherway-ointerpay objectway."

#: target:code/kernel.lisp
msgid ""
"Sets the 24 bits of data in the header of object X (which must be an\n"
"  other-pointer object) to VAL."
msgstr ""
"Etssay ethay 24 itsbay ofway ataday inway ethay eaderhay ofway objectway X "
"(ichwhay ustmay ebay anway\n"
"  otherway-ointerpay objectway) otay ALVAY."

#: target:code/kernel.lisp
msgid ""
"Returns the length of the closure X.  This is one more than the number\n"
"  of variables closed over."
msgstr ""
"Eturnsray ethay engthlay ofway ethay osureclay X.  Isthay isway oneway "
"oremay anthay ethay umbernay\n"
"  ofway ariablesvay osedclay overway."

#: target:code/kernel.lisp
msgid "Returns the three-bit lowtag for the object X."
msgstr "Eturnsray ethay reethay-itbay owtaglay orfay ethay objectway X."

#: target:code/kernel.lisp
msgid "Returns the 8-bit header type for the object X."
msgstr "Eturnsray ethay 8-itbay eaderhay ypetay orfay ethay objectway X."

#: target:code/kernel.lisp
msgid ""
"Return a System-Area-Pointer pointing to the data for the vector X, which\n"
"  must be simple."
msgstr ""
"Eturnray away Ystemsay-Areaway-Ointerpay ointingpay otay ethay ataday orfay "
"ethay ectorvay X, ichwhay\n"
"  ustmay ebay implesay."

#: target:code/kernel.lisp
msgid "Return a System-Area-Pointer pointing to the end of the binding stack."
msgstr ""
"Eturnray away Ystemsay-Areaway-Ointerpay ointingpay otay ethay endway ofway "
"ethay indingbay tacksay."

#: target:code/kernel.lisp
msgid ""
"Returns a System-Area-Pointer pointing to the next free work of the current\n"
"  dynamic space."
msgstr ""
"Eturnsray away Ystemsay-Areaway-Ointerpay ointingpay otay ethay extnay "
"eefray orkway ofway ethay urrentcay\n"
"  ynamicday acespay."

#: target:code/kernel.lisp
msgid "Return a System-Area-Pointer pointing to the end of the control stack."
msgstr ""
"Eturnray away Ystemsay-Areaway-Ointerpay ointingpay otay ethay endway ofway "
"ethay ontrolcay tacksay."

#: target:code/kernel.lisp
msgid "Return the header typecode for FUNCTION.  Can be set with SETF."
msgstr ""
"Eturnray ethay eaderhay ypecodetay orfay UNCTIONFAY.  Ancay ebay etsay "
"ithway ETFSAY."

#: target:code/kernel.lisp
msgid "Extracts the arglist from the function header FUNC."
msgstr "Extractsway ethay arglistway omfray ethay unctionfay eaderhay UNCFAY."

#: target:code/kernel.lisp
msgid "Extracts the name from the function header FUNC."
msgstr "Extractsway ethay amenay omfray ethay unctionfay eaderhay UNCFAY."

#: target:code/kernel.lisp
msgid "Extracts the type from the function header FUNC."
msgstr "Extractsway ethay ypetay omfray ethay unctionfay eaderhay UNCFAY."

#: target:code/kernel.lisp
msgid "Extracts the function from CLOSURE."
msgstr "Extractsway ethay unctionfay omfray OSURECLAY."

#: target:code/kernel.lisp
msgid ""
"Return the length of VECTOR.  There is no reason to use this, 'cause\n"
"  (length (the vector foo)) is the same."
msgstr ""
"Eturnray ethay engthlay ofway ECTORVAY.  Erethay isway onay easonray otay "
"useway isthay, 'ausecay\n"
"  (engthlay (ethay ectorvay oofay)) isway ethay amesay."

#: target:code/kernel.lisp
msgid "Return the SXHASH for the simple-string STRING."
msgstr "Eturnray ethay XHASHSAY orfay ethay implesay-ingstray INGSTRAY."

#: target:code/kernel.lisp
msgid ""
"Return the SXHASH for the first LENGTH characters of the simple-string\n"
"  STRING."
msgstr ""
"Eturnray ethay XHASHSAY orfay ethay irstfay ENGTHLAY aracterschay ofway "
"ethay implesay-ingstray\n"
"  INGSTRAY."

#: target:code/kernel.lisp
msgid "Extract the INDEXth slot from CLOSURE."
msgstr "Extractway ethay Indexthway otslay omfray OSURECLAY."

#: target:code/kernel.lisp
msgid ""
"Allocate a unboxed, simple vector with type code TYPE, length LENGTH, and\n"
"  WORDS words long.  Note: it is your responsibility to assure that the\n"
"  relation between LENGTH and WORDS is correct."
msgstr ""
"Allocateway away unboxedway, implesay ectorvay ithway ypetay odecay YPETAY, "
"engthlay ENGTHLAY, andway\n"
"  ORDSWAY ordsway onglay.  Otenay: itway isway ouryay esponsibilityray otay "
"assureway atthay ethay\n"
"  elationray etweenbay ENGTHLAY andway ORDSWAY isway orrectcay."

#: target:code/kernel.lisp
msgid "Allocate an array header with type code TYPE and rank RANK."
msgstr ""
"Allocateway anway arrayway eaderhay ithway ypetay odecay YPETAY andway "
"ankray ANKRAY."

#: target:code/kernel.lisp
msgid "Return a SAP pointing to the instructions part of CODE-OBJ."
msgstr ""
"Eturnray away APSAY ointingpay otay ethay instructionsway artpay ofway "
"ODECAY-OBJWAY."

#: target:code/kernel.lisp
msgid ""
"Extract the INDEXth element from the header of CODE-OBJ.  Can be set with\n"
"  setf."
msgstr ""
"Extractway ethay Indexthway elementway omfray ethay eaderhay ofway ODECAY-"
"OBJWAY.  Ancay ebay etsay ithway\n"
"  etfsay."

#: target:code/format.lisp target:code/print.lisp target:code/irrat-dd.lisp
#: target:code/irrat.lisp target:code/float.lisp target:code/numbers.lisp
#: target:code/kernel.lisp
msgid "Argument ~A is not a ~S: ~S."
msgstr "Argumentway ~Away isway otnay away ~S: ~S."

#: target:code/lispinit.lisp
msgid ""
"Holds a list of symbols that describe features provided by the\n"
"   implementation."
msgstr ""
"Oldshay away istlay ofway ymbolssay atthay escribeday eaturesfay ovidedpray "
"ybay ethay\n"
"   implementationway."

#: target:code/lispinit.lisp
msgid "Features affecting the runtime"
msgstr "Eaturesfay affectingway ethay untimeray"

#: target:code/lispinit.lisp
msgid "The fixnum closest in value to positive infinity."
msgstr "Ethay ixnumfay osestclay inway aluevay otay ositivepay infinityway."

#: target:code/lispinit.lisp
msgid "The fixnum closest in value to negative infinity."
msgstr "Ethay ixnumfay osestclay inway aluevay otay egativenay infinityway."

#: target:code/lispinit.lisp
msgid ""
"When (typep condition *break-on-signals*) is true, then calls to SIGNAL "
"will\n"
"   enter the debugger prior to signalling that condition."
msgstr ""
"Enwhay (ypeptay onditioncay *eakbray-onway-ignalssay*) isway uetray, enthay "
"allscay otay IGNALSAY illway\n"
"   enterway ethay ebuggerday iorpray otay ignallingsay atthay onditioncay."

#: target:code/lispinit.lisp
msgid ""
"Invokes the signal facility on a condition formed from datum and arguments.\n"
"   If the condition is not handled, nil is returned.  If\n"
"   (TYPEP condition *BREAK-ON-SIGNALS*) is true, the debugger is invoked "
"before\n"
"   any signalling is done."
msgstr ""
"Invokesway ethay ignalsay acilityfay onway away onditioncay ormedfay omfray "
"atumday andway argumentsway.\n"
"   Ifway ethay onditioncay isway otnay andledhay, ilnay isway eturnedray.  "
"Ifway\n"
"   (YPEPTAY onditioncay *EAKBRAY-ONWAY-IGNALSSAY*) isway uetray, ethay "
"ebuggerday isway invokedway eforebay\n"
"   anyway ignallingsay isway oneday."

#: target:code/lispinit.lisp
msgid "~A~%Break entered because of *break-on-signals* (now NIL.)"
msgstr ""
"~Away~%Eakbray enteredway ecausebay ofway *eakbray-onway-ignalssay* (ownay "
"ILNAY.)"

#: target:code/lispinit.lisp
msgid "Ignore the additional arguments."
msgstr "Ignoreway ethay additionalway argumentsway."

#: target:code/lispinit.lisp
msgid ""
"You may not supply additional arguments ~\n"
"\t\t\t\t     when giving ~S to ~S."
msgstr ""
"Ouyay aymay otnay upplysay additionalway argumentsway ~\n"
"\t\t\t\t     enwhay ivinggay ~S otay ~S."

#: target:code/lispinit.lisp
msgid "Bad argument to ~S: ~S"
msgstr "Adbay argumentway otay ~S: ~S"

#: target:code/lispinit.lisp
msgid ""
"Invokes the signal facility on a condition formed from datum and arguments.\n"
"   If the condition is not handled, the debugger is invoked."
msgstr ""
"Invokesway ethay ignalsay acilityfay onway away onditioncay ormedfay omfray "
"atumday andway argumentsway.\n"
"   Ifway ethay onditioncay isway otnay andledhay, ethay ebuggerday isway "
"invokedway."

#: target:pcl/dfun.lisp target:code/interr.lisp target:code/lispinit.lisp
msgid "Help! "
msgstr "Elphay! "

#: target:pcl/dfun.lisp target:code/interr.lisp target:code/lispinit.lisp
msgid " nested errors.  "
msgstr " estednay errorsway.  "

#: target:pcl/dfun.lisp target:code/interr.lisp target:code/lispinit.lisp
msgid "KERNEL:*MAXIMUM-ERROR-DEPTH* exceeded."
msgstr "ERNELKAY:*AXIMUMMAY-ERRORWAY-EPTHDAY* exceededway."

#: target:code/lispinit.lisp
msgid ""
"Prints a message and invokes the debugger without allowing any possibility\n"
"   of condition handling occurring."
msgstr ""
"Intspray away essagemay andway invokesway ethay ebuggerday ithoutway "
"allowingway anyway ossibilitypay\n"
"   ofway onditioncay andlinghay occurringway."

#: target:code/lispinit.lisp
msgid "Return from BREAK."
msgstr "Eturnray omfray EAKBRAY."

#: target:code/lispinit.lisp
msgid ""
"Warns about a situation by signalling a condition formed by datum and\n"
"   arguments.  While the condition is being signaled, a muffle-warning "
"restart\n"
"   exists that causes WARN to immediately return nil."
msgstr ""
"Arnsway aboutway away ituationsay ybay ignallingsay away onditioncay "
"ormedfay ybay atumday andway\n"
"   argumentsway.  Ilewhay ethay onditioncay isway eingbay ignaledsay, away "
"ufflemay-arningway estartray\n"
"   existsway atthay ausescay ARNWAY otay immediatelyway eturnray ilnay."

#: target:code/lispinit.lisp
msgid "a warning condition"
msgstr "away arningway onditioncay"

#: target:code/lispinit.lisp
msgid "Skip warning."
msgstr "Kipsay arningway."

#: target:code/lispinit.lisp
msgid "~&~@<Warning:  ~3i~:_~A~:>~%"
msgstr "~&~@<Arningway:  ~3i~:_~Away~:>~%"

#: target:code/lispinit.lisp
msgid ""
"Invokes the signal facility on a condition formed from datum and arguments.\n"
"   If the condition is not handled, the debugger is invoked.  This function\n"
"   is just like error, except that the condition type defaults to the type\n"
"   simple-program-error, instead of program-error."
msgstr ""
"Invokesway ethay ignalsay acilityfay onway away onditioncay ormedfay omfray "
"atumday andway argumentsway.\n"
"   Ifway ethay onditioncay isway otnay andledhay, ethay ebuggerday isway "
"invokedway.  Isthay unctionfay\n"
"   isway ustjay ikelay errorway, exceptway atthay ethay onditioncay ypetay "
"efaultsday otay ethay ypetay\n"
"   implesay-ogrampray-errorway, insteadway ofway ogrampray-errorway."

#: target:code/lispinit.lisp
msgid "Gives the world a shove and hopes it spins."
msgstr "Ivesgay ethay orldway away oveshay andway opeshay itway insspay."

#: target:code/lispinit.lisp
msgid "Functions to be invoked during cleanup at Lisp exit."
msgstr ""
"Unctionsfay otay ebay invokedway uringday eanupclay atway Isplay exitway."

#: target:code/lispinit.lisp
msgid ""
"Terminates the current Lisp.  Things are cleaned up unless Recklessly-P is\n"
"  non-Nil."
msgstr ""
"Erminatestay ethay urrentcay Isplay.  Ingsthay areway eanedclay upway "
"unlessway Ecklesslyray-P isway\n"
"  onnay-Ilnay."

#: target:code/multi-proc.lisp target:code/lispinit.lisp
msgid ""
"This function causes execution to be suspended for N seconds.  N may\n"
"  be any non-negative, non-complex number."
msgstr ""
"Isthay unctionfay ausescay executionway otay ebay uspendedsay orfay N "
"econdssay.  N aymay\n"
"  ebay anyway onnay-egativenay, onnay-omplexcay umbernay."

#: target:code/lispinit.lisp
msgid ""
"Zero the unused portion of the control stack so that old objects are not\n"
"   kept alive because of uninitialized stack variables."
msgstr ""
"Erozay ethay unusedway ortionpay ofway ethay ontrolcay tacksay osay atthay "
"oldway objectsway areway otnay\n"
"   eptkay aliveway ecausebay ofway uninitializedway tacksay ariablesvay."

#: target:code/lispinit.lisp
msgid ""
"Holds a list of all the values returned by the most recent top-level EVAL."
msgstr ""
"Oldshay away istlay ofway allway ethay aluesvay eturnedray ybay ethay ostmay "
"ecentray optay-evellay EVALWAY."

#: target:code/lispinit.lisp
msgid "Gets the previous value of / when a new value is computed."
msgstr ""
"Etsgay ethay eviouspray aluevay ofway / enwhay away ewnay aluevay isway "
"omputedcay."

#: target:code/lispinit.lisp
msgid "Gets the previous value of // when a new value is computed."
msgstr ""
"Etsgay ethay eviouspray aluevay ofway // enwhay away ewnay aluevay isway "
"omputedcay."

#: target:code/lispinit.lisp
msgid "Holds the value of the most recent top-level EVAL."
msgstr ""
"Oldshay ethay aluevay ofway ethay ostmay ecentray optay-evellay EVALWAY."

#: target:code/lispinit.lisp
msgid "Gets the previous value of * when a new value is computed."
msgstr ""
"Etsgay ethay eviouspray aluevay ofway * enwhay away ewnay aluevay isway "
"omputedcay."

#: target:code/lispinit.lisp
msgid "Gets the previous value of ** when a new value is computed."
msgstr ""
"Etsgay ethay eviouspray aluevay ofway ** enwhay away ewnay aluevay isway "
"omputedcay."

#: target:code/lispinit.lisp
msgid "Holds the value of the most recent top-level READ."
msgstr ""
"Oldshay ethay aluevay ofway ethay ostmay ecentray optay-evellay EADRAY."

#: target:code/lispinit.lisp
msgid "Gets the previous value of + when a new value is read."
msgstr ""
"Etsgay ethay eviouspray aluevay ofway + enwhay away ewnay aluevay isway "
"eadray."

#: target:code/lispinit.lisp
msgid "Gets the previous value of ++ when a new value is read."
msgstr ""
"Etsgay ethay eviouspray aluevay ofway ++ enwhay away ewnay aluevay isway "
"eadray."

#: target:code/lispinit.lisp
msgid "Holds the form curently being evaluated."
msgstr "Oldshay ethay ormfay urentlycay eingbay evaluatedway."

#: target:code/lispinit.lisp
msgid ""
"The top-level prompt string.  This also may be a function of no arguments\n"
"   that returns a simple-string."
msgstr ""
"Ethay optay-evellay omptpray ingstray.  Isthay alsoway aymay ebay away "
"unctionfay ofway onay argumentsway\n"
"   atthay eturnsray away implesay-ingstray."

#: target:code/lispinit.lisp
msgid ""
"True if we are within the Top-Level-Catcher.  This is used by interrupt\n"
"  handlers to see whether it is o.k. to throw."
msgstr ""
"Uetray ifway eway areway ithinway ethay Optay-Evellay-Atchercay.  Isthay "
"isway usedway ybay interruptway\n"
"  andlershay otay eesay etherwhay itway isway o.k. otay rowthay."

#: target:code/lispinit.lisp
msgid ""
"Evaluate FORM, returning whatever it returns but adjust ***, **, *, +++, +"
"+,\n"
"  +, ///, //, /, and -."
msgstr ""
"Evaluateway ORMFAY, eturningray ateverwhay itway eturnsray utbay adjustway "
"***, **, *, +++, ++,\n"
"  +, ///, //, /, andway -."

#: target:code/lispinit.lisp
msgid "Go on with * set to NIL."
msgstr "Ogay onway ithway * etsay otay ILNAY."

#: target:code/lispinit.lisp
msgid "EVAL returned an unbound marker."
msgstr "EVALWAY eturnedray anway unboundway arkermay."

#: target:code/lispinit.lisp
msgid ""
"How many pages to reserve from the total heap space so we can handle\n"
"heap overflow."
msgstr ""
"Owhay anymay agespay otay eserveray omfray ethay otaltay eaphay acespay osay "
"eway ancay andlehay\n"
"eaphay overflowway."

#: target:code/lispinit.lisp
msgid "Top-level READ-EVAL-PRINT loop.  Do not call this."
msgstr ""
"Optay-evellay EADRAY-EVALWAY-INTPRAY ooplay.  Oday otnay allcay isthay."

#: target:code/lispinit.lisp
msgid "Return to Top-Level."
msgstr "Eturnray otay Optay-Evellay."

#: target:code/lispinit.lisp
msgid ""
"~&Received EOF on *standard-input*, ~\n"
"\t\t\t\t\tswitching to *terminal-io*.~%"
msgstr ""
"~&Eceivedray EOFWAY onway *tandardsay-inputway*, ~\n"
"\t\t\t\t\twitchingsay otay *erminaltay-ioway*.~%"

#: target:code/lispinit.lisp
msgid "~&Received more than ~D EOFs; Aborting.~%"
msgstr "~&Eceivedray oremay anthay ~D Eofsway; Abortingway.~%"

#: target:code/lispinit.lisp
msgid "~&Received EOF.~%"
msgstr "~&Eceivedray EOFWAY.~%"

#: target:pcl/walk.lisp
msgid ""
"~@<The evaluator was called to evaluate a form in a macroexpansion ~\n"
"          environment constructed by the PCL portable code walker.  These ~\n"
"          environments are only useful for macroexpansion, they cannot be ~\n"
"          used for evaluation.  ~\n"
"          This error should never occur when using PCL.  ~\n"
"          This most likely source of this error is a program which tries to "
"~\n"
"          to use the PCL portable code walker to build its own evaluator.~@:>"
msgstr ""
"~@<Ethay evaluatorway asway alledcay otay evaluateway away ormfay inway away "
"acroexpansionmay ~\n"
"          environmentway onstructedcay ybay ethay CLPAY ortablepay odecay "
"alkerway.  Esethay ~\n"
"          environmentsway areway onlyway usefulway orfay acroexpansionmay, "
"eythay annotcay ebay ~\n"
"          usedway orfay evaluationway.  ~\n"
"          Isthay errorway ouldshay evernay occurway enwhay usingway CLPAY.  "
"~\n"
"          Isthay ostmay ikelylay ourcesay ofway isthay errorway isway away "
"ogrampray ichwhay iestray otay ~\n"
"          otay useway ethay CLPAY ortablepay odecay alkerway otay uildbay "
"itsway ownway evaluatorway.~@:>"

#: target:pcl/walk.lisp
msgid "~@<~S is not a recognized variable declaration.~@:>"
msgstr "~@<~S isway otnay away ecognizedray ariablevay eclarationday.~@:>"

#: target:pcl/walk.lisp
msgid "~@<Can't get template for ~S.~@:>"
msgstr "~@<Ancay't etgay emplatetay orfay ~S.~@:>"

#: target:pcl/walk.lisp
msgid ""
"~@<~S is a special form, not defined in the CommonLisp ~\n"
"\t\t      manual.  This code walker doesn't know how to walk it.  ~\n"
"\t\t      Define a template for this special form and try again.~@:>"
msgstr ""
"~@<~S isway away ecialspay ormfay, otnay efinedday inway ethay Ommonlispcay "
"~\n"
"\t\t      anualmay.  Isthay odecay alkerway oesnday't nowkay owhay otay "
"alkway itway.  ~\n"
"\t\t      Efineday away emplatetay orfay isthay ecialspay ormfay andway "
"ytray againway.~@:>"

#: target:pcl/walk.lisp
msgid ""
"~@<While handling repeat: ~\n"
"                     Ran into stop while still in repeat template.~@:>"
msgstr ""
"~@<Ilewhay andlinghay epeatray: ~\n"
"                     Anray intoway topsay ilewhay tillsay inway epeatray "
"emplatetay.~@:>"

#: target:pcl/walk.lisp
msgid ""
"~@<Encountered declare ~S in a place where a ~\n"
"         declare was not expected.~@:>"
msgstr ""
"~@<Encounteredway eclareday ~S inway away aceplay erewhay away ~\n"
"         eclareday asway otnay expectedway.~@:>"

#: target:pcl/walk.lisp
msgid "~@<Can't understand something in the arglist ~S.~@:>"
msgstr "~@<Ancay't understandway omethingsay inway ethay arglistway ~S.~@:>"

#: target:pcl/walk.lisp
msgid ""
"~@<In the form ~S: ~\n"
"                       IF only accepts three arguments, you are using ~D. ~\n"
"                       It is true that some Common Lisps support this, but "
"~\n"
"                       it is not truly legal Common Lisp.  For now, this "
"code ~\n"
"                       walker is interpreting the extra arguments as extra "
"else clauses. ~\n"
"                       Even if this is what you intended, you should fix "
"your source code.~@:>"
msgstr ""
"~@<Inway ethay ormfay ~S: ~\n"
"                       IFWAY onlyway acceptsway reethay argumentsway, ouyay "
"areway usingway ~D. ~\n"
"                       Itway isway uetray atthay omesay Ommoncay Ispslay "
"upportsay isthay, utbay ~\n"
"                       itway isway otnay ulytray egallay Ommoncay Isplay.  "
"Orfay ownay, isthay odecay ~\n"
"                       alkerway isway interpretingway ethay extraway "
"argumentsway asway extraway elseway ausesclay. ~\n"
"                       Evenway ifway isthay isway atwhay ouyay intendedway, "
"ouyay ouldshay ixfay ouryay ourcesay odecay.~@:>"

#: target:code/fwrappers.lisp
msgid ""
"A funcallable instance used to implement fwrappers.\n"
"   The CONSTRUCTOR slot is a function defined with DEFINE-FWRAPPER.\n"
"   This function returns an instance closure closing over an \n"
"   fwrapper object, which is installed as the funcallable-instance\n"
"   function of the fwrapper object."
msgstr ""
"Away uncallablefay instanceway usedway otay implementway wrappersfay.\n"
"   Ethay ONSTRUCTORCAY otslay isway away unctionfay efinedday ithway "
"EFINEDAY-WRAPPERFAY.\n"
"   Isthay unctionfay eturnsray anway instanceway osureclay osingclay overway "
"anway \n"
"   wrapperfay objectway, ichwhay isway installedway asway ethay "
"uncallablefay-instanceway\n"
"   unctionfay ofway ethay wrapperfay objectway."

#: target:code/fwrappers.lisp
msgid "Print-function for struct FWRAPPER."
msgstr "Intpray-unctionfay orfay uctstray WRAPPERFAY."

#: target:code/fwrappers.lisp
msgid "Return FUN if it is an fwrapper or nil if it isn't."
msgstr ""
"Eturnray UNFAY ifway itway isway anway wrapperfay orway ilnay ifway itway "
"isnway't."

#: target:code/fwrappers.lisp
msgid ""
"Evaluate BODY with VAR bound to consecutive fwrappers of\n"
"   FDEFN.  Return RESULT at the end."
msgstr ""
"Evaluateway ODYBAY ithway ARVAY oundbay otay onsecutivecay wrappersfay "
"ofway\n"
"   DEFNFAY.  Eturnray ESULTRAY atway ethay endway."

#: target:code/fwrappers.lisp
msgid "Return tha last encapsulation of FDEFN or NIL if none."
msgstr ""
"Eturnray athay astlay encapsulationway ofway DEFNFAY orway ILNAY ifway "
"onenay."

#: target:code/fwrappers.lisp
msgid ""
"Prepend encapsulation F to the definition of FUNCTION-NAME.\n"
"   Signal an error if FUNCTION-NAME is an undefined function."
msgstr ""
"Ependpray encapsulationway F otay ethay efinitionday ofway UNCTIONFAY-"
"AMENAY.\n"
"   Ignalsay anway errorway ifway UNCTIONFAY-AMENAY isway anway undefinedway "
"unctionfay."

#: target:code/fwrappers.lisp
msgid "Remove fwrapper F from the definition of FUNCTION-NAME."
msgstr ""
"Emoveray wrapperfay F omfray ethay efinitionday ofway UNCTIONFAY-AMENAY."

#: target:code/fwrappers.lisp
msgid ""
"Return a list of all fwrappers of FUNCTION-NAME, ordered\n"
"   from outermost to innermost."
msgstr ""
"Eturnray away istlay ofway allway wrappersfay ofway UNCTIONFAY-AMENAY, "
"orderedway\n"
"   omfray outermostway otay innermostway."

#: target:code/fwrappers.lisp
msgid ""
"Set FUNCTION-NAMES's fwrappers to elements of the list\n"
"   FWRAPPERS, which is assumed to be ordered from outermost to\n"
"   innermost.  FWRAPPERS null means remove all fwrappers."
msgstr ""
"Etsay UNCTIONFAY-AMESNAY's wrappersfay otay elementsway ofway ethay istlay\n"
"   WRAPPERSFAY, ichwhay isway assumedway otay ebay orderedway omfray "
"outermostway otay\n"
"   innermostway.  WRAPPERSFAY ullnay eansmay emoveray allway wrappersfay."

#: target:code/fwrappers.lisp
msgid ""
"Wrap the function named FUNCTION-NAME in an fwrapper of type TYPE,\n"
"   created by calling CONSTRUCTOR.  CONSTRUCTOR is a function\n"
"   defined with DEFINE-FWRAPPER, or the name of such a function.\n"
"   Return the fwrapper created.  USER-DATA is arbitrary data to be\n"
"   associated with the fwrapper.  It is accessible in wrapper\n"
"   functions defined with DEFINE-FWRAPPER as (FWRAPPER-USER-DATA\n"
"   FWRAPPER)."
msgstr ""
"Apwray ethay unctionfay amednay UNCTIONFAY-AMENAY inway anway wrapperfay "
"ofway ypetay YPETAY,\n"
"   eatedcray ybay allingcay ONSTRUCTORCAY.  ONSTRUCTORCAY isway away "
"unctionfay\n"
"   efinedday ithway EFINEDAY-WRAPPERFAY, orway ethay amenay ofway uchsay "
"away unctionfay.\n"
"   Eturnray ethay wrapperfay eatedcray.  USERWAY-ATADAY isway arbitraryway "
"ataday otay ebay\n"
"   associatedway ithway ethay wrapperfay.  Itway isway accessibleway inway "
"apperwray\n"
"   unctionsfay efinedday ithway EFINEDAY-WRAPPERFAY asway (WRAPPERFAY-"
"USERWAY-ATADAY\n"
"   WRAPPERFAY)."

#: target:code/fwrappers.lisp
msgid ""
"Remove fwrappers from the function named FUNCTION-NAME.\n"
"   If TYPE is supplied, remove fwrappers whose type is equal to TYPE.\n"
"   If TEST is supplied, remove fwrappers satisfying TEST.\n"
"   If both are not specified, remove all fwrappers."
msgstr ""
"Emoveray wrappersfay omfray ethay unctionfay amednay UNCTIONFAY-AMENAY.\n"
"   Ifway YPETAY isway uppliedsay, emoveray wrappersfay osewhay ypetay isway "
"equalway otay YPETAY.\n"
"   Ifway ESTTAY isway uppliedsay, emoveray wrappersfay atisfyingsay ESTTAY.\n"
"   Ifway othbay areway otnay ecifiedspay, emoveray allway wrappersfay."

#: target:code/fwrappers.lisp
msgid ""
"Update the funcallable instance function of fwrapper F from its\n"
"   constructor."
msgstr ""
"Updateway ethay uncallablefay instanceway unctionfay ofway wrapperfay F "
"omfray itsway\n"
"   onstructorcay."

#: target:code/fwrappers.lisp
msgid ""
"Update fwrapper function definitions of FUNCTION-NAME.\n"
"   If TYPE is supplied, update fwrappers whose type is equal to TYPE.\n"
"   If TEST is supplied, update fwrappers satisfying TEST."
msgstr ""
"Updateway wrapperfay unctionfay efinitionsday ofway UNCTIONFAY-AMENAY.\n"
"   Ifway YPETAY isway uppliedsay, updateway wrappersfay osewhay ypetay isway "
"equalway otay YPETAY.\n"
"   Ifway ESTTAY isway uppliedsay, updateway wrappersfay atisfyingsay ESTTAY."

#: target:code/fwrappers.lisp
msgid ""
"Find an fwrapper of FUNCTION-NAME.\n"
"   If TYPE is supplied, find an fwrapper whose type is equal to TYPE.\n"
"   If TEST is supplied, find an fwrapper satisfying TEST."
msgstr ""
"Indfay anway wrapperfay ofway UNCTIONFAY-AMENAY.\n"
"   Ifway YPETAY isway uppliedsay, indfay anway wrapperfay osewhay ypetay "
"isway equalway otay YPETAY.\n"
"   Ifway ESTTAY isway uppliedsay, indfay anway wrapperfay atisfyingsay "
"ESTTAY."

#: target:code/fwrappers.lisp
msgid ""
"Like DEFUN, but define a function wrapper.\n"
"   In BODY, the symbol FWRAPPERS:FWRAPPERS refers to the currently\n"
"   executing fwrapper.  FWRAPPERS:CALL-NEXT-FUNCTION can be used\n"
"   in BODY to call the next fwrapper or the primary function.  When\n"
"   called with no arguments, CALL-NEXT-FUNCTION invokes the next\n"
"   function with the original args to the fwrapper, otherwise it\n"
"   invokes the next function with the supplied args."
msgstr ""
"Ikelay EFUNDAY, utbay efineday away unctionfay apperwray.\n"
"   Inway ODYBAY, ethay ymbolsay WRAPPERSFAY:WRAPPERSFAY efersray otay ethay "
"urrentlycay\n"
"   executingway wrapperfay.  WRAPPERSFAY:ALLCAY-EXTNAY-UNCTIONFAY ancay ebay "
"usedway\n"
"   inway ODYBAY otay allcay ethay extnay wrapperfay orway ethay imarypray "
"unctionfay.  Enwhay\n"
"   alledcay ithway onay argumentsway, ALLCAY-EXTNAY-UNCTIONFAY invokesway "
"ethay extnay\n"
"   unctionfay ithway ethay originalway argsway otay ethay wrapperfay, "
"otherwiseway itway\n"
"   invokesway ethay extnay unctionfay ithway ethay uppliedsay argsway."

#: target:code/fwrappers.lisp
msgid "Return the expansion of a DEFINE-FWRAPPER."
msgstr "Eturnray ethay expansionway ofway away EFINEDAY-WRAPPERFAY."

#: target:code/fwrappers.lisp
msgid "&MORE not supported in fwrapper lambda lists"
msgstr "&OREMAY otnay upportedsay inway wrapperfay ambdalay istslay"

#: target:code/fwrappers.lisp
msgid ""
"First value is true if BODY refers to any of the variables in\n"
"     OPTIONALS, KEYS or REST, which are what KERNEL:PARSE-LAMBDA-LIST\n"
"     returns.  Second value is true if BODY refers to REST."
msgstr ""
"Irstfay aluevay isway uetray ifway ODYBAY efersray otay anyway ofway ethay "
"ariablesvay inway\n"
"     OPTIONALSWAY, EYSKAY orway ESTRAY, ichwhay areway atwhay ERNELKAY:"
"ARSEPAY-AMBDALAY-ISTLAY\n"
"     eturnsray.  Econdsay aluevay isway uetray ifway ODYBAY efersray otay "
"ESTRAY."

#: target:code/fwrappers.lisp
msgid "Fwrapper for old-style encapsulations."
msgstr "Wrapperfay orfay oldway-tylesay encapsulationsway."

#: target:code/fwrappers.lisp
msgid "This function is deprecated; use fwrappers instead."
msgstr "Isthay unctionfay isway eprecatedday; useway wrappersfay insteadway."

#: target:code/fdefinition.lisp
msgid ""
"Define (NAME ...) to be a valid function name whose syntax is checked\n"
"  by BODY.  In BODY, VAR is bound to an actual function name of the\n"
"  form (NAME ...) to check.  BODY should return two values.\n"
"  First value true means the function name is valid.  Second value\n"
"  is the name, a symbol, of the function for use in the BLOCK of DEFUNs\n"
"  and in similar situations."
msgstr ""
"Efineday (AMENAY ...) otay ebay away alidvay unctionfay amenay osewhay "
"yntaxsay isway eckedchay\n"
"  ybay ODYBAY.  Inway ODYBAY, ARVAY isway oundbay otay anway actualway "
"unctionfay amenay ofway ethay\n"
"  ormfay (AMENAY ...) otay eckchay.  ODYBAY ouldshay eturnray wotay "
"aluesvay.\n"
"  Irstfay aluevay uetray eansmay ethay unctionfay amenay isway alidvay.  "
"Econdsay aluevay\n"
"  isway ethay amenay, away ymbolsay, ofway ethay unctionfay orfay useway "
"inway ethay OCKBLAY ofway Efunsday\n"
"  andway inway imilarsay ituationssay."

#: target:code/fdefinition.lisp
msgid ""
"First value is true if NAME has valid function name syntax.\n"
"  Second value is the name, a symbol, to use as a block name in DEFUNs\n"
"  and in similar situations."
msgstr ""
"Irstfay aluevay isway uetray ifway AMENAY ashay alidvay unctionfay amenay "
"yntaxsay.\n"
"  Econdsay aluevay isway ethay amenay, away ymbolsay, otay useway asway away "
"ockblay amenay inway Efunsday\n"
"  andway inway imilarsay ituationssay."

#: target:code/fdefinition.lisp
msgid ""
"Return the fdefn object for NAME.  If it doesn't already exist and CREATE\n"
"   is non-NIL, create a new (unbound) one."
msgstr ""
"Eturnray ethay defnfay objectway orfay AMENAY.  Ifway itway oesnday't "
"alreadyway existway andway EATECRAY\n"
"   isway onnay-ILNAY, eatecray away ewnay (unboundway) oneway."

#: target:code/fdefinition.lisp
msgid "Invalid function name: ~S"
msgstr "Invalidway unctionfay amenay: ~S"

#: target:code/fdefinition.lisp
msgid ""
"Return the FDEFN of NAME.  Signal an error if there is none\n"
"   or if it's function is null."
msgstr ""
"Eturnray ethay DEFNFAY ofway AMENAY.  Ignalsay anway errorway ifway erethay "
"isway onenay\n"
"   orway ifway itway's unctionfay isway ullnay."

#: target:code/fdefinition.lisp
msgid ""
"Returns the definition for name, including any encapsulations.  Settable\n"
"   with SETF."
msgstr ""
"Eturnsray ethay efinitionday orfay amenay, includingway anyway "
"encapsulationsway.  Ettablesay\n"
"   ithway ETFSAY."

#: target:code/fdefinition.lisp
msgid ""
"Return FUNCTION-NAME's global function definition.\n"
"   If FUNCTION-NAME is fwrapped, return the primary function definition\n"
"   stored in the innermost fwrapper."
msgstr ""
"Eturnray UNCTIONFAY-AMENAY's obalglay unctionfay efinitionday.\n"
"   Ifway UNCTIONFAY-AMENAY isway wrappedfay, eturnray ethay imarypray "
"unctionfay efinitionday\n"
"   toredsay inway ethay innermostway wrapperfay."

#: target:code/fdefinition.lisp
msgid ""
"This holds functions that (SETF FDEFINITION) invokes before storing the\n"
"   new value.  These functions take the function name and the new value."
msgstr ""
"Isthay oldshay unctionsfay atthay (ETFSAY DEFINITIONFAY) invokesway eforebay "
"toringsay ethay\n"
"   ewnay aluevay.  Esethay unctionsfay aketay ethay unctionfay amenay andway "
"ethay ewnay aluevay."

#: target:code/fdefinition.lisp
msgid ""
"Set FUNCTION-NAME's global function definition to NEW-VALUE.\n"
"   If FUNCTION-NAME is fwrapped, set the primary function stored\n"
"   in the innermost fwrapper."
msgstr ""
"Etsay UNCTIONFAY-AMENAY's obalglay unctionfay efinitionday otay EWNAY-"
"ALUEVAY.\n"
"   Ifway UNCTIONFAY-AMENAY isway wrappedfay, etsay ethay imarypray "
"unctionfay toredsay\n"
"   inway ethay innermostway wrapperfay."

#: target:code/fdefinition.lisp
msgid "Return true if name has a global function definition."
msgstr ""
"Eturnray uetray ifway amenay ashay away obalglay unctionfay efinitionday."

#: target:code/fdefinition.lisp
msgid "Make Name have no global function definition."
msgstr "Akemay Amenay avehay onay obalglay unctionfay efinitionday."

#: target:code/error.lisp
msgid "&rest keyword is ~:[missing~;misplaced~]."
msgstr "&estray eywordkay isway ~:[issingmay~;isplacedmay~]."

#: target:code/error.lisp
msgid ""
"Return a list of all the currently active restarts ordered from most\n"
"   recently established to less recently established.  If Condition is\n"
"   specified, then only restarts associated with Condition (or with no\n"
"   condition) will be returned."
msgstr ""
"Eturnray away istlay ofway allway ethay urrentlycay activeway estartsray "
"orderedway omfray ostmay\n"
"   ecentlyray establishedway otay esslay ecentlyray establishedway.  Ifway "
"Onditioncay isway\n"
"   ecifiedspay, enthay onlyway estartsray associatedway ithway Onditioncay "
"(orway ithway onay\n"
"   onditioncay) illway ebay eturnedray."

#: target:code/error.lisp
msgid "Returns the name of the given restart object."
msgstr "Eturnsray ethay amenay ofway ethay ivengay estartray objectway."

#: target:code/error.lisp
msgid ""
"WITH-CONDITION-RESTARTS Condition-Form Restarts-Form Form*\n"
"   Evaluates the Forms in a dynamic environment where the restarts in the "
"list\n"
"   Restarts-Form are associated with the condition returned by Condition-"
"Form.\n"
"   This allows FIND-RESTART, etc., to recognize restarts that are not "
"related\n"
"   to the error currently being debugged.  See also RESTART-CASE."
msgstr ""
"ITHWAY-ONDITIONCAY-ESTARTSRAY Onditioncay-Ormfay Estartsray-Ormfay Ormfay*\n"
"   Evaluatesway ethay Ormsfay inway away ynamicday environmentway erewhay "
"ethay estartsray inway ethay istlay\n"
"   Estartsray-Ormfay areway associatedway ithway ethay onditioncay "
"eturnedray ybay Onditioncay-Orfaym.\n"
"   Isthay allowsway INDFAY-ESTARTRAY, etcway., otay ecognizeray estartsray "
"atthay areway otnay elatedray\n"
"   otay ethay errorway urrentlycay eingbay ebuggedday.  Eesay alsoway "
"ESTARTRAY-ASECAY."

#: target:code/error.lisp
msgid ""
"Executes forms in a dynamic context where the given restart bindings are\n"
"   in effect.  Users probably want to use RESTART-CASE.  When clauses "
"contain\n"
"   the same restart name, FIND-RESTART will find the first such clause."
msgstr ""
"Executesway ormsfay inway away ynamicday ontextcay erewhay ethay ivengay "
"estartray indingsbay areway\n"
"   inway effectway.  Usersway obablypray antway otay useway ESTARTRAY-"
"ASECAY.  Enwhay ausesclay ontaincay\n"
"   ethay amesay estartray amenay, INDFAY-ESTARTRAY illway indfay ethay "
"irstfay uchsay auseclay."

#: target:code/error.lisp
msgid ""
"Unnamed restart does not have a ~\n"
"\t\t\t\t\treport function -- ~S"
msgstr ""
"Unnamedway estartray oesday otnay avehay away ~\n"
"\t\t\t\t\teportray unctionfay -- ~S"

#: target:code/error.lisp
msgid ""
"Returns the first restart named name.  If name is a restart, it is returned\n"
"   if it is currently active.  If no such restart is found, nil is "
"returned.\n"
"   It is an error to supply nil as a name.  If Condition is specified and "
"not\n"
"   NIL, then only restarts associated with that condition (or with no\n"
"   condition) will be returned."
msgstr ""
"Eturnsray ethay irstfay estartray amednay amenay.  Ifway amenay isway away "
"estartray, itway isway eturnedray\n"
"   ifway itway isway urrentlycay activeway.  Ifway onay uchsay estartray "
"isway oundfay, ilnay isway eturnedray.\n"
"   Itway isway anway errorway otay upplysay ilnay asway away amenay.  Ifway "
"Onditioncay isway ecifiedspay andway otnay\n"
"   ILNAY, enthay onlyway estartsray associatedway ithway atthay onditioncay "
"(orway ithway onay\n"
"   onditioncay) illway ebay eturnedray."

#: target:code/error.lisp
msgid ""
"Calls the function associated with the given restart, passing any given\n"
"   arguments.  If the argument restart is not a restart or a currently "
"active\n"
"   non-nil restart name, then a control-error is signalled."
msgstr ""
"Allscay ethay unctionfay associatedway ithway ethay ivengay estartray, "
"assingpay anyway ivengay\n"
"   argumentsway.  Ifway ethay argumentway estartray isway otnay away "
"estartray orway away urrentlycay activeway\n"
"   onnay-ilnay estartray amenay, enthay away ontrolcay-errorway isway "
"ignalledsay."

#: target:code/error.lisp
msgid "Restart ~S is not active."
msgstr "Estartray ~S isway otnay activeway."

#: target:code/error.lisp
msgid ""
"Calls the function associated with the given restart, prompting for any\n"
"   necessary arguments.  If the argument restart is not a restart or a\n"
"   currently active non-nil restart name, then a control-error is signalled."
msgstr ""
"Allscay ethay unctionfay associatedway ithway ethay ivengay estartray, "
"omptingpray orfay anyway\n"
"   ecessarynay argumentsway.  Ifway ethay argumentway estartray isway otnay "
"away estartray orway away\n"
"   urrentlycay activeway onnay-ilnay estartray amenay, enthay away ontrolcay-"
"errorway isway ignalledsay."

#: target:code/error.lisp
msgid ""
"(RESTART-CASE form\n"
"   {(case-name arg-list {keyword value}* body)}*)\n"
"   The form is evaluated in a dynamic context where the clauses have "
"special\n"
"   meanings as points to which control may be transferred (see INVOKE-"
"RESTART).\n"
"   When clauses contain the same case-name, FIND-RESTART will find the "
"first\n"
"   such clause.  If Expression is a call to SIGNAL, ERROR, CERROR or WARN "
"(or\n"
"   macroexpands into such) then the signalled condition will be associated "
"with\n"
"   the new restarts."
msgstr ""
"(ESTARTRAY-ASECAY ormfay\n"
"   {(asecay-amenay argway-istlay {eywordkay aluevay}* odybay)}*)\n"
"   Ethay ormfay isway evaluatedway inway away ynamicday ontextcay erewhay "
"ethay ausesclay avehay ecialspay\n"
"   eaningsmay asway ointspay otay ichwhay ontrolcay aymay ebay ansferredtray "
"(eesay INVOKEWAY-ESTARRAYT).\n"
"   Enwhay ausesclay ontaincay ethay amesay asecay-amenay, INDFAY-ESTARTRAY "
"illway indfay ethay irstfay\n"
"   uchsay auseclay.  Ifway Expressionway isway away allcay otay IGNALSAY, "
"ERRORWAY, ERRORCAY orway ARNWAY (orway\n"
"   acroexpandsmay intoway uchsay) enthay ethay ignalledsay onditioncay "
"illway ebay associatedway ithway\n"
"   ethay ewnay estartsray."

#: target:code/error.lisp
msgid ""
"(WITH-SIMPLE-RESTART (restart-name format-string format-arguments)\n"
"   body)\n"
"   If restart-name is not invoked, then all values returned by forms are\n"
"   returned.  If control is transferred to this restart, it immediately\n"
"   returns the values nil and t."
msgstr ""
"(ITHWAY-IMPLESAY-ESTARTRAY (estartray-amenay ormatfay-ingstray ormatfay-"
"argumentsway)\n"
"   odybay)\n"
"   Ifway estartray-amenay isway otnay invokedway, enthay allway aluesvay "
"eturnedray ybay ormsfay areway\n"
"   eturnedray.  Ifway ontrolcay isway ansferredtray otay isthay estartray, "
"itway immediatelyway\n"
"   eturnsray ethay aluesvay ilnay andway t."

#: target:code/error.lisp
msgid "Condition ~S was signalled."
msgstr "Onditioncay ~S asway ignalledsay."

#: target:code/error.lisp
msgid "No REPORT?  Shouldn't happen!"
msgstr "Onay EPORTRAY?  Ouldnshay't appenhay!"

#: target:code/error.lisp
msgid "Condition slot is not bound: ~S"
msgstr "Onditioncay otslay isway otnay oundbay: ~S"

#: target:code/error.lisp
msgid "Slot ~S of ~S missing."
msgstr "Otslay ~S ofway ~S issingmay."

#: target:code/error.lisp
msgid "Make an instance of a condition object using the specified initargs."
msgstr ""
"Akemay anway instanceway ofway away onditioncay objectway usingway ethay "
"ecifiedspay initargsway."

#: target:code/error.lisp
msgid "~S is not a condition class."
msgstr "~S isway otnay away onditioncay assclay."

#: target:code/error.lisp
msgid "Bad thing for class arg:~%  ~S"
msgstr "Adbay ingthay orfay assclay argway:~%  ~S"

#: target:code/error.lisp
msgid "Condition already names a declaration: ~S."
msgstr "Onditioncay alreadyway amesnay away eclarationday: ~S."

#: target:code/error.lisp
msgid ""
"DEFINE-CONDITION Name (Parent-Type*) (Slot-Spec*) Option*\n"
"   Define NAME as a condition type.  This new type inherits slots and its\n"
"   report function from the specified PARENT-TYPEs.  A slot spec is either\n"
"   a symbol denoting the name of the slot, or a list of the form:\n"
"\n"
"     (slot-name {slot-option value}*)\n"
"\n"
"   where slot-option is one of :READER, :WRITER, :ACCESSOR, :ALLOCATION,\n"
"   :INITARG, :INITFORM, :DOCUMENTATION, and :TYPE.\n"
"\n"
"   Each overall option is of the form\n"
"\n"
"     (option-name {value}*)\n"
"\n"
"   where option-name is one of :DEFAULT-INITARGS, :DOCUMENTATION,\n"
"   and :REPORT.\n"
"\n"
"   The :REPORT option is peculiar to DEFINE-CONDITION.  Its argument is "
"either\n"
"   a string or a two-argument lambda or function name.  If a function, the\n"
"   function is called with the condition and stream to report the "
"condition.\n"
"   If a string, the string is printed.\n"
"\n"
"   Condition types are classes, but (as allowed by ANSI and not as described "
"in\n"
"   CLtL2) are neither STANDARD-OBJECTs nor STRUCTURE-OBJECTs.  WITH-SLOTS "
"and\n"
"   SLOT-VALUE may not be used on condition objects."
msgstr ""
"EFINEDAY-ONDITIONCAY Amenay (Arentpay-Ypetay*) (Otslay-Ecspay*) Optionway*\n"
"   Efineday AMENAY asway away onditioncay ypetay.  Isthay ewnay ypetay "
"inheritsway otsslay andway itsway\n"
"   eportray unctionfay omfray ethay ecifiedspay ARENTPAY-Ypestay.  Away "
"otslay ecspay isway eitherway\n"
"   away ymbolsay enotingday ethay amenay ofway ethay otslay, orway away "
"istlay ofway ethay ormfay:\n"
"\n"
"     (otslay-amenay {otslay-optionway aluevay}*)\n"
"\n"
"   erewhay otslay-optionway isway oneway ofway :EADERRAY, :ITERWRAY, :"
"ACCESSORWAY, :ALLOCATIONWAY,\n"
"   :INITARGWAY, :INITFORMWAY, :OCUMENTATIONDAY, andway :YPETAY.\n"
"\n"
"   Eachway overallway optionway isway ofway ethay ormfay\n"
"\n"
"     (optionway-amenay {aluevay}*)\n"
"\n"
"   erewhay optionway-amenay isway oneway ofway :EFAULTDAY-INITARGSWAY, :"
"OCUMENTATIONDAY,\n"
"   andway :EPORTRAY.\n"
"\n"
"   Ethay :EPORTRAY optionway isway eculiarpay otay EFINEDAY-ONDITIONCAY.  "
"Itsway argumentway isway eitherway\n"
"   away ingstray orway away wotay-argumentway ambdalay orway unctionfay "
"amenay.  Ifway away unctionfay, ethay\n"
"   unctionfay isway alledcay ithway ethay onditioncay andway eamstray otay "
"eportray ethay onditioncay.\n"
"   Ifway away ingstray, ethay ingstray isway intedpray.\n"
"\n"
"   Onditioncay ypestay areway assesclay, utbay (asway allowedway ybay "
"ANSIWAY andway otnay asway escribedday inway\n"
"   Tlclay2) areway eithernay TANDARDSAY-Objectsway ornay UCTURESTRAY-"
"Objectsway.  ITHWAY-OTSSLAY andway\n"
"   OTSLAY-ALUEVAY aymay otnay ebay usedway onway onditioncay objectsway."

#: target:code/error.lisp
msgid "Keyword slot name indicates probable syntax error:~%  ~S"
msgstr ""
"Eywordkay otslay amenay indicatesway obablepray yntaxsay errorway:~%  ~S"

#: target:code/error.lisp
msgid "Malformed condition slot spec:~%  ~S."
msgstr "Alformedmay onditioncay otslay ecspay:~%  ~S."

#: target:code/error.lisp
msgid "More than one :INITFORM in:~%  ~S"
msgstr "Oremay anthay oneway :INITFORMWAY inway:~%  ~S"

#: target:code/error.lisp
msgid "More than one slot :DOCUMENTATION in~%  ~s"
msgstr "Oremay anthay oneway otslay :OCUMENTATIONDAY inway~%  ~s"

#: target:code/error.lisp
msgid "Slot :DOCUMENTATION is not a string in~%  ~s"
msgstr "Otslay :OCUMENTATIONDAY isway otnay away ingstray inway~%  ~s"

#: target:code/error.lisp
msgid "Unknown slot option:~%  ~S"
msgstr "Unknownway otslay optionway:~%  ~S"

#: target:code/error.lisp
msgid "Bad option:~%  ~S"
msgstr "Adbay optionway:~%  ~S"

#: target:compiler/new-assem.lisp target:code/error.lisp
msgid "Unknown option: ~S"
msgstr "Unknownway optionway: ~S"

#: target:code/error.lisp
msgid ""
"(HANDLER-BIND ( {(type handler)}* )  body)\n"
"   Executes body in a dynamic context where the given handler bindings are\n"
"   in effect.  Each handler must take the condition being signalled as an\n"
"   argument.  The bindings are searched first to last in the event of a\n"
"   signalled condition."
msgstr ""
"(ANDLERHAY-INDBAY ( {(ypetay andlerhay)}* )  odybay)\n"
"   Executesway odybay inway away ynamicday ontextcay erewhay ethay ivengay "
"andlerhay indingsbay areway\n"
"   inway effectway.  Eachway andlerhay ustmay aketay ethay onditioncay "
"eingbay ignalledsay asway anway\n"
"   argumentway.  Ethay indingsbay areway earchedsay irstfay otay astlay "
"inway ethay eventway ofway away\n"
"   ignalledsay onditioncay."

#: target:code/error.lisp
msgid "Ill-formed handler bindings."
msgstr "Illway-ormedfay andlerhay indingsbay."

#: target:code/error.lisp
msgid "~&~@<Error in function ~S:  ~3i~:_~?~:>"
msgstr "~&~@<Errorway inway unctionfay ~S:  ~3i~:_~?~:>"

#: target:code/error.lisp
msgid "Control stack overflow"
msgstr "Ontrolcay tacksay overflowway"

#: target:code/error.lisp
msgid "Heap (dynamic space) overflow"
msgstr "Eaphay (ynamicday acespay) overflowway"

#: target:code/error.lisp
msgid "~@<Type-error in ~S:  ~3i~:_~S is not of type ~S~:>"
msgstr "~@<Ypetay-errorway inway ~S:  ~3i~:_~S isway otnay ofway ypetay ~S~:>"

#: target:code/error.lisp
msgid ""
"Layout-invalid error in ~S:~@\n"
"\t\t     Type test of class ~S was passed obsolete instance:~%  ~S"
msgstr ""
"Ayoutlay-invalidway errorway inway ~S:~@\n"
"\t\t     Ypetay esttay ofway assclay ~S asway assedpay obsoleteway "
"instanceway:~%  ~S"

#: target:code/error.lisp
msgid "~@<~S fell through ~S expression.  ~:_Wanted one of ~:S.~:>"
msgstr ""
"~@<~S ellfay roughthay ~S expressionway.  ~:_Antedway oneway ofway ~:S.~:>"

#: target:code/error.lisp
msgid "End-of-File on ~S"
msgstr "Endway-ofway-Ilefay onway ~S"

#: target:code/error.lisp
msgid "~&~@<File-error in function ~S:  ~3i~:_~?~:>"
msgstr "~&~@<Ilefay-errorway inway unctionfay ~S:  ~3i~:_~?~:>"

#: target:code/error.lisp
msgid "Error in ~S:  the variable ~S is unbound."
msgstr "Errorway inway ~S:  ethay ariablevay ~S isway unboundway."

#: target:code/error.lisp
msgid "Error in ~S:  the function ~S is undefined."
msgstr "Errorway inway ~S:  ethay unctionfay ~S isway undefinedway."

#: target:code/error.lisp
msgid ""
"~@<Destructive function ~S called on ~\n"
"                         constant data.~@:>"
msgstr ""
"~@<Estructiveday unctionfay ~S alledcay onway ~\n"
"                         onstantcay ataday.~@:>"

#: target:code/error.lisp
msgid "Arithmetic error ~S signalled."
msgstr "Arithmeticway errorway ~S ignalledsay."

#: target:code/error.lisp
msgid "~%Operation was ~S, operands ~S."
msgstr "~%Operationway asway ~S, operandsway ~S."

#: target:code/error.lisp
msgid ""
"(HANDLER-CASE form\n"
"   { (type ([var]) body) }* )\n"
"   Executes form in a context with handlers established for the condition\n"
"   types.  A peculiar property allows type to be :no-error.  If such a "
"clause\n"
"   occurs, and form returns normally, all its values are passed to this "
"clause\n"
"   as if by MULTIPLE-VALUE-CALL.  The :no-error clause accepts more than "
"one\n"
"   var specification."
msgstr ""
"(ANDLERHAY-ASECAY ormfay\n"
"   { (ypetay ([arvay]) odybay) }* )\n"
"   Executesway ormfay inway away ontextcay ithway andlershay establishedway "
"orfay ethay onditioncay\n"
"   ypestay.  Away eculiarpay opertypray allowsway ypetay otay ebay :onay-"
"errorway.  Ifway uchsay away auseclay\n"
"   occursway, andway ormfay eturnsray ormallynay, allway itsway aluesvay "
"areway assedpay otay isthay auseclay\n"
"   asway ifway ybay ULTIPLEMAY-ALUEVAY-ALLCAY.  Ethay :onay-errorway "
"auseclay acceptsway oremay anthay oneway\n"
"   arvay ecificationspay."

#: target:code/error.lisp
msgid ""
"Executes forms after establishing a handler for all error conditions that\n"
"   returns from this form nil and the condition signalled."
msgstr ""
"Executesway ormsfay afterway establishingway away andlerhay orfay allway "
"errorway onditionscay atthay\n"
"   eturnsray omfray isthay ormfay ilnay andway ethay onditioncay ignalledsay."

#: target:code/error.lisp
msgid "Found an \"abort\" restart that failed to transfer control dynamically."
msgstr ""
"Oundfay anway \"abortway\" estartray atthay ailedfay otay ansfertray "
"ontrolcay ynamicallyday."

#: target:code/error.lisp
msgid ""
"Transfers control to a restart named abort, signalling a control-error if\n"
"   none exists."
msgstr ""
"Ansferstray ontrolcay otay away estartray amednay abortway, ignallingsay "
"away ontrolcay-errorway ifway\n"
"   onenay existsway."

#: target:code/error.lisp
msgid ""
"Transfers control to a restart named muffle-warning, signalling a\n"
"   control-error if none exists."
msgstr ""
"Ansferstray ontrolcay otay away estartray amednay ufflemay-arningway, "
"ignallingsay away\n"
"   ontrolcay-errorway ifway onenay existsway."

#: target:code/error.lisp
msgid ""
"Transfer control to a restart named continue, returning nil if none exists."
msgstr ""
"Ansfertray ontrolcay otay away estartray amednay ontinuecay, eturningray "
"ilnay ifway onenay existsway."

#: target:code/error.lisp
msgid ""
"Transfer control and value to a restart named store-value, returning nil if\n"
"   none exists."
msgstr ""
"Ansfertray ontrolcay andway aluevay otay away estartray amednay toresay-"
"aluevay, eturningray ilnay ifway\n"
"   onenay existsway."

#: target:code/error.lisp
msgid ""
"Transfer control and value to a restart named use-value, returning nil if\n"
"   none exists."
msgstr ""
"Ansfertray ontrolcay andway aluevay otay away estartray amednay useway-"
"aluevay, eturningray ilnay ifway\n"
"   onenay existsway."

#: target:code/typedefs.lisp
msgid "Forms that must happen before top level forms are run."
msgstr ""
"Ormsfay atthay ustmay appenhay eforebay optay evellay ormsfay areway unray."

#: target:code/typedefs.lisp
msgid "Can't cold-load-init other forms along with an eval-when."
msgstr ""
"Ancay't oldcay-oadlay-initway otherway ormsfay alongway ithway anway evalway-"
"enwhay."

#: target:code/typedefs.lisp
msgid "DEFINE-TYPE-METHOD (Class-Name Method-Name+) Lambda-List Form*"
msgstr ""
"EFINEDAY-YPETAY-ETHODMAY (Assclay-Amenay Ethodmay-Amenay+) Ambdalay-Istlay "
"Ormfay*"

#: target:code/typedefs.lisp
msgid "DEFINE-TYPE-CLASS Name [Inherits]"
msgstr "EFINEDAY-YPETAY-ASSCLAY Amenay [Inheritsway]"

#: target:code/class.lisp
msgid "Layout for ~S~@[, Invalid=~S~]"
msgstr "Ayoutlay orfay ~S~@[, Invalidway=~S~]"

#: target:code/class.lisp
msgid "The inclusive upper bound on LAYOUT-HASH values."
msgstr "Ethay inclusiveway upperway oundbay onway AYOUTLAY-ASHHAY aluesvay."

#: target:code/class.lisp
msgid ""
"Layout depth conflict: ~S~%  ~\n"
"\t\t        (~S collides at ~S with ~S)~%"
msgstr ""
"Ayoutlay epthday onflictcay: ~S~%  ~\n"
"\t\t        (~S ollidescay atway ~S ithway ~S)~%"

#: target:code/class.lisp
msgid "Can't use anonymous or undefined class as constant:~%  ~S"
msgstr ""
"Ancay't useway anonymousway orway undefinedway assclay asway onstantcay:~%  "
"~S"

#: target:code/class.lisp
msgid "~:[<anonymous>~;~:*~S~]~@[ (~(~A~))~]"
msgstr "~:[<anonymousway>~;~:*~S~]~@[ (~(~Away~))~]"

#: target:code/class.lisp
msgid ""
"Return the class with the specified Name.  If ERRORP is false, then NIL is\n"
"   returned when no such class exists."
msgstr ""
"Eturnray ethay assclay ithway ethay ecifiedspay Amenay.  Ifway ERRORPWAY "
"isway alsefay, enthay ILNAY isway\n"
"   eturnedray enwhay onay uchsay assclay existsway."

#: target:code/class.lisp
msgid "Class not yet defined:~%  ~S"
msgstr "Assclay otnay etyay efinedday:~%  ~S"

#: target:code/class.lisp
msgid "Illegal to redefine standard type ~S."
msgstr "Illegalway otay edefineray tandardsay ypetay ~S."

#: target:code/class.lisp
msgid "Changing meta-class of ~S from ~S to ~S."
msgstr "Angingchay etamay-assclay ofway ~S omfray ~S otay ~S."

#: target:code/class.lisp
msgid "Redefining DEFTYPE type to be a class: ~S."
msgstr "Edefiningray EFTYPEDAY ypetay otay ebay away assclay: ~S."

#: target:code/class.lisp
msgid ""
"Return the class of the supplied object, which may be any Lisp object, not\n"
"   just a CLOS STANDARD-OBJECT."
msgstr ""
"Eturnray ethay assclay ofway ethay uppliedsay objectway, ichwhay aymay ebay "
"anyway Isplay objectway, otnay\n"
"   ustjay away OSCLAY TANDARDSAY-OBJECTWAY."

#: target:code/class.lisp
msgid "Modifing ~(~A~) class ~S; making it writable."
msgstr "Odifingmay ~(~Away~) assclay ~S; akingmay itway itablewray."

#: target:code/class.lisp
msgid "Subclassing sealed class ~S; unsealing it."
msgstr "Ubclassingsay ealedsay assclay ~S; unsealingway itway."

#: target:code/class.lisp
msgid ""
"Change in superclasses of class ~S:~%  ~\n"
"\t\t  ~A superclasses: ~S~%  ~\n"
"\t\t  ~A superclasses: ~S"
msgstr ""
"Angechay inway uperclassessay ofway assclay ~S:~%  ~\n"
"\t\t  ~Away uperclassessay: ~S~%  ~\n"
"\t\t  ~Away uperclassessay: ~S"

#: target:code/class.lisp
msgid ""
"In class ~S:~%  ~\n"
"\t\t    ~:(~A~) definition of superclass ~S incompatible with~%  ~\n"
"\t\t    ~A definition."
msgstr ""
"Inway assclay ~S:~%  ~\n"
"\t\t    ~:(~Away~) efinitionday ofway uperclasssay ~S incompatibleway ithway~"
"%  ~\n"
"\t\t    ~Away efinitionday."

#: target:code/class.lisp
msgid ""
"Change in instance length of class ~S:~%  ~\n"
"\t\t   ~A length: ~D~%  ~\n"
"\t\t   ~A length: ~D"
msgstr ""
"Angechay inway instanceway engthlay ofway assclay ~S:~%  ~\n"
"\t\t   ~Away engthlay: ~D~%  ~\n"
"\t\t   ~Away engthlay: ~D"

#: target:code/class.lisp
msgid ""
"Change in the inheritance structure of class ~S~%  ~\n"
"\t\t between the ~A definition and the ~A definition."
msgstr ""
"Angechay inway ethay inheritanceway ucturestray ofway assclay ~S~%  ~\n"
"\t\t etweenbay ethay ~Away efinitionday andway ethay ~Away efinitionday."

#: target:code/class.lisp
msgid ""
"Loading a reference to class ~S when the compile~\n"
"\t\t       ~%  time definition was incompatible with the current ~\n"
"\t\t       one."
msgstr ""
"Oadinglay away eferenceray otay assclay ~S enwhay ethay ompilecay~\n"
"\t\t       ~%  imetay efinitionday asway incompatibleway ithway ethay "
"urrentcay ~\n"
"\t\t       oneway."

#: target:code/class.lisp
msgid "Invalidate current definition."
msgstr "Invalidateway urrentcay efinitionday."

#: target:code/class.lisp
msgid "New definition of ~S must be loaded eventually."
msgstr "Ewnay efinitionday ofway ~S ustmay ebay oadedlay eventuallyway."

#: target:code/class.lisp
msgid "Smash current layout, preserving old code."
msgstr "Mashsay urrentcay ayoutlay, eservingpray oldway odecay."

#: target:code/class.lisp
msgid ""
"Any old ~S instances will be in a bad way.~@\n"
"\t\t      I hope you know what you're doing..."
msgstr ""
"Anyway oldway ~S instancesway illway ebay inway away adbay ayway.~@\n"
"\t\t      Iway opehay ouyay nowkay atwhay ouyay'eray oingday..."

#: target:code/class.lisp
msgid "Ignore the incompatibility, leave class alone."
msgstr "Ignoreway ethay incompatibilityway, eavelay assclay aloneway."

#: target:code/class.lisp
msgid ""
"Assuming the current definition of ~S is correct, and~@\n"
"\t\t      that the loaded code doesn't care about the ~\n"
"\t\t      incompatibility."
msgstr ""
"Assumingway ethay urrentcay efinitionday ofway ~S isway orrectcay, andway~@\n"
"\t\t      atthay ethay oadedlay odecay oesnday't arecay aboutway ethay ~\n"
"\t\t      incompatibilityway."

#: target:code/class.lisp
msgid "Topological sort failed due to constraint on ~S."
msgstr "Opologicaltay ortsay ailedfay ueday otay onstraintcay onway ~S."

#: target:code/class.lisp
msgid "Something strange with forward layout for ~S:~%  ~S"
msgstr "Omethingsay angestray ithway orwardfay ayoutlay orfay ~S:~%  ~S"

#: target:code/type.lisp
msgid ""
"*Use-Implementation-Types* is a semi-public flag which determines how\n"
"   restrictive we are in determining type membership.  If two types are the\n"
"   same in the implementation, then we will consider them them the same "
"when\n"
"   this switch is on.  When it is off, we try to be as restrictive as the\n"
"   language allows, allowing us to detect more errors.  Currently, this "
"only\n"
"   affects array types."
msgstr ""
"*Useway-Implementationway-Ypestay* isway away emisay-ublicpay agflay ichwhay "
"eterminesday owhay\n"
"   estrictiveray eway areway inway eterminingday ypetay embershipmay.  Ifway "
"wotay ypestay areway ethay\n"
"   amesay inway ethay implementationway, enthay eway illway onsidercay "
"emthay emthay ethay amesay enwhay\n"
"   isthay witchsay isway onway.  Enwhay itway isway offway, eway ytray otay "
"ebay asway estrictiveray asway ethay\n"
"   anguagelay allowsway, allowingway usway otay etectday oremay errorsway.  "
"Urrentlycay, isthay onlyway\n"
"   affectsway arrayway ypestay."

#: target:code/type.lisp
msgid "Subtypep is illegal on this type:~%  ~S"
msgstr "Ubtypepsay isway illegalway onway isthay ypetay:~%  ~S"

#: target:code/type.lisp
msgid "&Aux in a FUNCTION or VALUES type: ~S."
msgstr "&Auxway inway away UNCTIONFAY orway ALUESVAY ypetay: ~S."

#: target:code/type.lisp
msgid "Keyword type description is not a two-list: ~S."
msgstr "Eywordkay ypetay escriptionday isway otnay away wotay-istlay: ~S."

#: target:code/type.lisp
msgid "Repeated keyword ~S in lambda list: ~S."
msgstr "Epeatedray eywordkay ~S inway ambdalay istlay: ~S."

#: target:code/type.lisp
msgid "&KEY or &ALLOW-OTHER-KEYS in values type: ~s"
msgstr "&EYKAY orway &ALLOWWAY-OTHERWAY-EYSKAY inway aluesvay ypetay: ~s"

#: target:code/type.lisp
msgid ""
"The maximum length of a union of integer types before we take a\n"
"  short cut and return a simpler union."
msgstr ""
"Ethay aximummay engthlay ofway away unionway ofway integerway ypestay "
"eforebay eway aketay away\n"
"  ortshay utcay andway eturnray away implersay unionway."

#: target:code/type.lisp
msgid "Bad thing to be a type specifier: ~S."
msgstr "Adbay ingthay otay ebay away ypetay ecifierspay: ~S."

#: target:code/type.lisp
msgid "VALUES type illegal in this context:~%  ~S"
msgstr "ALUESVAY ypetay illegalway inway isthay ontextcay:~%  ~S"

#: target:code/type.lisp
msgid "The SATISFIES predicate name is not a symbol: ~S"
msgstr "Ethay ATISFIESSAY edicatepray amenay isway otnay away ymbolsay: ~S"

#: target:code/type.lisp
msgid "Weird CONS type ~S"
msgstr "Eirdway ONSCAY ypetay ~S"

#: target:code/type.lisp
msgid "The component type for COMPLEX is not numeric: ~S"
msgstr "Ethay omponentcay ypetay orfay OMPLEXCAY isway otnay umericnay: ~S"

#: target:code/type.lisp
msgid "The component type for COMPLEX is not real: ~S"
msgstr "Ethay omponentcay ypetay orfay OMPLEXCAY isway otnay ealray: ~S"

#: target:code/type.lisp
msgid ""
"The component type for COMPLEX (EQL X) ~\n"
"                                    is complex: ~S"
msgstr ""
"Ethay omponentcay ypetay orfay OMPLEXCAY (EQLWAY X) ~\n"
"                                    isway omplexcay: ~S"

#: target:code/type.lisp
msgid ""
"~@<(known bug #145): The type ~S is too hairy to be \n"
"                         used for a COMPLEX component.~:@>"
msgstr ""
"~@<(nownkay ugbay #145): Ethay ypetay ~S isway ootay airyhay otay ebay \n"
"                         usedway orfay away OMPLEXCAY omponentcay.~:@>"

#: target:code/type.lisp
msgid "Bound is not *, a ~A or a list of a ~A: ~S"
msgstr ""
"Oundbay isway otnay *, away ~Away orway away istlay ofway away ~Away: ~S"

#: target:code/type.lisp
msgid "Bad N specified for MOD type specifier: ~S."
msgstr "Adbay N ecifiedspay orfay ODMAY ypetay ecifierspay: ~S."

#: target:code/type.lisp
msgid "Bad size specified for SIGNED-BYTE type specifier: ~S."
msgstr "Adbay izesay ecifiedspay orfay IGNEDSAY-YTEBAY ypetay ecifierspay: ~S."

#: target:code/type.lisp
msgid "Bad size specified for UNSIGNED-BYTE type specifier: ~S."
msgstr ""
"Adbay izesay ecifiedspay orfay UNSIGNEDWAY-YTEBAY ypetay ecifierspay: ~S."

#: target:code/type.lisp
msgid "Bad float format: ~S."
msgstr "Adbay oatflay ormatfay: ~S."

#: target:code/type.lisp
msgid "Arrays can't have a negative number of dimensions: ~D."
msgstr ""
"Arraysway ancay't avehay away egativenay umbernay ofway imensionsday: ~D."

#: target:code/type.lisp
msgid "Array type has too many dimensions: ~S."
msgstr "Arrayway ypetay ashay ootay anymay imensionsday: ~S."

#: target:code/type.lisp
msgid "Bad dimension in array type: ~S."
msgstr "Adbay imensionday inway arrayway ypetay: ~S."

#: target:code/type.lisp
msgid "Array dimensions is not a list, integer or *:~%  ~S"
msgstr ""
"Arrayway imensionsday isway otnay away istlay, integerway orway *:~%  ~S"

#: target:code/type.lisp
msgid "Type of characters that aren't base-char's.  None in CMU CL."
msgstr ""
"Ypetay ofway aracterschay atthay arenway't asebay-archay's.  Onenay inway "
"MUCAY CLAY."

#: target:code/type.lisp
msgid "Type corresponding to the charaters required by the standard."
msgstr ""
"Ypetay orrespondingcay otay ethay araterschay equiredray ybay ethay "
"tandardsay."

#: target:code/type.lisp
msgid "Type for any keyword symbol."
msgstr "Ypetay orfay anyway eywordkay ymbolsay."

#: target:compiler/generic/vm-type.lisp
msgid "~S isn't an integer type?"
msgstr "~S isnway't anway integerway ypetay?"

#: target:code/pred.lisp
msgid "Return the type of OBJECT."
msgstr "Eturnray ethay ypetay ofway OBJECTWAY."

#: target:code/pred.lisp
msgid ""
"Return the element type that will actually be used to implement an array\n"
"   with the specifier :ELEMENT-TYPE Spec."
msgstr ""
"Eturnray ethay elementway ypetay atthay illway actuallyway ebay usedway otay "
"implementway anway arrayway\n"
"   ithway ethay ecifierspay :ELEMENTWAY-YPETAY Ecspay."

#: target:code/pred.lisp
msgid ""
"Return two values indicating the relationship between type1 and type2:\n"
"  T and T: type1 definitely is a subtype of type2.\n"
"  NIL and T: type1 definitely is not a subtype of type2.\n"
"  NIL and NIL: who knows?"
msgstr ""
"Eturnray wotay aluesvay indicatingway ethay elationshipray etweenbay ypetay1 "
"andway ypetay2:\n"
"  T andway T: ypetay1 efinitelyday isway away ubtypesay ofway ypetay2.\n"
"  ILNAY andway T: ypetay1 efinitelyday isway otnay away ubtypesay ofway "
"ypetay2.\n"
"  ILNAY andway ILNAY: owhay nowskay?"

#: target:code/pred.lisp
msgid "Return T iff OBJECT is of type TYPE."
msgstr "Eturnray T iffway OBJECTWAY isway ofway ypetay YPETAY."

#: target:code/pred.lisp
msgid "~@<unknown element type in array type: ~2I~_~S~:>"
msgstr "~@<unknownway elementway ypetay inway arrayway ypetay: ~2Iway~_~S~:>"

#: target:code/pred.lisp
msgid "Unknown type specifier: ~S"
msgstr "Unknownway ypetay ecifierspay: ~S"

#: target:code/pred.lisp
msgid "Invalid type specifier: ~S"
msgstr "Invalidway ypetay ecifierspay: ~S"

#: target:code/pred.lisp
msgid "Function types are not a legal argument to TYPEP:~%  ~S"
msgstr ""
"Unctionfay ypestay areway otnay away egallay argumentway otay YPEPTAY:~%  ~S"

#: target:code/pred.lisp
msgid "Class has not yet been defined: ~S"
msgstr "Assclay ashay otnay etyay eenbay efinedday: ~S"

#: target:code/pred.lisp
msgid "TYPEP on obsolete object (was class ~S)."
msgstr "YPEPTAY onway obsoleteway objectway (asway assclay ~S)."

#: target:code/pred.lisp
msgid "Class is currently invalid: ~S"
msgstr "Assclay isway urrentlycay invalidway: ~S"

#: target:code/pred.lisp
msgid "Return T if OBJ1 and OBJ2 are the same object, otherwise NIL."
msgstr ""
"Eturnray T ifway OBJWAY1 andway OBJWAY2 areway ethay amesay objectway, "
"otherwiseway ILNAY."

#: target:code/pred.lisp
msgid ""
"Returns T if X and Y are EQL or if they are structured components\n"
"  whose elements are EQUAL.  Strings and bit-vectors are EQUAL if they\n"
"  are the same length and have indentical components.  Other arrays must be\n"
"  EQ to be EQUAL."
msgstr ""
"Eturnsray T ifway X andway Y areway EQLWAY orway ifway eythay areway "
"ucturedstray omponentscay\n"
"  osewhay elementsway areway EQUALWAY.  Ingsstray andway itbay-ectorsvay "
"areway EQUALWAY ifway eythay\n"
"  areway ethay amesay engthlay andway avehay indenticalway omponentscay.  "
"Otherway arraysway ustmay ebay\n"
"  EQWAY otay ebay EQUALWAY."

#: target:code/pred.lisp
msgid ""
"Just like EQUAL, but more liberal in several respects.\n"
"  Numbers may be of different types, as long as the values are identical\n"
"  after coercion.  Characters may differ in alphabetic case.  Vectors and\n"
"  arrays must have identical dimensions and EQUALP elements, but may differ\n"
"  in their type restriction."
msgstr ""
"Ustjay ikelay EQUALWAY, utbay oremay iberallay inway everalsay espectsray.\n"
"  Umbersnay aymay ebay ofway ifferentday ypestay, asway onglay asway ethay "
"aluesvay areway identicalway\n"
"  afterway oercioncay.  Aracterschay aymay ifferday inway alphabeticway "
"asecay.  Ectorsvay andway\n"
"  arraysway ustmay avehay identicalway imensionsday andway EQUALPWAY "
"elementsway, utbay aymay ifferday\n"
"  inway eirthay ypetay estrictionray."

#: target:code/alieneval.lisp
msgid "No alien type class ~S"
msgstr "Onay alienway ypetay assclay ~S"

#: target:code/alieneval.lisp
msgid "No method ~S"
msgstr "Onay ethodmay ~S"

#: target:compiler/x86/c-call.lisp target:code/alieneval.lisp
msgid "Method ~S not defined for ~S"
msgstr "Ethodmay ~S otnay efinedday orfay ~S"

#: target:code/alieneval.lisp
msgid ""
"Parse the list structure TYPE as an alien type specifier and return\n"
"   the resultant alien-type structure."
msgstr ""
"Arsepay ethay istlay ucturestray YPETAY asway anway alienway ypetay "
"ecifierspay andway eturnray\n"
"   ethay esultantray alienway-ypetay ucturestray."

#: target:code/alieneval.lisp
msgid "Unknown alien type: ~S"
msgstr "Unknownway alienway ypetay: ~S"

#: target:code/alieneval.lisp
msgid "No translator for primitive alien type ~S?"
msgstr "Onay anslatortray orfay imitivepray alienway ypetay ~S?"

#: target:code/alieneval.lisp
msgid "Definition missing for alien type ~S?"
msgstr "Efinitionday issingmay orfay alienway ypetay ~S?"

#: target:code/alieneval.lisp
msgid "Attempt to multiple define ~A ~S."
msgstr "Attemptway otay ultiplemay efineday ~Away ~S."

#: target:code/alieneval.lisp
msgid "Attempt to shadow definition of ~A ~S."
msgstr "Attemptway otay adowshay efinitionday ofway ~Away ~S."

#: target:code/alieneval.lisp
msgid ""
"Convert the alien-type structure TYPE back into a list specification of\n"
"   the type."
msgstr ""
"Onvertcay ethay alienway-ypetay ucturestray YPETAY ackbay intoway away "
"istlay ecificationspay ofway\n"
"   ethay ypetay."

#: target:code/alieneval.lisp
msgid ""
"Define the alien type NAME to be equivalent to TYPE.  Name may be NIL for\n"
"   STRUCT and UNION types, in which case the name is taken from the type\n"
"   specifier."
msgstr ""
"Efineday ethay alienway ypetay AMENAY otay ebay equivalentway otay YPETAY.  "
"Amenay aymay ebay ILNAY orfay\n"
"   UCTSTRAY andway UNIONWAY ypestay, inway ichwhay asecay ethay amenay isway "
"akentay omfray ethay ypetay\n"
"   ecifierspay."

#: target:code/alieneval.lisp
msgid "Redefining ~A ~S to be:~%  ~S,~%was:~%  ~S"
msgstr "Edefiningray ~Away ~S otay ebay:~%  ~S,~%asway:~%  ~S"

#: target:code/alieneval.lisp
msgid "~S is a built-in alien type."
msgstr "~S isway away uiltbay-inway alienway ypetay."

#: target:code/alieneval.lisp
msgid "Redefining ~S to be:~%  ~S,~%was~%  ~S"
msgstr "Edefiningray ~S otay ebay:~%  ~S,~%asway~%  ~S"

#: target:code/alieneval.lisp
msgid "Return T iff TYPE1 and TYPE2 describe equivalent alien types."
msgstr ""
"Eturnray T iffway YPETAY1 andway YPETAY2 escribeday equivalentway alienway "
"ypestay."

#: target:code/alieneval.lisp
msgid ""
"Return T iff the alien type TYPE1 is a subtype of TYPE2.  Currently, the\n"
"   only supported subtype relationships are that any pointer type is a\n"
"   subtype of (* t), and any array type's first dimension will match \n"
"   (array <eltype> nil ...).  Otherwise, the two types have to be\n"
"   ALIEN-TYPE-=."
msgstr ""
"Eturnray T iffway ethay alienway ypetay YPETAY1 isway away ubtypesay ofway "
"YPETAY2.  Urrentlycay, ethay\n"
"   onlyway upportedsay ubtypesay elationshipsray areway atthay anyway "
"ointerpay ypetay isway away\n"
"   ubtypesay ofway (* t), andway anyway arrayway ypetay's irstfay "
"imensionday illway atchmay \n"
"   (arrayway <eltypeway> ilnay ...).  Otherwiseway, ethay wotay ypestay "
"avehay otay ebay\n"
"   ALIENWAY-YPETAY-=."

#: target:code/alieneval.lisp
msgid "Return T iff OBJECT is an alien of type TYPE."
msgstr "Eturnray T iffway OBJECTWAY isway anway alienway ofway ypetay YPETAY."

#: target:code/alieneval.lisp
msgid "Cannot represent ~S typed aliens."
msgstr "Annotcay epresentray ~S ypedtay aliensway."

#: target:code/alieneval.lisp
msgid "Cannot pass aliens of type ~S as arguments to call-out"
msgstr ""
"Annotcay asspay aliensway ofway ypetay ~S asway argumentsway otay allcay-"
"outway"

#: target:code/alieneval.lisp
msgid "Cannot return aliens of type ~S from call-out"
msgstr "Annotcay eturnray aliensway ofway ypetay ~S omfray allcay-outway"

#: target:code/alieneval.lisp
msgid "Cannot extract ~D bit integers."
msgstr "Annotcay extractway ~D itbay integersway."

#: target:code/alieneval.lisp
msgid "Redefining alien enum ~S"
msgstr "Edefiningray alienway enumway ~S"

#: target:code/alieneval.lisp
msgid "Unknown enum type: ~S"
msgstr "Unknownway enumway ypetay: ~S"

#: target:code/alieneval.lisp
msgid "Empty enum type: ~S"
msgstr "Emptyway enumway ypetay: ~S"

#: target:code/alieneval.lisp
msgid "An enumeration must contain at least one element."
msgstr "Anway enumerationway ustmay ontaincay atway eastlay oneway elementway."

#: target:code/alieneval.lisp
msgid "Enumeration element ~S is not a keyword."
msgstr "Enumerationway elementway ~S isway otnay away eywordkay."

#: target:code/alieneval.lisp
msgid "Element value ~S is not an integer."
msgstr "Elementway aluevay ~S isway otnay anway integerway."

#: target:code/alieneval.lisp
msgid "Element value ~S used more than once."
msgstr "Elementway aluevay ~S usedway oremay anthay onceway."

#: target:code/alieneval.lisp
msgid "Enumeration element ~S used more than once."
msgstr "Enumerationway elementway ~S usedway oremay anthay onceway."

#: target:code/alieneval.lisp
msgid "Can't represent enums needing more than 32 bits."
msgstr "Ancay't epresentray enumsway eedingnay oremay anthay 32 itsbay."

#: target:code/alieneval.lisp
msgid "Cannot deposit aliens of type ~S (unknown size)."
msgstr "Annotcay epositday aliensway ofway ypetay ~S (unknownway izesay)."

#: target:code/alieneval.lisp
msgid "First dimension is not a non-negative fixnum or NIL: ~S"
msgstr ""
"Irstfay imensionday isway otnay away onnay-egativenay ixnumfay orway ILNAY: "
"~S"

#: target:code/alieneval.lisp
msgid "Dimension is not a non-negative fixnum: ~S"
msgstr "Imensionday isway otnay away onnay-egativenay ixnumfay: ~S"

#: target:pcl/simple-streams/socket.lisp target:pcl/simple-streams/file.lisp
#: target:pcl/simple-streams/internal.lisp
#: target:pcl/simple-streams/classes.lisp target:pcl/env.lisp
#: target:pcl/fixup.lisp target:pcl/methods.lisp target:pcl/cpl.lisp
#: target:pcl/seal.lisp target:pcl/dfun.lisp
#: target:pcl/method-slot-access-optimization.lisp target:pcl/boot.lisp
#: target:pcl/dlisp.lisp target:pcl/cache.lisp target:pcl/defclass.lisp
#: target:pcl/low.lisp target:compiler/disassem.lisp target:code/pathname.lisp
#: target:code/format.lisp target:code/pprint-loop.lisp
#: target:code/pprint.lisp target:code/bignum.lisp target:code/alieneval.lisp
msgid "Required argument missing"
msgstr "Equiredray argumentway issingmay"

#: target:compiler/aliencomp.lisp target:code/alieneval.lisp
msgid "Unknown size: ~S"
msgstr "Unknownway izesay: ~S"

#: target:code/alieneval.lisp
msgid "Unknown alignment: ~S"
msgstr "Unknownway alignmentway: ~S"

#: target:code/alieneval.lisp
msgid "A hash table used to detect cycles while comparing record types."
msgstr ""
"Away ashhay abletay usedway otay etectday yclescay ilewhay omparingcay "
"ecordray ypestay."

#: target:code/alieneval.lisp
msgid ""
"Test if TYPE1 and TYPE2 are in the *MATCH-HISTORY*.\n"
"If so return true; otherwise call ALTERNATIVE."
msgstr ""
"Esttay ifway YPETAY1 andway YPETAY2 areway inway ethay *ATCHMAY-ISTORYHAY*.\n"
"Ifway osay eturnray uetray; otherwiseway allcay ALTERNATIVEWAY."

#: target:code/alieneval.lisp
msgid "Cannot use values types here."
msgstr "Annotcay useway aluesvay ypestay erehay."

#: target:code/alieneval.lisp
msgid "Badly formed alien name."
msgstr "Adlybay ormedfay alienway amenay."

#: target:code/alieneval.lisp
msgid ""
"Define NAME as an external alien variable of type TYPE.  NAME should be\n"
"   a list of a string holding the alien name and a symbol to use as the "
"Lisp\n"
"   name.  If NAME is just a symbol or string, then the other name is "
"guessed\n"
"   from the one supplied."
msgstr ""
"Efineday AMENAY asway anway externalway alienway ariablevay ofway ypetay "
"YPETAY.  AMENAY ouldshay ebay\n"
"   away istlay ofway away ingstray oldinghay ethay alienway amenay andway "
"away ymbolsay otay useway asway ethay Isplay\n"
"   amenay.  Ifway AMENAY isway ustjay away ymbolsay orway ingstray, enthay "
"ethay otherway amenay isway uessedgay\n"
"   omfray ethay oneway uppliedsay."

#: target:code/alieneval.lisp
msgid ""
"Access the alien variable named NAME, assuming it is of type TYPE.  This\n"
"   is SETFable."
msgstr ""
"Accessway ethay alienway ariablevay amednay AMENAY, assumingway itway isway "
"ofway ypetay YPETAY.  Isthay\n"
"   isway Etfablesay."

#: target:code/alieneval.lisp
msgid ""
"Establish some local alien variables.  Each BINDING is of the form:\n"
"     VAR TYPE [ ALLOCATION ] [ INITIAL-VALUE | EXTERNAL-NAME ]\n"
"   ALLOCATION should be one of:\n"
"     :LOCAL (the default)\n"
"       The alien is allocated on the stack, and has dynamic extent.\n"
"     :STATIC\n"
"       The alien is allocated on the heap, and has infinate extent.  The "
"alien\n"
"       is allocated at load time, so the same piece of memory is used each "
"time\n"
"       this form executes.\n"
"     :EXTERN\n"
"       No alien is allocated, but VAR is established as a local name for\n"
"       the external alien given by EXTERNAL-NAME."
msgstr ""
"Establishway omesay ocallay alienway ariablesvay.  Eachway INDINGBAY isway "
"ofway ethay ormfay:\n"
"     ARVAY YPETAY [ ALLOCATIONWAY ] [ INITIALWAY-ALUEVAY | EXTERNALWAY-"
"AMENAY ]\n"
"   ALLOCATIONWAY ouldshay ebay oneway ofway:\n"
"     :OCALLAY (ethay efaultday)\n"
"       Ethay alienway isway allocatedway onway ethay tacksay, andway ashay "
"ynamicday extentway.\n"
"     :TATICSAY\n"
"       Ethay alienway isway allocatedway onway ethay eaphay, andway ashay "
"infinateway extentway.  Ethay alienway\n"
"       isway allocatedway atway oadlay imetay, osay ethay amesay iecepay "
"ofway emorymay isway usedway eachway imetay\n"
"       isthay ormfay executesway.\n"
"     :EXTERNWAY\n"
"       Onay alienway isway allocatedway, utbay ARVAY isway establishedway "
"asway away ocallay amenay orfay\n"
"       ethay externalway alienway ivengay ybay EXTERNALWAY-AMENAY."

#: target:code/alieneval.lisp
msgid ""
"Return true if X (which must be an Alien pointer) is null, false otherwise."
msgstr ""
"Eturnray uetray ifway X (ichwhay ustmay ebay anway Alienway ointerpay) isway "
"ullnay, alsefay otherwiseway."

#: target:code/alieneval.lisp
msgid ""
"Convert the System-Area-Pointer SAP to an Alien of the specified Type (not\n"
"   evaluated.)  Type must be pointer-like."
msgstr ""
"Onvertcay ethay Ystemsay-Areaway-Ointerpay APSAY otay anway Alienway ofway "
"ethay ecifiedspay Ypetay (otnay\n"
"   evaluatedway.)  Ypetay ustmay ebay ointerpay-ikelay."

#: target:code/alieneval.lisp
msgid "Cannot make aliens of type ~S out of SAPs"
msgstr "Annotcay akemay aliensway ofway ypetay ~S outway ofway Apssay"

#: target:code/alieneval.lisp
msgid "Return a System-Area-Pointer pointing to Alien's data."
msgstr ""
"Eturnray away Ystemsay-Areaway-Ointerpay ointingpay otay Alienway's ataday."

#: target:code/alieneval.lisp
msgid ""
"Allocate an alien of type TYPE and return an alien pointer to it.  If SIZE\n"
"   is supplied, how it is interpreted depends on TYPE.  If TYPE is an array\n"
"   type, SIZE is used as the first dimension for the allocated array.  If "
"TYPE\n"
"   is not an array, then SIZE is the number of elements to allocate.  The\n"
"   memory is allocated using ``malloc'', so it can be passed to foreign\n"
"   functions which use ``free''."
msgstr ""
"Allocateway anway alienway ofway ypetay YPETAY andway eturnray anway "
"alienway ointerpay otay itway.  Ifway IZESAY\n"
"   isway uppliedsay, owhay itway isway interpretedway ependsday onway "
"YPETAY.  Ifway YPETAY isway anway arrayway\n"
"   ypetay, IZESAY isway usedway asway ethay irstfay imensionday orfay ethay "
"allocatedway arrayway.  Ifway YPETAY\n"
"   isway otnay anway arrayway, enthay IZESAY isway ethay umbernay ofway "
"elementsway otay allocateway.  Ethay\n"
"   emorymay isway allocatedway usingway ``allocmay'', osay itway ancay ebay "
"assedpay otay oreignfay\n"
"   unctionsfay ichwhay useway ``eefray''."

#: target:code/alieneval.lisp
msgid "Cannot override the size of zero-dimensional arrays."
msgstr ""
"Annotcay overrideway ethay izesay ofway erozay-imensionalday arraysway."

#: target:code/alieneval.lisp
msgid "Size of ~S unknown."
msgstr "Izesay ofway ~S unknownway."

#: target:code/alieneval.lisp
msgid "Alignment of ~S unknown."
msgstr "Alignmentway ofway ~S unknownway."

#: target:code/alieneval.lisp
msgid ""
"Dispose of the storage pointed to by ALIEN.  ALIEN must have been allocated\n"
"   by MAKE-ALIEN or ``malloc''."
msgstr ""
"Isposeday ofway ethay toragesay ointedpay otay ybay ALIENWAY.  ALIENWAY "
"ustmay avehay eenbay allocatedway\n"
"   ybay AKEMAY-ALIENWAY orway ``allocmay''."

#: target:code/alieneval.lisp
msgid "No slot named ~S in ~S"
msgstr "Onay otslay amednay ~S inway ~S"

#: target:code/alieneval.lisp
msgid ""
"Extract SLOT from the Alien STRUCT or UNION ALIEN.  May be set with SETF."
msgstr ""
"Extractway OTSLAY omfray ethay Alienway UCTSTRAY orway UNIONWAY ALIENWAY.  "
"Aymay ebay etsay ithway ETFSAY."

#: target:code/alieneval.lisp
msgid "Too many indices when derefing ~S: ~D"
msgstr "Ootay anymay indicesway enwhay erefingday ~S: ~D"

#: target:code/alieneval.lisp
msgid "Incorrect number of indices when derefing ~S: ~D"
msgstr "Incorrectway umbernay ofway indicesway enwhay erefingday ~S: ~D"

#: target:code/alieneval.lisp
msgid ""
"De-reference an Alien pointer or array.  If an array, the indices are used\n"
"   as the indices of the array element to access.  If a pointer, one index "
"can\n"
"   optionally be specified, giving the equivalent of C pointer arithmetic."
msgstr ""
"Eday-eferenceray anway Alienway ointerpay orway arrayway.  Ifway anway "
"arrayway, ethay indicesway areway usedway\n"
"   asway ethay indicesway ofway ethay arrayway elementway otay accessway.  "
"Ifway away ointerpay, oneway indexway ancay\n"
"   optionallyway ebay ecifiedspay, ivinggay ethay equivalentway ofway C "
"ointerpay arithmeticway."

#: target:code/alieneval.lisp
msgid "Something is wrong; local-alien-info not found: ~S"
msgstr "Omethingsay isway ongwray; ocallay-alienway-infoway otnay oundfay: ~S"

#: target:code/alieneval.lisp
msgid "~S isn't forced to memory.  Something went wrong."
msgstr "~S isnway't orcedfay otay emorymay.  Omethingsay entway ongwray."

#: target:code/alieneval.lisp
msgid ""
"Return an Alien pointer to the data addressed by Expr, which must be a call\n"
"   to SLOT or DEREF, or a reference to an Alien variable."
msgstr ""
"Eturnray anway Alienway ointerpay otay ethay ataday addressedway ybay "
"Exprway, ichwhay ustmay ebay away allcay\n"
"   otay OTSLAY orway EREFDAY, orway away eferenceray otay anway Alienway "
"ariablevay."

#: target:code/alieneval.lisp
msgid "Something is wrong, local-alien-info not found: ~S"
msgstr "Omethingsay isway ongwray, ocallay-alienway-infoway otnay oundfay: ~S"

#: target:code/alieneval.lisp
msgid "~S is not a valid L-value"
msgstr "~S isway otnay away alidvay L-aluevay"

#: target:code/alieneval.lisp
msgid ""
"Convert ALIEN to an Alien of the specified TYPE (not evaluated).  Both "
"types\n"
"   must be Alien array, pointer or function types."
msgstr ""
"Onvertcay ALIENWAY otay anway Alienway ofway ethay ecifiedspay YPETAY (otnay "
"evaluatedway).  Othbay ypestay\n"
"   ustmay ebay Alienway arrayway, ointerpay orway unctionfay ypestay."

#: target:code/alieneval.lisp
msgid "~S cannot be cast."
msgstr "~S annotcay ebay astcay."

#: target:compiler/aliencomp.lisp target:code/alieneval.lisp
msgid "Cannot cast to alien type ~S"
msgstr "Annotcay astcay otay alienway ypetay ~S"

#: target:code/alieneval.lisp
msgid ""
"Return the size of the alien type TYPE.  UNITS specifies the units to\n"
"   use and can be either :BITS, :BYTES, or :WORDS."
msgstr ""
"Eturnray ethay izesay ofway ethay alienway ypetay YPETAY.  UNITSWAY "
"ecifiesspay ethay unitsway otay\n"
"   useway andway ancay ebay eitherway :ITSBAY, :YTESBAY, orway :ORDSWAY."

#: target:code/alieneval.lisp
msgid "Unknown size for alien type ~S."
msgstr "Unknownway izesay orfay alienway ypetay ~S."

#: target:code/alieneval.lisp
msgid ""
"Call the foreign function ALIEN with the specified arguments.  ALIEN's\n"
"   type specifies the argument and result types."
msgstr ""
"Allcay ethay oreignfay unctionfay ALIENWAY ithway ethay ecifiedspay "
"argumentsway.  ALIENWAY's\n"
"   ypetay ecifiesspay ethay argumentway andway esultray ypestay."

#: target:code/alieneval.lisp
msgid "Wrong number of arguments for ~S~%Expected ~D, got ~D."
msgstr ""
"Ongwray umbernay ofway argumentsway orfay ~S~%Expectedway ~D, otgay ~D."

#: target:code/alieneval.lisp
msgid "~S is not an alien function."
msgstr "~S isway otnay anway alienway unctionfay."

#: target:code/alieneval.lisp
msgid ""
"Def-Alien-Routine Name Result-Type\n"
"                    {(Arg-Name Arg-Type [Style])}*\n"
"\n"
"  Define a foreign interface function for the routine with the specified "
"Name,\n"
"  which may be either a string, symbol or list of the form (string symbol).\n"
"  Return-Type is the Alien type for the function return value.  VOID may be\n"
"  used to specify a function with no result.\n"
"\n"
"  The remaining forms specify individual arguments that are passed to the\n"
"  routine.  Arg-Name is a symbol that names the argument, primarily for\n"
"  documentation.  Arg-Type is the C-Type of the argument.  Style specifies "
"the\n"
"  way that the argument is passed.\n"
"\n"
"  :IN\n"
"        An :In argument is simply passed by value.  The value to be passed "
"is\n"
"        obtained from argument(s) to the interface function.  No values are\n"
"        returned for :In arguments.  This is the default mode.\n"
"\n"
"  :OUT\n"
"        The specified argument type must be a pointer to a fixed sized "
"object.\n"
"        A pointer to a preallocated object is passed to the routine, and "
"the\n"
"        the object is accessed on return, with the value being returned "
"from\n"
"        the interface function.  :OUT and :IN-OUT cannot be used with "
"pointers\n"
"        to arrays, records or functions.\n"
"\n"
"  :COPY\n"
"        Similar to :IN, except that the argument values are stored in on\n"
"        the stack, and a pointer to the object is passed instead of\n"
"        the values themselves.\n"
"\n"
"  :IN-OUT\n"
"        A combination of :OUT and :COPY.  A pointer to the argument is "
"passed,\n"
"        with the object being initialized from the supplied argument and\n"
"        the return value being determined by accessing the object on return."
msgstr ""
"Efday-Alienway-Outineray Amenay Esultray-Ypetay\n"
"                    {(Argway-Amenay Argway-Ypetay [Tylesay])}*\n"
"\n"
"  Efineday away oreignfay interfaceway unctionfay orfay ethay outineray "
"ithway ethay ecifiedspay Amenay,\n"
"  ichwhay aymay ebay eitherway away ingstray, ymbolsay orway istlay ofway "
"ethay ormfay (ingstray ymbolsay).\n"
"  Eturnray-Ypetay isway ethay Alienway ypetay orfay ethay unctionfay "
"eturnray aluevay.  OIDVAY aymay ebay\n"
"  usedway otay ecifyspay away unctionfay ithway onay esultray.\n"
"\n"
"  Ethay emainingray ormsfay ecifyspay individualway argumentsway atthay "
"areway assedpay otay ethay\n"
"  outineray.  Argway-Amenay isway away ymbolsay atthay amesnay ethay "
"argumentway, imarilypray orfay\n"
"  ocumentationday.  Argway-Ypetay isway ethay C-Ypetay ofway ethay "
"argumentway.  Tylesay ecifiesspay ethay\n"
"  ayway atthay ethay argumentway isway assedpay.\n"
"\n"
"  :INWAY\n"
"        Anway :Inway argumentway isway implysay assedpay ybay aluevay.  "
"Ethay aluevay otay ebay assedpay isway\n"
"        obtainedway omfray argumentway(s) otay ethay interfaceway "
"unctionfay.  Onay aluesvay areway\n"
"        eturnedray orfay :Inway argumentsway.  Isthay isway ethay efaultday "
"odemay.\n"
"\n"
"  :OUTWAY\n"
"        Ethay ecifiedspay argumentway ypetay ustmay ebay away ointerpay otay "
"away ixedfay izedsay objectway.\n"
"        Away ointerpay otay away eallocatedpray objectway isway assedpay "
"otay ethay outineray, andway ethay\n"
"        ethay objectway isway accessedway onway eturnray, ithway ethay "
"aluevay eingbay eturnedray omfray\n"
"        ethay interfaceway unctionfay.  :OUTWAY andway :INWAY-OUTWAY "
"annotcay ebay usedway ithway ointerspay\n"
"        otay arraysway, ecordsray orway unctionsfay.\n"
"\n"
"  :OPYCAY\n"
"        Imilarsay otay :INWAY, exceptway atthay ethay argumentway aluesvay "
"areway toredsay inway onway\n"
"        ethay tacksay, andway away ointerpay otay ethay objectway isway "
"assedpay insteadway ofway\n"
"        ethay aluesvay emselvesthay.\n"
"\n"
"  :INWAY-OUTWAY\n"
"        Away ombinationcay ofway :OUTWAY andway :OPYCAY.  Away ointerpay "
"otay ethay argumentway isway assedpay,\n"
"        ithway ethay objectway eingbay initializedway omfray ethay "
"uppliedsay argumentway andway\n"
"        ethay eturnray aluevay eingbay eterminedday ybay accessingway ethay "
"objectway onway eturnray."

#: target:code/alieneval.lisp
msgid "Bogus argument style ~S in ~S."
msgstr "Ogusbay argumentway tylesay ~S inway ~S."

#: target:code/alieneval.lisp
msgid "Can't use :out or :in-out on pointer-like type:~%  ~S"
msgstr ""
"Ancay't useway :outway orway :inway-outway onway ointerpay-ikelay ypetay:~%  "
"~S"

#: target:code/alieneval.lisp
msgid ""
"A callback consists of a piece assembly code -- the trampoline --\n"
"and a lisp function.  We store the function type (including return\n"
"type and arg types), so we can detect incompatible redefinitions."
msgstr ""
"Away allbackcay onsistscay ofway away iecepay assemblyway odecay -- ethay "
"ampolinetray --\n"
"andway away isplay unctionfay.  Eway toresay ethay unctionfay ypetay "
"(includingway eturnray\n"
"ypetay andway argway ypestay), osay eway ancay etectday incompatibleway "
"edefinitionsray."

#: target:code/alieneval.lisp
msgid "Vector of all callbacks."
msgstr "Ectorvay ofway allway allbackscay."

#: target:pcl/simple-streams/string.lisp target:compiler/tn.lisp
#: target:compiler/main.lisp target:code/describe.lisp
#: target:code/debug-int.lisp target:code/debug-info.lisp
#: target:code/foreign-linkage.lisp target:code/reader.lisp
#: target:code/stream.lisp target:code/hash-new.lisp target:code/array.lisp
#: target:code/alieneval.lisp
msgid "~S is not an array with a fill-pointer."
msgstr "~S isway otnay anway arrayway ithway away illfay-ointerpay."

#: target:code/alieneval.lisp
msgid "Unable to mprotect ~S bytes (~S) at ~S (~S).  Callbacks may not work."
msgstr ""
"Unableway otay protectmay ~S ytesbay (~S) atway ~S (~S).  Allbackscay aymay "
"otnay orkway."

#: target:code/alieneval.lisp
msgid "Return the trampoline pointer for the callback NAME."
msgstr "Eturnray ethay ampolinetray ointerpay orfay ethay allbackcay AMENAY."

#: target:code/alieneval.lisp
msgid ""
"~\n"
"Attempt to redefine callback with incompatible return type.\n"
"   Old type was: ~A \n"
"    New type is: ~A"
msgstr ""
"~\n"
"Attemptway otay edefineray allbackcay ithway incompatibleway eturnray "
"ypetay.\n"
"   Oldway ypetay asway: ~Away \n"
"    Ewnay ypetay isway: ~Away"

#: target:code/alieneval.lisp
msgid ""
"~\n"
"Create new trampoline (old trampoline calls old lisp function)."
msgstr ""
"~\n"
"Eatecray ewnay ampolinetray (oldway ampolinetray allscay oldway isplay "
"unctionfay)."

#: target:code/alieneval.lisp
msgid "Unsupported argument type: ~A"
msgstr "Unsupportedway argumentway ypetay: ~Away"

#: target:code/alieneval.lisp
msgid "Unsupported return type: ~A"
msgstr "Unsupportedway eturnray ypetay: ~Away"

#: target:code/alieneval.lisp
msgid ""
"(defcallback NAME (RETURN-TYPE {(ARG-NAME ARG-TYPE)}*)\n"
"     {doc-string} {decls}* {FORM}*)\n"
"\n"
"Define a function which can be called by foreign code.  The pointer\n"
"returned by (callback NAME), when called by foreign code, invokes the\n"
"lisp function.  The lisp function expects alien arguments of the\n"
"specified ARG-TYPEs and returns an alien of type RETURN-TYPE.\n"
"\n"
"If (callback NAME) is already a callback function pointer, its value\n"
"is not changed (though it's arranged that an updated version of the\n"
"lisp callback function will be called).  This feature allows for\n"
"incremental redefinition of callback functions."
msgstr ""
"(efcallbackday AMENAY (ETURNRAY-YPETAY {(ARGWAY-AMENAY ARGWAY-YPETAY)}*)\n"
"     {ocday-ingstray} {eclsday}* {ORMFAY}*)\n"
"\n"
"Efineday away unctionfay ichwhay ancay ebay alledcay ybay oreignfay odecay.  "
"Ethay ointerpay\n"
"eturnedray ybay (allbackcay AMENAY), enwhay alledcay ybay oreignfay odecay, "
"invokesway ethay\n"
"isplay unctionfay.  Ethay isplay unctionfay expectsway alienway argumentsway "
"ofway ethay\n"
"ecifiedspay ARGWAY-Ypestay andway eturnsray anway alienway ofway ypetay "
"ETURNRAY-YPETAY.\n"
"\n"
"Ifway (allbackcay AMENAY) isway alreadyway away allbackcay unctionfay "
"ointerpay, itsway aluevay\n"
"isway otnay angedchay (oughthay itway's arrangedway atthay anway updatedway "
"ersionvay ofway ethay\n"
"isplay allbackcay unctionfay illway ebay alledcay).  Isthay eaturefay "
"allowsway orfay\n"
"incrementalway edefinitionray ofway allbackcay unctionsfay."

#: target:code/sap.lisp
msgid "Return T iff the SAP X points to a smaller address then the SAP Y."
msgstr ""
"Eturnray T iffway ethay APSAY X ointspay otay away mallersay addressway "
"enthay ethay APSAY Y."

#: target:code/sap.lisp
msgid ""
"Return T iff the SAP X points to a smaller or the same address as\n"
"   the SAP Y."
msgstr ""
"Eturnray T iffway ethay APSAY X ointspay otay away mallersay orway ethay "
"amesay addressway asway\n"
"   ethay APSAY Y."

#: target:code/sap.lisp
msgid "Return T iff the SAP X points to the same address as the SAP Y."
msgstr ""
"Eturnray T iffway ethay APSAY X ointspay otay ethay amesay addressway asway "
"ethay APSAY Y."

#: target:code/sap.lisp
msgid ""
"Return T iff the SAP X points to a larger or the same address as\n"
"   the SAP Y."
msgstr ""
"Eturnray T iffway ethay APSAY X ointspay otay away argerlay orway ethay "
"amesay addressway asway\n"
"   ethay APSAY Y."

#: target:code/sap.lisp
msgid "Return T iff the SAP X points to a larger address then the SAP Y."
msgstr ""
"Eturnray T iffway ethay APSAY X ointspay otay away argerlay addressway "
"enthay ethay APSAY Y."

#: target:code/sap.lisp
msgid "Return a new sap OFFSET bytes from SAP."
msgstr "Eturnray away ewnay apsay OFFSETWAY ytesbay omfray APSAY."

#: target:code/sap.lisp
msgid "Return the byte offset between SAP1 and SAP2."
msgstr "Eturnray ethay ytebay offsetway etweenbay APSAY1 andway APSAY2."

#: target:code/sap.lisp
msgid "Converts a System Area Pointer into an integer."
msgstr "Onvertscay away Ystemsay Areaway Ointerpay intoway anway integerway."

#: target:code/sap.lisp
msgid "Converts an integer into a System Area Pointer."
msgstr "Onvertscay anway integerway intoway away Ystemsay Areaway Ointerpay."

#: target:code/sap.lisp
msgid "Returns the 8-bit byte at OFFSET bytes from SAP."
msgstr "Eturnsray ethay 8-itbay ytebay atway OFFSETWAY ytesbay omfray APSAY."

#: target:code/sap.lisp
msgid "Returns the 16-bit word at OFFSET bytes from SAP."
msgstr "Eturnsray ethay 16-itbay ordway atway OFFSETWAY ytesbay omfray APSAY."

#: target:code/sap.lisp
msgid "Returns the 32-bit dualword at OFFSET bytes from SAP."
msgstr ""
"Eturnsray ethay 32-itbay ualwordday atway OFFSETWAY ytesbay omfray APSAY."

#: target:code/sap.lisp
msgid "Returns the 64-bit quadword at OFFSET bytes from SAP."
msgstr ""
"Eturnsray ethay 64-itbay adwordquay atway OFFSETWAY ytesbay omfray APSAY."

#: target:code/sap.lisp
msgid "Returns the 32-bit system-area-pointer at OFFSET bytes from SAP."
msgstr ""
"Eturnsray ethay 32-itbay ystemsay-areaway-ointerpay atway OFFSETWAY ytesbay "
"omfray APSAY."

#: target:code/sap.lisp
msgid "Returns the 32-bit single-float at OFFSET bytes from SAP."
msgstr ""
"Eturnsray ethay 32-itbay inglesay-oatflay atway OFFSETWAY ytesbay omfray "
"APSAY."

#: target:code/sap.lisp
msgid "Returns the 64-bit double-float at OFFSET bytes from SAP."
msgstr ""
"Eturnsray ethay 64-itbay oubleday-oatflay atway OFFSETWAY ytesbay omfray "
"APSAY."

#: target:code/sap.lisp
msgid "Returns the long-float at OFFSET bytes from SAP."
msgstr "Eturnsray ethay onglay-oatflay atway OFFSETWAY ytesbay omfray APSAY."

#: target:code/sap.lisp
msgid "Returns the signed 8-bit byte at OFFSET bytes from SAP."
msgstr ""
"Eturnsray ethay ignedsay 8-itbay ytebay atway OFFSETWAY ytesbay omfray APSAY."

#: target:code/sap.lisp
msgid "Returns the signed 16-bit word at OFFSET bytes from SAP."
msgstr ""
"Eturnsray ethay ignedsay 16-itbay ordway atway OFFSETWAY ytesbay omfray "
"APSAY."

#: target:code/sap.lisp
msgid "Returns the signed 32-bit dualword at OFFSET bytes from SAP."
msgstr ""
"Eturnsray ethay ignedsay 32-itbay ualwordday atway OFFSETWAY ytesbay omfray "
"APSAY."

#: target:code/sap.lisp
msgid "Returns the signed 64-bit quadword at OFFSET bytes from SAP."
msgstr ""
"Eturnsray ethay ignedsay 64-itbay adwordquay atway OFFSETWAY ytesbay omfray "
"APSAY."

#: target:code/bit-bash.lisp
msgid "The number of bits to process at a time."
msgstr "Ethay umbernay ofway itsbay otay ocesspray atway away imetay."

#: target:code/bit-bash.lisp
msgid "The maximum number of bits that can be dealt with during a single call."
msgstr ""
"Ethay aximummay umbernay ofway itsbay atthay ancay ebay ealtday ithway "
"uringday away inglesay allcay."

#: target:code/bit-bash.lisp
msgid ""
"Shift NUMBER by COUNT bits, adding zero bits at the ``end'' and removing\n"
"  bits from the ``start.''  On big-endian machines this is a left-shift and\n"
"  on little-endian machines this is a right-shift.  Note: only the low 5/6 "
"bits\n"
"  of count are significant."
msgstr ""
"Iftshay UMBERNAY ybay OUNTCAY itsbay, addingway erozay itsbay atway ethay "
"``endway'' andway emovingray\n"
"  itsbay omfray ethay ``tartsay.''  Onway igbay-endianway achinesmay isthay "
"isway away eftlay-iftshay andway\n"
"  onway ittlelay-endianway achinesmay isthay isway away ightray-iftshay.  "
"Otenay: onlyway ethay owlay 5/6 itsbay\n"
"  ofway ountcay areway ignificantsay."

#: target:code/bit-bash.lisp
msgid ""
"Shift NUMBER by COUNT bits, adding zero bits at the ``start'' and removing\n"
"  bits from the ``end.''  On big-endian machines this is a right-shift and\n"
"  on little-endian machines this is a left-shift."
msgstr ""
"Iftshay UMBERNAY ybay OUNTCAY itsbay, addingway erozay itsbay atway ethay "
"``tartsay'' andway emovingray\n"
"  itsbay omfray ethay ``endway.''  Onway igbay-endianway achinesmay isthay "
"isway away ightray-iftshay andway\n"
"  onway ittlelay-endianway achinesmay isthay isway away eftlay-iftshay."

#: target:code/bit-bash.lisp
msgid ""
"Produce a mask that contains 1's for the COUNT ``start'' bits and 0's for\n"
"  the remaining ``end'' bits.  Only the lower 5 bits of COUNT are "
"significant."
msgstr ""
"Oducepray away askmay atthay ontainscay 1's orfay ethay OUNTCAY ``tartsay'' "
"itsbay andway 0's orfay\n"
"  ethay emainingray ``endway'' itsbay.  Onlyway ethay owerlay 5 itsbay ofway "
"OUNTCAY areway ignificansayt."

#: target:code/bit-bash.lisp
msgid ""
"Produce a mask that contains 1's for the COUNT ``end'' bits and 0's for\n"
"  the remaining ``start'' bits.  Only the lower 5 bits of COUNT are\n"
"  significant."
msgstr ""
"Oducepray away askmay atthay ontainscay 1's orfay ethay OUNTCAY ``endway'' "
"itsbay andway 0's orfay\n"
"  ethay emainingray ``tartsay'' itsbay.  Onlyway ethay owerlay 5 itsbay "
"ofway OUNTCAY areway\n"
"  ignificantsay."

#: target:code/bit-bash.lisp
msgid "Align the SAP to a word boundry, and update the offset accordingly."
msgstr ""
"Alignway ethay APSAY otay away ordway oundrybay, andway updateway ethay "
"offsetway accordinglyway."

#: target:code/bit-bash.lisp
msgid ""
"Fill DST with VALUE starting at DST-OFFSET and continuing for LENGTH bits."
msgstr ""
"Illfay STDAY ithway ALUEVAY tartingsay atway STDAY-OFFSETWAY andway "
"ontinuingcay orfay ENGTHLAY itsbay."

#: target:code/byte-interp.lisp
msgid "This is the interpreter's evaluation stack."
msgstr "Isthay isway ethay interpreterway's evaluationway tacksay."

#: target:code/byte-interp.lisp
msgid "This is the next free element of the interpreter's evaluation stack."
msgstr ""
"Isthay isway ethay extnay eefray elementway ofway ethay interpreterway's "
"evaluationway tacksay."

#: target:code/byte-interp.lisp
msgid "Unknown inline function, id=~D"
msgstr "Unknownway inlineway unctionfay, idway=~D"

#: target:code/byte-interp.lisp
msgid "Unbound variable: ~S"
msgstr "Unboundway ariablevay: ~S"

#: target:code/byte-interp.lisp
msgid "Non-list argument to CAR: ~S"
msgstr "Onnay-istlay argumentway otay ARCAY: ~S"

#: target:code/byte-interp.lisp
msgid "Non-list argument to CDR: ~S"
msgstr "Onnay-istlay argumentway otay DRCAY: ~S"

#: target:code/byte-interp.lisp
msgid "Undefined XOP."
msgstr "Undefinedway OPXAY."

#: target:code/byte-interp.lisp
msgid "Wrong number of arguments."
msgstr "Ongwray umbernay ofway argumentsway."

#: target:code/byte-interp.lisp
msgid "Not enough arguments."
msgstr "Otnay enoughway argumentsway."

#: target:pcl/boot.lisp target:code/byte-interp.lisp
msgid "Too many arguments."
msgstr "Ootay anymay argumentsway."

#: target:pcl/combin.lisp target:code/interr.lisp target:code/byte-interp.lisp
msgid "Odd number of keyword arguments."
msgstr "Oddway umbernay ofway eywordkay argumentsway."

#: target:code/interr.lisp target:code/byte-interp.lisp
msgid "Unknown keyword: ~S"
msgstr "Unknownway eywordkay: ~S"

#: target:code/byte-interp.lisp
msgid "function-end breakpoints not supported."
msgstr "unctionfay-endway eakpointsbray otnay upportedsay."

#: target:code/array.lisp
msgid "The exclusive upper bound on the rank of an array."
msgstr ""
"Ethay exclusiveway upperway oundbay onway ethay ankray ofway anway arrayway."

#: target:code/array.lisp
msgid "The exclusive upper bound any given dimension of an array."
msgstr ""
"Ethay exclusiveway upperway oundbay anyway ivengay imensionday ofway anway "
"arrayway."

#: target:code/array.lisp
msgid "The exclusive upper bound on the total number of elements in an array."
msgstr ""
"Ethay exclusiveway upperway oundbay onway ethay otaltay umbernay ofway "
"elementsway inway anway arrayway."

#: target:code/array.lisp
msgid "End ~D is greater than total size ~D."
msgstr "Endway ~D isway eatergray anthay otaltay izesay ~D."

#: target:code/array.lisp
msgid "Start ~D is greater than end ~D."
msgstr "Tartsay ~D isway eatergray anthay endway ~D."

#: target:code/array.lisp
msgid ""
"List of weak-pointers to static vectors.  Needed for GCing static vectors"
msgstr ""
"Istlay ofway eakway-ointerspay otay taticsay ectorsvay.  Eedednay orfay "
"Cinggay taticsay ectorsvay"

#: target:code/array.lisp
msgid "Cannot make a static array of element type ~S"
msgstr "Annotcay akemay away taticsay arrayway ofway elementway ypetay ~S"

#: target:code/array.lisp
msgid "Failed to allocate space for static array of length ~S of type ~S"
msgstr ""
"Ailedfay otay allocateway acespay orfay taticsay arrayway ofway engthlay ~S "
"ofway ypetay ~S"

#: target:code/array.lisp
msgid ""
"Creates an array of the specified Dimensions and properties.  See the\n"
"  manual for details.\n"
"\n"
"  :Element-type\n"
"      The type of objects that the array can hold \n"
"  :Initial-element\n"
"      Each element of the array is initialized to this value, if supplied.\n"
"      If not supplied, 0 of the appropriate type is used.\n"
"  :Initial-contents\n"
"      The contents of the array are initialized to this.\n"
"  :Adjustable\n"
"      If non-Nil, make an expressly adjustable array.\n"
"  :Fill-pointer\n"
"      For one-dimensional array, set the fill-pointer to the given value.\n"
"      If T, use the actual length of the array.\n"
"  :Displaced-to\n"
"      Create an array that is displaced to the target array specified\n"
"      by :displaced-to.\n"
"  :Displaced-index-offset\n"
"      Index offset to the displaced array.  That is, index 0 of this array "
"is\n"
"      actually index displaced-index-offset of the target displaced array. \n"
"  :Allocation\n"
"      How to allocate the array.  If :MALLOC, a static, nonmovable array is\n"
"      created.  This array is created by calling malloc."
msgstr ""
"Eatescray anway arrayway ofway ethay ecifiedspay Imensionsday andway "
"opertiespray.  Eesay ethay\n"
"  anualmay orfay etailsday.\n"
"\n"
"  :Elementway-ypetay\n"
"      Ethay ypetay ofway objectsway atthay ethay arrayway ancay oldhay \n"
"  :Initialway-elementway\n"
"      Eachway elementway ofway ethay arrayway isway initializedway otay "
"isthay aluevay, ifway uppliedsay.\n"
"      Ifway otnay uppliedsay, 0 ofway ethay appropriateway ypetay isway "
"usedway.\n"
"  :Initialway-ontentscay\n"
"      Ethay ontentscay ofway ethay arrayway areway initializedway otay "
"isthay.\n"
"  :Adjustableway\n"
"      Ifway onnay-Ilnay, akemay anway expresslyway adjustableway arrayway.\n"
"  :Illfay-ointerpay\n"
"      Orfay oneway-imensionalday arrayway, etsay ethay illfay-ointerpay otay "
"ethay ivengay aluevay.\n"
"      Ifway T, useway ethay actualway engthlay ofway ethay arrayway.\n"
"  :Isplacedday-otay\n"
"      Eatecray anway arrayway atthay isway isplacedday otay ethay argettay "
"arrayway ecifiedspay\n"
"      ybay :isplacedday-otay.\n"
"  :Isplacedday-indexway-offsetway\n"
"      Indexway offsetway otay ethay isplacedday arrayway.  Atthay isway, "
"indexway 0 ofway isthay arrayway isway\n"
"      actuallyway indexway isplacedday-indexway-offsetway ofway ethay "
"argettay isplacedday arrayway. \n"
"  :Allocationway\n"
"      Owhay otay allocateway ethay arrayway.  Ifway :ALLOCMAY, away "
"taticsay, onmovablenay arrayway isway\n"
"      eatedcray.  Isthay arrayway isway eatedcray ybay allingcay allocmay."

#: target:code/array.lisp
msgid "Can't specify :displaced-index-offset without :displaced-to"
msgstr ""
"Ancay't ecifyspay :isplacedday-indexway-offsetway ithoutway :isplacedday-otay"

#: target:code/array.lisp
msgid "Cannot make an adjustable static array"
msgstr "Annotcay akemay anway adjustableway taticsay arrayway"

#: target:code/array.lisp
msgid "Cannot make a displaced array static"
msgstr "Annotcay akemay away isplacedday arrayway taticsay"

#: target:code/array.lisp
msgid ""
"Cannot specify both :initial-element and ~\n"
"\t\t:initial-contents"
msgstr ""
"Annotcay ecifyspay othbay :initialway-elementway andway ~\n"
"\t\t:initialway-ontentscay"

#: target:code/array.lisp
msgid ""
"~D elements in the initial-contents, but the ~\n"
"\t\tvector length is ~D."
msgstr ""
"~D elementsway inway ethay initialway-ontentscay, utbay ethay ~\n"
"\t\tectorvay engthlay isway ~D."

#: target:code/array.lisp
msgid "Only vectors can have fill pointers."
msgstr "Onlyway ectorsvay ancay avehay illfay ointerspay."

#: target:code/array.lisp
msgid "Invalid fill-pointer ~D"
msgstr "Invalidway illfay-ointerpay ~D"

#: target:code/array.lisp
msgid ""
"Neither :initial-element nor :initial-contents ~\n"
"\t\t   can be specified along with :displaced-to"
msgstr ""
"Eithernay :initialway-elementway ornay :initialway-ontentscay ~\n"
"\t\t   ancay ebay ecifiedspay alongway ithway :isplacedday-otay"

#: target:code/array.lisp
msgid ""
"One can't displace an array of type ~S into ~\n"
"                           another of type ~S."
msgstr ""
"Oneway ancay't isplaceday anway arrayway ofway ypetay ~S intoway ~\n"
"                           anotherway ofway ypetay ~S."

#: target:code/array.lisp
msgid "~S doesn't have enough elements."
msgstr "~S oesnday't avehay enoughway elementsway."

#: target:code/array.lisp
msgid "~&Freeing foreign vector at #x~X~%"
msgstr "~&Eeingfray oreignfay ectorvay atway #x~X~%"

#: target:code/array.lisp
msgid "Finalizing static vectors ~S~%"
msgstr "Inalizingfay taticsay ectorsvay ~S~%"

#: target:code/array.lisp
msgid "static vector ~A.  header = ~X~%"
msgstr "taticsay ectorvay ~Away.  eaderhay = ~X~%"

#: target:code/array.lisp
msgid "  static vector ~A in use~%"
msgstr "  taticsay ectorvay ~Away inway useway~%"

#: target:code/array.lisp
msgid "  Free static vector ~A~%"
msgstr "  Eefray taticsay ectorvay ~Away~%"

#: target:code/array.lisp
msgid ""
"Cannot supply both :initial-contents and :initial-element to\n"
"            either make-array or adjust-array."
msgstr ""
"Annotcay upplysay othbay :initialway-ontentscay andway :initialway-"
"elementway otay\n"
"            eitherway akemay-arrayway orway adjustway-arrayway."

#: target:code/array.lisp
msgid "~S cannot be used to initialize an array of type ~S."
msgstr ""
"~S annotcay ebay usedway otay initializeway anway arrayway ofway ypetay ~S."

#: target:code/array.lisp
msgid ""
"Malformed :initial-contents.  ~S is not a ~\n"
"\t\t\t        sequence, but ~D more layer~:P needed."
msgstr ""
"Alformedmay :initialway-ontentscay.  ~S isway otnay away ~\n"
"\t\t\t        equencesay, utbay ~D oremay ayerlay~:P eedednay."

#: target:code/array.lisp
msgid ""
"Malformed :initial-contents.  Dimension of ~\n"
"\t\t\t        axis ~D is ~D, but ~S is ~D long."
msgstr ""
"Alformedmay :initialway-ontentscay.  Imensionday ofway ~\n"
"\t\t\t        axisway ~D isway ~D, utbay ~S isway ~D onglay."

#: target:code/array.lisp
msgid "Constructs a simple-vector from the given objects."
msgstr "Onstructscay away implesay-ectorvay omfray ethay ivengay objectsway."

#: target:code/array.lisp
msgid "Wrong number of subscripts, ~D, for array of rank ~D"
msgstr ""
"Ongwray umbernay ofway ubscriptssay, ~D, orfay arrayway ofway ankray ~D"

#: target:code/array.lisp
msgid "Invalid index ~D~[~;~:; on axis ~:*~D~] in ~S"
msgstr "Invalidway indexway ~D~[~;~:; onway axisway ~:*~D~] inway ~S"

#: target:code/array.lisp
msgid "Invalid index ~D in ~S"
msgstr "Invalidway indexway ~D inway ~S"

#: target:code/array.lisp
msgid "Returns T if the Subscipts are in bounds for the Array, Nil otherwise."
msgstr ""
"Eturnsray T ifway ethay Ubsciptssay areway inway oundsbay orfay ethay "
"Arrayway, Ilnay otherwiseway."

#: target:code/array.lisp
msgid "Returns the element of the Array specified by the Subscripts."
msgstr ""
"Eturnsray ethay elementway ofway ethay Arrayway ecifiedspay ybay ethay "
"Ubscriptssay."

#: target:code/array.lisp
msgid ""
"Returns the element of array corressponding to the row-major index.  This "
"is\n"
"   SETF'able."
msgstr ""
"Eturnsray ethay elementway ofway arrayway orresspondingcay otay ethay owray-"
"ajormay indexway.  Isthay isway\n"
"   ETFSAY'ableway."

#: target:code/array.lisp
msgid "Returns the Index'th element of the given Simple-Vector."
msgstr ""
"Eturnsray ethay Indexway'thay elementway ofway ethay ivengay Implesay-"
"Ectorvay."

#: target:code/array.lisp
msgid "Returns the bit from the Bit-Array at the specified Subscripts."
msgstr ""
"Eturnsray ethay itbay omfray ethay Itbay-Arrayway atway ethay ecifiedspay "
"Ubscriptssay."

#: target:code/array.lisp
msgid "Returns the bit from the Simple-Bit-Array at the specified Subscripts."
msgstr ""
"Eturnsray ethay itbay omfray ethay Implesay-Itbay-Arrayway atway ethay "
"ecifiedspay Ubscriptssay."

#: target:code/array.lisp
msgid "Returns the type of the elements of the array"
msgstr "Eturnsray ethay ypetay ofway ethay elementsway ofway ethay arrayway"

#: target:code/array.lisp
msgid "Returns the number of dimensions of the Array."
msgstr "Eturnsray ethay umbernay ofway imensionsday ofway ethay Arrayway."

#: target:code/array.lisp
msgid "Returns length of dimension Axis-Number of the Array."
msgstr ""
"Eturnsray engthlay ofway imensionday Axisway-Umbernay ofway ethay Arrayway."

#: target:code/array.lisp
msgid "Vector axis is not zero: ~S"
msgstr "Ectorvay axisway isway otnay erozay: ~S"

#: target:code/array.lisp
msgid "~D is too big; ~S only has ~D dimension~:P"
msgstr "~D isway ootay igbay; ~S onlyway ashay ~D imensionday~:P"

#: target:code/array.lisp
msgid "Returns a list whose elements are the dimensions of the array"
msgstr ""
"Eturnsray away istlay osewhay elementsway areway ethay imensionsday ofway "
"ethay arrayway"

#: target:code/array.lisp
msgid "Returns the total number of elements in the Array."
msgstr ""
"Eturnsray ethay otaltay umbernay ofway elementsway inway ethay Arrayway."

#: target:code/array.lisp
msgid ""
"Returns values of :displaced-to and :displaced-index-offset options to\n"
"   make-array, or the defaults nil and 0 if not a displaced array."
msgstr ""
"Eturnsray aluesvay ofway :isplacedday-otay andway :isplacedday-indexway-"
"offsetway optionsway otay\n"
"   akemay-arrayway, orway ethay efaultsday ilnay andway 0 ifway otnay away "
"isplacedday arrayway."

#: target:code/array.lisp
msgid ""
"Returns T if (adjust-array array...) would return an array identical\n"
"   to the argument, this happens for complex arrays."
msgstr ""
"Eturnsray T ifway (adjustway-arrayway arrayway...) ouldway eturnray anway "
"arrayway identicalway\n"
"   otay ethay argumentway, isthay appenshay orfay omplexcay arraysway."

#: target:code/array.lisp
msgid "Returns T if the given Array has a fill pointer, or Nil otherwise."
msgstr ""
"Eturnsray T ifway ethay ivengay Arrayway ashay away illfay ointerpay, orway "
"Ilnay otherwiseway."

#: target:code/array.lisp
msgid "Returns the Fill-Pointer of the given Vector."
msgstr "Eturnsray ethay Illfay-Ointerpay ofway ethay ivengay Ectorvay."

#: target:code/array.lisp
msgid "New fill pointer, ~S, is larger than the length of the vector."
msgstr ""
"Ewnay illfay ointerpay, ~S, isway argerlay anthay ethay engthlay ofway ethay "
"ectorvay."

#: target:code/array.lisp
msgid ""
"Attempts to set the element of Array designated by the fill pointer\n"
"   to New-El and increment fill pointer by one.  If the fill pointer is\n"
"   too large, Nil is returned, otherwise the index of the pushed element "
"is \n"
"   returned."
msgstr ""
"Attemptsway otay etsay ethay elementway ofway Arrayway esignatedday ybay "
"ethay illfay ointerpay\n"
"   otay Ewnay-Elway andway incrementway illfay ointerpay ybay oneway.  Ifway "
"ethay illfay ointerpay isway\n"
"   ootay argelay, Ilnay isway eturnedray, otherwiseway ethay indexway ofway "
"ethay ushedpay elementway isway \n"
"   eturnedray."

#: target:code/array.lisp
msgid ""
"Like Vector-Push except that if the fill pointer gets too large, the\n"
"   Array is extended rather than Nil being returned."
msgstr ""
"Ikelay Ectorvay-Ushpay exceptway atthay ifway ethay illfay ointerpay etsgay "
"ootay argelay, ethay\n"
"   Arrayway isway extendedway atherray anthay Ilnay eingbay eturnedray."

#: target:code/array.lisp
msgid ""
"Attempts to decrease the fill-pointer by 1 and return the element\n"
"   pointer to by the new fill pointer.  If the original value of the fill\n"
"   pointer is 0, an error occurs."
msgstr ""
"Attemptsway otay ecreaseday ethay illfay-ointerpay ybay 1 andway eturnray "
"ethay elementway\n"
"   ointerpay otay ybay ethay ewnay illfay ointerpay.  Ifway ethay "
"originalway aluevay ofway ethay illfay\n"
"   ointerpay isway 0, anway errorway occursway."

#: target:code/array.lisp
msgid "Nothing left to pop."
msgstr "Othingnay eftlay otay oppay."

#: target:code/array.lisp
msgid "Adjusts the Array's dimensions to the given Dimensions and stuff."
msgstr ""
"Adjustsway ethay Arrayway's imensionsday otay ethay ivengay Imensionsday "
"andway tuffsay."

#: target:code/array.lisp
msgid "Number of dimensions not equal to rank of array."
msgstr "Umbernay ofway imensionsday otnay equalway otay ankray ofway arrayway."

#: target:code/array.lisp
msgid "New element type, ~S, is incompatible with old."
msgstr "Ewnay elementway ypetay, ~S, isway incompatibleway ithway oldway."

#: target:code/array.lisp
msgid "Static arrays are not adjustable."
msgstr "Taticsay arraysway areway otnay adjustableway."

#: target:code/array.lisp
msgid "Multidimensional arrays can't have fill pointers."
msgstr "Ultidimensionalmay arraysway ancay't avehay illfay ointerspay."

#: target:code/array.lisp
msgid ""
"Initial contents may not be specified with ~\n"
"\t\t the :initial-element or :displaced-to option."
msgstr ""
"Initialway ontentscay aymay otnay ebay ecifiedspay ithway ~\n"
"\t\t ethay :initialway-elementway orway :isplacedday-otay optionway."

#: target:code/array.lisp
msgid ""
"The :initial-element option may not be specified ~\n"
"\t       with :displaced-to."
msgstr ""
"Ethay :initialway-elementway optionway aymay otnay ebay ecifiedspay ~\n"
"\t       ithway :isplacedday-otay."

#: target:code/array.lisp
msgid ""
"One can't displace an array of type ~S into another of ~\n"
"\t               type ~S."
msgstr ""
"Oneway ancay't isplaceday anway arrayway ofway ypetay ~S intoway anotherway "
"ofway ~\n"
"\t               ypetay ~S."

#: target:code/array.lisp
msgid "The :displaced-to array is too small."
msgstr "Ethay :isplacedday-otay arrayway isway ootay mallsay."

#: target:code/array.lisp
msgid ""
"Cannot adjust-array an array (~S) to a size (~S) that is ~\n"
"\t            smaller than it's fill pointer (~S)."
msgstr ""
"Annotcay adjustway-arrayway anway arrayway (~S) otay away izesay (~S) atthay "
"isway ~\n"
"\t            mallersay anthay itway's illfay ointerpay (~S)."

#: target:code/array.lisp
msgid ""
"Cannot supply a non-NIL value (~S) for :fill-pointer ~\n"
"\t   in adjust-array unless the array (~S) was originally ~\n"
" \t   created with a fill pointer."
msgstr ""
"Annotcay upplysay away onnay-ILNAY aluevay (~S) orfay :illfay-ointerpay ~\n"
"\t   inway adjustway-arrayway unlessway ethay arrayway (~S) asway "
"originallyway ~\n"
" \t   eatedcray ithway away illfay ointerpay."

#: target:code/array.lisp
msgid ""
"Cannot supply a value for :fill-pointer (~S) that is larger ~\n"
"\t     than the new length of the vector (~S)."
msgstr ""
"Annotcay upplysay away aluevay orfay :illfay-ointerpay (~S) atthay isway "
"argerlay ~\n"
"\t     anthay ethay ewnay engthlay ofway ethay ectorvay (~S)."

#: target:code/array.lisp
msgid "Bogus value for :fill-pointer in adjust-array: ~S"
msgstr "Ogusbay aluevay orfay :illfay-ointerpay inway adjustway-arrayway: ~S"

#: target:code/array.lisp
msgid ""
"Destructively alters the Vector, changing its length to New-Size, which\n"
"   must be less than or equal to its current size."
msgstr ""
"Estructivelyday altersway ethay Ectorvay, angingchay itsway engthlay otay "
"Ewnay-Izesay, ichwhay\n"
"   ustmay ebay esslay anthay orway equalway otay itsway urrentcay izesay."

#: target:code/array.lisp
msgid "Fills in array header with provided information.  Returns array."
msgstr ""
"Illsfay inway arrayway eaderhay ithway ovidedpray informationway.  Eturnsray "
"arrayway."

#: target:code/array.lisp
msgid "~S and ~S do not have the same dimensions."
msgstr "~S andway ~S oday otnay avehay ethay amesay imensionsday."

#: target:code/array.lisp
msgid ""
"Perform a bit-wise LOGAND on the elements of BIT-ARRAY-1 and BIT-ARRAY-2,\n"
"  putting the results in RESULT-BIT-ARRAY.  If RESULT-BIT-ARRAY is T,\n"
"  BIT-ARRAY-1 is used.  If RESULT-BIT-ARRAY is NIL or omitted, a new array "
"is\n"
"  created.  All the arrays must have the same rank and dimensions."
msgstr ""
"Erformpay away itbay-iseway OGANDLAY onway ethay elementsway ofway ITBAY-"
"ARRAYWAY-1 andway ITBAY-ARRAYWAY-2,\n"
"  uttingpay ethay esultsray inway ESULTRAY-ITBAY-ARRAYWAY.  Ifway ESULTRAY-"
"ITBAY-ARRAYWAY isway T,\n"
"  ITBAY-ARRAYWAY-1 isway usedway.  Ifway ESULTRAY-ITBAY-ARRAYWAY isway ILNAY "
"orway omittedway, away ewnay arrayway isway\n"
"  eatedcray.  Allway ethay arraysway ustmay avehay ethay amesay ankray "
"andway imensionsday."

#: target:code/array.lisp
msgid ""
"Perform a bit-wise LOGIOR on the elements of BIT-ARRAY-1 and BIT-ARRAY-2,\n"
"  putting the results in RESULT-BIT-ARRAY.  If RESULT-BIT-ARRAY is T,\n"
"  BIT-ARRAY-1 is used.  If RESULT-BIT-ARRAY is NIL or omitted, a new array "
"is\n"
"  created.  All the arrays must have the same rank and dimensions."
msgstr ""
"Erformpay away itbay-iseway OGIORLAY onway ethay elementsway ofway ITBAY-"
"ARRAYWAY-1 andway ITBAY-ARRAYWAY-2,\n"
"  uttingpay ethay esultsray inway ESULTRAY-ITBAY-ARRAYWAY.  Ifway ESULTRAY-"
"ITBAY-ARRAYWAY isway T,\n"
"  ITBAY-ARRAYWAY-1 isway usedway.  Ifway ESULTRAY-ITBAY-ARRAYWAY isway ILNAY "
"orway omittedway, away ewnay arrayway isway\n"
"  eatedcray.  Allway ethay arraysway ustmay avehay ethay amesay ankray "
"andway imensionsday."

#: target:code/array.lisp
msgid ""
"Perform a bit-wise LOGXOR on the elements of BIT-ARRAY-1 and BIT-ARRAY-2,\n"
"  putting the results in RESULT-BIT-ARRAY.  If RESULT-BIT-ARRAY is T,\n"
"  BIT-ARRAY-1 is used.  If RESULT-BIT-ARRAY is NIL or omitted, a new array "
"is\n"
"  created.  All the arrays must have the same rank and dimensions."
msgstr ""
"Erformpay away itbay-iseway OGXORLAY onway ethay elementsway ofway ITBAY-"
"ARRAYWAY-1 andway ITBAY-ARRAYWAY-2,\n"
"  uttingpay ethay esultsray inway ESULTRAY-ITBAY-ARRAYWAY.  Ifway ESULTRAY-"
"ITBAY-ARRAYWAY isway T,\n"
"  ITBAY-ARRAYWAY-1 isway usedway.  Ifway ESULTRAY-ITBAY-ARRAYWAY isway ILNAY "
"orway omittedway, away ewnay arrayway isway\n"
"  eatedcray.  Allway ethay arraysway ustmay avehay ethay amesay ankray "
"andway imensionsday."

#: target:code/array.lisp
msgid ""
"Perform a bit-wise LOGEQV on the elements of BIT-ARRAY-1 and BIT-ARRAY-2,\n"
"  putting the results in RESULT-BIT-ARRAY.  If RESULT-BIT-ARRAY is T,\n"
"  BIT-ARRAY-1 is used.  If RESULT-BIT-ARRAY is NIL or omitted, a new array "
"is\n"
"  created.  All the arrays must have the same rank and dimensions."
msgstr ""
"Erformpay away itbay-iseway OGEQVLAY onway ethay elementsway ofway ITBAY-"
"ARRAYWAY-1 andway ITBAY-ARRAYWAY-2,\n"
"  uttingpay ethay esultsray inway ESULTRAY-ITBAY-ARRAYWAY.  Ifway ESULTRAY-"
"ITBAY-ARRAYWAY isway T,\n"
"  ITBAY-ARRAYWAY-1 isway usedway.  Ifway ESULTRAY-ITBAY-ARRAYWAY isway ILNAY "
"orway omittedway, away ewnay arrayway isway\n"
"  eatedcray.  Allway ethay arraysway ustmay avehay ethay amesay ankray "
"andway imensionsday."

#: target:code/array.lisp
msgid ""
"Perform a bit-wise LOGNAND on the elements of BIT-ARRAY-1 and BIT-ARRAY-2,\n"
"  putting the results in RESULT-BIT-ARRAY.  If RESULT-BIT-ARRAY is T,\n"
"  BIT-ARRAY-1 is used.  If RESULT-BIT-ARRAY is NIL or omitted, a new array "
"is\n"
"  created.  All the arrays must have the same rank and dimensions."
msgstr ""
"Erformpay away itbay-iseway OGNANDLAY onway ethay elementsway ofway ITBAY-"
"ARRAYWAY-1 andway ITBAY-ARRAYWAY-2,\n"
"  uttingpay ethay esultsray inway ESULTRAY-ITBAY-ARRAYWAY.  Ifway ESULTRAY-"
"ITBAY-ARRAYWAY isway T,\n"
"  ITBAY-ARRAYWAY-1 isway usedway.  Ifway ESULTRAY-ITBAY-ARRAYWAY isway ILNAY "
"orway omittedway, away ewnay arrayway isway\n"
"  eatedcray.  Allway ethay arraysway ustmay avehay ethay amesay ankray "
"andway imensionsday."

#: target:code/array.lisp
msgid ""
"Perform a bit-wise LOGNOR on the elements of BIT-ARRAY-1 and BIT-ARRAY-2,\n"
"  putting the results in RESULT-BIT-ARRAY.  If RESULT-BIT-ARRAY is T,\n"
"  BIT-ARRAY-1 is used.  If RESULT-BIT-ARRAY is NIL or omitted, a new array "
"is\n"
"  created.  All the arrays must have the same rank and dimensions."
msgstr ""
"Erformpay away itbay-iseway OGNORLAY onway ethay elementsway ofway ITBAY-"
"ARRAYWAY-1 andway ITBAY-ARRAYWAY-2,\n"
"  uttingpay ethay esultsray inway ESULTRAY-ITBAY-ARRAYWAY.  Ifway ESULTRAY-"
"ITBAY-ARRAYWAY isway T,\n"
"  ITBAY-ARRAYWAY-1 isway usedway.  Ifway ESULTRAY-ITBAY-ARRAYWAY isway ILNAY "
"orway omittedway, away ewnay arrayway isway\n"
"  eatedcray.  Allway ethay arraysway ustmay avehay ethay amesay ankray "
"andway imensionsday."

#: target:code/array.lisp
msgid ""
"Perform a bit-wise LOGANDC1 on the elements of BIT-ARRAY-1 and BIT-ARRAY-2,\n"
"  putting the results in RESULT-BIT-ARRAY.  If RESULT-BIT-ARRAY is T,\n"
"  BIT-ARRAY-1 is used.  If RESULT-BIT-ARRAY is NIL or omitted, a new array "
"is\n"
"  created.  All the arrays must have the same rank and dimensions."
msgstr ""
"Erformpay away itbay-iseway OGANDCLAY1 onway ethay elementsway ofway ITBAY-"
"ARRAYWAY-1 andway ITBAY-ARRAYWAY-2,\n"
"  uttingpay ethay esultsray inway ESULTRAY-ITBAY-ARRAYWAY.  Ifway ESULTRAY-"
"ITBAY-ARRAYWAY isway T,\n"
"  ITBAY-ARRAYWAY-1 isway usedway.  Ifway ESULTRAY-ITBAY-ARRAYWAY isway ILNAY "
"orway omittedway, away ewnay arrayway isway\n"
"  eatedcray.  Allway ethay arraysway ustmay avehay ethay amesay ankray "
"andway imensionsday."

#: target:code/array.lisp
msgid ""
"Perform a bit-wise LOGANDC2 on the elements of BIT-ARRAY-1 and BIT-ARRAY-2,\n"
"  putting the results in RESULT-BIT-ARRAY.  If RESULT-BIT-ARRAY is T,\n"
"  BIT-ARRAY-1 is used.  If RESULT-BIT-ARRAY is NIL or omitted, a new array "
"is\n"
"  created.  All the arrays must have the same rank and dimensions."
msgstr ""
"Erformpay away itbay-iseway OGANDCLAY2 onway ethay elementsway ofway ITBAY-"
"ARRAYWAY-1 andway ITBAY-ARRAYWAY-2,\n"
"  uttingpay ethay esultsray inway ESULTRAY-ITBAY-ARRAYWAY.  Ifway ESULTRAY-"
"ITBAY-ARRAYWAY isway T,\n"
"  ITBAY-ARRAYWAY-1 isway usedway.  Ifway ESULTRAY-ITBAY-ARRAYWAY isway ILNAY "
"orway omittedway, away ewnay arrayway isway\n"
"  eatedcray.  Allway ethay arraysway ustmay avehay ethay amesay ankray "
"andway imensionsday."

#: target:code/array.lisp
msgid ""
"Perform a bit-wise LOGORC1 on the elements of BIT-ARRAY-1 and BIT-ARRAY-2,\n"
"  putting the results in RESULT-BIT-ARRAY.  If RESULT-BIT-ARRAY is T,\n"
"  BIT-ARRAY-1 is used.  If RESULT-BIT-ARRAY is NIL or omitted, a new array "
"is\n"
"  created.  All the arrays must have the same rank and dimensions."
msgstr ""
"Erformpay away itbay-iseway OGORCLAY1 onway ethay elementsway ofway ITBAY-"
"ARRAYWAY-1 andway ITBAY-ARRAYWAY-2,\n"
"  uttingpay ethay esultsray inway ESULTRAY-ITBAY-ARRAYWAY.  Ifway ESULTRAY-"
"ITBAY-ARRAYWAY isway T,\n"
"  ITBAY-ARRAYWAY-1 isway usedway.  Ifway ESULTRAY-ITBAY-ARRAYWAY isway ILNAY "
"orway omittedway, away ewnay arrayway isway\n"
"  eatedcray.  Allway ethay arraysway ustmay avehay ethay amesay ankray "
"andway imensionsday."

#: target:code/array.lisp
msgid ""
"Perform a bit-wise LOGORC2 on the elements of BIT-ARRAY-1 and BIT-ARRAY-2,\n"
"  putting the results in RESULT-BIT-ARRAY.  If RESULT-BIT-ARRAY is T,\n"
"  BIT-ARRAY-1 is used.  If RESULT-BIT-ARRAY is NIL or omitted, a new array "
"is\n"
"  created.  All the arrays must have the same rank and dimensions."
msgstr ""
"Erformpay away itbay-iseway OGORCLAY2 onway ethay elementsway ofway ITBAY-"
"ARRAYWAY-1 andway ITBAY-ARRAYWAY-2,\n"
"  uttingpay ethay esultsray inway ESULTRAY-ITBAY-ARRAYWAY.  Ifway ESULTRAY-"
"ITBAY-ARRAYWAY isway T,\n"
"  ITBAY-ARRAYWAY-1 isway usedway.  Ifway ESULTRAY-ITBAY-ARRAYWAY isway ILNAY "
"orway omittedway, away ewnay arrayway isway\n"
"  eatedcray.  Allway ethay arraysway ustmay avehay ethay amesay ankray "
"andway imensionsday."

#: target:code/array.lisp
msgid ""
"Performs a bit-wise logical NOT on the elements of BIT-ARRAY,\n"
"  putting the results in RESULT-BIT-ARRAY.  If RESULT-BIT-ARRAY is T,\n"
"  BIT-ARRAY is used.  If RESULT-BIT-ARRAY is NIL or omitted, a new array is\n"
"  created.  Both arrays must have the same rank and dimensions."
msgstr ""
"Erformspay away itbay-iseway ogicallay OTNAY onway ethay elementsway ofway "
"ITBAY-ARRAYWAY,\n"
"  uttingpay ethay esultsray inway ESULTRAY-ITBAY-ARRAYWAY.  Ifway ESULTRAY-"
"ITBAY-ARRAYWAY isway T,\n"
"  ITBAY-ARRAYWAY isway usedway.  Ifway ESULTRAY-ITBAY-ARRAYWAY isway ILNAY "
"orway omittedway, away ewnay arrayway isway\n"
"  eatedcray.  Othbay arraysway ustmay avehay ethay amesay ankray andway "
"imensionsday."

#: target:code/hash-new.lisp
msgid "Structure used to implement hash tables."
msgstr "Ucturestray usedway otay implementway ashhay ablestay."

#: target:code/hash-new.lisp
msgid ""
"Almost-Primify returns an almost prime number greater than or equal\n"
"   to NUM."
msgstr ""
"Almostway-Imifypray eturnsray anway almostway imepray umbernay eatergray "
"anthay orway equalway\n"
"   otay UMNAY."

#: target:code/hash-new.lisp
msgid "Define a new kind of hash table test."
msgstr "Efineday away ewnay indkay ofway ashhay abletay esttay."

#: target:code/hash-new.lisp
msgid ""
"Creates and returns a new hash table.  The keywords are as follows:\n"
"     :TEST -- Indicates what kind of test to use.  Only EQ, EQL, EQUAL,\n"
"       and EQUALP are currently supported.\n"
"     :SIZE -- A hint as to how many elements will be put in this hash\n"
"       table.\n"
"     :REHASH-SIZE -- Indicates how to expand the table when it fills up.\n"
"       If an integer, add space for that many elements.  If a floating\n"
"       point number (which must be greater than 1.0), multiple the size\n"
"       by that amount.\n"
"     :REHASH-THRESHOLD -- Indicates how dense the table can become before\n"
"       forcing a rehash.  Can be any positive number <= to 1, with density\n"
"       approaching zero as the threshold approaches 0.  Density 1 means an\n"
"       average of one entry per bucket.\n"
"   CMUCL Extension:\n"
"     :WEAK-P -- Weak hash table.  Can only be used when the key is 'eq or "
"'eql.\n"
"                An entry in the table is remains if the condition holds:\n"
"\n"
"                :KEY            -- key is referenced elsewhere\n"
"                :VALUE          -- value is referenced elsewhere\n"
"                :KEY-AND-VALUE  -- key and value are referenced elsewhere\n"
"                :KEY-OR-VALUE   -- key or value is referenced elsewhere\n"
"\n"
"                If the condition does not hold, the entry is removed.  For\n"
"                backward compatibility, a value of T is the same as :KEY."
msgstr ""
"Eatescray andway eturnsray away ewnay ashhay abletay.  Ethay eywordskay "
"areway asway ollowsfay:\n"
"     :ESTTAY -- Indicatesway atwhay indkay ofway esttay otay useway.  "
"Onlyway EQWAY, EQLWAY, EQUALWAY,\n"
"       andway EQUALPWAY areway urrentlycay upportedsay.\n"
"     :IZESAY -- Away inthay asway otay owhay anymay elementsway illway ebay "
"utpay inway isthay ashhay\n"
"       abletay.\n"
"     :EHASHRAY-IZESAY -- Indicatesway owhay otay expandway ethay abletay "
"enwhay itway illsfay upway.\n"
"       Ifway anway integerway, addway acespay orfay atthay anymay "
"elementsway.  Ifway away oatingflay\n"
"       ointpay umbernay (ichwhay ustmay ebay eatergray anthay 1.0), "
"ultiplemay ethay izesay\n"
"       ybay atthay amountway.\n"
"     :EHASHRAY-RESHOLDTHAY -- Indicatesway owhay enseday ethay abletay ancay "
"ecomebay eforebay\n"
"       orcingfay away ehashray.  Ancay ebay anyway ositivepay umbernay <= "
"otay 1, ithway ensityday\n"
"       approachingway erozay asway ethay resholdthay approachesway 0.  "
"Ensityday 1 eansmay anway\n"
"       averageway ofway oneway entryway erpay ucketbay.\n"
"   MUCLCAY Extensionway:\n"
"     :EAKWAY-P -- Eakway ashhay abletay.  Ancay onlyway ebay usedway enwhay "
"ethay eykay isway 'eqway orway 'eqlway.\n"
"                Anway entryway inway ethay abletay isway emainsray ifway "
"ethay onditioncay oldshay:\n"
"\n"
"                :EYKAY            -- eykay isway eferencedray elsewhereway\n"
"                :ALUEVAY          -- aluevay isway eferencedray "
"elsewhereway\n"
"                :EYKAY-ANDWAY-ALUEVAY  -- eykay andway aluevay areway "
"eferencedray elsewhereway\n"
"                :EYKAY-ORWAY-ALUEVAY   -- eykay orway aluevay isway "
"eferencedray elsewhereway\n"
"\n"
"                Ifway ethay onditioncay oesday otnay oldhay, ethay entryway "
"isway emovedray.  Orfay\n"
"                ackwardbay ompatibilitycay, away aluevay ofway T isway ethay "
"amesay asway :EYKAY."

#: target:code/hash-new.lisp
msgid "Unknown :TEST for MAKE-HASH-TABLE: ~S"
msgstr "Unknownway :ESTTAY orfay AKEMAY-ASHHAY-ABLETAY: ~S"

#: target:code/hash-new.lisp
msgid ";; Creating unsupported weak-p hash table~%"
msgstr ";; Eatingcray unsupportedway eakway-p ashhay abletay~%"

#: target:code/hash-new.lisp
msgid "Cannot make a weak ~A hashtable with test: ~S"
msgstr "Annotcay akemay away eakway ~Away ashtablehay ithway esttay: ~S"

#: target:code/hash-new.lisp
msgid "Returns the number of entries in the given HASH-TABLE."
msgstr ""
"Eturnsray ethay umbernay ofway entriesway inway ethay ivengay ASHHAY-ABLETAY."

#: target:code/hash-new.lisp
msgid "Return the rehash-size HASH-TABLE was created with."
msgstr "Eturnray ethay ehashray-izesay ASHHAY-ABLETAY asway eatedcray ithway."

#: target:code/hash-new.lisp
msgid "Return the rehash-threshold HASH-TABLE was created with."
msgstr ""
"Eturnray ethay ehashray-resholdthay ASHHAY-ABLETAY asway eatedcray ithway."

#: target:code/hash-new.lisp
msgid ""
"Return a size that can be used with MAKE-HASH-TABLE to create a hash\n"
"   table that can hold however many entries HASH-TABLE can hold without\n"
"   having to be grown."
msgstr ""
"Eturnray away izesay atthay ancay ebay usedway ithway AKEMAY-ASHHAY-ABLETAY "
"otay eatecray away ashhay\n"
"   abletay atthay ancay oldhay oweverhay anymay entriesway ASHHAY-ABLETAY "
"ancay oldhay ithoutway\n"
"   avinghay otay ebay owngray."

#: target:code/hash-new.lisp
msgid "Return the test HASH-TABLE was created with."
msgstr "Eturnray ethay esttay ASHHAY-ABLETAY asway eatedcray ithway."

#: target:code/hash-new.lisp
msgid ""
"Return T if HASH-TABLE will not keep entries for keys that would\n"
"   otherwise be garbage, and NIL if it will."
msgstr ""
"Eturnray T ifway ASHHAY-ABLETAY illway otnay eepkay entriesway orfay eyskay "
"atthay ouldway\n"
"   otherwiseway ebay arbagegay, andway ILNAY ifway itway illway."

#: target:code/hash-new.lisp
msgid ""
"Finds the entry in HASH-TABLE whose key is KEY and returns the associated\n"
"   value and T as multiple values, or returns DEFAULT and NIL if there is "
"no\n"
"   such entry.  Entries can be added using SETF."
msgstr ""
"Indsfay ethay entryway inway ASHHAY-ABLETAY osewhay eykay isway EYKAY andway "
"eturnsray ethay associatedway\n"
"   aluevay andway T asway ultiplemay aluesvay, orway eturnsray EFAULTDAY "
"andway ILNAY ifway erethay isway onay\n"
"   uchsay entryway.  Entriesway ancay ebay addedway usingway ETFSAY."

#: target:code/hash-new.lisp
msgid ""
"Remove the entry in HASH-TABLE associated with KEY.  Returns T if there\n"
"   was such an entry, and NIL if not."
msgstr ""
"Emoveray ethay entryway inway ASHHAY-ABLETAY associatedway ithway EYKAY.  "
"Eturnsray T ifway erethay\n"
"   asway uchsay anway entryway, andway ILNAY ifway otnay."

#: target:code/hash-new.lisp
msgid ""
"This removes all the entries from HASH-TABLE and returns the hash table\n"
"   itself."
msgstr ""
"Isthay emovesray allway ethay entriesway omfray ASHHAY-ABLETAY andway "
"eturnsray ethay ashhay abletay\n"
"   itselfway."

#: target:code/hash-new.lisp
msgid ""
"This removes all the entries from HASH-TABLE and returns the hash table\n"
"   itself, shrinking the size to free memory."
msgstr ""
"Isthay emovesray allway ethay entriesway omfray ASHHAY-ABLETAY andway "
"eturnsray ethay ashhay abletay\n"
"   itselfway, rinkingshay ethay izesay otay eefray emorymay."

#: target:code/hash-new.lisp
msgid ""
"For each entry in HASH-TABLE, calls MAP-FUNCTION on the key and value\n"
"   of the entry; returns NIL."
msgstr ""
"Orfay eachway entryway inway ASHHAY-ABLETAY, allscay APMAY-UNCTIONFAY onway "
"ethay eykay andway aluevay\n"
"   ofway ethay entryway; eturnsray ILNAY."

#: target:code/hash-new.lisp
msgid ""
"WITH-HASH-TABLE-ITERATOR ((function hash-table) &body body)\n"
"   provides a method of manually looping over the elements of a hash-table.\n"
"   FUNCTION is bound to a generator-macro that, within the scope of the\n"
"   invocation, returns one or three values. The first value tells whether\n"
"   any objects remain in the hash table. When the first value is non-NIL, \n"
"   the second and third values are the key and the value of the next object."
msgstr ""
"ITHWAY-ASHHAY-ABLETAY-ITERATORWAY ((unctionfay ashhay-abletay) &odybay "
"odybay)\n"
"   ovidespray away ethodmay ofway anuallymay oopinglay overway ethay "
"elementsway ofway away ashhay-abletay.\n"
"   UNCTIONFAY isway oundbay otay away eneratorgay-acromay atthay, ithinway "
"ethay opescay ofway ethay\n"
"   invocationway, eturnsray oneway orway reethay aluesvay. Ethay irstfay "
"aluevay ellstay etherwhay\n"
"   anyway objectsway emainray inway ethay ashhay abletay. Enwhay ethay "
"irstfay aluevay isway onnay-ILNAY, \n"
"   ethay econdsay andway irdthay aluesvay areway ethay eykay andway ethay "
"aluevay ofway ethay extnay objectway."

#: target:pcl/slots.lisp target:code/hash-new.lisp
msgid "What kind of instance is this?"
msgstr "Atwhay indkay ofway instanceway isway isthay?"

#: target:code/hash-new.lisp
msgid "Computes a hash code for S-EXPR and returns it as an integer."
msgstr ""
"Omputescay away ashhay odecay orfay S-EXPRWAY andway eturnsray itway asway "
"anway integerway."

#: target:code/list.lisp
msgid "Returns the 1st object in a list."
msgstr "Eturnsray ethay 1tsay objectway inway away istlay."

#: target:code/list.lisp
msgid "Returns all but the first object."
msgstr "Eturnsray allway utbay ethay irstfay objectway."

#: target:code/list.lisp
msgid "Returns the 2nd object in a list."
msgstr "Eturnsray ethay 2dnay objectway inway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the 1st sublist."
msgstr "Eturnsray ethay drcay ofway ethay 1tsay ublistsay."

#: target:code/list.lisp
msgid "Returns the car of the 1st sublist."
msgstr "Eturnsray ethay arcay ofway ethay 1tsay ublistsay."

#: target:code/list.lisp
msgid "Returns all but the 1st two objects of a list."
msgstr "Eturnsray allway utbay ethay 1tsay wotay objectsway ofway away istlay."

#: target:code/list.lisp
msgid "Returns the 1st object in the cddr of a list."
msgstr "Eturnsray ethay 1tsay objectway inway ethay ddrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the 1st object in the cadr of a list."
msgstr "Eturnsray ethay 1tsay objectway inway ethay adrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the 1st object in the caar of a list."
msgstr "Eturnsray ethay 1tsay objectway inway ethay aarcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the caar of a list."
msgstr "Eturnsray ethay drcay ofway ethay aarcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the cdar of a list."
msgstr "Eturnsray ethay drcay ofway ethay darcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the cddr of a list."
msgstr "Eturnsray ethay drcay ofway ethay ddrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the car of the cdar of a list."
msgstr "Eturnsray ethay arcay ofway ethay darcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the cadr of a list."
msgstr "Eturnsray ethay drcay ofway ethay adrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the car of the caaar of a list."
msgstr "Eturnsray ethay arcay ofway ethay aaarcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the car of the caadr of a list."
msgstr "Eturnsray ethay arcay ofway ethay aadrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the car of the caddr of a list."
msgstr "Eturnsray ethay arcay ofway ethay addrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the car of the cdddr of a list."
msgstr "Eturnsray ethay arcay ofway ethay dddrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the cdddr of a list."
msgstr "Eturnsray ethay drcay ofway ethay dddrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the caaar of a list."
msgstr "Eturnsray ethay drcay ofway ethay aaarcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the cdaar of a list."
msgstr "Eturnsray ethay drcay ofway ethay daarcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the cddar of a list."
msgstr "Eturnsray ethay drcay ofway ethay ddarcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the car of the cadar of a list."
msgstr "Eturnsray ethay arcay ofway ethay adarcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the car of the cdaar of a list."
msgstr "Eturnsray ethay arcay ofway ethay daarcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the car of the cdadr of a list."
msgstr "Eturnsray ethay arcay ofway ethay dadrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the car of the cddar of a list."
msgstr "Eturnsray ethay arcay ofway ethay ddarcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the caadr of a list."
msgstr "Eturnsray ethay drcay ofway ethay aadrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the cadar of a list."
msgstr "Eturnsray ethay drcay ofway ethay adarcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the caddr of a list."
msgstr "Eturnsray ethay drcay ofway ethay addrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns the cdr of the cdadr of a list."
msgstr "Eturnsray ethay drcay ofway ethay dadrcay ofway away istlay."

#: target:code/list.lisp
msgid "Returns a list with se1 as the car and se2 as the cdr."
msgstr ""
"Eturnsray away istlay ithway esay1 asway ethay arcay andway esay2 asway "
"ethay drcay."

#: target:code/list.lisp
msgid "Returns T if X and Y are isomorphic trees with identical leaves."
msgstr ""
"Eturnsray T ifway X andway Y areway isomorphicway eestray ithway "
"identicalway eaveslay."

#: target:code/list.lisp
msgid ""
"The recommended way to test for the end of a list.  True if Object is nil,\n"
"   false if Object is a cons, and an error for any other types of arguments."
msgstr ""
"Ethay ecommendedray ayway otay esttay orfay ethay endway ofway away istlay.  "
"Uetray ifway Objectway isway ilnay,\n"
"   alsefay ifway Objectway isway away onscay, andway anway errorway orfay "
"anyway otherway ypestay ofway argumentsway."

#: target:code/list.lisp
msgid "Returns the length of the given List, or Nil if the List is circular."
msgstr ""
"Eturnsray ethay engthlay ofway ethay ivengay Istlay, orway Ilnay ifway ethay "
"Istlay isway ircularcay."

#: target:code/list.lisp
msgid "Returns the nth object in a list where the car is the zero-th element."
msgstr ""
"Eturnsray ethay thnay objectway inway away istlay erewhay ethay arcay isway "
"ethay erozay-thay elementway."

#: target:code/list.lisp
msgid "Returns the 1st object in a list or NIL if the list is empty."
msgstr ""
"Eturnsray ethay 1tsay objectway inway away istlay orway ILNAY ifway ethay "
"istlay isway emptyway."

#: target:code/list.lisp
msgid "Returns the 2nd object in a list or NIL if there is no 2nd object."
msgstr ""
"Eturnsray ethay 2dnay objectway inway away istlay orway ILNAY ifway erethay "
"isway onay 2dnay objectway."

#: target:code/list.lisp
msgid "Returns the 3rd object in a list or NIL if there is no 3rd object."
msgstr ""
"Eturnsray ethay 3dray objectway inway away istlay orway ILNAY ifway erethay "
"isway onay 3dray objectway."

#: target:code/list.lisp
msgid "Returns the 4th object in a list or NIL if there is no 4th object."
msgstr ""
"Eturnsray ethay 4thay objectway inway away istlay orway ILNAY ifway erethay "
"isway onay 4thay objectway."

#: target:code/list.lisp
msgid "Returns the 5th object in a list or NIL if there is no 5th object."
msgstr ""
"Eturnsray ethay 5thay objectway inway away istlay orway ILNAY ifway erethay "
"isway onay 5thay objectway."

#: target:code/list.lisp
msgid "Returns the 6th object in a list or NIL if there is no 6th object."
msgstr ""
"Eturnsray ethay 6thay objectway inway away istlay orway ILNAY ifway erethay "
"isway onay 6thay objectway."

#: target:code/list.lisp
msgid "Returns the 7th object in a list or NIL if there is no 7th object."
msgstr ""
"Eturnsray ethay 7thay objectway inway away istlay orway ILNAY ifway erethay "
"isway onay 7thay objectway."

#: target:code/list.lisp
msgid "Returns the 8th object in a list or NIL if there is no 8th object."
msgstr ""
"Eturnsray ethay 8thay objectway inway away istlay orway ILNAY ifway erethay "
"isway onay 8thay objectway."

#: target:code/list.lisp
msgid "Returns the 9th object in a list or NIL if there is no 9th object."
msgstr ""
"Eturnsray ethay 9thay objectway inway away istlay orway ILNAY ifway erethay "
"isway onay 9thay objectway."

#: target:code/list.lisp
msgid "Returns the 10th object in a list or NIL if there is no 10th object."
msgstr ""
"Eturnsray ethay 10thay objectway inway away istlay orway ILNAY ifway erethay "
"isway onay 10thay objectway."

#: target:code/list.lisp
msgid "Means the same as the cdr of a list."
msgstr "Eansmay ethay amesay asway ethay drcay ofway away istlay."

#: target:code/list.lisp
msgid "Performs the cdr function n times on a list."
msgstr "Erformspay ethay drcay unctionfay n imestay onway away istlay."

#: target:code/list.lisp
msgid "Returns the last N conses (not the last element!) of a list."
msgstr ""
"Eturnsray ethay astlay N onsescay (otnay ethay astlay elementway!) ofway "
"away istlay."

#: target:code/list.lisp
msgid "Returns constructs and returns a list of its arguments."
msgstr ""
"Eturnsray onstructscay andway eturnsray away istlay ofway itsway "
"argumentsway."

#: target:code/list.lisp
msgid "Returns a list of the arguments with last cons a dotted pair"
msgstr ""
"Eturnsray away istlay ofway ethay argumentsway ithway astlay onscay away "
"ottedday airpay"

#: target:code/list.lisp
msgid "Constructs a list with size elements each set to value"
msgstr ""
"Onstructscay away istlay ithway izesay elementsway eachway etsay otay aluevay"

#: target:code/list.lisp
msgid "~S is not a proper list"
msgstr "~S isway otnay away operpray istlay"

#: target:code/list.lisp
msgid ""
"Typically, returns a new list that is the concatenation of Args.\n"
"\n"
"  Each Arg in Args must be a proper list except the last one, which\n"
"  may be any object.  The function is not destructive: for all but the\n"
"  last Arg, its list structure is copied.  The last argument is not\n"
"  copied; it becomes the cdr of the final dotted pair of the\n"
"  concatenation of the preceding lists, or is returned directly if\n"
"  there are no preceding non-empty lists.  In the latter case, if the\n"
"  last Arg is not a list, the returned value is not a list either."
msgstr ""
"Ypicallytay, eturnsray away ewnay istlay atthay isway ethay oncatenationcay "
"ofway Argsway.\n"
"\n"
"  Eachway Argway inway Argsway ustmay ebay away operpray istlay exceptway "
"ethay astlay oneway, ichwhay\n"
"  aymay ebay anyway objectway.  Ethay unctionfay isway otnay estructiveday: "
"orfay allway utbay ethay\n"
"  astlay Argway, itsway istlay ucturestray isway opiedcay.  Ethay astlay "
"argumentway isway otnay\n"
"  opiedcay; itway ecomesbay ethay drcay ofway ethay inalfay ottedday airpay "
"ofway ethay\n"
"  oncatenationcay ofway ethay ecedingpray istslay, orway isway eturnedray "
"irectlyday ifway\n"
"  erethay areway onay ecedingpray onnay-emptyway istslay.  Inway ethay "
"atterlay asecay, ifway ethay\n"
"  astlay Argway isway otnay away istlay, ethay eturnedray aluevay isway "
"otnay away istlay eitherway."

#: target:code/list.lisp
msgid "~S is not a list."
msgstr "~S isway otnay away istlay."

#: target:code/list.lisp
msgid "Returns a new list EQUAL but not EQ to list"
msgstr "Eturnsray away ewnay istlay EQUALWAY utbay otnay EQWAY otay istlay"

#: target:code/list.lisp
msgid "Returns a new association list equal to alist, constructed in space"
msgstr ""
"Eturnsray away ewnay associationway istlay equalway otay alistway, "
"onstructedcay inway acespay"

#: target:code/list.lisp
msgid "Copy-Tree recursively copys trees of conses."
msgstr "Opycay-Eetray ecursivelyray opyscay eestray ofway onsescay."

#: target:code/list.lisp
msgid "Returns (append (reverse x) y)"
msgstr "Eturnsray (appendway (everseray x) y)"

#: target:code/list.lisp
msgid "Concatenates the lists given as arguments (by changing them)"
msgstr ""
"Oncatenatescay ethay istslay ivengay asway argumentsway (ybay angingchay "
"emthay)"

#: target:code/list.lisp
msgid "Argument is not a list -- ~S."
msgstr "Argumentway isway otnay away istlay -- ~S."

#: target:code/list.lisp
msgid "Returns (nconc (nreverse x) y)"
msgstr "Eturnsray (concnay (reversenay x) y)"

#: target:code/list.lisp
msgid "First argument is not a proper list."
msgstr "Irstfay argumentway isway otnay away operpray istlay."

#: target:code/list.lisp
msgid ""
"Returns a new list the same as List without the last N conses.\n"
"   List must not be circular."
msgstr ""
"Eturnsray away ewnay istlay ethay amesay asway Istlay ithoutway ethay astlay "
"N onsescay.\n"
"   Istlay ustmay otnay ebay ircularcay."

#: target:code/list.lisp
msgid "Modifies List to remove the last N conses. List must not be circular."
msgstr ""
"Odifiesmay Istlay otay emoveray ethay astlay N onsescay. Istlay ustmay otnay "
"ebay ircularcay."

#: target:code/list.lisp
msgid ""
"Returns a new list, whose elements are those of List that appear before\n"
"   Object.  If Object is not a tail of List, a copy of List is returned.\n"
"   List must be a proper list or a dotted list."
msgstr ""
"Eturnsray away ewnay istlay, osewhay elementsway areway osethay ofway Istlay "
"atthay appearway eforebay\n"
"   Objectway.  Ifway Objectway isway otnay away ailtay ofway Istlay, away "
"opycay ofway Istlay isway eturnedray.\n"
"   Istlay ustmay ebay away operpray istlay orway away ottedday istlay."

#: target:code/list.lisp
msgid "Changes the car of x to y and returns the new x."
msgstr "Angeschay ethay arcay ofway x otay y andway eturnsray ethay ewnay x."

#: target:code/list.lisp
msgid "Changes the cdr of x to y and returns the new x."
msgstr "Angeschay ethay drcay ofway x otay y andway eturnsray ethay ewnay x."

#: target:code/list.lisp
msgid "Sets the Nth element of List (zero based) to Newval."
msgstr ""
"Etssay ethay Thnay elementway ofway Istlay (erozay asedbay) otay Ewvalnay."

#: target:code/list.lisp
msgid "~S is too large an index for SETF of NTH."
msgstr "~S isway ootay argelay anway indexway orfay ETFSAY ofway THNAY."

#: target:code/list.lisp
msgid "Returns what was passed to it."
msgstr "Eturnsray atwhay asway assedpay otay itway."

#: target:code/list.lisp
msgid ""
"Builds a new function that returns T whenever FUNCTION returns NIL and\n"
"   NIL whenever FUNCTION returns T."
msgstr ""
"Uildsbay away ewnay unctionfay atthay eturnsray T eneverwhay UNCTIONFAY "
"eturnsray ILNAY andway\n"
"   ILNAY eneverwhay UNCTIONFAY eturnsray T."

#: target:code/list.lisp
msgid "Builds a function that always returns VALUE, and posisbly MORE-VALUES."
msgstr ""
"Uildsbay away unctionfay atthay alwaysway eturnsray ALUEVAY, andway "
"osisblypay OREMAY-ALUESVAY."

#: target:code/list.lisp
msgid "Substitutes new for subtrees matching old."
msgstr "Ubstitutessay ewnay orfay ubtreessay atchingmay oldway."

#: target:code/list.lisp
msgid "Substitutes new for subtrees for which test is true."
msgstr ""
"Ubstitutessay ewnay orfay ubtreessay orfay ichwhay esttay isway uetray."

#: target:code/list.lisp
msgid "Substitutes new for subtrees for which test is false."
msgstr ""
"Ubstitutessay ewnay orfay ubtreessay orfay ichwhay esttay isway alsefay."

#: target:code/list.lisp
msgid "Substitutes new for subtrees of tree for which test is true."
msgstr ""
"Ubstitutessay ewnay orfay ubtreessay ofway eetray orfay ichwhay esttay isway "
"uetray."

#: target:code/list.lisp
msgid "Substitutes new for subtrees of tree for which test is false."
msgstr ""
"Ubstitutessay ewnay orfay ubtreessay ofway eetray orfay ichwhay esttay isway "
"alsefay."

#: target:code/list.lisp
msgid "Substitutes from alist into tree nondestructively."
msgstr "Ubstitutessay omfray alistway intoway eetray ondestructivelynay."

#: target:code/list.lisp
msgid ""
"Returns tail of list beginning with first element satisfying EQLity,\n"
"   :test, or :test-not with a given item."
msgstr ""
"Eturnsray ailtay ofway istlay eginningbay ithway irstfay elementway "
"atisfyingsay Eqlityway,\n"
"   :esttay, orway :esttay-otnay ithway away ivengay itemway."

#: target:code/list.lisp
msgid ""
"Returns tail of list beginning with first element satisfying test(element)"
msgstr ""
"Eturnsray ailtay ofway istlay eginningbay ithway irstfay elementway "
"atisfyingsay esttay(elementway)"

#: target:code/list.lisp
msgid ""
"Returns tail of list beginning with first element not satisfying test(el)"
msgstr ""
"Eturnsray ailtay ofway istlay eginningbay ithway irstfay elementway otnay "
"atisfyingsay esttay(elway)"

#: target:code/list.lisp
msgid ""
"Returns true if Object is the same as some tail of List, otherwise\n"
"   returns false. List must be a proper list or a dotted list."
msgstr ""
"Eturnsray uetray ifway Objectway isway ethay amesay asway omesay ailtay "
"ofway Istlay, otherwiseway\n"
"   eturnsray alsefay. Istlay ustmay ebay away operpray istlay orway away "
"ottedday istlay."

#: target:code/list.lisp
msgid "Add item to list unless it is already a member"
msgstr ""
"Addway itemway otay istlay unlessway itway isway alreadyway away embermay"

#: target:code/list.lisp
msgid "Returns the union of list1 and list2."
msgstr "Eturnsray ethay unionway ofway istlay1 andway istlay2."

#: target:code/list.lisp
msgid "Test and test-not both supplied."
msgstr "Esttay andway esttay-otnay othbay uppliedsay."

#: target:code/list.lisp
msgid "Destructively returns the union list1 and list2."
msgstr "Estructivelyday eturnsray ethay unionway istlay1 andway istlay2."

#: target:code/list.lisp
msgid "Returns the intersection of list1 and list2."
msgstr "Eturnsray ethay intersectionway ofway istlay1 andway istlay2."

#: target:code/list.lisp
msgid "Destructively returns the intersection of list1 and list2."
msgstr ""
"Estructivelyday eturnsray ethay intersectionway ofway istlay1 andway istlay2."

#: target:code/list.lisp
msgid "Returns the elements of list1 which are not in list2."
msgstr ""
"Eturnsray ethay elementsway ofway istlay1 ichwhay areway otnay inway istlay2."

#: target:code/list.lisp
msgid "Destructively returns the elements of list1 which are not in list2."
msgstr ""
"Estructivelyday eturnsray ethay elementsway ofway istlay1 ichwhay areway "
"otnay inway istlay2."

#: target:code/list.lisp
msgid "Return new list of elements appearing exactly once in LIST1 and LIST2."
msgstr ""
"Eturnray ewnay istlay ofway elementsway appearingway exactlyway onceway "
"inway ISTLAY1 andway ISTLAY2."

#: target:code/list.lisp
msgid ""
"Destructively return a list with elements which appear but once in LIST1\n"
"   and LIST2."
msgstr ""
"Estructivelyday eturnray away istlay ithway elementsway ichwhay appearway "
"utbay onceway inway ISTLAY1\n"
"   andway ISTLAY2."

#: target:code/list.lisp
msgid "Returns T if every element in list1 is also in list2."
msgstr ""
"Eturnsray T ifway everyway elementway inway istlay1 isway alsoway inway "
"istlay2."

#: target:code/list.lisp
msgid "Construct a new alist by adding the pair (key . datum) to alist"
msgstr ""
"Onstructcay away ewnay alistway ybay addingway ethay airpay (eykay . "
"atumday) otay alistway"

#: target:code/list.lisp
msgid "Construct an association list from keys and data (adding to alist)"
msgstr ""
"Onstructcay anway associationway istlay omfray eyskay andway ataday "
"(addingway otay alistway)"

#: target:code/list.lisp
msgid "The lists of keys and data are of unequal length."
msgstr ""
"Ethay istslay ofway eyskay andway ataday areway ofway unequalway engthlay."

#: target:code/list.lisp
msgid ""
"Returns the cons in alist whose car is equal (by a given test or EQL) to\n"
"   the Item."
msgstr ""
"Eturnsray ethay onscay inway alistway osewhay arcay isway equalway (ybay "
"away ivengay esttay orway EQLWAY) otay\n"
"   ethay Itemway."

#: target:code/list.lisp
msgid ""
"Returns the first cons in alist whose car satisfies the Predicate.  If\n"
"   key is supplied, apply it to the car of each cons before testing."
msgstr ""
"Eturnsray ethay irstfay onscay inway alistway osewhay arcay atisfiessay "
"ethay Edicatepray.  Ifway\n"
"   eykay isway uppliedsay, applyway itway otay ethay arcay ofway eachway "
"onscay eforebay estingtay."

#: target:code/list.lisp
msgid ""
"Returns the first cons in alist whose car does not satisfiy the Predicate.\n"
"  If key is supplied, apply it to the car of each cons before testing."
msgstr ""
"Eturnsray ethay irstfay onscay inway alistway osewhay arcay oesday otnay "
"atisfiysay ethay Edicatepray.\n"
"  Ifway eykay isway uppliedsay, applyway itway otay ethay arcay ofway "
"eachway onscay eforebay estingtay."

#: target:code/list.lisp
msgid ""
"Returns the cons in alist whose cdr is equal (by a given test or EQL) to\n"
"   the Item."
msgstr ""
"Eturnsray ethay onscay inway alistway osewhay drcay isway equalway (ybay "
"away ivengay esttay orway EQLWAY) otay\n"
"   ethay Itemway."

#: target:code/list.lisp
msgid ""
"Returns the first cons in alist whose cdr satisfies the Predicate.  If key\n"
"  is supplied, apply it to the cdr of each cons before testing."
msgstr ""
"Eturnsray ethay irstfay onscay inway alistway osewhay drcay atisfiessay "
"ethay Edicatepray.  Ifway eykay\n"
"  isway uppliedsay, applyway itway otay ethay drcay ofway eachway onscay "
"eforebay estingtay."

#: target:code/list.lisp
msgid ""
"Returns the first cons in alist whose cdr does not satisfy the Predicate.\n"
"  If key is supplied, apply it to the cdr of each cons before testing."
msgstr ""
"Eturnsray ethay irstfay onscay inway alistway osewhay drcay oesday otnay "
"atisfysay ethay Edicatepray.\n"
"  Ifway eykay isway uppliedsay, applyway itway otay ethay drcay ofway "
"eachway onscay eforebay estingtay."

#: target:code/list.lisp
msgid ""
"This function is called by mapc, mapcar, mapcan, mapl, maplist, and mapcon.\n"
"  It Maps function over the arglists in the appropriate way. It is done when "
"any\n"
"  of the arglists runs out.  Until then, it CDRs down the arglists calling "
"the\n"
"  function and accumulating results as desired."
msgstr ""
"Isthay unctionfay isway alledcay ybay apcmay, apcarmay, apcanmay, aplmay, "
"aplistmay, andway apconmay.\n"
"  Itway Apsmay unctionfay overway ethay arglistsway inway ethay "
"appropriateway ayway. Itway isway oneday enwhay anyway\n"
"  ofway ethay arglistsway unsray outway.  Untilway enthay, itway Drscay "
"ownday ethay arglistsway allingcay ethay\n"
"  unctionfay andway accumulatingway esultsray asway esiredday."

#: target:code/list.lisp
msgid ""
"Applies fn to successive elements of lists, returns its second argument."
msgstr ""
"Appliesway nfay otay uccessivesay elementsway ofway istslay, eturnsray "
"itsway econdsay argumentway."

#: target:code/list.lisp
msgid "Applies fn to successive elements of list, returns list of results."
msgstr ""
"Appliesway nfay otay uccessivesay elementsway ofway istlay, eturnsray istlay "
"ofway esultsray."

#: target:code/list.lisp
msgid "Applies fn to successive elements of list, returns NCONC of results."
msgstr ""
"Appliesway nfay otay uccessivesay elementsway ofway istlay, eturnsray "
"CONCNAY ofway esultsray."

#: target:code/list.lisp
msgid "Applies fn to successive CDRs of list, returns ()."
msgstr "Appliesway nfay otay uccessivesay Drscay ofway istlay, eturnsray ()."

#: target:code/list.lisp
msgid "Applies fn to successive CDRs of list, returns list of results."
msgstr ""
"Appliesway nfay otay uccessivesay Drscay ofway istlay, eturnsray istlay "
"ofway esultsray."

#: target:code/list.lisp
msgid "Applies fn to successive CDRs of lists, returns NCONC of results."
msgstr ""
"Appliesway nfay otay uccessivesay Drscay ofway istslay, eturnsray CONCNAY "
"ofway esultsray."

#: target:code/list.lisp
msgid "Returns tail of list beginning with first element eq to item"
msgstr ""
"Eturnsray ailtay ofway istlay eginningbay ithway irstfay elementway eqway "
"otay itemway"

#: target:code/list.lisp
msgid "Return the first pair of alist where item EQ the key of pair"
msgstr ""
"Eturnray ethay irstfay airpay ofway alistway erewhay itemway EQWAY ethay "
"eykay ofway airpay"

#: target:code/list.lisp
msgid "Returns list with all elements with all elements EQ to ITEM deleted."
msgstr ""
"Eturnsray istlay ithway allway elementsway ithway allway elementsway EQWAY "
"otay ITEMWAY eletedday."

#: target:code/seq.lisp
msgid ""
"Returns a list of the Nth element of each of the sequences.  Used by MAP\n"
"   and friends."
msgstr ""
"Eturnsray away istlay ofway ethay Thnay elementway ofway eachway ofway ethay "
"equencessay.  Usedway ybay APMAY\n"
"   andway iendsfray."

#: target:code/seq.lisp
msgid "Returns a sequence of the same type as SEQUENCE and the given LENGTH."
msgstr ""
"Eturnsray away equencesay ofway ethay amesay ypetay asway EQUENCESAY andway "
"ethay ivengay ENGTHLAY."

#: target:code/seq.lisp
msgid "Returns the broad class of which TYPE is a specific subclass."
msgstr ""
"Eturnsray ethay oadbray assclay ofway ichwhay YPETAY isway away ecificspay "
"ubclasssay."

#: target:code/seq.lisp
msgid "NIL output type invalid for this sequence function."
msgstr "ILNAY outputway ypetay invalidway orfay isthay equencesay unctionfay."

#: target:code/seq.lisp
msgid "~S is too hairy for sequence functions."
msgstr "~S isway ootay airyhay orfay equencesay unctionsfay."

#: target:code/seq.lisp
msgid "~S is a bad type specifier for sequence functions."
msgstr "~S isway away adbay ypetay ecifierspay orfay equencesay unctionsfay."

#: target:code/seq.lisp
msgid "Error in ~S: ~S: Index too large."
msgstr "Errorway inway ~S: ~S: Indexway ootay argelay."

#: target:code/seq.lisp
msgid "Returns a sequence of the given TYPE and LENGTH."
msgstr "Eturnsray away equencesay ofway ethay ivengay YPETAY andway ENGTHLAY."

#: target:code/seq.lisp
msgid "Returns the element of SEQUENCE specified by INDEX."
msgstr "Eturnsray ethay elementway ofway EQUENCESAY ecifiedspay ybay INDEXWAY."

#: target:code/seq.lisp
msgid "Store NEWVAL as the component of SEQUENCE specified by INDEX."
msgstr ""
"Toresay EWVALNAY asway ethay omponentcay ofway EQUENCESAY ecifiedspay ybay "
"INDEXWAY."

#: target:code/seq.lisp
msgid "Returns an integer that is the length of SEQUENCE."
msgstr ""
"Eturnsray anway integerway atthay isway ethay engthlay ofway EQUENCESAY."

#: target:code/seq.lisp
msgid "~S is a bad type specifier for sequences"
msgstr "~S isway away adbay ypetay ecifierspay orfay equencessay"

#: target:code/seq.lisp
msgid "Shouldn't happen!  Weird type"
msgstr "Ouldnshay't appenhay!  Eirdway ypetay"

#: target:code/seq.lisp
msgid ""
"The length of ~S does not match the specified ~\n"
"                          length of ~S."
msgstr ""
"Ethay engthlay ofway ~S oesday otnay atchmay ethay ecifiedspay ~\n"
"                          engthlay ofway ~S."

#: target:code/seq.lisp
msgid ""
"Returns a sequence of the given Type and Length, with elements initialized\n"
"  to :Initial-Element."
msgstr ""
"Eturnsray away equencesay ofway ethay ivengay Ypetay andway Engthlay, ithway "
"elementsway initializedway\n"
"  otay :Initialway-Elementway."

#: target:code/seq.lisp
msgid ""
"The length of ~S does not match the specified ~\n"
"                           length  of ~S."
msgstr ""
"Ethay engthlay ofway ~S oesday otnay atchmay ethay ecifiedspay ~\n"
"                           engthlay  ofway ~S."

#: target:code/seq.lisp
msgid "~S is a bad type specifier for sequences."
msgstr "~S isway away adbay ypetay ecifierspay orfay equencessay."

#: target:code/seq.lisp
msgid ""
"Returns a copy of a subsequence of SEQUENCE starting with element number \n"
"   START and continuing to the end of SEQUENCE or the optional END."
msgstr ""
"Eturnsray away opycay ofway away ubsequencesay ofway EQUENCESAY tartingsay "
"ithway elementway umbernay \n"
"   TARTSAY andway ontinuingcay otay ethay endway ofway EQUENCESAY orway "
"ethay optionalway ENDWAY."

#: target:code/seq.lisp
msgid "Returns a copy of SEQUENCE which is EQUAL to SEQUENCE but not EQ."
msgstr ""
"Eturnsray away opycay ofway EQUENCESAY ichwhay isway EQUALWAY otay "
"EQUENCESAY utbay otnay EQWAY."

#: target:code/seq.lisp
msgid "Replace the specified elements of SEQUENCE with ITEM."
msgstr ""
"Eplaceray ethay ecifiedspay elementsway ofway EQUENCESAY ithway ITEMWAY."

#: target:code/seq.lisp
msgid ""
"The target sequence is destructively modified by copying successive\n"
"   elements into it from the source sequence."
msgstr ""
"Ethay argettay equencesay isway estructivelyday odifiedmay ybay opyingcay "
"uccessivesay\n"
"   elementsway intoway itway omfray ethay ourcesay equencesay."

#: target:code/seq.lisp
msgid ""
"Returns a new sequence containing the same elements but in reverse order."
msgstr ""
"Eturnsray away ewnay equencesay ontainingcay ethay amesay elementsway utbay "
"inway everseray orderway."

#: target:code/seq.lisp
msgid ""
"Returns a sequence of the same elements in reverse order; the argument\n"
"   is destroyed."
msgstr ""
"Eturnsray away equencesay ofway ethay amesay elementsway inway everseray "
"orderway; ethay argumentway\n"
"   isway estroyedday."

#: target:code/seq.lisp
msgid ""
"Returns a new sequence of all the argument sequences concatenated together\n"
"  which shares no structure with the original argument sequences of the\n"
"  specified OUTPUT-TYPE-SPEC."
msgstr ""
"Eturnsray away ewnay equencesay ofway allway ethay argumentway equencessay "
"oncatenatedcay ogethertay\n"
"  ichwhay aresshay onay ucturestray ithway ethay originalway argumentway "
"equencessay ofway ethay\n"
"  ecifiedspay OUTPUTWAY-YPETAY-ECSPAY."

#: target:code/seq.lisp
msgid ""
"FUNCTION must take as many arguments as there are sequences provided.  The \n"
"   result is a sequence such that element i is the result of applying "
"FUNCTION\n"
"   to element i of each of the argument sequences."
msgstr ""
"UNCTIONFAY ustmay aketay asway anymay argumentsway asway erethay areway "
"equencessay ovidedpray.  Ethay \n"
"   esultray isway away equencesay uchsay atthay elementway i isway ethay "
"esultray ofway applyingway UNCTIONFAY\n"
"   otay elementway i ofway eachway ofway ethay argumentway equencessay."

#: target:code/seq.lisp
msgid ""
"PREDICATE is applied to the elements with index 0 of the sequences, then \n"
"   possibly to those with index 1, and so on.  SOME returns the first \n"
"   non-() value encountered, or () if the end of a sequence is reached."
msgstr ""
"EDICATEPRAY isway appliedway otay ethay elementsway ithway indexway 0 ofway "
"ethay equencessay, enthay \n"
"   ossiblypay otay osethay ithway indexway 1, andway osay onway.  OMESAY "
"eturnsray ethay irstfay \n"
"   onnay-() aluevay encounteredway, orway () ifway ethay endway ofway away "
"equencesay isway eachedray."

#: target:code/seq.lisp
msgid ""
"PREDICATE is applied to the elements with index 0 of the sequences, then\n"
"   possibly to those with index 1, and so on.  EVERY returns () as soon\n"
"   as any invocation of PREDICATE returns (), or T if every invocation\n"
"   is non-()."
msgstr ""
"EDICATEPRAY isway appliedway otay ethay elementsway ithway indexway 0 ofway "
"ethay equencessay, enthay\n"
"   ossiblypay otay osethay ithway indexway 1, andway osay onway.  EVERYWAY "
"eturnsray () asway oonsay\n"
"   asway anyway invocationway ofway EDICATEPRAY eturnsray (), orway T ifway "
"everyway invocationway\n"
"   isway onnay-()."

#: target:code/seq.lisp
msgid ""
"PREDICATE is applied to the elements with index 0 of the sequences, then \n"
"   possibly to those with index 1, and so on.  NOTANY returns () as soon\n"
"   as any invocation of PREDICATE returns a non-() value, or T if the end\n"
"   of a sequence is reached."
msgstr ""
"EDICATEPRAY isway appliedway otay ethay elementsway ithway indexway 0 ofway "
"ethay equencessay, enthay \n"
"   ossiblypay otay osethay ithway indexway 1, andway osay onway.  OTANYNAY "
"eturnsray () asway oonsay\n"
"   asway anyway invocationway ofway EDICATEPRAY eturnsray away onnay-() "
"aluevay, orway T ifway ethay endway\n"
"   ofway away equencesay isway eachedray."

#: target:code/seq.lisp
msgid ""
"PREDICATE is applied to the elements with index 0 of the sequences, then\n"
"   possibly to those with index 1, and so on.  NOTEVERY returns T as soon\n"
"   as any invocation of PREDICATE returns (), or () if every invocation\n"
"   is non-()."
msgstr ""
"EDICATEPRAY isway appliedway otay ethay elementsway ithway indexway 0 ofway "
"ethay equencessay, enthay\n"
"   ossiblypay otay osethay ithway indexway 1, andway osay onway.  OTEVERYNAY "
"eturnsray T asway oonsay\n"
"   asway anyway invocationway ofway EDICATEPRAY eturnsray (), orway () ifway "
"everyway invocationway\n"
"   isway onnay-()."

#: target:code/seq.lisp
msgid ""
"The specified Sequence is ``reduced'' using the given Function.\n"
"  See manual for details."
msgstr ""
"Ethay ecifiedspay Equencesay isway ``educedray'' usingway ethay ivengay "
"Unctionfay.\n"
"  Eesay anualmay orfay etailsday."

#: target:code/seq.lisp
msgid "Coerces the Object to an object of type Output-Type-Spec."
msgstr ""
"Oercescay ethay Objectway otay anway objectway ofway ypetay Outputway-Ypetay-"
"Ecspay."

#: target:code/seq.lisp
msgid "~S can't be converted to type ~S."
msgstr "~S ancay't ebay onvertedcay otay ypetay ~S."

#: target:code/seq.lisp
msgid ""
"Returns a sequence formed by destructively removing the specified Item from\n"
"  the given Sequence."
msgstr ""
"Eturnsray away equencesay ormedfay ybay estructivelyday emovingray ethay "
"ecifiedspay Itemway omfray\n"
"  ethay ivengay Equencesay."

#: target:code/seq.lisp
msgid ""
"Returns a sequence formed by destructively removing the elements satisfying\n"
"  the specified Predicate from the given Sequence."
msgstr ""
"Eturnsray away equencesay ormedfay ybay estructivelyday emovingray ethay "
"elementsway atisfyingsay\n"
"  ethay ecifiedspay Edicatepray omfray ethay ivengay Equencesay."

#: target:code/seq.lisp
msgid ""
"Returns a sequence formed by destructively removing the elements not\n"
"  satisfying the specified Predicate from the given Sequence."
msgstr ""
"Eturnsray away equencesay ormedfay ybay estructivelyday emovingray ethay "
"elementsway otnay\n"
"  atisfyingsay ethay ecifiedspay Edicatepray omfray ethay ivengay Equencesay."

#: target:code/seq.lisp
msgid ""
"Returns a copy of SEQUENCE with elements satisfying the test (default is\n"
"   EQL) with ITEM removed."
msgstr ""
"Eturnsray away opycay ofway EQUENCESAY ithway elementsway atisfyingsay ethay "
"esttay (efaultday isway\n"
"   EQLWAY) ithway ITEMWAY emovedray."

#: target:code/seq.lisp
msgid ""
"Returns a copy of sequence with elements such that predicate(element)\n"
"   is non-null are removed"
msgstr ""
"Eturnsray away opycay ofway equencesay ithway elementsway uchsay atthay "
"edicatepray(elementway)\n"
"   isway onnay-ullnay areway emovedray"

#: target:code/seq.lisp
msgid ""
"Returns a copy of sequence with elements such that predicate(element)\n"
"   is null are removed"
msgstr ""
"Eturnsray away opycay ofway equencesay ithway elementsway uchsay atthay "
"edicatepray(elementway)\n"
"   isway ullnay areway emovedray"

#: target:code/seq.lisp
msgid ""
"The elements of Sequence are compared pairwise, and if any two match,\n"
"   the one occuring earlier is discarded, unless FROM-END is true, in\n"
"   which case the one later in the sequence is discarded.  The resulting\n"
"   sequence is returned.\n"
"\n"
"   The :TEST-NOT argument is deprecated."
msgstr ""
"Ethay elementsway ofway Equencesay areway omparedcay airwisepay, andway "
"ifway anyway wotay atchmay,\n"
"   ethay oneway occuringway earlierway isway iscardedday, unlessway OMFRAY-"
"ENDWAY isway uetray, inway\n"
"   ichwhay asecay ethay oneway aterlay inway ethay equencesay isway "
"iscardedday.  Ethay esultingray\n"
"   equencesay isway eturnedray.\n"
"\n"
"   Ethay :ESTTAY-OTNAY argumentway isway eprecatedday."

#: target:code/seq.lisp
msgid ""
"The elements of Sequence are examined, and if any two match, one is\n"
"   discarded.  The resulting sequence, which may be formed by destroying "
"the\n"
"   given sequence, is returned.\n"
"\n"
"   The :TEST-NOT argument is deprecated."
msgstr ""
"Ethay elementsway ofway Equencesay areway examinedway, andway ifway anyway "
"wotay atchmay, oneway isway\n"
"   iscardedday.  Ethay esultingray equencesay, ichwhay aymay ebay ormedfay "
"ybay estroyingday ethay\n"
"   ivengay equencesay, isway eturnedray.\n"
"\n"
"   Ethay :ESTTAY-OTNAY argumentway isway eprecatedday."

#: target:code/seq.lisp
msgid ""
"Returns a sequence of the same kind as Sequence with the same elements\n"
"  except that all elements equal to Old are replaced with New.  See manual\n"
"  for details."
msgstr ""
"Eturnsray away equencesay ofway ethay amesay indkay asway Equencesay ithway "
"ethay amesay elementsway\n"
"  exceptway atthay allway elementsway equalway otay Oldway areway eplacedray "
"ithway Ewnay.  Eesay anualmay\n"
"  orfay etailsday."

#: target:code/seq.lisp
msgid ""
"Returns a sequence of the same kind as Sequence with the same elements\n"
"  except that all elements satisfying the Test are replaced with New.  See\n"
"  manual for details."
msgstr ""
"Eturnsray away equencesay ofway ethay amesay indkay asway Equencesay ithway "
"ethay amesay elementsway\n"
"  exceptway atthay allway elementsway atisfyingsay ethay Esttay areway "
"eplacedray ithway Ewnay.  Eesay\n"
"  anualmay orfay etailsday."

#: target:code/seq.lisp
msgid ""
"Returns a sequence of the same kind as Sequence with the same elements\n"
"  except that all elements not satisfying the Test are replaced with New.\n"
"  See manual for details."
msgstr ""
"Eturnsray away equencesay ofway ethay amesay indkay asway Equencesay ithway "
"ethay amesay elementsway\n"
"  exceptway atthay allway elementsway otnay atisfyingsay ethay Esttay areway "
"eplacedray ithway Ewnay.\n"
"  Eesay anualmay orfay etailsday."

#: target:code/seq.lisp
msgid ""
"Returns a sequence of the same kind as Sequence with the same elements\n"
"  except that all elements equal to Old are replaced with New.  The "
"Sequence\n"
"  may be destroyed.  See manual for details."
msgstr ""
"Eturnsray away equencesay ofway ethay amesay indkay asway Equencesay ithway "
"ethay amesay elementsway\n"
"  exceptway atthay allway elementsway equalway otay Oldway areway eplacedray "
"ithway Ewnay.  Ethay Equencesay\n"
"  aymay ebay estroyedday.  Eesay anualmay orfay etailsday."

#: target:code/seq.lisp
msgid ""
"Returns a sequence of the same kind as Sequence with the same elements\n"
"   except that all elements satisfying the Test are replaced with New.  The\n"
"   Sequence may be destroyed.  See manual for details."
msgstr ""
"Eturnsray away equencesay ofway ethay amesay indkay asway Equencesay ithway "
"ethay amesay elementsway\n"
"   exceptway atthay allway elementsway atisfyingsay ethay Esttay areway "
"eplacedray ithway Ewnay.  Ethay\n"
"   Equencesay aymay ebay estroyedday.  Eesay anualmay orfay etailsday."

#: target:code/seq.lisp
msgid ""
"Returns a sequence of the same kind as Sequence with the same elements\n"
"   except that all elements not satisfying the Test are replaced with New.\n"
"   The Sequence may be destroyed.  See manual for details."
msgstr ""
"Eturnsray away equencesay ofway ethay amesay indkay asway Equencesay ithway "
"ethay amesay elementsway\n"
"   exceptway atthay allway elementsway otnay atisfyingsay ethay Esttay "
"areway eplacedray ithway Ewnay.\n"
"   Ethay Equencesay aymay ebay estroyedday.  Eesay anualmay orfay etailsday."

#: target:code/seq.lisp
msgid ""
"Returns the zero-origin index of the first element in SEQUENCE\n"
"   satisfying the test (default is EQL) with the given ITEM"
msgstr ""
"Eturnsray ethay erozay-originway indexway ofway ethay irstfay elementway "
"inway EQUENCESAY\n"
"   atisfyingsay ethay esttay (efaultday isway EQLWAY) ithway ethay ivengay "
"ITEMWAY"

#: target:code/seq.lisp
msgid "Returns the zero-origin index of the first element satisfying test(el)"
msgstr ""
"Eturnsray ethay erozay-originway indexway ofway ethay irstfay elementway "
"atisfyingsay esttay(elway)"

#: target:code/seq.lisp
msgid ""
"Returns the zero-origin index of the first element not satisfying test(el)"
msgstr ""
"Eturnsray ethay erozay-originway indexway ofway ethay irstfay elementway "
"otnay atisfyingsay esttay(elway)"

#: target:code/seq.lisp
msgid ""
"Returns the first element in SEQUENCE satisfying the test (default\n"
"   is EQL) with the given ITEM"
msgstr ""
"Eturnsray ethay irstfay elementway inway EQUENCESAY atisfyingsay ethay "
"esttay (efaultday\n"
"   isway EQLWAY) ithway ethay ivengay ITEMWAY"

#: target:code/seq.lisp
msgid "Returns the first element in SEQUENCE satisfying the test."
msgstr ""
"Eturnsray ethay irstfay elementway inway EQUENCESAY atisfyingsay ethay "
"esttay."

#: target:code/seq.lisp
msgid "Returns the first element in SEQUENCE not satisfying the test."
msgstr ""
"Eturnsray ethay irstfay elementway inway EQUENCESAY otnay atisfyingsay ethay "
"esttay."

#: target:code/seq.lisp
msgid ""
"Returns the number of elements in SEQUENCE satisfying a test with ITEM,\n"
"   which defaults to EQL."
msgstr ""
"Eturnsray ethay umbernay ofway elementsway inway EQUENCESAY atisfyingsay "
"away esttay ithway ITEMWAY,\n"
"   ichwhay efaultsday otay EQLWAY."

#: target:code/seq.lisp
msgid ":TEST and :TEST-NOT are both present."
msgstr ":ESTTAY andway :ESTTAY-OTNAY areway othbay esentpray."

#: target:code/seq.lisp
msgid "Returns the number of elements in SEQUENCE satisfying TEST(el)."
msgstr ""
"Eturnsray ethay umbernay ofway elementsway inway EQUENCESAY atisfyingsay "
"ESTTAY(elway)."

#: target:code/seq.lisp
msgid ""
"The specified subsequences of Sequence1 and Sequence2 are compared\n"
"   element-wise.  If they are of equal length and match in every element, "
"the\n"
"   result is NIL.  Otherwise, the result is a non-negative integer, the "
"index\n"
"   within Sequence1 of the leftmost position at which they fail to match; "
"or,\n"
"   if one is shorter than and a matching prefix of the other, the index "
"within\n"
"   Sequence1 beyond the last position tested is returned.  If a non-Nil\n"
"   :From-End keyword argument is given, then one plus the index of the\n"
"   rightmost position in which the sequences differ is returned."
msgstr ""
"Ethay ecifiedspay ubsequencessay ofway Equencesay1 andway Equencesay2 areway "
"omparedcay\n"
"   elementway-iseway.  Ifway eythay areway ofway equalway engthlay andway "
"atchmay inway everyway elementway, ethay\n"
"   esultray isway ILNAY.  Otherwiseway, ethay esultray isway away onnay-"
"egativenay integerway, ethay indexway\n"
"   ithinway Equencesay1 ofway ethay eftmostlay ositionpay atway ichwhay "
"eythay ailfay otay atchmay; orway,\n"
"   ifway oneway isway ortershay anthay andway away atchingmay efixpray ofway "
"ethay otherway, ethay indexway ithinway\n"
"   Equencesay1 eyondbay ethay astlay ositionpay estedtay isway eturnedray.  "
"Ifway away onnay-Ilnay\n"
"   :Omfray-Endway eywordkay argumentway isway ivengay, enthay oneway usplay "
"ethay indexway ofway ethay\n"
"   ightmostray ositionpay inway ichwhay ethay equencessay ifferday isway "
"eturnedray."

#: target:code/seq.lisp
msgid ""
"A search is conducted using EQL for the first subsequence of sequence2 \n"
"   which element-wise matches sequence1.  If there is such a subsequence "
"in \n"
"   sequence2, the index of the its leftmost element is returned; \n"
"   otherwise () is returned."
msgstr ""
"Away earchsay isway onductedcay usingway EQLWAY orfay ethay irstfay "
"ubsequencesay ofway equencesay2 \n"
"   ichwhay elementway-iseway atchesmay equencesay1.  Ifway erethay isway "
"uchsay away ubsequencesay inway \n"
"   equencesay2, ethay indexway ofway ethay itsway eftmostlay elementway "
"isway eturnedray; \n"
"   otherwiseway () isway eturnedray."

#: target:code/string.lisp
msgid ""
"Test if C is a surrogate.  C may be either an integer or a\n"
"  character. Surrogate-type indicates what kind of surrogate to test\n"
"  for.  :High means to test for the high (leading) surrogate; :Low\n"
"  tests for the low (trailing surrogate).  A value of :Any or Nil\n"
"  tests for any surrogate value (high or low)."
msgstr ""
"Esttay ifway C isway away urrogatesay.  C aymay ebay eitherway anway "
"integerway orway away\n"
"  aracterchay. Urrogatesay-ypetay indicatesway atwhay indkay ofway "
"urrogatesay otay esttay\n"
"  orfay.  :Ighhay eansmay otay esttay orfay ethay ighhay (eadinglay) "
"urrogatesay; :Owlay\n"
"  eststay orfay ethay owlay (ailingtray urrogatesay).  Away aluevay ofway :"
"Anyway orway Ilnay\n"
"  eststay orfay anyway urrogatesay aluevay (ighhay orway owlay)."

#: target:code/string.lisp
msgid ""
"Convert the given Hi and Lo surrogate characters to the\n"
"  corresponding codepoint value"
msgstr ""
"Onvertcay ethay ivengay Ihay andway Olay urrogatesay aracterschay otay "
"ethay\n"
"  orrespondingcay odepointcay aluevay"

#: target:code/string.lisp
msgid ""
"Return the codepoint value from String at position I.  If that\n"
"  position is a surrogate, it is combined with either the previous or\n"
"  following character (when possible) to compute the codepoint.  The\n"
"  second return value is NIL if the position is not a surrogate pair.\n"
"  Otherwise +1 or -1 is returned if the position is the high or low\n"
"  surrogate value, respectively."
msgstr ""
"Eturnray ethay odepointcay aluevay omfray Ingstray atway ositionpay Iway.  "
"Ifway atthay\n"
"  ositionpay isway away urrogatesay, itway isway ombinedcay ithway eitherway "
"ethay eviouspray orway\n"
"  ollowingfay aracterchay (enwhay ossiblepay) otay omputecay ethay "
"odepointcay.  Ethay\n"
"  econdsay eturnray aluevay isway ILNAY ifway ethay ositionpay isway otnay "
"away urrogatesay airpay.\n"
"  Otherwiseway +1 orway -1 isway eturnedray ifway ethay ositionpay isway "
"ethay ighhay orway owlay\n"
"  urrogatesay aluevay, espectivelyray."

#: target:code/string.lisp
msgid ""
"Return the high and low surrogate characters for Codepoint.  If\n"
"  Codepoint is in the BMP, the first return value is the corresponding\n"
"  character and the second is NIL."
msgstr ""
"Eturnray ethay ighhay andway owlay urrogatesay aracterschay orfay "
"Odepointcay.  Ifway\n"
"  Odepointcay isway inway ethay MPBAY, ethay irstfay eturnray aluevay isway "
"ethay orrespondingcay\n"
"  aracterchay andway ethay econdsay isway ILNAY."

#: target:code/string.lisp
msgid ""
"Set the codepoint at string position I to the Codepoint.  If the\n"
"  codepoint requires a surrogate pair, the high (leading surrogate) is\n"
"  stored at position I and the low (trailing) surrogate is stored at\n"
"  I+1"
msgstr ""
"Etsay ethay odepointcay atway ingstray ositionpay Iway otay ethay "
"Odepointcay.  Ifway ethay\n"
"  odepointcay equiresray away urrogatesay airpay, ethay ighhay (eadinglay "
"urrogatesay) isway\n"
"  toredsay atway ositionpay Iway andway ethay owlay (ailingtray) urrogatesay "
"isway toredsay atway\n"
"  Iway+1"

#: target:code/string.lisp
msgid ""
"Check if String is a valid UTF-16 string.  If the string is valid,\n"
"  T is returned.  If the string is not valid, NIL is returned, and the\n"
"  second value is the index into the string of the invalid character.\n"
"  A string is also invalid if it contains any unassigned codepoints."
msgstr ""
"Eckchay ifway Ingstray isway away alidvay UTFWAY-16 ingstray.  Ifway ethay "
"ingstray isway alidvay,\n"
"  T isway eturnedray.  Ifway ethay ingstray isway otnay alidvay, ILNAY isway "
"eturnedray, andway ethay\n"
"  econdsay aluevay isway ethay indexway intoway ethay ingstray ofway ethay "
"invalidway aracterchay.\n"
"  Away ingstray isway alsoway invalidway ifway itway ontainscay anyway "
"unassignedway odepointscay."

#: target:code/string.lisp
msgid ""
"Coerces X into a string.  If X is a string, X is returned.  If X is a\n"
"  symbol, X's pname is returned.  If X is a character then a one element\n"
"  string containing that character is returned.  If X cannot be coerced\n"
"  into a string, an error occurs."
msgstr ""
"Oercescay X intoway away ingstray.  Ifway X isway away ingstray, X isway "
"eturnedray.  Ifway X isway away\n"
"  ymbolsay, X's namepay isway eturnedray.  Ifway X isway away aracterchay "
"enthay away oneway elementway\n"
"  ingstray ontainingcay atthay aracterchay isway eturnedray.  Ifway X "
"annotcay ebay oercedcay\n"
"  intoway away ingstray, anway errorway occursway."

#: target:code/string.lisp
msgid "~S cannot be coerced to a string."
msgstr "~S annotcay ebay oercedcay otay away ingstray."

#: target:code/string.lisp
msgid ""
"Given a string and a non-negative integer index less than the length of\n"
"  the string, returns the character object representing the character at\n"
"  that position in the string."
msgstr ""
"Ivengay away ingstray andway away onnay-egativenay integerway indexway "
"esslay anthay ethay engthlay ofway\n"
"  ethay ingstray, eturnsray ethay aracterchay objectway epresentingray ethay "
"aracterchay atway\n"
"  atthay ositionpay inway ethay ingstray."

#: target:code/string.lisp
msgid ""
"SCHAR returns the character object at an indexed position in a string\n"
"  just as CHAR does, except the string must be a simple-string."
msgstr ""
"ARSCHAY eturnsray ethay aracterchay objectway atway anway indexedway "
"ositionpay inway away ingstray\n"
"  ustjay asway ARCHAY oesday, exceptway ethay ingstray ustmay ebay away "
"implesay-ingstray."

#: target:code/string.lisp
msgid ""
"Given two strings, if the first string is lexicographically less than\n"
"  the second string, returns the longest common prefix (using char=)\n"
"  of the two strings. Otherwise, returns ()."
msgstr ""
"Ivengay wotay ingsstray, ifway ethay irstfay ingstray isway "
"exicographicallylay esslay anthay\n"
"  ethay econdsay ingstray, eturnsray ethay ongestlay ommoncay efixpray "
"(usingway archay=)\n"
"  ofway ethay wotay ingsstray. Otherwiseway, eturnsray ()."

#: target:code/string.lisp
msgid ""
"Given two strings, if the first string is lexicographically greater than\n"
"  the second string, returns the longest common prefix (using char=)\n"
"  of the two strings. Otherwise, returns ()."
msgstr ""
"Ivengay wotay ingsstray, ifway ethay irstfay ingstray isway "
"exicographicallylay eatergray anthay\n"
"  ethay econdsay ingstray, eturnsray ethay ongestlay ommoncay efixpray "
"(usingway archay=)\n"
"  ofway ethay wotay ingsstray. Otherwiseway, eturnsray ()."

#: target:code/string.lisp
msgid ""
"Given two strings, if the first string is lexicographically less than\n"
"  or equal to the second string, returns the longest common prefix\n"
"  (using char=) of the two strings. Otherwise, returns ()."
msgstr ""
"Ivengay wotay ingsstray, ifway ethay irstfay ingstray isway "
"exicographicallylay esslay anthay\n"
"  orway equalway otay ethay econdsay ingstray, eturnsray ethay ongestlay "
"ommoncay efixpray\n"
"  (usingway archay=) ofway ethay wotay ingsstray. Otherwiseway, eturnsray ()."

#: target:code/string.lisp
msgid ""
"Given two strings, if the first string is lexicographically greater\n"
"  than or equal to the second string, returns the longest common prefix\n"
"  (using char=) of the two strings. Otherwise, returns ()."
msgstr ""
"Ivengay wotay ingsstray, ifway ethay irstfay ingstray isway "
"exicographicallylay eatergray\n"
"  anthay orway equalway otay ethay econdsay ingstray, eturnsray ethay "
"ongestlay ommoncay efixpray\n"
"  (usingway archay=) ofway ethay wotay ingsstray. Otherwiseway, eturnsray ()."

#: target:code/string.lisp
msgid ""
"Given two strings (string1 and string2), and optional integers start1,\n"
"  start2, end1 and end2, compares characters in string1 to characters in\n"
"  string2 (using char=)."
msgstr ""
"Ivengay wotay ingsstray (ingstray1 andway ingstray2), andway optionalway "
"integersway tartsay1,\n"
"  tartsay2, endway1 andway endway2, omparescay aracterschay inway ingstray1 "
"otay aracterschay inway\n"
"  ingstray2 (usingway archay=)."

#: target:code/string.lisp
msgid ""
"Given two strings, if the first string is not lexicographically equal\n"
"  to the second string, returns the longest common prefix (using char=)\n"
"  of the two strings. Otherwise, returns ()."
msgstr ""
"Ivengay wotay ingsstray, ifway ethay irstfay ingstray isway otnay "
"exicographicallylay equalway\n"
"  otay ethay econdsay ingstray, eturnsray ethay ongestlay ommoncay efixpray "
"(usingway archay=)\n"
"  ofway ethay wotay ingsstray. Otherwiseway, eturnsray ()."

#: target:code/string.lisp
msgid ""
"Return a new string with the case folded according to Casing as follows:\n"
"\n"
"  :SIMPLE  Unicode simple case folding (preserving length)\n"
"  :FULL    Unicode full case folding (possibly changing length)\n"
"\n"
"  Default Casing is :SIMPLE."
msgstr ""
"Eturnray away ewnay ingstray ithway ethay asecay oldedfay accordingway otay "
"Asingcay asway ollowsfay:\n"
"\n"
"  :IMPLESAY  Unicodeway implesay asecay oldingfay (eservingpray engthlay)\n"
"  :ULLFAY    Unicodeway ullfay asecay oldingfay (ossiblypay angingchay "
"engthlay)\n"
"\n"
"  Efaultday Asingcay isway :IMPLESAY."

#: target:code/string.lisp
msgid ""
"Given two strings (string1 and string2), and optional integers start1,\n"
"  start2, end1 and end2, compares characters in string1 to characters in\n"
"  string2 (using char-equal)."
msgstr ""
"Ivengay wotay ingsstray (ingstray1 andway ingstray2), andway optionalway "
"integersway tartsay1,\n"
"  tartsay2, endway1 andway endway2, omparescay aracterschay inway ingstray1 "
"otay aracterschay inway\n"
"  ingstray2 (usingway archay-equalway)."

#: target:code/string.lisp
msgid "Improper bounds for string comparison."
msgstr "Improperway oundsbay orfay ingstray omparisoncay."

#: target:code/string.lisp
msgid ""
"Given two strings, if the first string is not lexicographically equal\n"
"  to the second string, returns the longest common prefix (using char-"
"equal)\n"
"  of the two strings. Otherwise, returns ()."
msgstr ""
"Ivengay wotay ingsstray, ifway ethay irstfay ingstray isway otnay "
"exicographicallylay equalway\n"
"  otay ethay econdsay ingstray, eturnsray ethay ongestlay ommoncay efixpray "
"(usingway archay-equalway)\n"
"  ofway ethay wotay ingsstray. Otherwiseway, eturnsray ()."

#: target:code/string.lisp
msgid "Improper substring for comparison."
msgstr "Improperway ubstringsay orfay omparisoncay."

#: target:code/string.lisp
msgid ""
"Given two strings, if the first string is lexicographically less than\n"
"  the second string, returns the longest common prefix (using char-equal)\n"
"  of the two strings. Otherwise, returns ()."
msgstr ""
"Ivengay wotay ingsstray, ifway ethay irstfay ingstray isway "
"exicographicallylay esslay anthay\n"
"  ethay econdsay ingstray, eturnsray ethay ongestlay ommoncay efixpray "
"(usingway archay-equalway)\n"
"  ofway ethay wotay ingsstray. Otherwiseway, eturnsray ()."

#: target:code/string.lisp
msgid ""
"Given two strings, if the first string is lexicographically greater than\n"
"  the second string, returns the longest common prefix (using char-equal)\n"
"  of the two strings. Otherwise, returns ()."
msgstr ""
"Ivengay wotay ingsstray, ifway ethay irstfay ingstray isway "
"exicographicallylay eatergray anthay\n"
"  ethay econdsay ingstray, eturnsray ethay ongestlay ommoncay efixpray "
"(usingway archay-equalway)\n"
"  ofway ethay wotay ingsstray. Otherwiseway, eturnsray ()."

#: target:code/string.lisp
msgid ""
"Given two strings, if the first string is lexicographically greater\n"
"  than or equal to the second string, returns the longest common prefix\n"
"  (using char-equal) of the two strings. Otherwise, returns ()."
msgstr ""
"Ivengay wotay ingsstray, ifway ethay irstfay ingstray isway "
"exicographicallylay eatergray\n"
"  anthay orway equalway otay ethay econdsay ingstray, eturnsray ethay "
"ongestlay ommoncay efixpray\n"
"  (usingway archay-equalway) ofway ethay wotay ingsstray. Otherwiseway, "
"eturnsray ()."

#: target:code/string.lisp
msgid ""
"Given two strings, if the first string is lexicographically less than\n"
"  or equal to the second string, returns the longest common prefix\n"
"  (using char-equal) of the two strings. Otherwise, returns ()."
msgstr ""
"Ivengay wotay ingsstray, ifway ethay irstfay ingstray isway "
"exicographicallylay esslay anthay\n"
"  orway equalway otay ethay econdsay ingstray, eturnsray ethay ongestlay "
"ommoncay efixpray\n"
"  (usingway archay-equalway) ofway ethay wotay ingsstray. Otherwiseway, "
"eturnsray ()."

#: target:code/string.lisp
msgid ""
"Given a character count and an optional fill character, makes and returns\n"
"  a new string Count long filled with the fill character."
msgstr ""
"Ivengay away aracterchay ountcay andway anway optionalway illfay "
"aracterchay, akesmay andway eturnsray\n"
"  away ewnay ingstray Ountcay onglay illedfay ithway ethay illfay "
"aracterchay."

#: target:code/string.lisp
msgid ""
"Given a string, returns a new string that is a copy of it with all\n"
"  lower case alphabetic characters converted to uppercase."
msgstr ""
"Ivengay away ingstray, eturnsray away ewnay ingstray atthay isway away "
"opycay ofway itway ithway allway\n"
"  owerlay asecay alphabeticway aracterschay onvertedcay otay uppercaseway."

#: target:code/string.lisp
msgid ""
"Given a string, returns a new string that is a copy of it with all\n"
"  lower case alphabetic characters converted to uppercase.  Casing is\n"
"  :simple or :full for simple or full case conversion, respectively."
msgstr ""
"Ivengay away ingstray, eturnsray away ewnay ingstray atthay isway away "
"opycay ofway itway ithway allway\n"
"  owerlay asecay alphabeticway aracterschay onvertedcay otay uppercaseway.  "
"Asingcay isway\n"
"  :implesay orway :ullfay orfay implesay orway ullfay asecay onversioncay, "
"espectivelyray."

#: target:code/string.lisp
msgid ""
"Given a string, returns a new string that is a copy of it with all\n"
"  upper case alphabetic characters converted to lowercase."
msgstr ""
"Ivengay away ingstray, eturnsray away ewnay ingstray atthay isway away "
"opycay ofway itway ithway allway\n"
"  upperway asecay alphabeticway aracterschay onvertedcay otay owercaselay."

#: target:code/string.lisp
msgid ""
"Given a string, returns a new string that is a copy of it with all\n"
"  upper case alphabetic characters converted to lowercase.  Casing is\n"
"  :simple or :full for simple or full case conversion, respectively."
msgstr ""
"Ivengay away ingstray, eturnsray away ewnay ingstray atthay isway away "
"opycay ofway itway ithway allway\n"
"  upperway asecay alphabeticway aracterschay onvertedcay otay owercaselay.  "
"Asingcay isway\n"
"  :implesay orway :ullfay orfay implesay orway ullfay asecay onversioncay, "
"espectivelyray."

#: target:code/string.lisp
msgid ""
"Given a string, returns a copy of the string with the first\n"
"  character of each ``word'' converted to upper-case, and remaining\n"
"  chars in the word converted to lower case. A ``word'' is defined\n"
"  to be a string of case-modifiable characters delimited by\n"
"  non-case-modifiable chars."
msgstr ""
"Ivengay away ingstray, eturnsray away opycay ofway ethay ingstray ithway "
"ethay irstfay\n"
"  aracterchay ofway eachway ``ordway'' onvertedcay otay upperway-asecay, "
"andway emainingray\n"
"  arschay inway ethay ordway onvertedcay otay owerlay asecay. Away "
"``ordway'' isway efinedday\n"
"  otay ebay away ingstray ofway asecay-odifiablemay aracterschay elimitedday "
"ybay\n"
"  onnay-asecay-odifiablemay arschay."

#: target:code/string.lisp
msgid ""
"Given a string, returns a copy of the string with the first\n"
"  character of each ``word'' converted to upper-case, and remaining\n"
"  chars in the word converted to lower case. A ``word'' is defined\n"
"  to be a string of case-modifiable characters delimited by\n"
"  non-case-modifiable chars.  Casing is :simple or :full for\n"
"  simple or full case conversion, respectively."
msgstr ""
"Ivengay away ingstray, eturnsray away opycay ofway ethay ingstray ithway "
"ethay irstfay\n"
"  aracterchay ofway eachway ``ordway'' onvertedcay otay upperway-asecay, "
"andway emainingray\n"
"  arschay inway ethay ordway onvertedcay otay owerlay asecay. Away "
"``ordway'' isway efinedday\n"
"  otay ebay away ingstray ofway asecay-odifiablemay aracterschay elimitedday "
"ybay\n"
"  onnay-asecay-odifiablemay arschay.  Asingcay isway :implesay orway :ullfay "
"orfay\n"
"  implesay orway ullfay asecay onversioncay, espectivelyray."

#: target:code/string.lisp
msgid ""
"Given a string, returns that string with all lower case alphabetic\n"
"  characters converted to uppercase."
msgstr ""
"Ivengay away ingstray, eturnsray atthay ingstray ithway allway owerlay "
"asecay alphabeticway\n"
"  aracterschay onvertedcay otay uppercaseway."

#: target:code/string.lisp
msgid ""
"Given a string, returns that string with all upper case alphabetic\n"
"  characters converted to lowercase."
msgstr ""
"Ivengay away ingstray, eturnsray atthay ingstray ithway allway upperway "
"asecay alphabeticway\n"
"  aracterschay onvertedcay otay owercaselay."

#: target:code/string.lisp
msgid ""
"Given a string, returns that string with the first\n"
"  character of each ``word'' converted to upper-case, and remaining\n"
"  chars in the word converted to lower case. A ``word'' is defined\n"
"  to be a string of case-modifiable characters delimited by\n"
"  non-case-modifiable chars."
msgstr ""
"Ivengay away ingstray, eturnsray atthay ingstray ithway ethay irstfay\n"
"  aracterchay ofway eachway ``ordway'' onvertedcay otay upperway-asecay, "
"andway emainingray\n"
"  arschay inway ethay ordway onvertedcay otay owerlay asecay. Away "
"``ordway'' isway efinedday\n"
"  otay ebay away ingstray ofway asecay-odifiablemay aracterschay elimitedday "
"ybay\n"
"  onnay-asecay-odifiablemay arschay."

#: target:code/string.lisp
msgid ""
"Given a set of characters (a list or string) and a string, returns\n"
"  a copy of the string with the characters in the set removed from the\n"
"  left end.  If the set of characters is a string, surrogates will be\n"
"  properly handled."
msgstr ""
"Ivengay away etsay ofway aracterschay (away istlay orway ingstray) andway "
"away ingstray, eturnsray\n"
"  away opycay ofway ethay ingstray ithway ethay aracterschay inway ethay "
"etsay emovedray omfray ethay\n"
"  eftlay endway.  Ifway ethay etsay ofway aracterschay isway away ingstray, "
"urrogatessay illway ebay\n"
"  operlypray andledhay."

#: target:code/string.lisp
msgid ""
"Given a set of characters (a list or string) and a string, returns\n"
"  a copy of the string with the characters in the set removed from the\n"
"  right end.  If the set of characters is a string, surrogates will be\n"
"  properly handled."
msgstr ""
"Ivengay away etsay ofway aracterschay (away istlay orway ingstray) andway "
"away ingstray, eturnsray\n"
"  away opycay ofway ethay ingstray ithway ethay aracterschay inway ethay "
"etsay emovedray omfray ethay\n"
"  ightray endway.  Ifway ethay etsay ofway aracterschay isway away ingstray, "
"urrogatessay illway ebay\n"
"  operlypray andledhay."

#: target:code/string.lisp
msgid ""
"Given a set of characters (a list or string) and a string, returns a\n"
"  copy of the string with the characters in the set removed from both\n"
"  ends.  If the set of characters is a string, surrogates will be\n"
"  properly handled."
msgstr ""
"Ivengay away etsay ofway aracterschay (away istlay orway ingstray) andway "
"away ingstray, eturnsray away\n"
"  opycay ofway ethay ingstray ithway ethay aracterschay inway ethay etsay "
"emovedray omfray othbay\n"
"  endsway.  Ifway ethay etsay ofway aracterschay isway away ingstray, "
"urrogatessay illway ebay\n"
"  operlypray andledhay."

#: target:code/string.lisp
msgid ""
"Given a set of characters (a list or string) and a string, returns\n"
"  a copy of the string with the characters in the set removed from the\n"
"  left end."
msgstr ""
"Ivengay away etsay ofway aracterschay (away istlay orway ingstray) andway "
"away ingstray, eturnsray\n"
"  away opycay ofway ethay ingstray ithway ethay aracterschay inway ethay "
"etsay emovedray omfray ethay\n"
"  eftlay endway."

#: target:code/string.lisp
msgid ""
"Given a set of characters (a list or string) and a string, returns\n"
"  a copy of the string with the characters in the set removed from the\n"
"  right end."
msgstr ""
"Ivengay away etsay ofway aracterschay (away istlay orway ingstray) andway "
"away ingstray, eturnsray\n"
"  away opycay ofway ethay ingstray ithway ethay aracterschay inway ethay "
"etsay emovedray omfray ethay\n"
"  ightray endway."

#: target:code/string.lisp
msgid ""
"Given a set of characters (a list or string) and a string, returns a\n"
"  copy of the string with the characters in the set removed from both\n"
"  ends."
msgstr ""
"Ivengay away etsay ofway aracterschay (away istlay orway ingstray) andway "
"away ingstray, eturnsray away\n"
"  opycay ofway ethay ingstray ithway ethay aracterschay inway ethay etsay "
"emovedray omfray othbay\n"
"  endsway."

#: target:code/string.lisp
msgid ""
"GLYPH returns the glyph at the indexed position in a string, and the\n"
"  position of the next glyph (or NIL) as a second value.  A glyph is\n"
"  a substring consisting of the character at INDEX followed by all\n"
"  subsequent combining characters."
msgstr ""
"YPHGLAY eturnsray ethay yphglay atway ethay indexedway ositionpay inway away "
"ingstray, andway ethay\n"
"  ositionpay ofway ethay extnay yphglay (orway ILNAY) asway away econdsay "
"aluevay.  Away yphglay isway\n"
"  away ubstringsay onsistingcay ofway ethay aracterchay atway INDEXWAY "
"ollowedfay ybay allway\n"
"  ubsequentsay ombiningcay aracterschay."

#: target:code/string.lisp
msgid ""
"SGLYPH returns the glyph at the indexed position, the same as GLYPH,\n"
"  except that the string must be a simple-string"
msgstr ""
"GLYPHSAY eturnsray ethay yphglay atway ethay indexedway ositionpay, ethay "
"amesay asway YPHGLAY,\n"
"  exceptway atthay ethay ingstray ustmay ebay away implesay-ingstray"

#: target:code/string.lisp
msgid ""
"Convert String to Unicode Normalization Form D (NFD) using the\n"
"  canonical decomposition.  The NFD string is returned"
msgstr ""
"Onvertcay Ingstray otay Unicodeway Ormalizationnay Ormfay D (FDNAY) usingway "
"ethay\n"
"  anonicalcay ecompositionday.  Ethay FDNAY ingstray isway eturnedray"

#: target:code/string.lisp
msgid ""
"Convert String to Unicode Normalization Form KD (NFKD) uisng the\n"
"  compatible decomposition form.  The NFKD string is returned."
msgstr ""
"Onvertcay Ingstray otay Unicodeway Ormalizationnay Ormfay DKAY (FKDNAY) "
"uisngway ethay\n"
"  ompatiblecay ecompositionday ormfay.  Ethay FKDNAY ingstray isway "
"eturnedray."

#: target:code/string.lisp
msgid ""
"Convert String to Unicode Normalization Form C (NFC).  If the\n"
"  string a simple string and is already normalized, the original\n"
"  string is returned."
msgstr ""
"Onvertcay Ingstray otay Unicodeway Ormalizationnay Ormfay C (FCNAY).  Ifway "
"ethay\n"
"  ingstray away implesay ingstray andway isway alreadyway ormalizednay, "
"ethay originalway\n"
"  ingstray isway eturnedray."

#: target:code/string.lisp
msgid ""
"Convert String to Unicode Normalization Form KC (NFKC).  If the\n"
"  string is a simple string and is already normalized, the original\n"
"  string is returned."
msgstr ""
"Onvertcay Ingstray otay Unicodeway Ormalizationnay Ormfay CKAY (FKCNAY).  "
"Ifway ethay\n"
"  ingstray isway away implesay ingstray andway isway alreadyway "
"ormalizednay, ethay originalway\n"
"  ingstray isway eturnedray."

#: target:code/mipsstrops.lisp
msgid ""
"Compares the substrings specified by String1 and String2 and returns\n"
"NIL if the strings are String=, or the lowest index of String1 in\n"
"which the two differ. If one string is longer than the other and the\n"
"shorter is a prefix of the longer, the length of the shorter + start1 is\n"
"returned. This would be done on the Vax with CMPC3. The arguments must\n"
"be simple strings."
msgstr ""
"Omparescay ethay ubstringssay ecifiedspay ybay Ingstray1 andway Ingstray2 "
"andway eturnsray\n"
"ILNAY ifway ethay ingsstray areway Ingstray=, orway ethay owestlay indexway "
"ofway Ingstray1 inway\n"
"ichwhay ethay wotay ifferday. Ifway oneway ingstray isway ongerlay anthay "
"ethay otherway andway ethay\n"
"ortershay isway away efixpray ofway ethay ongerlay, ethay engthlay ofway "
"ethay ortershay + tartsay1 isway\n"
"eturnedray. Isthay ouldway ebay oneday onway ethay Axvay ithway MPCCAY3. "
"Ethay argumentsway ustmay\n"
"ebay implesay ingsstray."

#: target:code/mipsstrops.lisp
msgid "Like %sp-string-compare, only backwards."
msgstr "Ikelay %spay-ingstray-omparecay, onlyway ackwardsbay."

#: target:code/mipsstrops.lisp
msgid ""
"%SP-Find-Character-With-Attribute  String, Start, End, Table, Mask\n"
"  The codes of the characters of String from Start to End are used as "
"indices\n"
"  into the Table, which is a U-Vector of 8-bit bytes. When the number "
"picked\n"
"  up from the table bitwise ANDed with Mask is non-zero, the current\n"
"  index into the String is returned. The corresponds to SCANC on the Vax."
msgstr ""
"%SPAY-Indfay-Aracterchay-Ithway-Attributeway  Ingstray, Tartsay, Endway, "
"Abletay, Askmay\n"
"  Ethay odescay ofway ethay aracterschay ofway Ingstray omfray Tartsay otay "
"Endway areway usedway asway indicesway\n"
"  intoway ethay Abletay, ichwhay isway away U-Ectorvay ofway 8-itbay "
"ytesbay. Enwhay ethay umbernay ickedpay\n"
"  upway omfray ethay abletay itwisebay Andedway ithway Askmay isway onnay-"
"erozay, ethay urrentcay\n"
"  indexway intoway ethay Ingstray isway eturnedray. Ethay orrespondscay otay "
"ANCSCAY onway ethay Axvay."

#: target:code/mipsstrops.lisp
msgid "Like %SP-Find-Character-With-Attribute, only sdrawkcaB."
msgstr ""
"Ikelay %SPAY-Indfay-Aracterchay-Ithway-Attributeway, onlyway drawkcabsay."

#: target:code/mipsstrops.lisp
msgid ""
"%SP-Find-Character  String, Start, End, Character\n"
"  Searches String for the Character from Start to End.  If the character is\n"
"  found, the corresponding index into String is returned, otherwise NIL is\n"
"  returned."
msgstr ""
"%SPAY-Indfay-Aracterchay  Ingstray, Tartsay, Endway, Aracterchay\n"
"  Earchessay Ingstray orfay ethay Aracterchay omfray Tartsay otay Endway.  "
"Ifway ethay aracterchay isway\n"
"  oundfay, ethay orrespondingcay indexway intoway Ingstray isway eturnedray, "
"otherwiseway ILNAY isway\n"
"  eturnedray."

#: target:code/mipsstrops.lisp
msgid ""
"%SP-Reverse-Find-Character  String, Start, End, Character\n"
"  Searches String for Character from End to Start.  If the character is\n"
"  found, the corresponding index into String is returned, otherwise NIL is\n"
"  returned."
msgstr ""
"%SPAY-Everseray-Indfay-Aracterchay  Ingstray, Tartsay, Endway, Aracterchay\n"
"  Earchessay Ingstray orfay Aracterchay omfray Endway otay Tartsay.  Ifway "
"ethay aracterchay isway\n"
"  oundfay, ethay orrespondingcay indexway intoway Ingstray isway eturnedray, "
"otherwiseway ILNAY isway\n"
"  eturnedray."

#: target:code/mipsstrops.lisp
msgid ""
"%SP-Skip-Character  String, Start, End, Character\n"
"  Returns the index of the first character between Start and End which\n"
"  is not Char=  to Character, or NIL if there is no such character."
msgstr ""
"%SPAY-Kipsay-Aracterchay  Ingstray, Tartsay, Endway, Aracterchay\n"
"  Eturnsray ethay indexway ofway ethay irstfay aracterchay etweenbay Tartsay "
"andway Endway ichwhay\n"
"  isway otnay Archay=  otay Aracterchay, orway ILNAY ifway erethay isway "
"onay uchsay aracterchay."

#: target:code/mipsstrops.lisp
msgid ""
"%SP-Skip-Character  String, Start, End, Character\n"
"  Returns the index of the last character between Start and End which\n"
"  is not Char=  to Character, or NIL if there is no such character."
msgstr ""
"%SPAY-Kipsay-Aracterchay  Ingstray, Tartsay, Endway, Aracterchay\n"
"  Eturnsray ethay indexway ofway ethay astlay aracterchay etweenbay Tartsay "
"andway Endway ichwhay\n"
"  isway otnay Archay=  otay Aracterchay, orway ILNAY ifway erethay isway "
"onay uchsay aracterchay."

#: target:code/mipsstrops.lisp
msgid ""
"%SP-String-Search  String1, Start1, End1, String2, Start2, End2\n"
"   Searches for the substring of String1 specified in String2.\n"
"   Returns an index into String2 or NIL if the substring wasn't\n"
"   found."
msgstr ""
"%SPAY-Ingstray-Earchsay  Ingstray1, Tartsay1, Endway1, Ingstray2, Tartsay2, "
"Endway2\n"
"   Earchessay orfay ethay ubstringsay ofway Ingstray1 ecifiedspay inway "
"Ingstray2.\n"
"   Eturnsray anway indexway intoway Ingstray2 orway ILNAY ifway ethay "
"ubstringsay asnway't\n"
"   oundfay."

#: target:code/unix.lisp
msgid "Size of control character vector."
msgstr "Izesay ofway ontrolcay aracterchay ectorvay."

#: target:code/unix.lisp
msgid "Successful"
msgstr "Uccessfulsay"

#: target:code/unix.lisp
msgid "Operation not permitted"
msgstr "Operationway otnay ermittedpay"

#: target:code/unix.lisp
msgid "No such file or directory"
msgstr "Onay uchsay ilefay orway irectoryday"

#: target:code/unix.lisp
msgid "No such process"
msgstr "Onay uchsay ocesspray"

#: target:code/unix.lisp
msgid "Interrupted system call"
msgstr "Interruptedway ystemsay allcay"

#: target:code/unix.lisp
msgid "I/O error"
msgstr "Iway/O errorway"

#: target:code/unix.lisp
msgid "Device not configured"
msgstr "Eviceday otnay onfiguredcay"

#: target:code/unix.lisp
msgid "Arg list too long"
msgstr "Argway istlay ootay onglay"

#: target:code/unix.lisp
msgid "Exec format error"
msgstr "Execway ormatfay errorway"

#: target:code/unix.lisp
msgid "Bad file descriptor"
msgstr "Adbay ilefay escriptorday"

#: target:code/unix.lisp
msgid "No child process"
msgstr "Onay ildchay ocesspray"

#: target:code/unix.lisp
msgid "Resource deadlock avoided"
msgstr "Esourceray eadlockday avoidedway"

#: target:code/unix.lisp
msgid "No more processes"
msgstr "Onay oremay ocessespray"

#: target:code/unix.lisp
msgid "Try again"
msgstr "Ytray againway"

#: target:code/unix.lisp
msgid "Out of memory"
msgstr "Outway ofway emorymay"

#: target:code/unix.lisp
msgid "Permission denied"
msgstr "Ermissionpay eniedday"

#: target:code/unix.lisp
msgid "Bad address"
msgstr "Adbay addressway"

#: target:code/unix.lisp
msgid "Block device required"
msgstr "Ockblay eviceday equiredray"

#: target:code/unix.lisp
msgid "Device or resource busy"
msgstr "Eviceday orway esourceray usybay"

#: target:code/unix.lisp
msgid "File exists"
msgstr "Ilefay existsway"

#: target:code/unix.lisp
msgid "Cross-device link"
msgstr "Osscray-eviceday inklay"

#: target:code/unix.lisp
msgid "No such device"
msgstr "Onay uchsay eviceday"

#: target:code/unix.lisp
msgid "Not a director"
msgstr "Otnay away irectorday"

#: target:code/unix.lisp
msgid "Is a directory"
msgstr "Isway away irectoryday"

#: target:code/unix.lisp
msgid "Invalid argument"
msgstr "Invalidway argumentway"

#: target:code/unix.lisp
msgid "File table overflow"
msgstr "Ilefay abletay overflowway"

#: target:code/unix.lisp
msgid "Too many open files"
msgstr "Ootay anymay openway ilesfay"

#: target:code/unix.lisp
msgid "Inappropriate ioctl for device"
msgstr "Inappropriateway ioctlway orfay eviceday"

#: target:code/unix.lisp
msgid "Text file busy"
msgstr "Exttay ilefay usybay"

#: target:code/unix.lisp
msgid "File too large"
msgstr "Ilefay ootay argelay"

#: target:code/unix.lisp
msgid "No space left on device"
msgstr "Onay acespay eftlay onway eviceday"

#: target:code/unix.lisp
msgid "Illegal seek"
msgstr "Illegalway eeksay"

#: target:code/unix.lisp
msgid "Read-only file system"
msgstr "Eadray-onlyway ilefay ystemsay"

#: target:code/unix.lisp
msgid "Too many links"
msgstr "Ootay anymay inkslay"

#: target:code/unix.lisp
msgid "Broken pipe"
msgstr "Okenbray ipepay"

#: target:code/unix.lisp
msgid "Numerical argument out of domain"
msgstr "Umericalnay argumentway outway ofway omainday"

#: target:code/unix.lisp
msgid "Result too large"
msgstr "Esultray ootay argelay"

#: target:code/unix.lisp
msgid "Math result not representable"
msgstr "Athmay esultray otnay epresentableray"

#: target:code/unix.lisp
msgid "Operation would block"
msgstr "Operationway ouldway ockblay"

#: target:code/unix.lisp
msgid "Resource temporarily unavailable"
msgstr "Esourceray emporarilytay unavailableway"

#: target:code/unix.lisp
msgid "Operation now in progress"
msgstr "Operationway ownay inway ogresspray"

#: target:code/unix.lisp
msgid "Operation already in progress"
msgstr "Operationway alreadyway inway ogresspray"

#: target:code/unix.lisp
msgid "Socket operation on non-socket"
msgstr "Ocketsay operationway onway onnay-ocketsay"

#: target:code/unix.lisp
msgid "Destination address required"
msgstr "Estinationday addressway equiredray"

#: target:code/unix.lisp
msgid "Message too long"
msgstr "Essagemay ootay onglay"

#: target:code/unix.lisp
msgid "Protocol wrong type for socket"
msgstr "Otocolpray ongwray ypetay orfay ocketsay"

#: target:code/unix.lisp
msgid "Protocol not available"
msgstr "Otocolpray otnay availableway"

#: target:code/unix.lisp
msgid "Protocol not supported"
msgstr "Otocolpray otnay upportedsay"

#: target:code/unix.lisp
msgid "Socket type not supported"
msgstr "Ocketsay ypetay otnay upportedsay"

#: target:code/unix.lisp
msgid "Operation not supported on socket"
msgstr "Operationway otnay upportedsay onway ocketsay"

#: target:code/unix.lisp
msgid "Protocol family not supported"
msgstr "Otocolpray amilyfay otnay upportedsay"

#: target:code/unix.lisp
msgid "Address family not supported by protocol family"
msgstr "Addressway amilyfay otnay upportedsay ybay otocolpray amilyfay"

#: target:code/unix.lisp
msgid "Address already in use"
msgstr "Addressway alreadyway inway useway"

#: target:code/unix.lisp
msgid "Can't assign requested address"
msgstr "Ancay't assignway equestedray addressway"

#: target:code/unix.lisp
msgid "Network is down"
msgstr "Etworknay isway ownday"

#: target:code/unix.lisp
msgid "Network is unreachable"
msgstr "Etworknay isway unreachableway"

#: target:code/unix.lisp
msgid "Network dropped connection on reset"
msgstr "Etworknay oppeddray onnectioncay onway esetray"

#: target:code/unix.lisp
msgid "Software caused connection abort"
msgstr "Oftwaresay ausedcay onnectioncay abortway"

#: target:code/unix.lisp
msgid "Connection reset by peer"
msgstr "Onnectioncay esetray ybay eerpay"

#: target:code/unix.lisp
msgid "No buffer space available"
msgstr "Onay ufferbay acespay availableway"

#: target:code/unix.lisp
msgid "Socket is already connected"
msgstr "Ocketsay isway alreadyway onnectedcay"

#: target:code/unix.lisp
msgid "Socket is not connected"
msgstr "Ocketsay isway otnay onnectedcay"

#: target:code/unix.lisp
msgid "Can't send after socket shutdown"
msgstr "Ancay't endsay afterway ocketsay utdownshay"

#: target:code/unix.lisp
msgid "Too many references: can't splice"
msgstr "Ootay anymay eferencesray: ancay't licespay"

#: target:code/unix.lisp
msgid "Connection timed out"
msgstr "Onnectioncay imedtay outway"

#: target:code/unix.lisp
msgid "Connection refused"
msgstr "Onnectioncay efusedray"

#: target:code/unix.lisp
msgid "Too many levels of symbolic links"
msgstr "Ootay anymay evelslay ofway ymbolicsay inkslay"

#: target:code/unix.lisp
msgid "File name too long"
msgstr "Ilefay amenay ootay onglay"

#: target:code/unix.lisp
msgid "Host is down"
msgstr "Osthay isway ownday"

#: target:code/unix.lisp
msgid "No route to host"
msgstr "Onay outeray otay osthay"

#: target:code/unix.lisp
msgid "Directory not empty"
msgstr "Irectoryday otnay emptyway"

#: target:code/unix.lisp
msgid "Too many processes"
msgstr "Ootay anymay ocessespray"

#: target:code/unix.lisp
msgid "Too many users"
msgstr "Ootay anymay usersway"

#: target:code/unix.lisp
msgid "Disc quota exceeded"
msgstr "Iscday otaquay exceededway"

#: target:code/unix.lisp
msgid "namei should continue locally"
msgstr "ameinay ouldshay ontinuecay ocallylay"

#: target:code/unix.lisp
msgid "namei was handled remotely"
msgstr "ameinay asway andledhay emotelyray"

#: target:code/unix.lisp
msgid "Remote file system error _N"
msgstr "Emoteray ilefay ystemsay errorway _N"

#: target:code/unix.lisp
msgid "syscall was handled by Vice"
msgstr "yscallsay asway andledhay ybay Icevay"

#: target:code/unix.lisp
msgid "No message of desired type"
msgstr "Onay essagemay ofway esiredday ypetay"

#: target:code/unix.lisp
msgid "Identifier removed"
msgstr "Identifierway emovedray"

#: target:code/unix.lisp
msgid "Channel number out of range"
msgstr "Annelchay umbernay outway ofway angeray"

#: target:code/unix.lisp
msgid "Level 2 not synchronized"
msgstr "Evellay 2 otnay ynchronizedsay"

#: target:code/unix.lisp
msgid "Level 3 halted"
msgstr "Evellay 3 altedhay"

#: target:code/unix.lisp
msgid "Level 3 reset"
msgstr "Evellay 3 esetray"

#: target:code/unix.lisp
msgid "Link number out of range"
msgstr "Inklay umbernay outway ofway angeray"

#: target:code/unix.lisp
msgid "Protocol driver not attached"
msgstr "Otocolpray iverdray otnay attachedway"

#: target:code/unix.lisp
msgid "No CSI structure available"
msgstr "Onay SICAY ucturestray availableway"

#: target:code/unix.lisp
msgid "Level 2 halted"
msgstr "Evellay 2 altedhay"

#: target:code/unix.lisp
msgid "Deadlock situation detected/avoided"
msgstr "Eadlockday ituationsay etectedday/avoidedway"

#: target:code/unix.lisp
msgid "No record locks available"
msgstr "Onay ecordray ockslay availableway"

#: target:code/unix.lisp
msgid "Error 47"
msgstr "Errorway 47"

#: target:code/unix.lisp
msgid "Error 48"
msgstr "Errorway 48"

#: target:code/unix.lisp
msgid "Bad exchange descriptor"
msgstr "Adbay exchangeway escriptorday"

#: target:code/unix.lisp
msgid "Bad request descriptor"
msgstr "Adbay equestray escriptorday"

#: target:code/unix.lisp
msgid "Message tables full"
msgstr "Essagemay ablestay ullfay"

#: target:code/unix.lisp
msgid "Anode table overflow"
msgstr "Anodeway abletay overflowway"

#: target:code/unix.lisp
msgid "Bad request code"
msgstr "Adbay equestray odecay"

#: target:code/unix.lisp
msgid "Invalid slot"
msgstr "Invalidway otslay"

#: target:code/unix.lisp
msgid "File locking deadlock"
msgstr "Ilefay ockinglay eadlockday"

#: target:code/unix.lisp
msgid "Bad font file format"
msgstr "Adbay ontfay ilefay ormatfay"

#: target:code/unix.lisp
msgid "Not a stream device"
msgstr "Otnay away eamstray eviceday"

#: target:code/unix.lisp
msgid "No data available"
msgstr "Onay ataday availableway"

#: target:code/unix.lisp
msgid "Timer expired"
msgstr "Imertay expiredway"

#: target:code/unix.lisp
msgid "Out of stream resources"
msgstr "Outway ofway eamstray esourcesray"

#: target:code/unix.lisp
msgid "Machine is not on the network"
msgstr "Achinemay isway otnay onway ethay etworknay"

#: target:code/unix.lisp
msgid "Package not installed"
msgstr "Ackagepay otnay installedway"

#: target:code/unix.lisp
msgid "Object is remote"
msgstr "Objectway isway emoteray"

#: target:code/unix.lisp
msgid "Link has been severed"
msgstr "Inklay ashay eenbay everedsay"

#: target:code/unix.lisp
msgid "Advertise error"
msgstr "Advertiseway errorway"

#: target:code/unix.lisp
msgid "Srmount error"
msgstr "Rmountsay errorway"

#: target:code/unix.lisp
msgid "Communication error on send"
msgstr "Ommunicationcay errorway onway endsay"

#: target:code/unix.lisp
msgid "Protocol error"
msgstr "Otocolpray errorway"

#: target:code/unix.lisp
msgid "Multihop attempted"
msgstr "Ultihopmay attemptedway"

#: target:code/unix.lisp
msgid "Not a data message"
msgstr "Otnay away ataday essagemay"

#: target:code/unix.lisp
msgid "Value too large for defined data type"
msgstr "Aluevay ootay argelay orfay efinedday ataday ypetay"

#: target:code/unix.lisp
msgid "Name not unique on network"
msgstr "Amenay otnay uniqueway onway etworknay"

#: target:code/unix.lisp
msgid "File descriptor in bad state"
msgstr "Ilefay escriptorday inway adbay tatesay"

#: target:code/unix.lisp
msgid "Remote address changed"
msgstr "Emoteray addressway angedchay"

#: target:code/unix.lisp
msgid "Can not access a needed shared library"
msgstr "Ancay otnay accessway away eedednay aredshay ibrarylay"

#: target:code/unix.lisp
msgid "Accessing a corrupted shared library"
msgstr "Accessingway away orruptedcay aredshay ibrarylay"

#: target:code/unix.lisp
msgid ".lib section in a.out corrupted"
msgstr ".iblay ectionsay inway away.outway orruptedcay"

#: target:code/unix.lisp
msgid "Attempting to link in more shared libraries than system limit"
msgstr ""
"Attemptingway otay inklay inway oremay aredshay ibrarieslay anthay ystemsay "
"imitlay"

#: target:code/unix.lisp
msgid "Can not exec a shared library directly"
msgstr "Ancay otnay execway away aredshay ibrarylay irectlyday"

#: target:code/unix.lisp
msgid "Error 88"
msgstr "Errorway 88"

#: target:code/unix.lisp
msgid "Operation not applicable"
msgstr "Operationway otnay applicableway"

#: target:code/unix.lisp
msgid ""
"Number of symbolic links encountered during path name traversal exceeds "
"MAXSYMLINKS"
msgstr ""
"Umbernay ofway ymbolicsay inkslay encounteredway uringday athpay amenay "
"aversaltray exceedsway AXSYMLINKSMAY"

#: target:code/unix.lisp
msgid "Error 91"
msgstr "Errorway 91"

#: target:code/unix.lisp
msgid "Error 92"
msgstr "Errorway 92"

#: target:code/unix.lisp
msgid "Option not supported by protocol"
msgstr "Optionway otnay upportedsay ybay otocolpray"

#: target:code/unix.lisp
msgid "Operation not supported on transport endpoint"
msgstr "Operationway otnay upportedsay onway ansporttray endpointway"

#: target:code/unix.lisp
msgid "Cannot assign requested address"
msgstr "Annotcay assignway equestedray addressway"

#: target:code/unix.lisp
msgid "Network dropped connection because of reset"
msgstr "Etworknay oppeddray onnectioncay ecausebay ofway esetray"

#: target:code/unix.lisp
msgid "Transport endpoint is already connected"
msgstr "Ansporttray endpointway isway alreadyway onnectedcay"

#: target:code/unix.lisp
msgid "Transport endpoint is not connected"
msgstr "Ansporttray endpointway isway otnay onnectedcay"

#: target:code/unix.lisp
msgid "Cannot send after socket shutdown"
msgstr "Annotcay endsay afterway ocketsay utdownshay"

#: target:code/unix.lisp
msgid "Too many references: cannot splice"
msgstr "Ootay anymay eferencesray: annotcay licespay"

#: target:code/unix.lisp
msgid "Stale NFS file handle"
msgstr "Talesay FSNAY ilefay andlehay"

#: target:code/unix.lisp
msgid "Resource deadlock would occur"
msgstr "Esourceray eadlockday ouldway occurway"

#: target:code/unix.lisp
msgid "Function not implemented"
msgstr "Unctionfay otnay implementedway"

#: target:code/unix.lisp
msgid "Too many symbolic links encountered"
msgstr "Ootay anymay ymbolicsay inkslay encounteredway"

#: target:code/unix.lisp
msgid "Invalid exchange"
msgstr "Invalidway exchangeway"

#: target:code/unix.lisp
msgid "Invalid request descriptor"
msgstr "Invalidway equestray escriptorday"

#: target:code/unix.lisp
msgid "Exchange full"
msgstr "Exchangeway ullfay"

#: target:code/unix.lisp
msgid "No anode"
msgstr "Onay anodeway"

#: target:code/unix.lisp
msgid "Invalid request code"
msgstr "Invalidway equestray odecay"

#: target:code/unix.lisp
msgid "File locking deadlock error"
msgstr "Ilefay ockinglay eadlockday errorway"

#: target:code/unix.lisp
msgid "Device not a stream"
msgstr "Eviceday otnay away eamstray"

#: target:code/unix.lisp
msgid "Out of streams resources"
msgstr "Outway ofway eamsstray esourcesray"

#: target:code/unix.lisp
msgid "RFS specific error"
msgstr "FSRAY ecificspay errorway"

#: target:code/unix.lisp
msgid "Attempting to link in too many shared libraries"
msgstr "Attemptingway otay inklay inway ootay anymay aredshay ibrarieslay"

#: target:code/unix.lisp
msgid "Cannot exec a shared library directly"
msgstr "Annotcay execway away aredshay ibrarylay irectlyday"

#: target:code/unix.lisp
msgid "Illegal byte sequence"
msgstr "Illegalway ytebay equencesay"

#: target:code/unix.lisp
msgid "Interrupted system call should be restarted _N"
msgstr "Interruptedway ystemsay allcay ouldshay ebay estartedray _N"

#: target:code/unix.lisp
msgid "Streams pipe error"
msgstr "Eamsstray ipepay errorway"

#: target:code/unix.lisp
msgid "Address family not supported by protocol"
msgstr "Addressway amilyfay otnay upportedsay ybay otocolpray"

#: target:code/unix.lisp
msgid "Cannot send after transport endpoint shutdown"
msgstr "Annotcay endsay afterway ansporttray endpointway utdownshay"

#: target:code/unix.lisp
msgid "Structure needs cleaning"
msgstr "Ucturestray eedsnay eaningclay"

#: target:code/unix.lisp
msgid "Not a XENIX named type file"
msgstr "Otnay away ENIXXAY amednay ypetay ilefay"

#: target:code/unix.lisp
msgid "No XENIX semaphores available"
msgstr "Onay ENIXXAY emaphoressay availableway"

#: target:code/unix.lisp
msgid "Is a named type file"
msgstr "Isway away amednay ypetay ilefay"

#: target:code/unix.lisp
msgid "Remote I/O error"
msgstr "Emoteray Iway/O errorway"

#: target:code/unix.lisp
msgid "Quota exceeded"
msgstr "Otaquay exceededway"

#: target:code/unix.lisp
msgid ""
"Returns a string describing the error number which was returned by a\n"
"  UNIX system call."
msgstr ""
"Eturnsray away ingstray escribingday ethay errorway umbernay ichwhay asway "
"eturnedray ybay away\n"
"  UNIXWAY ystemsay allcay."

#: target:code/unix.lisp
msgid "Unknown error [~d]"
msgstr "Unknownway errorway [~d]"

#: target:code/multi-proc.lisp target:code/time.lisp
#: target:code/serve-event.lisp target:code/unix.lisp
msgid "Syscall ~A failed: ~A"
msgstr "Yscallsay ~Away ailedfay: ~Away"

#: target:code/unix.lisp
msgid ""
"Set the user ID of the calling process to UID.\n"
"   If the calling process is the super-user, set the real\n"
"   and effective user IDs, and the saved set-user-ID to UID;\n"
"   if not, the effective user ID is set to UID."
msgstr ""
"Etsay ethay userway IDWAY ofway ethay allingcay ocesspray otay UIDWAY.\n"
"   Ifway ethay allingcay ocesspray isway ethay upersay-userway, etsay ethay "
"ealray\n"
"   andway effectiveway userway Idsway, andway ethay avedsay etsay-userway-"
"IDWAY otay UIDWAY;\n"
"   ifway otnay, ethay effectiveway userway IDWAY isway etsay otay UIDWAY."

#: target:code/unix.lisp
msgid ""
"Set the group ID of the calling process to GID.\n"
"   If the calling process is the super-user, set the real\n"
"   and effective group IDs, and the saved set-group-ID to GID;\n"
"   if not, the effective group ID is set to GID."
msgstr ""
"Etsay ethay oupgray IDWAY ofway ethay allingcay ocesspray otay IDGAY.\n"
"   Ifway ethay allingcay ocesspray isway ethay upersay-userway, etsay ethay "
"ealray\n"
"   andway effectiveway oupgray Idsway, andway ethay avedsay etsay-oupgray-"
"IDWAY otay IDGAY;\n"
"   ifway otnay, ethay effectiveway oupgray IDWAY isway etsay otay IDGAY."

#: target:code/unix.lisp
msgid "Test for read permission"
msgstr "Esttay orfay eadray ermissionpay"

#: target:code/unix.lisp
msgid "Test for write permission"
msgstr "Esttay orfay itewray ermissionpay"

#: target:code/unix.lisp
msgid "Test for execute permission"
msgstr "Esttay orfay executeway ermissionpay"

#: target:code/unix.lisp
msgid "Test for presence of file"
msgstr "Esttay orfay esencepray ofway ilefay"

#: target:code/unix.lisp
msgid ""
"Given a file path (a string) and one of four constant modes,\n"
"   unix-access returns T if the file is accessible with that\n"
"   mode and NIL if not.  It also returns an errno value with\n"
"   NIL which determines why the file was not accessible.\n"
"\n"
"   The access modes are:\n"
"\tr_ok     Read permission.\n"
"\tw_ok     Write permission.\n"
"\tx_ok     Execute permission.\n"
"\tf_ok     Presence of file."
msgstr ""
"Ivengay away ilefay athpay (away ingstray) andway oneway ofway ourfay "
"onstantcay odesmay,\n"
"   unixway-accessway eturnsray T ifway ethay ilefay isway accessibleway "
"ithway atthay\n"
"   odemay andway ILNAY ifway otnay.  Itway alsoway eturnsray anway errnoway "
"aluevay ithway\n"
"   ILNAY ichwhay eterminesday ywhay ethay ilefay asway otnay accessibleway.\n"
"\n"
"   Ethay accessway odesmay areway:\n"
"\tr_okway     Eadray ermissionpay.\n"
"\tw_okway     Itewray ermissionpay.\n"
"\tx_okway     Executeway ermissionpay.\n"
"\tf_okway     Esencepray ofway ilefay."

#: target:code/unix.lisp
msgid ""
"Given a file path string, unix-chdir changes the current working \n"
"   directory to the one specified."
msgstr ""
"Ivengay away ilefay athpay ingstray, unixway-dirchay angeschay ethay "
"urrentcay orkingway \n"
"   irectoryday otay ethay oneway ecifiedspay."

#: target:code/unix.lisp
msgid "Set user ID on execution"
msgstr "Etsay userway IDWAY onway executionway"

#: target:code/unix.lisp
msgid "Set group ID on execution"
msgstr "Etsay oupgray IDWAY onway executionway"

#: target:code/unix.lisp
msgid "Save text image after execution"
msgstr "Avesay exttay imageway afterway executionway"

#: target:code/unix.lisp
msgid "Read by owner"
msgstr "Eadray ybay ownerway"

#: target:code/unix.lisp
msgid "Write by owner"
msgstr "Itewray ybay ownerway"

#: target:code/unix.lisp
msgid "Execute (search directory) by owner"
msgstr "Executeway (earchsay irectoryday) ybay ownerway"

#: target:code/unix.lisp
msgid "Read by group"
msgstr "Eadray ybay oupgray"

#: target:code/unix.lisp
msgid "Write by group"
msgstr "Itewray ybay oupgray"

#: target:code/unix.lisp
msgid "Execute (search directory) by group"
msgstr "Executeway (earchsay irectoryday) ybay oupgray"

#: target:code/unix.lisp
msgid "Read by others"
msgstr "Eadray ybay othersway"

#: target:code/unix.lisp
msgid "Write by others"
msgstr "Itewray ybay othersway"

#: target:code/unix.lisp
msgid "Execute (search directory) by others"
msgstr "Executeway (earchsay irectoryday) ybay othersway"

#: target:code/unix.lisp
msgid ""
"Given a file path string and a constant mode, unix-chmod changes the\n"
"   permission mode for that file to the one specified. The new mode\n"
"   can be created by logically OR'ing the following:\n"
"\n"
"      setuidexec        Set user ID on execution.\n"
"      setgidexec        Set group ID on execution.\n"
"      savetext          Save text image after execution.\n"
"      readown           Read by owner.\n"
"      writeown          Write by owner.\n"
"      execown           Execute (search directory) by owner.\n"
"      readgrp           Read by group.\n"
"      writegrp          Write by group.\n"
"      execgrp           Execute (search directory) by group.\n"
"      readoth           Read by others.\n"
"      writeoth          Write by others.\n"
"      execoth           Execute (search directory) by others.\n"
"  \n"
"  Thus #o444 and (logior unix:readown unix:readgrp unix:readoth)\n"
"  are equivalent for 'mode.  The octal-base is familar to Unix users.\n"
"\n"
"  It returns T on successfully completion; NIL and an error number\n"
"  otherwise."
msgstr ""
"Ivengay away ilefay athpay ingstray andway away onstantcay odemay, unixway-"
"modchay angeschay ethay\n"
"   ermissionpay odemay orfay atthay ilefay otay ethay oneway ecifiedspay. "
"Ethay ewnay odemay\n"
"   ancay ebay eatedcray ybay ogicallylay ORWAY'ingway ethay ollowingfay:\n"
"\n"
"      etuidexecsay        Etsay userway IDWAY onway executionway.\n"
"      etgidexecsay        Etsay oupgray IDWAY onway executionway.\n"
"      avetextsay          Avesay exttay imageway afterway executionway.\n"
"      eadownray           Eadray ybay ownerway.\n"
"      iteownwray          Itewray ybay ownerway.\n"
"      execownway           Executeway (earchsay irectoryday) ybay ownerway.\n"
"      eadgrpray           Eadray ybay oupgray.\n"
"      itegrpwray          Itewray ybay oupgray.\n"
"      execgrpway           Executeway (earchsay irectoryday) ybay oupgray.\n"
"      eadothray           Eadray ybay othersway.\n"
"      iteothwray          Itewray ybay othersway.\n"
"      execothway           Executeway (earchsay irectoryday) ybay "
"othersway.\n"
"  \n"
"  Usthay #o444 andway (ogiorlay unixway:eadownray unixway:eadgrpray unixway:"
"eadothray)\n"
"  areway equivalentway orfay 'odemay.  Ethay octalway-asebay isway amilarfay "
"otay Unixway usersway.\n"
"\n"
"  Itway eturnsray T onway uccessfullysay ompletioncay; ILNAY andway anway "
"errorway umbernay\n"
"  otherwiseway."

#: target:code/unix.lisp
msgid ""
"Given an integer file descriptor and a mode (the same as those\n"
"   used for unix-chmod), unix-fchmod changes the permission mode\n"
"   for that file to the one specified. T is returned if the call\n"
"   was successful."
msgstr ""
"Ivengay anway integerway ilefay escriptorday andway away odemay (ethay "
"amesay asway osethay\n"
"   usedway orfay unixway-modchay), unixway-chmodfay angeschay ethay "
"ermissionpay odemay\n"
"   orfay atthay ilefay otay ethay oneway ecifiedspay. T isway eturnedray "
"ifway ethay allcay\n"
"   asway uccessfulsay."

#: target:code/unix.lisp
msgid ""
"Given a file path, an integer user-id, and an integer group-id,\n"
"   unix-chown changes the owner of the file and the group of the\n"
"   file to those specified.  Either the owner or the group may be\n"
"   left unchanged by specifying them as -1.  Note: Permission will\n"
"   fail if the caller is not the superuser."
msgstr ""
"Ivengay away ilefay athpay, anway integerway userway-idway, andway anway "
"integerway oupgray-idway,\n"
"   unixway-ownchay angeschay ethay ownerway ofway ethay ilefay andway ethay "
"oupgray ofway ethay\n"
"   ilefay otay osethay ecifiedspay.  Eitherway ethay ownerway orway ethay "
"oupgray aymay ebay\n"
"   eftlay unchangedway ybay ecifyingspay emthay asway -1.  Otenay: "
"Ermissionpay illway\n"
"   ailfay ifway ethay allercay isway otnay ethay uperusersay."

#: target:code/unix.lisp
msgid ""
"Unix-fchown is like unix-chown, except that it accepts an integer\n"
"   file descriptor instead of a file path name."
msgstr ""
"Unixway-chownfay isway ikelay unixway-ownchay, exceptway atthay itway "
"acceptsway anway integerway\n"
"   ilefay escriptorday insteadway ofway away ilefay athpay amenay."

#: target:code/unix.lisp
msgid ""
"Unix-getdtablesize returns the maximum size of the file descriptor\n"
"   table. (i.e. the maximum number of descriptors that can exist at\n"
"   one time.)"
msgstr ""
"Unixway-etdtablesizegay eturnsray ethay aximummay izesay ofway ethay ilefay "
"escriptorday\n"
"   abletay. (i.e. ethay aximummay umbernay ofway escriptorsday atthay ancay "
"existway atway\n"
"   oneway imetay.)"

#: target:code/unix.lisp
msgid ""
"Unix-close takes an integer file descriptor as an argument and\n"
"   closes the file associated with it.  T is returned upon successful\n"
"   completion, otherwise NIL and an error number."
msgstr ""
"Unixway-oseclay akestay anway integerway ilefay escriptorday asway anway "
"argumentway andway\n"
"   osesclay ethay ilefay associatedway ithway itway.  T isway eturnedray "
"uponway uccessfulsay\n"
"   ompletioncay, otherwiseway ILNAY andway anway errorway umbernay."

#: target:code/unix.lisp
msgid ""
"Unix-creat accepts a file name and a mode (same as those for\n"
"   unix-chmod) and creates a file by that name with the specified\n"
"   permission mode.  It returns a file descriptor on success,\n"
"   or NIL and an error  number otherwise.\n"
"\n"
"   This interface is made obsolete by UNIX-OPEN."
msgstr ""
"Unixway-eatcray acceptsway away ilefay amenay andway away odemay (amesay "
"asway osethay orfay\n"
"   unixway-modchay) andway eatescray away ilefay ybay atthay amenay ithway "
"ethay ecifiedspay\n"
"   ermissionpay odemay.  Itway eturnsray away ilefay escriptorday onway "
"uccesssay,\n"
"   orway ILNAY andway anway errorway  umbernay otherwiseway.\n"
"\n"
"   Isthay interfaceway isway ademay obsoleteway ybay UNIXWAY-OPENWAY."

#: target:code/unix.lisp
msgid ""
"Unix-dup duplicates an existing file descriptor (given as the\n"
"   argument) and return it.  If FD is not a valid file descriptor, NIL\n"
"   and an error number are returned."
msgstr ""
"Unixway-upday uplicatesday anway existingway ilefay escriptorday (ivengay "
"asway ethay\n"
"   argumentway) andway eturnray itway.  Ifway DFAY isway otnay away alidvay "
"ilefay escriptorday, ILNAY\n"
"   andway anway errorway umbernay areway eturnedray."

#: target:code/unix.lisp
msgid ""
"Unix-dup2 duplicates an existing file descriptor just as unix-dup\n"
"   does only the new value of the duplicate descriptor may be requested\n"
"   through the second argument.  If a file already exists with the\n"
"   requested descriptor number, it will be closed and the number\n"
"   assigned to the duplicate."
msgstr ""
"Unixway-upday2 uplicatesday anway existingway ilefay escriptorday ustjay "
"asway unixway-upday\n"
"   oesday onlyway ethay ewnay aluevay ofway ethay uplicateday escriptorday "
"aymay ebay equestedray\n"
"   roughthay ethay econdsay argumentway.  Ifway away ilefay alreadyway "
"existsway ithway ethay\n"
"   equestedray escriptorday umbernay, itway illway ebay osedclay andway "
"ethay umbernay\n"
"   assignedway otay ethay uplicateday."

#: target:code/unix.lisp
msgid "Duplicate a file descriptor"
msgstr "Uplicateday away ilefay escriptorday"

#: target:code/unix.lisp
msgid "Get file desc. flags"
msgstr "Etgay ilefay escday. agsflay"

#: target:code/unix.lisp
msgid "Set file desc. flags"
msgstr "Etsay ilefay escday. agsflay"

#: target:code/unix.lisp
msgid "Get file flags"
msgstr "Etgay ilefay agsflay"

#: target:code/unix.lisp
msgid "Set file flags"
msgstr "Etsay ilefay agsflay"

#: target:code/unix.lisp
msgid "Get owner"
msgstr "Etgay ownerway"

#: target:code/unix.lisp
msgid "Get lock"
msgstr "Etgay ocklay"

#: target:code/unix.lisp
msgid "Set owner"
msgstr "Etsay ownerway"

#: target:code/unix.lisp
msgid "Set lock"
msgstr "Etsay ocklay"

#: target:code/unix.lisp
msgid "Set lock, wait for release"
msgstr "Etsay ocklay, aitway orfay eleaseray"

#: target:code/unix.lisp
msgid "Non-blocking reads"
msgstr "Onnay-ockingblay eadsray"

#: target:code/unix.lisp
msgid "Append on each write"
msgstr "Appendway onway eachway itewray"

#: target:code/unix.lisp
msgid "Signal pgrp when data ready"
msgstr "Ignalsay grppay enwhay ataday eadyray"

#: target:code/unix.lisp
msgid "Create if nonexistant"
msgstr "Eatecray ifway onexistantnay"

#: target:code/unix.lisp
msgid "Truncate to zero length"
msgstr "Uncatetray otay erozay engthlay"

#: target:code/unix.lisp
msgid "Error if already created"
msgstr "Errorway ifway alreadyway eatedcray"

#: target:code/unix.lisp
msgid ""
"Unix-fcntl manipulates file descriptors according to the\n"
"   argument CMD which can be one of the following:\n"
"\n"
"   F-DUPFD         Duplicate a file descriptor.\n"
"   F-GETFD         Get file descriptor flags.\n"
"   F-SETFD         Set file descriptor flags.\n"
"   F-GETFL         Get file flags.\n"
"   F-SETFL         Set file flags.\n"
"   F-GETOWN        Get owner.\n"
"   F-SETOWN        Set owner.\n"
"\n"
"   The flags that can be specified for F-SETFL are:\n"
"\n"
"   FNDELAY         Non-blocking reads.\n"
"   FAPPEND         Append on each write.\n"
"   FASYNC          Signal pgrp when data ready.\n"
"   FCREAT          Create if nonexistant.\n"
"   FTRUNC          Truncate to zero length.\n"
"   FEXCL           Error if already created.\n"
"   "
msgstr ""
"Unixway-cntlfay anipulatesmay ilefay escriptorsday accordingway otay ethay\n"
"   argumentway MDCAY ichwhay ancay ebay oneway ofway ethay ollowingfay:\n"
"\n"
"   F-UPFDDAY         Uplicateday away ilefay escriptorday.\n"
"   F-ETFDGAY         Etgay ilefay escriptorday agsflay.\n"
"   F-ETFDSAY         Etsay ilefay escriptorday agsflay.\n"
"   F-ETFLGAY         Etgay ilefay agsflay.\n"
"   F-ETFLSAY         Etsay ilefay agsflay.\n"
"   F-ETOWNGAY        Etgay ownerway.\n"
"   F-ETOWNSAY        Etsay ownerway.\n"
"\n"
"   Ethay agsflay atthay ancay ebay ecifiedspay orfay F-ETFLSAY areway:\n"
"\n"
"   NDELAYFAY         Onnay-ockingblay eadsray.\n"
"   APPENDFAY         Appendway onway eachway itewray.\n"
"   ASYNCFAY          Ignalsay grppay enwhay ataday eadyray.\n"
"   CREATFAY          Eatecray ifway onexistantnay.\n"
"   TRUNCFAY          Uncatetray otay erozay engthlay.\n"
"   EXCLFAY           Errorway ifway alreadyway eatedcray.\n"
"   "

#: target:code/unix.lisp
msgid ""
"Unix-link creates a hard link from the file with name1 to the\n"
"   file with name2."
msgstr ""
"Unixway-inklay eatescray away ardhay inklay omfray ethay ilefay ithway "
"amenay1 otay ethay\n"
"   ilefay ithway amenay2."

#: target:code/unix.lisp
msgid "set the file pointer"
msgstr "etsay ethay ilefay ointerpay"

#: target:code/unix.lisp
msgid "increment the file pointer"
msgstr "incrementway ethay ilefay ointerpay"

#: target:code/unix.lisp
msgid "extend the file size"
msgstr "extendway ethay ilefay izesay"

#: target:code/unix.lisp
msgid ""
"Unix-lseek accepts a file descriptor and moves the file pointer ahead\n"
"   a certain offset for that file.  Whence can be any of the following:\n"
"\n"
"   l_set        Set the file pointer.\n"
"   l_incr       Increment the file pointer.\n"
"   l_xtnd       Extend the file size.\n"
"  _N"
msgstr ""
"Unixway-seeklay acceptsway away ilefay escriptorday andway ovesmay ethay "
"ilefay ointerpay aheadway\n"
"   away ertaincay offsetway orfay atthay ilefay.  Encewhay ancay ebay anyway "
"ofway ethay ollowingfay:\n"
"\n"
"   l_etsay        Etsay ethay ilefay ointerpay.\n"
"   l_incrway       Incrementway ethay ilefay ointerpay.\n"
"   l_tndxay       Extendway ethay ilefay izesay.\n"
"  _N"

#: target:code/unix.lisp
msgid ""
"Unix-mkdir creates a new directory with the specified name and mode.\n"
"   (Same as those for unix-chmod.)  It returns T upon success, otherwise\n"
"   NIL and an error number."
msgstr ""
"Unixway-kdirmay eatescray away ewnay irectoryday ithway ethay ecifiedspay "
"amenay andway odemay.\n"
"   (Amesay asway osethay orfay unixway-modchay.)  Itway eturnsray T uponway "
"uccesssay, otherwiseway\n"
"   ILNAY andway anway errorway umbernay."

#: target:code/unix.lisp
msgid "Read-only flag."
msgstr "Eadray-onlyway agflay."

#: target:code/unix.lisp
msgid "Write-only flag."
msgstr "Itewray-onlyway agflay."

#: target:code/unix.lisp
msgid "Read-write flag."
msgstr "Eadray-itewray agflay."

#: target:code/unix.lisp
msgid "Non-blocking I/O"
msgstr "Onnay-ockingblay Iway/O"

#: target:code/unix.lisp
msgid "Append flag."
msgstr "Appendway agflay."

#: target:code/unix.lisp
msgid "Create if nonexistant flag."
msgstr "Eatecray ifway onexistantnay agflay."

#: target:code/unix.lisp
msgid "Truncate flag."
msgstr "Uncatetray agflay."

#: target:code/unix.lisp
msgid "Error if already exists."
msgstr "Errorway ifway alreadyway existsway."

#: target:code/unix.lisp
msgid "Don't assign controlling tty"
msgstr "Onday't assignway ontrollingcay tytay"

#: target:code/unix.lisp
msgid "Non-blocking mode"
msgstr "Onnay-ockingblay odemay"

#: target:code/unix.lisp
msgid "Synchronous writes (on ext2)"
msgstr "Ynchronoussay iteswray (onway extway2)"

#: target:code/unix.lisp
msgid ""
"Unix-open opens the file whose pathname is specified by path\n"
"   for reading and/or writing as specified by the flags argument.\n"
"   The flags argument can be:\n"
"\n"
"     o_rdonly        Read-only flag.\n"
"     o_wronly        Write-only flag.\n"
"     o_rdwr          Read-and-write flag.\n"
"     o_append        Append flag.\n"
"     o_creat         Create-if-nonexistant flag.\n"
"     o_trunc         Truncate-to-size-0 flag.\n"
"\n"
"   If the o_creat flag is specified, then the file is created with\n"
"   a permission of argument mode if the file doesn't exist.  An\n"
"   integer file descriptor is returned by unix-open."
msgstr ""
"Unixway-openway opensway ethay ilefay osewhay athnamepay isway ecifiedspay "
"ybay athpay\n"
"   orfay eadingray andway/orway itingwray asway ecifiedspay ybay ethay "
"agsflay argumentway.\n"
"   Ethay agsflay argumentway ancay ebay:\n"
"\n"
"     o_donlyray        Eadray-onlyway agflay.\n"
"     o_onlywray        Itewray-onlyway agflay.\n"
"     o_dwrray          Eadray-andway-itewray agflay.\n"
"     o_appendway        Appendway agflay.\n"
"     o_eatcray         Eatecray-ifway-onexistantnay agflay.\n"
"     o_unctray         Uncatetray-otay-izesay-0 agflay.\n"
"\n"
"   Ifway ethay o_eatcray agflay isway ecifiedspay, enthay ethay ilefay isway "
"eatedcray ithway\n"
"   away ermissionpay ofway argumentway odemay ifway ethay ilefay oesnday't "
"existway.  Anway\n"
"   integerway ilefay escriptorday isway eturnedray ybay unixway-openway."

#: target:code/unix.lisp
msgid ""
"Unix-pipe sets up a unix-piping mechanism consisting of\n"
"  an input pipe and an output pipe.  Unix-Pipe returns two\n"
"  values: if no error occurred the first value is the pipe\n"
"  to be read from and the second is can be written to.  If\n"
"  an error occurred the first value is NIL and the second\n"
"  the unix error code."
msgstr ""
"Unixway-ipepay etssay upway away unixway-ipingpay echanismmay onsistingcay "
"ofway\n"
"  anway inputway ipepay andway anway outputway ipepay.  Unixway-Ipepay "
"eturnsray wotay\n"
"  aluesvay: ifway onay errorway occurredway ethay irstfay aluevay isway "
"ethay ipepay\n"
"  otay ebay eadray omfray andway ethay econdsay isway ancay ebay ittenwray "
"otay.  Ifway\n"
"  anway errorway occurredway ethay irstfay aluevay isway ILNAY andway ethay "
"econdsay\n"
"  ethay unixway errorway odecay."

#: target:code/unix.lisp
msgid ""
"Unix-read attempts to read from the file described by fd into\n"
"   the buffer buf until it is full.  Len is the length of the buffer.\n"
"   The number of bytes actually read is returned or NIL and an error\n"
"   number if an error occured."
msgstr ""
"Unixway-eadray attemptsway otay eadray omfray ethay ilefay escribedday ybay "
"dfay intoway\n"
"   ethay ufferbay ufbay untilway itway isway ullfay.  Enlay isway ethay "
"engthlay ofway ethay ufferbay.\n"
"   Ethay umbernay ofway ytesbay actuallyway eadray isway eturnedray orway "
"ILNAY andway anway errorway\n"
"   umbernay ifway anway errorway occuredway."

#: target:code/unix.lisp
msgid ""
"Unix-readlink invokes the readlink system call on the file name\n"
"  specified by the simple string path.  It returns up to two values:\n"
"  the contents of the symbolic link if the call is successful, or\n"
"  NIL and the Unix error number."
msgstr ""
"Unixway-eadlinkray invokesway ethay eadlinkray ystemsay allcay onway ethay "
"ilefay amenay\n"
"  ecifiedspay ybay ethay implesay ingstray athpay.  Itway eturnsray upway "
"otay wotay aluesvay:\n"
"  ethay ontentscay ofway ethay ymbolicsay inklay ifway ethay allcay isway "
"uccessfulsay, orway\n"
"  ILNAY andway ethay Unixway errorway umbernay."

#: target:code/unix.lisp
msgid ""
"Unix-rename renames the file with string name1 to the string\n"
"   name2.  NIL and an error code is returned if an error occured."
msgstr ""
"Unixway-enameray enamesray ethay ilefay ithway ingstray amenay1 otay ethay "
"ingstray\n"
"   amenay2.  ILNAY andway anway errorway odecay isway eturnedray ifway anway "
"errorway occuredway."

#: target:code/unix.lisp
msgid ""
"Unix-rmdir attempts to remove the directory name.  NIL and\n"
"   an error number is returned if an error occured."
msgstr ""
"Unixway-mdirray attemptsway otay emoveray ethay irectoryday amenay.  ILNAY "
"andway\n"
"   anway errorway umbernay isway eturnedray ifway anway errorway occuredway."

#: target:code/unix.lisp
msgid ""
"Perform the UNIX select(2) system call.\n"
"  (declare (type (integer 0 #.FD-SETSIZE) num-descriptors)\n"
"\t   (type (or (alien (* (struct fd-set))) null)\n"
"\t\t read-fds write-fds exception-fds)\n"
"\t   (type (or null (unsigned-byte 31)) timeout-secs)\n"
"\t   (type (unsigned-byte 31) timeout-usecs)\n"
"\t   (optimize (speed 3) (safety 0) (inhibit-warnings 3)))"
msgstr ""
"Erformpay ethay UNIXWAY electsay(2) ystemsay allcay.\n"
"  (eclareday (ypetay (integerway 0 #.DFAY-ETSIZESAY) umnay-escriptorsday)\n"
"\t   (ypetay (orway (alienway (* (uctstray dfay-etsay))) ullnay)\n"
"\t\t eadray-dsfay itewray-dsfay exceptionway-dsfay)\n"
"\t   (ypetay (orway ullnay (unsignedway-ytebay 31)) imeouttay-ecssay)\n"
"\t   (ypetay (unsignedway-ytebay 31) imeouttay-usecsway)\n"
"\t   (optimizeway (eedspay 3) (afetysay 0) (inhibitway-arningsway 3)))"

#: target:code/unix.lisp
msgid ""
"Unix-select examines the sets of descriptors passed as arguments\n"
"   to see if they are ready for reading and writing.  See the UNIX\n"
"   Programmers Manual for more information."
msgstr ""
"Unixway-electsay examinesway ethay etssay ofway escriptorsday assedpay asway "
"argumentsway\n"
"   otay eesay ifway eythay areway eadyray orfay eadingray andway itingwray.  "
"Eesay ethay UNIXWAY\n"
"   Ogrammerspray Anualmay orfay oremay informationway."

#: target:code/unix.lisp
msgid ""
"Unix-sync writes all information in core memory which has been\n"
"   modified to disk.  It returns NIL and an error code if an error\n"
"   occured."
msgstr ""
"Unixway-yncsay iteswray allway informationway inway orecay emorymay ichwhay "
"ashay eenbay\n"
"   odifiedmay otay iskday.  Itway eturnsray ILNAY andway anway errorway "
"odecay ifway anway errorway\n"
"   occuredway."

#: target:code/unix.lisp
msgid ""
"Unix-fsync writes the core image of the file described by\n"
"   fd to disk."
msgstr ""
"Unixway-syncfay iteswray ethay orecay imageway ofway ethay ilefay "
"escribedday ybay\n"
"   dfay otay iskday."

#: target:code/unix.lisp
msgid ""
"Unix-truncate truncates the named file to the length (in\n"
"   bytes) specified by len.  NIL and an error number is returned\n"
"   if the call is unsuccessful."
msgstr ""
"Unixway-uncatetray uncatestray ethay amednay ilefay otay ethay engthlay "
"(inway\n"
"   ytesbay) ecifiedspay ybay enlay.  ILNAY andway anway errorway umbernay "
"isway eturnedray\n"
"   ifway ethay allcay isway unsuccessfulway."

#: target:code/unix.lisp
msgid ""
"Unix-ftruncate is similar to unix-truncate except that the first\n"
"   argument is a file descriptor rather than a file name."
msgstr ""
"Unixway-truncatefay isway imilarsay otay unixway-uncatetray exceptway atthay "
"ethay irstfay\n"
"   argumentway isway away ilefay escriptorday atherray anthay away ilefay "
"amenay."

#: target:code/unix.lisp
msgid ""
"Unix-symlink creates a symbolic link named name2 to the file\n"
"   named name1.  NIL and an error number is returned if the call\n"
"   is unsuccessful."
msgstr ""
"Unixway-ymlinksay eatescray away ymbolicsay inklay amednay amenay2 otay "
"ethay ilefay\n"
"   amednay amenay1.  ILNAY andway anway errorway umbernay isway eturnedray "
"ifway ethay allcay\n"
"   isway unsuccessfulway."

#: target:code/unix.lisp
msgid ""
"Unix-unlink removes the directory entry for the named file.\n"
"   NIL and an error code is returned if the call fails."
msgstr ""
"Unixway-unlinkway emovesray ethay irectoryday entryway orfay ethay amednay "
"ilefay.\n"
"   ILNAY andway anway errorway odecay isway eturnedray ifway ethay allcay "
"ailsfay."

#: target:code/unix.lisp
msgid ""
"Unix-write attempts to write a character buffer (buf) of length\n"
"   len to the file described by the file descriptor fd.  NIL and an\n"
"   error is returned if the call is unsuccessful."
msgstr ""
"Unixway-itewray attemptsway otay itewray away aracterchay ufferbay (ufbay) "
"ofway engthlay\n"
"   enlay otay ethay ilefay escribedday ybay ethay ilefay escriptorday dfay.  "
"ILNAY andway anway\n"
"   errorway isway eturnedray ifway ethay allcay isway unsuccessfulway."

#: target:code/unix.lisp
msgid ""
"Unix-ioctl performs a variety of operations on open i/o\n"
"   descriptors.  See the UNIX Programmer's Manual for more\n"
"   information."
msgstr ""
"Unixway-ioctlway erformspay away arietyvay ofway operationsway onway openway "
"i/o\n"
"   escriptorsday.  Eesay ethay UNIXWAY Ogrammerpray's Anualmay orfay oremay\n"
"   informationway."

#: target:code/unix.lisp
msgid "Get terminal attributes."
msgstr "Etgay erminaltay attributesway."

#: target:code/unix.lisp
msgid "Set terminal attributes."
msgstr "Etsay erminaltay attributesway."

#: target:code/unix.lisp
msgid "Get terminal output speed."
msgstr "Etgay erminaltay outputway eedspay."

#: target:code/unix.lisp
msgid "Set terminal output speed."
msgstr "Etsay erminaltay outputway eedspay."

#: target:code/unix.lisp
msgid "Bogus baud rate ~S"
msgstr "Ogusbay audbay ateray ~S"

#: target:code/unix.lisp
msgid "Get terminal input speed."
msgstr "Etgay erminaltay inputway eedspay."

#: target:code/unix.lisp
msgid "Set terminal input speed."
msgstr "Etsay erminaltay inputway eedspay."

#: target:code/unix.lisp
msgid "Send break"
msgstr "Endsay eakbray"

#: target:code/unix.lisp
msgid "Wait for output for finish"
msgstr "Aitway orfay outputway orfay inishfay"

#: target:code/unix.lisp
msgid "See tcflush(3)"
msgstr "Eesay cflushtay(3)"

#: target:code/unix.lisp
msgid "Flow control"
msgstr "Owflay ontrolcay"

#: target:code/unix.lisp
msgid "Set the tty-process-group for the unix file-descriptor FD to PGRP."
msgstr ""
"Etsay ethay tytay-ocesspray-oupgray orfay ethay unixway ilefay-escriptorday "
"DFAY otay GRPPAY."

#: target:code/unix.lisp
msgid "Get the tty-process-group for the unix file-descriptor FD."
msgstr ""
"Etgay ethay tytay-ocesspray-oupgray orfay ethay unixway ilefay-escriptorday "
"DFAY."

#: target:code/unix.lisp
msgid ""
"Get the tty-process-group for the unix file-descriptor FD.  If not "
"supplied,\n"
"  FD defaults to /dev/tty."
msgstr ""
"Etgay ethay tytay-ocesspray-oupgray orfay ethay unixway ilefay-escriptorday "
"DFAY.  Ifway otnay uppliedsay,\n"
"  DFAY efaultsday otay /evday/tytay."

#: target:code/unix.lisp
msgid ""
"Set the tty-process-group for the unix file-descriptor FD to PGRP.  If not\n"
"  supplied, FD defaults to /dev/tty."
msgstr ""
"Etsay ethay tytay-ocesspray-oupgray orfay ethay unixway ilefay-escriptorday "
"DFAY otay GRPPAY.  Ifway otnay\n"
"  uppliedsay, DFAY efaultsday otay /evday/tytay."

#: target:code/unix.lisp
msgid "Set the socket process-group for the unix file-descriptor FD to PGRP."
msgstr ""
"Etsay ethay ocketsay ocesspray-oupgray orfay ethay unixway ilefay-"
"escriptorday DFAY otay GRPPAY."

#: target:code/unix.lisp
msgid ""
"Unix-exit terminates the current process with an optional\n"
"   error code.  If successful, the call doesn't return.  If\n"
"   unsuccessful, the call returns NIL and an error number."
msgstr ""
"Unixway-exitway erminatestay ethay urrentcay ocesspray ithway anway "
"optionalway\n"
"   errorway odecay.  Ifway uccessfulsay, ethay allcay oesnday't eturnray.  "
"Ifway\n"
"   unsuccessfulway, ethay allcay eturnsray ILNAY andway anway errorway "
"umbernay."

#: target:code/unix.lisp
msgid ""
"Unix-stat retrieves information about the specified\n"
"   file returning them in the form of multiple values.\n"
"   See the UNIX Programmer's Manual for a description\n"
"   of the values returned.  If the call fails, then NIL\n"
"   and an error number is returned instead."
msgstr ""
"Unixway-tatsay etrievesray informationway aboutway ethay ecifiedspay\n"
"   ilefay eturningray emthay inway ethay ormfay ofway ultiplemay aluesvay.\n"
"   Eesay ethay UNIXWAY Ogrammerpray's Anualmay orfay away escriptionday\n"
"   ofway ethay aluesvay eturnedray.  Ifway ethay allcay ailsfay, enthay "
"ILNAY\n"
"   andway anway errorway umbernay isway eturnedray insteadway."

#: target:code/unix.lisp
msgid ""
"Unix-lstat is similar to unix-stat except the specified\n"
"   file must be a symbolic link."
msgstr ""
"Unixway-statlay isway imilarsay otay unixway-tatsay exceptway ethay "
"ecifiedspay\n"
"   ilefay ustmay ebay away ymbolicsay inklay."

#: target:code/unix.lisp
msgid ""
"Unix-fstat is similar to unix-stat except the file is specified\n"
"   by the file descriptor fd."
msgstr ""
"Unixway-statfay isway imilarsay otay unixway-tatsay exceptway ethay ilefay "
"isway ecifiedspay\n"
"   ybay ethay ilefay escriptorday dfay."

#: target:code/unix.lisp
msgid "The calling process."
msgstr "Ethay allingcay ocesspray."

#: target:code/unix.lisp
msgid "Terminated child processes."
msgstr "Erminatedtay ildchay ocessespray."

#: target:code/unix.lisp
msgid ""
"Like call getrusage, but return only the system and user time, and returns\n"
"   the seconds and microseconds as separate values."
msgstr ""
"Ikelay allcay etrusagegay, utbay eturnray onlyway ethay ystemsay andway "
"userway imetay, andway eturnsray\n"
"   ethay econdssay andway icrosecondsmay asway eparatesay aluesvay."

#: target:code/unix.lisp
msgid ""
"Unix-getrusage returns information about the resource usage\n"
"   of the process specified by who.  Who can be either the\n"
"   current process (rusage_self) or all of the terminated\n"
"   child processes (rusage_children).  NIL and an error number\n"
"   is returned if the call fails."
msgstr ""
"Unixway-etrusagegay eturnsray informationway aboutway ethay esourceray "
"usageway\n"
"   ofway ethay ocesspray ecifiedspay ybay owhay.  Owhay ancay ebay eitherway "
"ethay\n"
"   urrentcay ocesspray (usageray_elfsay) orway allway ofway ethay "
"erminatedtay\n"
"   ildchay ocessespray (usageray_ildrenchay).  ILNAY andway anway errorway "
"umbernay\n"
"   isway eturnedray ifway ethay allcay ailsfay."

#: target:code/unix.lisp
msgid ""
"Unix-times returns information about the cpu time usage of the process\n"
"   and its children."
msgstr ""
"Unixway-imestay eturnsray informationway aboutway ethay pucay imetay "
"usageway ofway ethay ocesspray\n"
"   andway itsway ildrenchay."

#: target:code/unix.lisp
msgid ""
"If it works, unix-gettimeofday returns 5 values: T, the seconds and\n"
"   microseconds of the current time of day, the timezone (in minutes west\n"
"   of Greenwich), and a daylight-savings flag.  If it doesn't work, it\n"
"   returns NIL and the errno."
msgstr ""
"Ifway itway orksway, unixway-ettimeofdaygay eturnsray 5 aluesvay: T, ethay "
"econdssay andway\n"
"   icrosecondsmay ofway ethay urrentcay imetay ofway ayday, ethay imezonetay "
"(inway inutesmay estway\n"
"   ofway Eenwichgray), andway away aylightday-avingssay agflay.  Ifway itway "
"oesnday't orkway, itway\n"
"   eturnsray ILNAY andway ethay errnoway."

#: target:code/unix.lisp
msgid ""
"Unix-utimes sets the 'last-accessed' and 'last-updated'\n"
"   times on a specified file.  NIL and an error number is\n"
"   returned if the call is unsuccessful."
msgstr ""
"Unixway-utimesway etssay ethay 'astlay-accessedway' andway 'astlay-"
"updatedway'\n"
"   imestay onway away ecifiedspay ilefay.  ILNAY andway anway errorway "
"umbernay isway\n"
"   eturnedray ifway ethay allcay isway unsuccessfulway."

#: target:code/unix.lisp
msgid ""
"Unix-setreuid sets the real and effective user-id's of the current\n"
"   process to the specified ones.  NIL and an error number is returned\n"
"   if the call fails."
msgstr ""
"Unixway-etreuidsay etssay ethay ealray andway effectiveway userway-idway's "
"ofway ethay urrentcay\n"
"   ocesspray otay ethay ecifiedspay onesway.  ILNAY andway anway errorway "
"umbernay isway eturnedray\n"
"   ifway ethay allcay ailsfay."

#: target:code/unix.lisp
msgid ""
"Unix-setregid sets the real and effective group-id's of the current\n"
"   process process to the specified ones.  NIL and an error number is\n"
"   returned if the call fails."
msgstr ""
"Unixway-etregidsay etssay ethay ealray andway effectiveway oupgray-idway's "
"ofway ethay urrentcay\n"
"   ocesspray ocesspray otay ethay ecifiedspay onesway.  ILNAY andway anway "
"errorway umbernay isway\n"
"   eturnedray ifway ethay allcay ailsfay."

#: target:code/unix.lisp
msgid "Unix-getpid returns the process-id of the current process."
msgstr ""
"Unixway-etpidgay eturnsray ethay ocesspray-idway ofway ethay urrentcay "
"ocesspray."

#: target:code/unix.lisp
msgid ""
"Unix-getppid returns the process-id of the parent of the current process."
msgstr ""
"Unixway-etppidgay eturnsray ethay ocesspray-idway ofway ethay arentpay ofway "
"ethay urrentcay ocesspray."

#: target:code/unix.lisp
msgid "Unix-getgid returns the real group-id of the current process."
msgstr ""
"Unixway-etgidgay eturnsray ethay ealray oupgray-idway ofway ethay urrentcay "
"ocesspray."

#: target:code/unix.lisp
msgid "Unix-getegid returns the effective group-id of the current process."
msgstr ""
"Unixway-etegidgay eturnsray ethay effectiveway oupgray-idway ofway ethay "
"urrentcay ocesspray."

#: target:code/unix.lisp
msgid "Unix-getpgrp returns the group-id of the calling process."
msgstr ""
"Unixway-etpgrpgay eturnsray ethay oupgray-idway ofway ethay allingcay "
"ocesspray."

#: target:code/unix.lisp
msgid ""
"Unix-setpgrp sets the process group on the process pid to\n"
"   pgrp.  NIL and an error number are returned upon failure."
msgstr ""
"Unixway-etpgrpsay etssay ethay ocesspray oupgray onway ethay ocesspray idpay "
"otay\n"
"   grppay.  ILNAY andway anway errorway umbernay areway eturnedray uponway "
"ailurefay."

#: target:code/unix.lisp
msgid ""
"Unix-setpgid sets the process group of the process pid to\n"
"   pgrp. If pgid is equal to pid, the process becomes a process\n"
"   group leader. NIL and an error number are returned upon failure."
msgstr ""
"Unixway-etpgidsay etssay ethay ocesspray oupgray ofway ethay ocesspray idpay "
"otay\n"
"   grppay. Ifway gidpay isway equalway otay idpay, ethay ocesspray ecomesbay "
"away ocesspray\n"
"   oupgray eaderlay. ILNAY andway anway errorway umbernay areway eturnedray "
"uponway ailurefay."

#: target:code/unix.lisp
msgid ""
"Unix-getuid returns the real user-id associated with the\n"
"   current process."
msgstr ""
"Unixway-etuidgay eturnsray ethay ealray userway-idway associatedway ithway "
"ethay\n"
"   urrentcay ocesspray."

#: target:code/unix.lisp
msgid "Unix-getpagesize returns the number of bytes in a system page."
msgstr ""
"Unixway-etpagesizegay eturnsray ethay umbernay ofway ytesbay inway away "
"ystemsay agepay."

#: target:code/unix.lisp
msgid "Unix-gethostname returns the name of the host machine as a string."
msgstr ""
"Unixway-ethostnamegay eturnsray ethay amenay ofway ethay osthay achinemay "
"asway away ingstray."

#: target:code/unix.lisp
msgid ""
"Unix-gethostid returns a 32-bit integer which provides unique\n"
"   identification for the host machine."
msgstr ""
"Unixway-ethostidgay eturnsray away 32-itbay integerway ichwhay ovidespray "
"uniqueway\n"
"   identificationway orfay ethay osthay achinemay."

#: target:code/unix.lisp
msgid ""
"Executes the unix fork system call.  Returns 0 in the child and the pid\n"
"   of the child in the parent if it works, or NIL and an error number if it\n"
"   doesn't work."
msgstr ""
"Executesway ethay unixway orkfay ystemsay allcay.  Eturnsray 0 inway ethay "
"ildchay andway ethay idpay\n"
"   ofway ethay ildchay inway ethay arentpay ifway itway orksway, orway ILNAY "
"andway anway errorway umbernay ifway itway\n"
"   oesnday't orkway."

#: target:code/unix.lisp
msgid ""
"Get the value of the environment variable named Name.  If no such\n"
"  variable exists, Nil is returned."
msgstr ""
"Etgay ethay aluevay ofway ethay environmentway ariablevay amednay Amenay.  "
"Ifway onay uchsay\n"
"  ariablevay existsway, Ilnay isway eturnedray."

#: target:code/unix.lisp
msgid ""
"Adds the environment variable named Name to the environment with\n"
"  the given Value if Name does not already exist. If Name does exist,\n"
"  the value is changed to Value if Overwrite is non-zero.  Otherwise,\n"
"  the value is not changed."
msgstr ""
"Addsway ethay environmentway ariablevay amednay Amenay otay ethay "
"environmentway ithway\n"
"  ethay ivengay Aluevay ifway Amenay oesday otnay alreadyway existway. Ifway "
"Amenay oesday existway,\n"
"  ethay aluevay isway angedchay otay Aluevay ifway Overwriteway isway onnay-"
"erozay.  Otherwiseway,\n"
"  ethay aluevay isway otnay angedchay."

#: target:code/unix.lisp
msgid ""
"Adds or changes the environment.  Name-value must be a string of\n"
"  the form \"name=value\".  If the name does not exist, it is added.\n"
"  If name does exist, the value is updated to the given value."
msgstr ""
"Addsway orway angeschay ethay environmentway.  Amenay-aluevay ustmay ebay "
"away ingstray ofway\n"
"  ethay ormfay \"amenay=aluevay\".  Ifway ethay amenay oesday otnay "
"existway, itway isway addedway.\n"
"  Ifway amenay oesday existway, ethay aluevay isway updatedway otay ethay "
"ivengay aluevay."

#: target:code/unix.lisp
msgid "Removes the variable Name from the environment"
msgstr "Emovesray ethay ariablevay Amenay omfray ethay environmentway"

#: target:code/unix.lisp
msgid "Returns either :file, :directory, :link, :special, or NIL."
msgstr ""
"Eturnsray eitherway :ilefay, :irectoryday, :inklay, :ecialspay, orway ILNAY."

#: target:code/unix.lisp
msgid "Returns the pathname with all symbolic links resolved."
msgstr ""
"Eturnsray ethay athnamepay ithway allway ymbolicsay inkslay esolvedray."

#: target:code/unix.lisp
msgid "Error reading link ~S: ~S"
msgstr "Errorway eadingray inklay ~S: ~S"

#: target:code/unix.lisp
msgid ""
"Accepts a Unix file descriptor and returns T if the device\n"
"  associated with it is a terminal."
msgstr ""
"Acceptsway away Unixway ilefay escriptorday andway eturnsray T ifway ethay "
"eviceday\n"
"  associatedway ithway itway isway away erminaltay."

#: target:code/unix.lisp
msgid ""
"Executes the Unix execve system call.  If the system call suceeds, lisp\n"
"   will no longer be running in this process.  If the system call fails "
"this\n"
"   function returns two values: NIL and an error code.  Arg-list should be "
"a\n"
"   list of simple-strings which are passed as arguments to the exec'ed "
"program.\n"
"   Environment should be an a-list mapping symbols to simple-strings which "
"this\n"
"   function bashes together to form the environment for the exec'ed program."
msgstr ""
"Executesway ethay Unixway execveway ystemsay allcay.  Ifway ethay ystemsay "
"allcay uceedssay, isplay\n"
"   illway onay ongerlay ebay unningray inway isthay ocesspray.  Ifway ethay "
"ystemsay allcay ailsfay isthay\n"
"   unctionfay eturnsray wotay aluesvay: ILNAY andway anway errorway odecay.  "
"Argway-istlay ouldshay ebay away\n"
"   istlay ofway implesay-ingsstray ichwhay areway assedpay asway "
"argumentsway otay ethay execway'edway ogrampray.\n"
"   Environmentway ouldshay ebay anway away-istlay appingmay ymbolssay otay "
"implesay-ingsstray ichwhay isthay\n"
"   unctionfay ashesbay ogethertay otay ormfay ethay environmentway orfay "
"ethay execway'edway ogrampray."

#: target:code/unix.lisp
msgid ""
"Unix-getitimer returns the INTERVAL and VALUE slots of one of\n"
"   three system timers (:real :virtual or :profile). On success,\n"
"   unix-getitimer returns 5 values,\n"
"   T, it-interval-secs, it-interval-usec, it-value-secs, it-value-usec."
msgstr ""
"Unixway-etitimergay eturnsray ethay INTERVALWAY andway ALUEVAY otsslay ofway "
"oneway ofway\n"
"   reethay ystemsay imerstay (:ealray :irtualvay orway :ofilepray). Onway "
"uccesssay,\n"
"   unixway-etitimergay eturnsray 5 aluesvay,\n"
"   T, itway-intervalway-ecssay, itway-intervalway-usecway, itway-aluevay-"
"ecssay, itway-aluevay-usecway."

#: target:code/unix.lisp
msgid ""
" Unix-setitimer sets the INTERVAL and VALUE slots of one of\n"
"   three system timers (:real :virtual or :profile). A SIGALRM signal\n"
"   will be delivered VALUE <seconds+microseconds> from now. INTERVAL,\n"
"   when non-zero, is <seconds+microseconds> to be loaded each time\n"
"   the timer expires. Setting INTERVAL and VALUE to zero disables\n"
"   the timer. See the Unix man page for more details. On success,\n"
"   unix-setitimer returns the old contents of the INTERVAL and VALUE\n"
"   slots as in unix-getitimer."
msgstr ""
" Unixway-etitimersay etssay ethay INTERVALWAY andway ALUEVAY otsslay ofway "
"oneway ofway\n"
"   reethay ystemsay imerstay (:ealray :irtualvay orway :ofilepray). Away "
"IGALRMSAY ignalsay\n"
"   illway ebay eliveredday ALUEVAY <econdssay+icrosecondsmay> omfray ownay. "
"INTERVALWAY,\n"
"   enwhay onnay-erozay, isway <econdssay+icrosecondsmay> otay ebay oadedlay "
"eachway imetay\n"
"   ethay imertay expiresway. Ettingsay INTERVALWAY andway ALUEVAY otay "
"erozay isablesday\n"
"   ethay imertay. Eesay ethay Unixway anmay agepay orfay oremay etailsday. "
"Onway uccesssay,\n"
"   unixway-etitimersay eturnsray ethay oldway ontentscay ofway ethay "
"INTERVALWAY andway ALUEVAY\n"
"   otsslay asway inway unixway-etitimergay."

#: target:code/unix.lisp
msgid ""
"Return a USER-INFO structure for the user identified by LOGIN, or NIL if not "
"found."
msgstr ""
"Eturnray away USERWAY-INFOWAY ucturestray orfay ethay userway identifiedway "
"ybay OGINLAY, orway ILNAY ifway otnay oundfay."

#: target:code/unix.lisp
msgid ""
"Return a USER-INFO structure for the user identified by UID, or NIL if not "
"found."
msgstr ""
"Eturnray away USERWAY-INFOWAY ucturestray orfay ethay userway identifiedway "
"ybay UIDWAY, orway ILNAY ifway otnay oundfay."

#: target:code/unix.lisp
msgid "The maximum size of the group entry buffer"
msgstr "Ethay aximummay izesay ofway ethay oupgray entryway ufferbay"

#: target:code/unix.lisp
msgid ""
"Return a GROUP-INFO structure for the group identified by NAME, or NIL if "
"not found."
msgstr ""
"Eturnray away OUPGRAY-INFOWAY ucturestray orfay ethay oupgray identifiedway "
"ybay AMENAY, orway ILNAY ifway otnay oundfay."

#: target:code/unix.lisp
msgid ""
"Return a GROUP-INFO structure for the group identified by GID, or NIL if not "
"found."
msgstr ""
"Eturnray away OUPGRAY-INFOWAY ucturestray orfay ethay oupgray identifiedway "
"ybay IDGAY, orway ILNAY ifway otnay oundfay."

#: target:code/unix.lisp
msgid "CPU time per process (in milliseconds)"
msgstr "PUCAY imetay erpay ocesspray (inway illisecondsmay)"

#: target:code/unix.lisp
msgid "Maximum file size"
msgstr "Aximummay ilefay izesay"

#: target:code/unix.lisp
msgid "Data segment size"
msgstr "Ataday egmentsay izesay"

#: target:code/unix.lisp
msgid "Stack size"
msgstr "Tacksay izesay"

#: target:code/unix.lisp
msgid "Core file size"
msgstr "Orecay ilefay izesay"

#: target:code/unix.lisp
msgid "Number of open files"
msgstr "Umbernay ofway openway ilesfay"

#: target:code/unix.lisp
msgid "Maximum mapped memory"
msgstr "Aximummay appedmay emorymay"

#: target:code/unix.lisp
msgid "CPU time per process"
msgstr "PUCAY imetay erpay ocesspray"

#: target:code/unix.lisp
msgid "File size"
msgstr "Ilefay izesay"

#: target:code/unix.lisp
msgid "Addess space (resident set size)"
msgstr "Addessway acespay (esidentray etsay izesay)"

#: target:code/unix.lisp
msgid "Locked-in-memory address space"
msgstr "Ockedlay-inway-emorymay addressway acespay"

#: target:code/unix.lisp
msgid "Number of processes"
msgstr "Umbernay ofway ocessespray"

#: target:code/unix.lisp
msgid ""
"Get the limits on the consumption of system resouce specified by\n"
"  Resource.  If successful, return three values: T, the current (soft)\n"
"  limit, and the maximum (hard) limit."
msgstr ""
"Etgay ethay imitslay onway ethay onsumptioncay ofway ystemsay esouceray "
"ecifiedspay ybay\n"
"  Esourceray.  Ifway uccessfulsay, eturnray reethay aluesvay: T, ethay "
"urrentcay (oftsay)\n"
"  imitlay, andway ethay aximummay (ardhay) imitlay."

#: target:code/bsd-os.lisp
msgid "Version string for supporting software"
msgstr "Ersionvay ingstray orfay upportingsay oftwaresay"

#: target:code/bsd-os.lisp
msgid "Returns a string describing version of the supporting software."
msgstr ""
"Eturnsray away ingstray escribingday ersionvay ofway ethay upportingsay "
"oftwaresay."

#: target:code/bsd-os.lisp
msgid "Unix system call getrusage failed: ~A."
msgstr "Unixway ystemsay allcay etrusagegay ailedfay: ~Away."

#: target:code/bsd-os.lisp
msgid "Getpagesize failed: ~A"
msgstr "Etpagesizegay ailedfay: ~Away"

#: target:code/x86-vm.lisp
msgid "Returns a string describing the type of the local machine."
msgstr ""
"Eturnsray away ingstray escribingday ethay ypetay ofway ethay ocallay "
"achinemay."

#: target:code/x86-vm.lisp
msgid "Returns a string describing the version of the local machine."
msgstr ""
"Eturnsray away ingstray escribingday ethay ersionvay ofway ethay ocallay "
"achinemay."

#: target:code/x86-vm.lisp
msgid "Unknown code-object-fixup kind ~s."
msgstr "Unknownway odecay-objectway-ixupfay indkay ~s."

#: target:compiler/generic/core.lisp target:code/load.lisp
#: target:code/x86-vm.lisp
msgid "Unknown foreign symbol: ~S"
msgstr "Unknownway oreignfay ymbolsay: ~S"

#: target:code/x86-vm.lisp
msgid ""
"Atomically compare object's slot value to test-value and if EQ store\n"
"   new-value in the slot. The original value of the slot is returned."
msgstr ""
"Atomicallyway omparecay objectway's otslay aluevay otay esttay-aluevay "
"andway ifway EQWAY toresay\n"
"   ewnay-aluevay inway ethay otslay. Ethay originalway aluevay ofway ethay "
"otslay isway eturnedray."

#: target:code/x86-vm.lisp
msgid ""
"Atomically compare symbol's value to test-value and if EQ store\n"
"  new-value in symbol's value slot and return the original value."
msgstr ""
"Atomicallyway omparecay ymbolsay's aluevay otay esttay-aluevay andway ifway "
"EQWAY toresay\n"
"  ewnay-aluevay inway ymbolsay's aluevay otslay andway eturnray ethay "
"originalway aluevay."

#: target:code/x86-vm.lisp
msgid ""
"Atomically compare the car of CONS to test-value and if EQ store\n"
"  new-value its car and return the original value."
msgstr ""
"Atomicallyway omparecay ethay arcay ofway ONSCAY otay esttay-aluevay andway "
"ifway EQWAY toresay\n"
"  ewnay-aluevay itsway arcay andway eturnray ethay originalway aluevay."

#: target:code/x86-vm.lisp
msgid ""
"Atomically compare the cdr of CONS to test-value and if EQ store\n"
"  new-value its cdr and return the original value."
msgstr ""
"Atomicallyway omparecay ethay drcay ofway ONSCAY otay esttay-aluevay andway "
"ifway EQWAY toresay\n"
"  ewnay-aluevay itsway drcay andway eturnray ethay originalway aluevay."

#: target:code/x86-vm.lisp
msgid ""
"Atomically compare an element of vector to test-value and if EQ store\n"
"  new-value the element and return the original value."
msgstr ""
"Atomicallyway omparecay anway elementway ofway ectorvay otay esttay-aluevay "
"andway ifway EQWAY toresay\n"
"  ewnay-aluevay ethay elementway andway eturnray ethay originalway aluevay."

#: target:code/x86-vm.lisp
msgid "Thread safe push of val onto the list in the symbol global value."
msgstr ""
"Readthay afesay ushpay ofway alvay ontoway ethay istlay inway ethay ymbolsay "
"obalglay aluevay."

#: target:code/x86-vm.lisp
msgid "Thread safe pop from the list in the symbol global value."
msgstr ""
"Readthay afesay oppay omfray ethay istlay inway ethay ymbolsay obalglay "
"aluevay."

#: target:code/x86-vm.lisp
msgid "Thread safe push of val onto the list in the car of cons."
msgstr ""
"Readthay afesay ushpay ofway alvay ontoway ethay istlay inway ethay arcay "
"ofway onscay."

#: target:code/x86-vm.lisp
msgid "Thread safe push of val onto the list in the cdr of cons."
msgstr ""
"Readthay afesay ushpay ofway alvay ontoway ethay istlay inway ethay drcay "
"ofway onscay."

#: target:code/x86-vm.lisp
msgid "Thread safe push of val onto the list in the vector element."
msgstr ""
"Readthay afesay ushpay ofway alvay ontoway ethay istlay inway ethay ectorvay "
"elementway."

#: target:code/symbol.lisp
msgid ""
"VARIABLE must evaluate to a symbol.  This symbol's current special\n"
"  value is returned."
msgstr ""
"ARIABLEVAY ustmay evaluateway otay away ymbolsay.  Isthay ymbolsay's "
"urrentcay ecialspay\n"
"  aluevay isway eturnedray."

#: target:code/symbol.lisp
msgid ""
"VARIABLE must evaluate to a symbol.  Return NIL if this symbol is\n"
"  unbound, T if it has a value."
msgstr ""
"ARIABLEVAY ustmay evaluateway otay away ymbolsay.  Eturnray ILNAY ifway "
"isthay ymbolsay isway\n"
"  unboundway, T ifway itway ashay away aluevay."

#: target:code/symbol.lisp
msgid ""
"VARIABLE must evaluate to a symbol.  This symbol's special value cell is\n"
"  set to the specified new value."
msgstr ""
"ARIABLEVAY ustmay evaluateway otay away ymbolsay.  Isthay ymbolsay's "
"ecialspay aluevay ellcay isway\n"
"  etsay otay ethay ecifiedspay ewnay aluevay."

#: target:code/symbol.lisp
msgid "Nihil ex nihil, can't set NIL."
msgstr "Ihilnay exway ihilnay, ancay't etsay ILNAY."

#: target:code/symbol.lisp
msgid "Veritas aeterna, can't set T."
msgstr "Eritasvay aeternaway, ancay't etsay T."

#: target:code/symbol.lisp
msgid "Can't set keywords."
msgstr "Ancay't etsay eywordskay."

#: target:code/symbol.lisp
msgid ""
"VARIABLE must evaluate to a symbol.  This symbol is made unbound,\n"
"  removing any value it may currently have."
msgstr ""
"ARIABLEVAY ustmay evaluateway otay away ymbolsay.  Isthay ymbolsay isway "
"ademay unboundway,\n"
"  emovingray anyway aluevay itway aymay urrentlycay avehay."

#: target:code/symbol.lisp
msgid ""
"VARIABLE must evaluate to a symbol.  This symbol's current definition\n"
"   is returned.  Settable with SETF."
msgstr ""
"ARIABLEVAY ustmay evaluateway otay away ymbolsay.  Isthay ymbolsay's "
"urrentcay efinitionday\n"
"   isway eturnedray.  Ettablesay ithway ETFSAY."

#: target:code/symbol.lisp
msgid "VARIABLE must evaluate to a symbol.  Return its property list."
msgstr ""
"ARIABLEVAY ustmay evaluateway otay away ymbolsay.  Eturnray itsway "
"opertypray istlay."

#: target:code/symbol.lisp
msgid "VARIABLE must evaluate to a symbol.  Return its print name."
msgstr ""
"ARIABLEVAY ustmay evaluateway otay away ymbolsay.  Eturnray itsway intpray "
"amenay."

#: target:code/symbol.lisp
msgid "VARIABLE must evaluate to a symbol.  Return its package."
msgstr ""
"ARIABLEVAY ustmay evaluateway otay away ymbolsay.  Eturnray itsway ackagepay."

#: target:code/symbol.lisp
msgid "Make and return a new symbol with the STRING as its print name."
msgstr ""
"Akemay andway eturnray away ewnay ymbolsay ithway ethay INGSTRAY asway "
"itsway intpray amenay."

#: target:code/symbol.lisp
msgid "Return the hash value for symbol."
msgstr "Eturnray ethay ashhay aluevay orfay ymbolsay."

#: target:code/symbol.lisp
msgid ""
"Look on the property list of SYMBOL for the specified INDICATOR.  If this\n"
"  is found, return the associated value, else return DEFAULT."
msgstr ""
"Ooklay onway ethay opertypray istlay ofway YMBOLSAY orfay ethay ecifiedspay "
"INDICATORWAY.  Ifway isthay\n"
"  isway oundfay, eturnray ethay associatedway aluevay, elseway eturnray "
"EFAULTDAY."

#: target:code/symbol.lisp
msgid "~S has an odd number of items in its property list."
msgstr ""
"~S ashay anway oddway umbernay ofway itemsway inway itsway opertypray istlay."

#: target:code/symbol.lisp
msgid ""
"The VALUE is added as a property of SYMBOL under the specified INDICATOR.\n"
"  Returns VALUE."
msgstr ""
"Ethay ALUEVAY isway addedway asway away opertypray ofway YMBOLSAY underway "
"ethay ecifiedspay INDICATORWAY.\n"
"  Eturnsray ALUEVAY."

#: target:code/symbol.lisp
msgid ""
"Look on property list of SYMBOL for property with specified\n"
"  INDICATOR.  If found, splice this indicator and its value out of\n"
"  the plist, and return the tail of the original list starting with\n"
"  INDICATOR.  If not found, return () with no side effects.\n"
"\n"
"  NOTE: The ANSI specification requires REMPROP to return true (not false)\n"
"  or false (the symbol NIL). Portable code should not rely on any other "
"value."
msgstr ""
"Ooklay onway opertypray istlay ofway YMBOLSAY orfay opertypray ithway "
"ecifiedspay\n"
"  INDICATORWAY.  Ifway oundfay, licespay isthay indicatorway andway itsway "
"aluevay outway ofway\n"
"  ethay istplay, andway eturnray ethay ailtay ofway ethay originalway istlay "
"tartingsay ithway\n"
"  INDICATORWAY.  Ifway otnay oundfay, eturnray () ithway onay idesay "
"effectsway.\n"
"\n"
"  OTENAY: Ethay ANSIWAY ecificationspay equiresray EMPROPRAY otay eturnray "
"uetray (otnay alsefay)\n"
"  orway alsefay (ethay ymbolsay ILNAY). Ortablepay odecay ouldshay otnay "
"elyray onway anyway otherway aluevay."

#: target:code/symbol.lisp
msgid ""
"Searches the property list stored in Place for an indicator EQ to "
"Indicator.\n"
"  If one is found, the corresponding value is returned, else the Default is\n"
"  returned."
msgstr ""
"Earchessay ethay opertypray istlay toredsay inway Aceplay orfay anway "
"indicatorway EQWAY otay Indicatorway.\n"
"  Ifway oneway isway oundfay, ethay orrespondingcay aluevay isway "
"eturnedray, elseway ethay Efaultday isway\n"
"  eturnedray."

#: target:code/symbol.lisp
msgid "Malformed property list: ~S"
msgstr "Alformedmay opertypray istlay: ~S"

#: target:code/symbol.lisp
msgid ""
"Like GETF, except that Indicator-List is a list of indicators which will\n"
"  be looked for in the property list stored in Place.  Three values are\n"
"  returned, see manual for details."
msgstr ""
"Ikelay ETFGAY, exceptway atthay Indicatorway-Istlay isway away istlay ofway "
"indicatorsway ichwhay illway\n"
"  ebay ookedlay orfay inway ethay opertypray istlay toredsay inway Aceplay.  "
"Reethay aluesvay areway\n"
"  eturnedray, eesay anualmay orfay etailsday."

#: target:code/symbol.lisp
msgid ""
"Make and return a new uninterned symbol with the same print name\n"
"  as SYMBOL.  If COPY-PROPS is false, the new symbol is neither bound\n"
"  nor fbound and has no properties, else it has a copy of SYMBOL's\n"
"  function, value and property list."
msgstr ""
"Akemay andway eturnray away ewnay uninternedway ymbolsay ithway ethay amesay "
"intpray amenay\n"
"  asway YMBOLSAY.  Ifway OPYCAY-OPSPRAY isway alsefay, ethay ewnay ymbolsay "
"isway eithernay oundbay\n"
"  ornay boundfay andway ashay onay opertiespray, elseway itway ashay away "
"opycay ofway YMBOLSAY's\n"
"  unctionfay, aluevay andway opertypray istlay."

#: target:code/symbol.lisp
msgid "Returns true if Object is a symbol in the keyword package."
msgstr ""
"Eturnsray uetray ifway Objectway isway away ymbolsay inway ethay eywordkay "
"ackagepay."

#: target:code/symbol.lisp
msgid "Counter for generating unique GENSYM symbols."
msgstr "Ountercay orfay eneratinggay uniqueway ENSYMGAY ymbolssay."

#: target:code/symbol.lisp
msgid ""
"Creates a new uninterned symbol whose name is a prefix string (defaults\n"
"   to \"G\"), followed by a decimal number.  Thing, when supplied, will\n"
"   alter the prefix if it is a string, or be used for the decimal number\n"
"   if it is a number, of this symbol. The default value of the number is\n"
"   the current value of *gensym-counter* which is incremented each time\n"
"   it is used."
msgstr ""
"Eatescray away ewnay uninternedway ymbolsay osewhay amenay isway away "
"efixpray ingstray (efaultsday\n"
"   otay \"G\"), ollowedfay ybay away ecimalday umbernay.  Ingthay, enwhay "
"uppliedsay, illway\n"
"   alterway ethay efixpray ifway itway isway away ingstray, orway ebay "
"usedway orfay ethay ecimalday umbernay\n"
"   ifway itway isway away umbernay, ofway isthay ymbolsay. Ethay efaultday "
"aluevay ofway ethay umbernay isway\n"
"   ethay urrentcay aluevay ofway *ensymgay-ountercay* ichwhay isway "
"incrementedway eachway imetay\n"
"   itway isway usedway."

#: target:code/symbol.lisp
msgid "Creates a new symbol interned in package Package with the given Prefix."
msgstr ""
"Eatescray away ewnay ymbolsay internedway inway ackagepay Ackagepay ithway "
"ethay ivengay Efixpray."

#: target:code/bignum.lisp
msgid ""
"When the bignum pieces are smaller than this many words, we use the\n"
"classical multiplication algorithm instead of recursing all the way\n"
"down to individual words."
msgstr ""
"Enwhay ethay ignumbay iecespay areway mallersay anthay isthay anymay "
"ordsway, eway useway ethay\n"
"assicalclay ultiplicationmay algorithmway insteadway ofway ecursingray "
"allway ethay ayway\n"
"ownday otay individualway ordsway."

#: target:code/bignum.lisp
msgid "Use Karatsuba if the bignums have at least this many bits"
msgstr ""
"Useway Aratsubakay ifway ethay ignumsbay avehay atway eastlay isthay anymay "
"itsbay"

#: target:code/bignum.lisp
msgid "WITH-BIGNUM-BUFFERS ({(var size [init])}*) Form*"
msgstr "ITHWAY-IGNUMBAY-UFFERSBAY ({(arvay izesay [initway])}*) Ormfay*"

#: target:code/bignum.lisp
msgid "Unexpected zero bignums?"
msgstr "Unexpectedway erozay ignumsbay?"

#: target:code/bignum.lisp
msgid "Can't represent result of left shift."
msgstr "Ancay't epresentray esultray ofway eftlay iftshay."

#: target:code/bignum.lisp
msgid "Too large to be represented as a ~S:~%  ~S"
msgstr "Ootay argelay otay ebay epresentedray asway away ~S:~%  ~S"

#: target:code/numbers.lisp
msgid "More types than vars."
msgstr "Oremay ypestay anthay arsvay."

#: target:code/numbers.lisp
msgid "Duplicate case: ~S."
msgstr "Uplicateday asecay: ~S."

#: target:code/numbers.lisp
msgid "More vars than types."
msgstr "Oremay arsvay anthay ypestay."

#: target:code/numbers.lisp
msgid ""
"NUMBER-DISPATCH ({(Var Type)}*) {((Type*) Form*) | (Symbol Arg*)}*\n"
"  A vaguely case-like macro that does number cross-product dispatches.  The\n"
"  Vars are the variables we are dispatching off of.  The Type paired with "
"each\n"
"  Var is used in the error message when no case matches.  Each case "
"specifies a\n"
"  Type for each var, and is executed when that signature holds.  A type may "
"be\n"
"  a list (FOREACH Each-Type*), causing that case to be repeatedly "
"instantiated\n"
"  for every Each-Type.  In the body of each case, any list of the form\n"
"  (DISPATCH-TYPE Var-Name) is substituted with the type of that var in that\n"
"  instance of the case.\n"
"\n"
"  As an alternate to a case spec, there may be a form whose CAR is a "
"symbol.\n"
"  In this case, we apply the CAR of the form to the CDR and treat the result "
"of\n"
"  the call as a list of cases.  This process is not applied recursively."
msgstr ""
"UMBERNAY-ISPATCHDAY ({(Arvay Ypetay)}*) {((Ypetay*) Ormfay*) | (Ymbolsay "
"Argway*)}*\n"
"  Away aguelyvay asecay-ikelay acromay atthay oesday umbernay osscray-"
"oductpray ispatchesday.  Ethay\n"
"  Arsvay areway ethay ariablesvay eway areway ispatchingday offway ofway.  "
"Ethay Ypetay airedpay ithway eachway\n"
"  Arvay isway usedway inway ethay errorway essagemay enwhay onay asecay "
"atchesmay.  Eachway asecay ecifiespays away\n"
"  Ypetay orfay eachway arvay, andway isway executedway enwhay atthay "
"ignaturesay oldshay.  Away ypetay aymay ebay\n"
"  away istlay (OREACHFAY Eachway-Ypetay*), ausingcay atthay asecay otay ebay "
"epeatedlyray instantiatwayedway\n"
"  orfay everyway Eachway-Ypetay.  Inway ethay odybay ofway eachway asecay, "
"anyway istlay ofway ethay ormfay\n"
"  (ISPATCHDAY-YPETAY Arvay-Amenay) isway ubstitutedsay ithway ethay ypetay "
"ofway atthay arvay inway atthay\n"
"  instanceway ofway ethay asecay.\n"
"\n"
"  Asway anway alternateway otay away asecay ecspay, erethay aymay ebay away "
"ormfay osewhay ARCAY isway away ymbolsay.\n"
"  Inway isthay asecay, eway applyway ethay ARCAY ofway ethay ormfay otay "
"ethay DRCAY andway eattray ethay esultray ofway\n"
"  ethay allcay asway away istlay ofway asescay.  Isthay ocesspray isway "
"otnay appliedway ecursivelyray."

#: target:code/numbers.lisp
msgid ""
"Returns the element type of the most specialized COMPLEX number type that\n"
"   can hold parts of type Spec."
msgstr ""
"Eturnsray ethay elementway ypetay ofway ethay ostmay ecializedspay OMPLEXCAY "
"umbernay ypetay atthay\n"
"   ancay oldhay artspay ofway ypetay Ecspay."

#: target:code/numbers.lisp
msgid "Assume this is a subtype of REAL anyway."
msgstr "Assumeway isthay isway away ubtypesay ofway EALRAY anywayway."

#: target:code/numbers.lisp
msgid "Cannot determine if ~S is a subtype of REAL."
msgstr "Annotcay etermineday ifway ~S isway away ubtypesay ofway EALRAY."

#: target:code/numbers.lisp
msgid "Complex numbers cannot have components of type ~S."
msgstr "Omplexcay umbersnay annotcay avehay omponentscay ofway ypetay ~S."

#: target:code/numbers.lisp
msgid "Builds a complex number from the specified components."
msgstr ""
"Uildsbay away omplexcay umbernay omfray ethay ecifiedspay omponentscay."

#: target:code/numbers.lisp
msgid "Extracts the real part of a number."
msgstr "Extractsway ethay ealray artpay ofway away umbernay."

#: target:code/numbers.lisp
msgid "Extracts the imaginary part of a number."
msgstr "Extractsway ethay imaginaryway artpay ofway away umbernay."

#: target:code/numbers.lisp
msgid ""
"Returns the complex conjugate of NUMBER.  For non-complex numbers, this is\n"
"  an identity."
msgstr ""
"Eturnsray ethay omplexcay onjugatecay ofway UMBERNAY.  Orfay onnay-omplexcay "
"umbersnay, isthay isway\n"
"  anway identityway."

#: target:code/numbers.lisp
msgid "If NUMBER is zero, return NUMBER, else return (/ NUMBER (ABS NUMBER))."
msgstr ""
"Ifway UMBERNAY isway erozay, eturnray UMBERNAY, elseway eturnray (/ UMBERNAY "
"(ABSWAY UMBERNAY))."

#: target:code/numbers.lisp
msgid "Return the numerator of NUMBER, which must be rational."
msgstr ""
"Eturnray ethay umeratornay ofway UMBERNAY, ichwhay ustmay ebay ationalray."

#: target:code/numbers.lisp
msgid "Return the denominator of NUMBER, which must be rational."
msgstr ""
"Eturnray ethay enominatorday ofway UMBERNAY, ichwhay ustmay ebay ationalray."

#: target:code/numbers.lisp
msgid "Returns the sum of its arguments.  With no args, returns 0."
msgstr ""
"Eturnsray ethay umsay ofway itsway argumentsway.  Ithway onay argsway, "
"eturnsray 0."

#: target:code/numbers.lisp
msgid "Returns the product of its arguments.  With no args, returns 1."
msgstr ""
"Eturnsray ethay oductpray ofway itsway argumentsway.  Ithway onay argsway, "
"eturnsray 1."

#: target:code/numbers.lisp
msgid ""
"Subtracts the second and all subsequent arguments from the first.\n"
"  With one arg, negates it."
msgstr ""
"Ubtractssay ethay econdsay andway allway ubsequentsay argumentsway omfray "
"ethay irstfay.\n"
"  Ithway oneway argway, egatesnay itway."

#: target:code/numbers.lisp
msgid ""
"Divides the first arg by each of the following arguments, in turn.\n"
"  With one arg, returns reciprocal."
msgstr ""
"Ividesday ethay irstfay argway ybay eachway ofway ethay ollowingfay "
"argumentsway, inway urntay.\n"
"  Ithway oneway argway, eturnsray eciprocalray."

#: target:code/numbers.lisp
msgid "Returns NUMBER + 1."
msgstr "Eturnsray UMBERNAY + 1."

#: target:code/numbers.lisp
msgid "Returns NUMBER - 1."
msgstr "Eturnsray UMBERNAY - 1."

#: target:code/numbers.lisp
msgid ""
"Returns number (or number/divisor) as an integer, rounded toward 0.\n"
"  The second returned value is the remainder."
msgstr ""
"Eturnsray umbernay (orway umbernay/ivisorday) asway anway integerway, "
"oundedray owardtay 0.\n"
"  Ethay econdsay eturnedray aluevay isway ethay emainderray."

#: target:code/numbers.lisp
msgid ""
"Returns the greatest integer not greater than number, or number/divisor.\n"
"  The second returned value is (mod number divisor)."
msgstr ""
"Eturnsray ethay eatestgray integerway otnay eatergray anthay umbernay, orway "
"umbernay/ivisorday.\n"
"  Ethay econdsay eturnedray aluevay isway (odmay umbernay ivisorday)."

#: target:code/numbers.lisp
msgid ""
"Returns the smallest integer not less than number, or number/divisor.\n"
"  The second returned value is the remainder."
msgstr ""
"Eturnsray ethay mallestsay integerway otnay esslay anthay umbernay, orway "
"umbernay/ivisorday.\n"
"  Ethay econdsay eturnedray aluevay isway ethay emainderray."

#: target:code/numbers.lisp
msgid ""
"Rounds number (or number/divisor) to nearest integer.\n"
"  The second returned value is the remainder."
msgstr ""
"Oundsray umbernay (orway umbernay/ivisorday) otay earestnay integerway.\n"
"  Ethay econdsay eturnedray aluevay isway ethay emainderray."

#: target:code/numbers.lisp
msgid "Returns second result of TRUNCATE."
msgstr "Eturnsray econdsay esultray ofway UNCATETRAY."

#: target:code/numbers.lisp
msgid "Returns second result of FLOOR."
msgstr "Eturnsray econdsay esultray ofway OORFLAY."

#: target:code/numbers.lisp
msgid "Same as TRUNCATE, but returns first value as a float."
msgstr ""
"Amesay asway UNCATETRAY, utbay eturnsray irstfay aluevay asway away oatflay."

#: target:code/numbers.lisp
msgid "Same as FLOOR, but returns first value as a float."
msgstr ""
"Amesay asway OORFLAY, utbay eturnsray irstfay aluevay asway away oatflay."

#: target:code/numbers.lisp
msgid "Same as CEILING, but returns first value as a float."
msgstr ""
"Amesay asway EILINGCAY, utbay eturnsray irstfay aluevay asway away oatflay."

#: target:code/numbers.lisp
msgid "Same as ROUND, but returns first value as a float."
msgstr ""
"Amesay asway OUNDRAY, utbay eturnsray irstfay aluevay asway away oatflay."

#: target:code/numbers.lisp
msgid "Returns T if all of its arguments are numerically equal, NIL otherwise."
msgstr ""
"Eturnsray T ifway allway ofway itsway argumentsway areway umericallynay "
"equalway, ILNAY otherwiseway."

#: target:code/numbers.lisp
msgid ""
"Returns T if no two of its arguments are numerically equal, NIL otherwise."
msgstr ""
"Eturnsray T ifway onay wotay ofway itsway argumentsway areway umericallynay "
"equalway, ILNAY otherwiseway."

#: target:code/numbers.lisp
msgid ""
"Returns T if its arguments are in strictly increasing order, NIL otherwise."
msgstr ""
"Eturnsray T ifway itsway argumentsway areway inway ictlystray increasingway "
"orderway, ILNAY otherwiseway."

#: target:code/numbers.lisp
msgid ""
"Returns T if its arguments are in strictly decreasing order, NIL otherwise."
msgstr ""
"Eturnsray T ifway itsway argumentsway areway inway ictlystray ecreasingday "
"orderway, ILNAY otherwiseway."

#: target:code/numbers.lisp
msgid ""
"Returns T if arguments are in strictly non-decreasing order, NIL otherwise."
msgstr ""
"Eturnsray T ifway argumentsway areway inway ictlystray onnay-ecreasingday "
"orderway, ILNAY otherwiseway."

#: target:code/numbers.lisp
msgid ""
"Returns T if arguments are in strictly non-increasing order, NIL otherwise."
msgstr ""
"Eturnsray T ifway argumentsway areway inway ictlystray onnay-increasingway "
"orderway, ILNAY otherwiseway."

#: target:code/numbers.lisp
msgid "Returns the greatest of its arguments."
msgstr "Eturnsray ethay eatestgray ofway itsway argumentsway."

#: target:code/numbers.lisp
msgid "Returns the least of its arguments."
msgstr "Eturnsray ethay eastlay ofway itsway argumentsway."

#: target:code/numbers.lisp
msgid "Return T if OBJ1 and OBJ2 represent the same object, otherwise NIL."
msgstr ""
"Eturnray T ifway OBJWAY1 andway OBJWAY2 epresentray ethay amesay objectway, "
"otherwiseway ILNAY."

#: target:code/numbers.lisp
msgid "Returns the bit-wise or of its arguments.  Args must be integers."
msgstr ""
"Eturnsray ethay itbay-iseway orway ofway itsway argumentsway.  Argsway "
"ustmay ebay integersway."

#: target:code/numbers.lisp
msgid ""
"Returns the bit-wise exclusive or of its arguments.  Args must be integers."
msgstr ""
"Eturnsray ethay itbay-iseway exclusiveway orway ofway itsway argumentsway.  "
"Argsway ustmay ebay integersway."

#: target:code/numbers.lisp
msgid "Returns the bit-wise and of its arguments.  Args must be integers."
msgstr ""
"Eturnsray ethay itbay-iseway andway ofway itsway argumentsway.  Argsway "
"ustmay ebay integersway."

#: target:code/numbers.lisp
msgid ""
"Returns the bit-wise equivalence of its arguments.  Args must be integers."
msgstr ""
"Eturnsray ethay itbay-iseway equivalenceway ofway itsway argumentsway.  "
"Argsway ustmay ebay integersway."

#: target:code/numbers.lisp
msgid "Returns the complement of the logical AND of integer1 and integer2."
msgstr ""
"Eturnsray ethay omplementcay ofway ethay ogicallay ANDWAY ofway integerway1 "
"andway integerway2."

#: target:code/numbers.lisp
msgid "Returns the complement of the logical OR of integer1 and integer2."
msgstr ""
"Eturnsray ethay omplementcay ofway ethay ogicallay ORWAY ofway integerway1 "
"andway integerway2."

#: target:code/numbers.lisp
msgid "Returns the logical AND of (LOGNOT integer1) and integer2."
msgstr ""
"Eturnsray ethay ogicallay ANDWAY ofway (OGNOTLAY integerway1) andway "
"integerway2."

#: target:code/numbers.lisp
msgid "Returns the logical AND of integer1 and (LOGNOT integer2)."
msgstr ""
"Eturnsray ethay ogicallay ANDWAY ofway integerway1 andway (OGNOTLAY "
"integerway2)."

#: target:code/numbers.lisp
msgid "Returns the logical OR of (LOGNOT integer1) and integer2."
msgstr ""
"Eturnsray ethay ogicallay ORWAY ofway (OGNOTLAY integerway1) andway "
"integerway2."

#: target:code/numbers.lisp
msgid "Returns the logical OR of integer1 and (LOGNOT integer2)."
msgstr ""
"Eturnsray ethay ogicallay ORWAY ofway integerway1 andway (OGNOTLAY "
"integerway2)."

#: target:code/numbers.lisp
msgid "Returns the bit-wise logical not of integer."
msgstr "Eturnsray ethay itbay-iseway ogicallay otnay ofway integerway."

#: target:code/numbers.lisp
msgid ""
"Count the number of 1 bits if INTEGER is positive, and the number of 0 bits\n"
"  if INTEGER is negative."
msgstr ""
"Ountcay ethay umbernay ofway 1 itsbay ifway INTEGERWAY isway ositivepay, "
"andway ethay umbernay ofway 0 itsbay\n"
"  ifway INTEGERWAY isway egativenay."

#: target:code/numbers.lisp
msgid ""
"Predicate which returns T if logand of integer1 and integer2 is not zero."
msgstr ""
"Edicatepray ichwhay eturnsray T ifway ogandlay ofway integerway1 andway "
"integerway2 isway otnay erozay."

#: target:code/numbers.lisp
msgid ""
"Predicate returns T if bit index of integer is a 1.  The least\n"
"significant bit of INTEGER is bit 0."
msgstr ""
"Edicatepray eturnsray T ifway itbay indexway ofway integerway isway away 1.  "
"Ethay eastlay\n"
"ignificantsay itbay ofway INTEGERWAY isway itbay 0."

#: target:code/numbers.lisp
msgid ""
"Shifts integer left by count places preserving sign.  - count shifts right."
msgstr ""
"Iftsshay integerway eftlay ybay ountcay acesplay eservingpray ignsay.  - "
"ountcay iftsshay ightray."

#: target:code/numbers.lisp
msgid ""
"Returns the number of significant bits in the absolute value of integer."
msgstr ""
"Eturnsray ethay umbernay ofway ignificantsay itsbay inway ethay absoluteway "
"aluevay ofway integerway."

#: target:code/numbers.lisp
msgid "Returns a byte specifier which may be used by other byte functions."
msgstr ""
"Eturnsray away ytebay ecifierspay ichwhay aymay ebay usedway ybay otherway "
"ytebay unctionsfay."

#: target:code/numbers.lisp
msgid "Returns the size part of the byte specifier bytespec."
msgstr ""
"Eturnsray ethay izesay artpay ofway ethay ytebay ecifierspay ytespecbay."

#: target:code/numbers.lisp
msgid "Returns the position part of the byte specifier bytespec."
msgstr ""
"Eturnsray ethay ositionpay artpay ofway ethay ytebay ecifierspay ytespecbay."

#: target:code/numbers.lisp
msgid "Extract the specified byte from integer, and right justify result."
msgstr ""
"Extractway ethay ecifiedspay ytebay omfray integerway, andway ightray "
"ustifyjay esultray."

#: target:code/numbers.lisp
msgid "Returns T if any of the specified bits in integer are 1's."
msgstr ""
"Eturnsray T ifway anyway ofway ethay ecifiedspay itsbay inway integerway "
"areway 1's."

#: target:code/numbers.lisp
msgid ""
"Extract the specified byte from integer,  but do not right justify result."
msgstr ""
"Extractway ethay ecifiedspay ytebay omfray integerway,  utbay oday otnay "
"ightray ustifyjay esultray."

#: target:code/numbers.lisp
msgid ""
"Returns new integer with newbyte in specified position, newbyte is right "
"justified."
msgstr ""
"Eturnsray ewnay integerway ithway ewbytenay inway ecifiedspay ositionpay, "
"ewbytenay isway ightray ustifiedjay."

#: target:code/numbers.lisp
msgid ""
"Returns new integer with newbyte in specified position, newbyte is not right "
"justified."
msgstr ""
"Eturnsray ewnay integerway ithway ewbytenay inway ecifiedspay ositionpay, "
"ewbytenay isway otnay ightray ustifiedjay."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return 0."
msgstr "Oolebay unctionfay opway, akesmay OOLEBAY eturnray 0."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return -1."
msgstr "Oolebay unctionfay opway, akesmay OOLEBAY eturnray -1."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return integer1."
msgstr "Oolebay unctionfay opway, akesmay OOLEBAY eturnray integerway1."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return integer2."
msgstr "Oolebay unctionfay opway, akesmay OOLEBAY eturnray integerway2."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return complement of integer1."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray omplementcay ofway "
"integerway1."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return complement of integer2."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray omplementcay ofway "
"integerway2."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return logand of integer1 and integer2."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray ogandlay ofway "
"integerway1 andway integerway2."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return logior of integer1 and integer2."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray ogiorlay ofway "
"integerway1 andway integerway2."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return logxor of integer1 and integer2."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray ogxorlay ofway "
"integerway1 andway integerway2."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return logeqv of integer1 and integer2."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray ogeqvlay ofway "
"integerway1 andway integerway2."

#: target:code/numbers.lisp
msgid ""
"Boole function op, makes BOOLE return log nand of integer1 and integer2."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray oglay andnay ofway "
"integerway1 andway integerway2."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return lognor of integer1 and integer2."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray ognorlay ofway "
"integerway1 andway integerway2."

#: target:code/numbers.lisp
msgid ""
"Boole function op, makes BOOLE return logandc1 of integer1 and integer2."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray ogandclay1 ofway "
"integerway1 andway integerway2."

#: target:code/numbers.lisp
msgid ""
"Boole function op, makes BOOLE return logandc2 of integer1 and integer2."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray ogandclay2 ofway "
"integerway1 andway integerway2."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return logorc1 of integer1 and integer2."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray ogorclay1 ofway "
"integerway1 andway integerway2."

#: target:code/numbers.lisp
msgid "Boole function op, makes BOOLE return logorc2 of integer1 and integer2."
msgstr ""
"Oolebay unctionfay opway, akesmay OOLEBAY eturnray ogorclay2 ofway "
"integerway1 andway integerway2."

#: target:code/numbers.lisp
msgid ""
"Bit-wise boolean function on two integers.  Function chosen by OP:\n"
"\t0\tBOOLE-CLR\n"
"\t1\tBOOLE-SET\n"
"\t2\tBOOLE-1\n"
"  \t3\tBOOLE-2\n"
"\t4\tBOOLE-C1\n"
"\t5\tBOOLE-C2\n"
"\t6\tBOOLE-AND\n"
"\t7\tBOOLE-IOR\n"
" \t8\tBOOLE-XOR\n"
"\t9\tBOOLE-EQV\n"
"\t10\tBOOLE-NAND\n"
"\t11\tBOOLE-NOR\n"
"\t12\tBOOLE-ANDC1\n"
"\t13\tBOOLE-ANDC2\n"
"\t14\tBOOLE-ORC1\n"
"\t15\tBOOLE-ORC2"
msgstr ""
"Itbay-iseway ooleanbay unctionfay onway wotay integersway.  Unctionfay "
"osenchay ybay OPWAY:\n"
"\t0\tOOLEBAY-RCLAY\n"
"\t1\tOOLEBAY-ETSAY\n"
"\t2\tOOLEBAY-1\n"
"  \t3\tOOLEBAY-2\n"
"\t4\tOOLEBAY-C1\n"
"\t5\tOOLEBAY-C2\n"
"\t6\tOOLEBAY-ANDWAY\n"
"\t7\tOOLEBAY-IORWAY\n"
" \t8\tOOLEBAY-ORXAY\n"
"\t9\tOOLEBAY-EQVWAY\n"
"\t10\tOOLEBAY-ANDNAY\n"
"\t11\tOOLEBAY-ORNAY\n"
"\t12\tOOLEBAY-ANDCWAY1\n"
"\t13\tOOLEBAY-ANDCWAY2\n"
"\t14\tOOLEBAY-ORCWAY1\n"
"\t15\tOOLEBAY-ORCWAY2"

#: target:code/numbers.lisp
msgid ""
"Returns the greatest common divisor of the arguments, which must be\n"
"  integers.  Gcd with no arguments is defined to be 0."
msgstr ""
"Eturnsray ethay eatestgray ommoncay ivisorday ofway ethay argumentsway, "
"ichwhay ustmay ebay\n"
"  integersway.  Cdgay ithway onay argumentsway isway efinedday otay ebay 0."

#: target:code/numbers.lisp
msgid ""
"Returns the least common multiple of one or more integers.  LCM of no\n"
"  arguments is defined to be 1."
msgstr ""
"Eturnsray ethay eastlay ommoncay ultiplemay ofway oneway orway oremay "
"integersway.  CMLAY ofway onay\n"
"  argumentsway isway efinedday otay ebay 1."

#: target:code/numbers.lisp
msgid "Returns T iff X is a positive prime integer."
msgstr "Eturnsray T iffway X isway away ositivepay imepray integerway."

#: target:code/numbers.lisp
msgid ""
"Returns the root of the nearest integer less than n which is a perfect\n"
"   square."
msgstr ""
"Eturnsray ethay ootray ofway ethay earestnay integerway esslay anthay n "
"ichwhay isway away erfectpay\n"
"   quaresay."

#: target:code/numbers.lisp
msgid "Returns T if number = 0, NIL otherwise."
msgstr "Eturnsray T ifway umbernay = 0, ILNAY otherwiseway."

#: target:code/numbers.lisp
msgid "Returns T if number > 0, NIL otherwise."
msgstr "Eturnsray T ifway umbernay > 0, ILNAY otherwiseway."

#: target:code/numbers.lisp
msgid "Returns T if number < 0, NIL otherwise."
msgstr "Eturnsray T ifway umbernay < 0, ILNAY otherwiseway."

#: target:code/numbers.lisp
msgid "Returns T if number is odd, NIL otherwise."
msgstr "Eturnsray T ifway umbernay isway oddway, ILNAY otherwiseway."

#: target:code/numbers.lisp
msgid "Returns T if number is even, NIL otherwise."
msgstr "Eturnsray T ifway umbernay isway evenway, ILNAY otherwiseway."

#: target:code/float-trap.lisp
msgid "Unknown float trap kind: ~S."
msgstr "Unknownway oatflay aptray indkay: ~S."

#: target:code/float-trap.lisp
msgid ""
"This function sets options controlling the floating-point hardware.  If a\n"
"  keyword is not supplied, then the current value is preserved.  Possible\n"
"  keywords:\n"
"\n"
"   :TRAPS\n"
"       A list of the exception conditions that should cause traps.  "
"Possible\n"
"       exceptions are :UNDERFLOW, :OVERFLOW, :INEXACT, :INVALID,\n"
"       :DIVIDE-BY-ZERO, and on the X86 :DENORMALIZED-OPERAND. Initially\n"
"       all traps except :INEXACT are enabled.\n"
"\n"
"   :ROUNDING-MODE\n"
"       The rounding mode to use when the result is not exact.  Possible "
"values\n"
"       are :NEAREST, :POSITIVE-INFINITY, :NEGATIVE-INFINITY and :ZERO.\n"
"       Initially, the rounding mode is :NEAREST.\n"
"\n"
"   :CURRENT-EXCEPTIONS\n"
"   :ACCRUED-EXCEPTIONS\n"
"       These arguments allow setting of the exception flags.  The main use "
"is\n"
"       setting the accrued exceptions to NIL to clear them.\n"
"\n"
"   :FAST-MODE\n"
"       Set the hardware's \"fast mode\" flag, if any.  When set, IEEE\n"
"       conformance or debuggability may be impaired.  Some machines may not\n"
"       have this feature, in which case the value is always NIL.\n"
"\n"
"   GET-FLOATING-POINT-MODES may be used to find the floating point modes\n"
"   currently in effect."
msgstr ""
"Isthay unctionfay etssay optionsway ontrollingcay ethay oatingflay-ointpay "
"ardwarehay.  Ifway away\n"
"  eywordkay isway otnay uppliedsay, enthay ethay urrentcay aluevay isway "
"eservedpray.  Ossiblepay\n"
"  eywordskay:\n"
"\n"
"   :APSTRAY\n"
"       Away istlay ofway ethay exceptionway onditionscay atthay ouldshay "
"ausecay apstray.  Ossiblepay\n"
"       exceptionsway areway :UNDERFLOWWAY, :OVERFLOWWAY, :INEXACTWAY, :"
"INVALIDWAY,\n"
"       :IVIDEDAY-YBAY-EROZAY, andway onway ethay X86 :ENORMALIZEDDAY-"
"OPERANDWAY. Initiallyway\n"
"       allway apstray exceptway :INEXACTWAY areway enabledway.\n"
"\n"
"   :OUNDINGRAY-ODEMAY\n"
"       Ethay oundingray odemay otay useway enwhay ethay esultray isway otnay "
"exactway.  Ossiblepay aluesvay\n"
"       areway :EARESTNAY, :OSITIVEPAY-INFINITYWAY, :EGATIVENAY-INFINITYWAY "
"andway :EROZAY.\n"
"       Initiallyway, ethay oundingray odemay isway :EARESTNAY.\n"
"\n"
"   :URRENTCAY-EXCEPTIONSWAY\n"
"   :ACCRUEDWAY-EXCEPTIONSWAY\n"
"       Esethay argumentsway allowway ettingsay ofway ethay exceptionway "
"agsflay.  Ethay ainmay useway isway\n"
"       ettingsay ethay accruedway exceptionsway otay ILNAY otay earclay "
"emthay.\n"
"\n"
"   :ASTFAY-ODEMAY\n"
"       Etsay ethay ardwarehay's \"astfay odemay\" agflay, ifway anyway.  "
"Enwhay etsay, IEEEWAY\n"
"       onformancecay orway ebuggabilityday aymay ebay impairedway.  Omesay "
"achinesmay aymay otnay\n"
"       avehay isthay eaturefay, inway ichwhay asecay ethay aluevay isway "
"alwaysway ILNAY.\n"
"\n"
"   ETGAY-OATINGFLAY-OINTPAY-ODESMAY aymay ebay usedway otay indfay ethay "
"oatingflay ointpay odesmay\n"
"   urrentlycay inway effectway."

#: target:code/float-trap.lisp
msgid "Unknown rounding mode: ~S."
msgstr "Unknownway oundingray odemay: ~S."

#: target:code/float-trap.lisp
msgid ""
"This function returns a list representing the state of the floating point\n"
"  modes.  The list is in the same format as the keyword arguments to\n"
"  SET-FLOATING-POINT-MODES, i.e. \n"
"      (apply #'set-floating-point-modes (get-floating-point-modes))\n"
"\n"
"  sets the floating point modes to their current values (and thus is a no-"
"op)."
msgstr ""
"Isthay unctionfay eturnsray away istlay epresentingray ethay tatesay ofway "
"ethay oatingflay ointpay\n"
"  odesmay.  Ethay istlay isway inway ethay amesay ormatfay asway ethay "
"eywordkay argumentsway otay\n"
"  ETSAY-OATINGFLAY-OINTPAY-ODESMAY, i.e. \n"
"      (applyway #'etsay-oatingflay-ointpay-odesmay (etgay-oatingflay-ointpay-"
"odesmay))\n"
"\n"
"  etssay ethay oatingflay ointpay odesmay otay eirthay urrentcay aluesvay "
"(andway usthay isway away onay-opway)."

#: target:code/float-trap.lisp
msgid ""
"Current-Float-Trap Trap-Name*\n"
"  Return true if any of the named traps are currently trapped, false\n"
"  otherwise."
msgstr ""
"Urrentcay-Oatflay-Aptray Aptray-Amenay*\n"
"  Eturnray uetray ifway anyway ofway ethay amednay apstray areway "
"urrentlycay appedtray, alsefay\n"
"  otherwiseway."

#: target:code/float-trap.lisp
msgid "SIGFPE with no exceptions currently enabled?"
msgstr "IGFPESAY ithway onay exceptionsway urrentlycay enabledway?"

#: target:code/float-trap.lisp
msgid ""
"Execute BODY with the floating point exceptions listed in TRAPS\n"
"  masked (disabled).  TRAPS should be a list of possible exceptions\n"
"  which includes :UNDERFLOW, :OVERFLOW, :INEXACT, :INVALID and\n"
"  :DIVIDE-BY-ZERO and on the X86 :DENORMALIZED-OPERAND. The respective\n"
"  accrued exceptions are cleared at the start of the body to support\n"
"  their testing within, and restored on exit."
msgstr ""
"Executeway ODYBAY ithway ethay oatingflay ointpay exceptionsway istedlay "
"inway APSTRAY\n"
"  askedmay (isabledday).  APSTRAY ouldshay ebay away istlay ofway ossiblepay "
"exceptionsway\n"
"  ichwhay includesway :UNDERFLOWWAY, :OVERFLOWWAY, :INEXACTWAY, :INVALIDWAY "
"andway\n"
"  :IVIDEDAY-YBAY-EROZAY andway onway ethay X86 :ENORMALIZEDDAY-OPERANDWAY. "
"Ethay espectiveray\n"
"  accruedway exceptionsway areway earedclay atway ethay tartsay ofway ethay "
"odybay otay upportsay\n"
"  eirthay estingtay ithinway, andway estoredray onway exitway."

#: target:code/float.lisp
msgid "Return true if the float X is denormalized."
msgstr "Eturnray uetray ifway ethay oatflay X isway enormalizedday."

#: target:code/float.lisp
msgid "Return true if the float X is an infinity (+ or -)."
msgstr ""
"Eturnray uetray ifway ethay oatflay X isway anway infinityway (+ orway -)."

#: target:code/float.lisp
msgid "Return true if the float X is a NaN (Not a Number)."
msgstr ""
"Eturnray uetray ifway ethay oatflay X isway away Annay (Otnay away Umbernay)."

#: target:code/float.lisp
msgid "Return true if the float X is a trapping NaN (Not a Number)."
msgstr ""
"Eturnray uetray ifway ethay oatflay X isway away appingtray Annay (Otnay "
"away Umbernay)."

#: target:code/float.lisp
msgid ""
"Returns a non-negative number of significant digits in it's float argument.\n"
"  Will be less than FLOAT-DIGITS if denormalized or zero."
msgstr ""
"Eturnsray away onnay-egativenay umbernay ofway ignificantsay igitsday inway "
"itway's oatflay argumentway.\n"
"  Illway ebay esslay anthay OATFLAY-IGITSDAY ifway enormalizedday orway "
"erozay."

#: target:code/float.lisp
msgid ""
"Returns a floating-point number that has the same sign as\n"
"   float1 and, if float2 is given, has the same absolute value\n"
"   as float2."
msgstr ""
"Eturnsray away oatingflay-ointpay umbernay atthay ashay ethay amesay ignsay "
"asway\n"
"   oatflay1 andway, ifway oatflay2 isway ivengay, ashay ethay amesay "
"absoluteway aluevay\n"
"   asway oatflay2."

#: target:code/float.lisp
msgid ""
"Returns a non-negative number of radix-b digits used in the\n"
"   representation of it's argument.  See Common Lisp: The Language\n"
"   by Guy Steele for more details."
msgstr ""
"Eturnsray away onnay-egativenay umbernay ofway adixray-b igitsday usedway "
"inway ethay\n"
"   epresentationray ofway itway's argumentway.  Eesay Ommoncay Isplay: Ethay "
"Anguagelay\n"
"   ybay Uygay Teelesay orfay oremay etailsday."

#: target:code/float.lisp
msgid ""
"Returns (as an integer) the radix b of its floating-point\n"
"   argument."
msgstr ""
"Eturnsray (asway anway integerway) ethay adixray b ofway itsway oatingflay-"
"ointpay\n"
"   argumentway."

#: target:code/irrat.lisp target:code/float.lisp
msgid "Can't decode NAN or infinity: ~S."
msgstr "Ancay't ecodeday ANNAY orway infinityway: ~S."

#: target:code/float.lisp
msgid ""
"Returns three values:\n"
"   1) an integer representation of the significand.\n"
"   2) the exponent for the power of 2 that the significand must be "
"multiplied\n"
"      by to get the actual value.  This differs from the DECODE-FLOAT "
"exponent\n"
"      by FLOAT-DIGITS, since the significand has been scaled to have all "
"its\n"
"      digits before the radix point.\n"
"   3) -1 or 1 (i.e. the sign of the argument.)"
msgstr ""
"Eturnsray reethay aluesvay:\n"
"   1) anway integerway epresentationray ofway ethay ignificandsay.\n"
"   2) ethay exponentway orfay ethay owerpay ofway 2 atthay ethay "
"ignificandsay ustmay ebay ultipliemayd\n"
"      ybay otay etgay ethay actualway aluevay.  Isthay iffersday omfray "
"ethay ECODEDAY-OATFLAY exponentway\n"
"      ybay OATFLAY-IGITSDAY, incesay ethay ignificandsay ashay eenbay "
"aledscay otay avehay allway itsway\n"
"      igitsday eforebay ethay adixray ointpay.\n"
"   3) -1 orway 1 (i.e. ethay ignsay ofway ethay argumentway.)"

#: target:code/float.lisp
msgid ""
"Returns three values:\n"
"   1) a floating-point number representing the significand.  This is always\n"
"      between 0.5 (inclusive) and 1.0 (exclusive).\n"
"   2) an integer representing the exponent.\n"
"   3) -1.0 or 1.0 (i.e. the sign of the argument.)"
msgstr ""
"Eturnsray reethay aluesvay:\n"
"   1) away oatingflay-ointpay umbernay epresentingray ethay ignificandsay.  "
"Isthay isway alwaysway\n"
"      etweenbay 0.5 (inclusiveway) andway 1.0 (exclusiveway).\n"
"   2) anway integerway epresentingray ethay exponentway.\n"
"   3) -1.0 orway 1.0 (i.e. ethay ignsay ofway ethay argumentway.)"

#: target:code/float.lisp
msgid ""
"Returns the value (* f (expt (float 2 f) ex)), but with no unnecessary loss\n"
"  of precision or overflow."
msgstr ""
"Eturnsray ethay aluevay (* f (exptway (oatflay 2 f) exway)), utbay ithway "
"onay unnecessaryway osslay\n"
"  ofway ecisionpray orway overflowway."

#: target:code/float.lisp
msgid ""
"Converts any REAL to a float.  If OTHER is not provided, it returns a\n"
"  SINGLE-FLOAT if NUMBER is not already a FLOAT.  If OTHER is provided, the\n"
"  result is the same float format as OTHER."
msgstr ""
"Onvertscay anyway EALRAY otay away oatflay.  Ifway OTHERWAY isway otnay "
"ovidedpray, itway eturnsray away\n"
"  INGLESAY-OATFLAY ifway UMBERNAY isway otnay alreadyway away OATFLAY.  "
"Ifway OTHERWAY isway ovidedpray, ethay\n"
"  esultray isway ethay amesay oatflay ormatfay asway OTHERWAY."

#: target:code/float.lisp
msgid ""
"RATIONAL produces a rational number for any real numeric argument.  This is\n"
"  more efficient than RATIONALIZE, but it assumes that floating-point is\n"
"  completely accurate, giving a result that isn't as pretty."
msgstr ""
"ATIONALRAY oducespray away ationalray umbernay orfay anyway ealray umericnay "
"argumentway.  Isthay isway\n"
"  oremay efficientway anthay ATIONALIZERAY, utbay itway assumesway atthay "
"oatingflay-ointpay isway\n"
"  ompletelycay accurateway, ivinggay away esultray atthay isnway't asway "
"ettypray."

#: target:code/float.lisp
msgid ""
"Converts any REAL to a RATIONAL.  Floats are converted to a simple rational\n"
"  representation exploiting the assumption that floats are only accurate to\n"
"  their precision.  RATIONALIZE (and also RATIONAL) preserve the invariant:\n"
"      (= x (float (rationalize x) x))"
msgstr ""
"Onvertscay anyway EALRAY otay away ATIONALRAY.  Oatsflay areway onvertedcay "
"otay away implesay ationalray\n"
"  epresentationray exploitingway ethay assumptionway atthay oatsflay areway "
"onlyway accurateway otay\n"
"  eirthay ecisionpray.  ATIONALIZERAY (andway alsoway ATIONALRAY) eservepray "
"ethay invariantway:\n"
"      (= x (oatflay (ationalizeray x) x))"

#: target:code/irrat.lisp
msgid "Return e raised to the power NUMBER."
msgstr "Eturnray e aisedray otay ethay owerpay UMBERNAY."

#: target:code/irrat.lisp
msgid "The absolute value of ~S exceeds limit ~S."
msgstr "Ethay absoluteway aluevay ofway ~S exceedsway imitlay ~S."

#: target:code/irrat.lisp
msgid "Continue with calculation"
msgstr "Ontinuecay ithway alculationcay"

#: target:code/irrat.lisp
msgid "Continue with calculation, update limit"
msgstr "Ontinuecay ithway alculationcay, updateway imitlay"

#: target:code/irrat.lisp
msgid "Returns BASE raised to the POWER."
msgstr "Eturnsray ASEBAY aisedray otay ethay OWERPAY."

#: target:code/irrat.lisp
msgid "Return the logarithm of NUMBER in the base BASE, which defaults to e."
msgstr ""
"Eturnray ethay ogarithmlay ofway UMBERNAY inway ethay asebay ASEBAY, ichwhay "
"efaultsday otay e."

#: target:code/irrat.lisp
msgid "Return the square root of NUMBER."
msgstr "Eturnray ethay quaresay ootray ofway UMBERNAY."

#: target:code/irrat.lisp
msgid "Returns the absolute value of the number."
msgstr "Eturnsray ethay absoluteway aluevay ofway ethay umbernay."

#: target:code/irrat.lisp
msgid ""
"Returns the angle part of the polar representation of a complex number.\n"
"  For complex numbers, this is (atan (imagpart number) (realpart number)).\n"
"  For non-complex positive numbers, this is 0.  For non-complex negative\n"
"  numbers this is PI."
msgstr ""
"Eturnsray ethay angleway artpay ofway ethay olarpay epresentationray ofway "
"away omplexcay umbernay.\n"
"  Orfay omplexcay umbersnay, isthay isway (atanway (imagpartway umbernay) "
"(ealpartray umbernay)).\n"
"  Orfay onnay-omplexcay ositivepay umbersnay, isthay isway 0.  Orfay onnay-"
"omplexcay egativenay\n"
"  umbersnay isthay isway IPAY."

#: target:code/irrat.lisp
msgid "Return the sine of NUMBER."
msgstr "Eturnray ethay inesay ofway UMBERNAY."

#: target:code/irrat.lisp
msgid "Return the cosine of NUMBER."
msgstr "Eturnray ethay osinecay ofway UMBERNAY."

#: target:code/irrat.lisp
msgid "Return the tangent of NUMBER."
msgstr "Eturnray ethay angenttay ofway UMBERNAY."

#: target:code/irrat.lisp
msgid "Return cos(Theta) + i sin(Theta), AKA exp(i Theta)."
msgstr "Eturnray oscay(Etathay) + i insay(Etathay), AKAWAY expway(i Etathay)."

#: target:code/irrat.lisp
msgid "Argument to CIS is complex: ~S"
msgstr "Argumentway otay ISCAY isway omplexcay: ~S"

#: target:code/irrat.lisp
msgid "Return the arc sine of NUMBER."
msgstr "Eturnray ethay arcway inesay ofway UMBERNAY."

#: target:code/irrat.lisp
msgid "Return the arc cosine of NUMBER."
msgstr "Eturnray ethay arcway osinecay ofway UMBERNAY."

#: target:code/irrat.lisp
msgid "Return the arc tangent of Y if X is omitted or Y/X if X is supplied."
msgstr ""
"Eturnray ethay arcway angenttay ofway Y ifway X isway omittedway orway Y/X "
"ifway X isway uppliedsay."

#: target:code/irrat.lisp
msgid "Return the hyperbolic sine of NUMBER."
msgstr "Eturnray ethay yperbolichay inesay ofway UMBERNAY."

#: target:code/irrat.lisp
msgid "Return the hyperbolic cosine of NUMBER."
msgstr "Eturnray ethay yperbolichay osinecay ofway UMBERNAY."

#: target:code/irrat.lisp
msgid "Return the hyperbolic tangent of NUMBER."
msgstr "Eturnray ethay yperbolichay angenttay ofway UMBERNAY."

#: target:code/irrat.lisp
msgid "Return the hyperbolic arc sine of NUMBER."
msgstr "Eturnray ethay yperbolichay arcway inesay ofway UMBERNAY."

#: target:code/irrat.lisp
msgid "Return the hyperbolic arc cosine of NUMBER."
msgstr "Eturnray ethay yperbolichay arcway osinecay ofway UMBERNAY."

#: target:code/irrat.lisp
msgid "Return the hyperbolic arc tangent of NUMBER."
msgstr "Eturnray ethay yperbolichay arcway angenttay ofway UMBERNAY."

#: target:code/irrat.lisp
msgid ""
"Compute 2^N * X without compute 2^N first (use properties of the\n"
"underlying floating-point format"
msgstr ""
"Omputecay 2^N * X ithoutway omputecay 2^N irstfay (useway opertiespray ofway "
"ethay\n"
"underlyingway oatingflay-ointpay ormatfay"

#: target:code/irrat.lisp
msgid ""
"Same as logb but X is not infinity and non-zero and not a NaN, so\n"
"that we can always return an integer"
msgstr ""
"Amesay asway ogblay utbay X isway otnay infinityway andway onnay-erozay "
"andway otnay away Annay, osay\n"
"atthay eway ancay alwaysway eturnray anway integerway"

#: target:code/irrat.lisp
msgid ""
"Compute an integer N such that 1 <= |2^(-N) * x| < 2.\n"
"For the special cases, the following values are used:\n"
"\n"
"    x             logb\n"
"   NaN            NaN\n"
"   +/- infinity   +infinity\n"
"   0              -infinity\n"
msgstr ""
"Omputecay anway integerway N uchsay atthay 1 <= |2^(-N) * x| < 2.\n"
"Orfay ethay ecialspay asescay, ethay ollowingfay aluesvay areway usedway:\n"
"\n"
"    x             ogblay\n"
"   Annay            Annay\n"
"   +/- infinityway   +infinityway\n"
"   0              -infinityway\n"

#: target:code/irrat.lisp
msgid ""
"Create complex number with real part X and imaginary part Y such that\n"
"it has the same type as Z.  If Z has type (complex rational), the X\n"
"and Y are coerced to single-float."
msgstr ""
"Eatecray omplexcay umbernay ithway ealray artpay X andway imaginaryway "
"artpay Y uchsay atthay\n"
"itway ashay ethay amesay ypetay asway Z.  Ifway Z ashay ypetay (omplexcay "
"ationalray), ethay X\n"
"andway Y areway oercedcay otay inglesay-oatflay."

#: target:code/irrat-dd.lisp target:code/irrat.lisp
msgid ""
"Principle square root of Z\n"
"\n"
"Z may be any number, but the result is always a complex."
msgstr ""
"Inciplepray quaresay ootray ofway Z\n"
"\n"
"Z aymay ebay anyway umbernay, utbay ethay esultray isway alwaysway away "
"omplexcay."

#: target:code/irrat-dd.lisp target:code/irrat.lisp
msgid ""
"Compute log(2^j*z).\n"
"\n"
"This is for use with J /= 0 only when |z| is huge."
msgstr ""
"Omputecay oglay(2^j*z).\n"
"\n"
"Isthay isway orfay useway ithway J /= 0 onlyway enwhay |z| isway ugehay."

#: target:code/irrat-dd.lisp target:code/irrat.lisp
msgid ""
"Log of Z = log |Z| + i * arg Z\n"
"\n"
"Z may be any number, but the result is always a complex."
msgstr ""
"Oglay ofway Z = oglay |Z| + i * argway Z\n"
"\n"
"Z aymay ebay anyway umbernay, utbay ethay esultray isway alwaysway away "
"omplexcay."

#: target:code/irrat-dd.lisp target:code/irrat.lisp
msgid "Compute atanh z = (log(1+z) - log(1-z))/2"
msgstr "Omputecay atanhway z = (oglay(1+z) - oglay(1-z))/2"

#: target:code/irrat-dd.lisp target:code/irrat.lisp
msgid "Compute tanh z = sinh z / cosh z"
msgstr "Omputecay anhtay z = inhsay z / oshcay z"

#: target:code/irrat-dd.lisp target:code/irrat.lisp
msgid ""
"Compute acos z = pi/2 - asin z\n"
"\n"
"Z may be any number, but the result is always a complex."
msgstr ""
"Omputecay acosway z = ipay/2 - asinway z\n"
"\n"
"Z aymay ebay anyway umbernay, utbay ethay esultray isway alwaysway away "
"omplexcay."

#: target:code/irrat-dd.lisp target:code/irrat.lisp
msgid ""
"Compute acosh z = 2 * log(sqrt((z+1)/2) + sqrt((z-1)/2))\n"
"\n"
"Z may be any number, but the result is always a complex."
msgstr ""
"Omputecay acoshway z = 2 * oglay(qrtsay((z+1)/2) + qrtsay((z-1)/2))\n"
"\n"
"Z aymay ebay anyway umbernay, utbay ethay esultray isway alwaysway away "
"omplexcay."

#: target:code/irrat-dd.lisp target:code/irrat.lisp
msgid ""
"Compute asin z = asinh(i*z)/i\n"
"\n"
"Z may be any number, but the result is always a complex."
msgstr ""
"Omputecay asinway z = asinhway(i*z)/i\n"
"\n"
"Z aymay ebay anyway umbernay, utbay ethay esultray isway alwaysway away "
"omplexcay."

#: target:code/irrat-dd.lisp target:code/irrat.lisp
msgid ""
"Compute asinh z = log(z + sqrt(1 + z*z))\n"
"\n"
"Z may be any number, but the result is always a complex."
msgstr ""
"Omputecay asinhway z = oglay(z + qrtsay(1 + z*z))\n"
"\n"
"Z aymay ebay anyway umbernay, utbay ethay esultray isway alwaysway away "
"omplexcay."

#: target:code/irrat-dd.lisp target:code/irrat.lisp
msgid ""
"Compute atan z = atanh (i*z) / i\n"
"\n"
"Z may be any number, but the result is always a complex."
msgstr ""
"Omputecay atanway z = atanhway (i*z) / i\n"
"\n"
"Z aymay ebay anyway umbernay, utbay ethay esultray isway alwaysway away "
"omplexcay."

#: target:code/irrat-dd.lisp target:code/irrat.lisp
msgid ""
"Compute tan z = -i * tanh(i * z)\n"
"\n"
"Z may be any number, but the result is always a complex."
msgstr ""
"Omputecay antay z = -i * anhtay(i * z)\n"
"\n"
"Z aymay ebay anyway umbernay, utbay ethay esultray isway alwaysway away "
"omplexcay."

#: target:code/irrat-dd.lisp
msgid "log(most-positive-double-double-float)"
msgstr "oglay(ostmay-ositivepay-oubleday-oubleday-oatflay)"

#: target:code/irrat-dd.lisp
msgid "log(least-positive-double-double-float"
msgstr "oglay(eastlay-ositivepay-oubleday-oubleday-oatflay"

#: target:code/irrat-dd.lisp
msgid "log(2)"
msgstr "oglay(2)"

#: target:code/irrat-dd.lisp
msgid "Log base 2 of e"
msgstr "Oglay asebay 2 ofway e"

#: target:code/irrat-dd.lisp
msgid "log2(e)-1"
msgstr "oglay2(e)-1"

#: target:code/irrat-dd.lisp
msgid "Pi"
msgstr "Ipay"

#: target:code/irrat-dd.lisp
msgid "Pi/2"
msgstr "Ipay/2"

#: target:code/irrat-dd.lisp
msgid "Pi/4"
msgstr "Ipay/4"

#: target:code/irrat-dd.lisp
msgid "Sqrt(1/2)"
msgstr "Qrtsay(1/2)"

#: target:code/irrat-dd.lisp
msgid "exp(x) - 1"
msgstr "expway(x) - 1"

#: target:code/irrat-dd.lisp
msgid "396 (hex) digits of 2/pi"
msgstr "396 (exhay) igitsday ofway 2/ipay"

#: target:code/irrat-dd.lisp
msgid "Overflow"
msgstr "Overflowway"

#: target:compiler/proclaim.lisp
msgid ""
"~S uses lambda-list keyword naming convention, but is not a recognized "
"lambda-list keyword."
msgstr ""
"~S usesway ambdalay-istlay eywordkay amingnay onventioncay, utbay isway "
"otnay away ecognizedray ambdalay-istlay eywordkay."

#: target:compiler/proclaim.lisp
msgid "Misplaced &optional in lambda-list: ~S."
msgstr "Isplacedmay &optionalway inway ambdalay-istlay: ~S."

#: target:compiler/proclaim.lisp
msgid "Misplaced &rest in lambda-list: ~S."
msgstr "Isplacedmay &estray inway ambdalay-istlay: ~S."

#: target:compiler/proclaim.lisp
msgid "Misplaced &more in lambda-list: ~S."
msgstr "Isplacedmay &oremay inway ambdalay-istlay: ~S."

#: target:compiler/proclaim.lisp
msgid "Misplaced &key in lambda-list: ~S."
msgstr "Isplacedmay &eykay inway ambdalay-istlay: ~S."

#: target:compiler/proclaim.lisp
msgid "Misplaced &allow-other-keys in lambda-list: ~S."
msgstr "Isplacedmay &allowway-otherway-eyskay inway ambdalay-istlay: ~S."

#: target:compiler/proclaim.lisp
msgid "Misplaced &aux in lambda-list: ~S."
msgstr "Isplacedmay &auxway inway ambdalay-istlay: ~S."

#: target:compiler/proclaim.lisp
msgid "Found garbage in lambda-list when expecting a keyword: ~S."
msgstr ""
"Oundfay arbagegay inway ambdalay-istlay enwhay expectingway away eywordkay: "
"~S."

#: target:compiler/proclaim.lisp
msgid "&rest not followed by required variable."
msgstr "&estray otnay ollowedfay ybay equiredray ariablevay."

#: target:compiler/proclaim.lisp
msgid "Illegal function name: ~S."
msgstr "Illegalway unctionfay amenay: ~S."

#: target:compiler/proclaim.lisp
msgid "Special form is an illegal function name: ~S."
msgstr "Ecialspay ormfay isway anway illegalway unctionfay amenay: ~S."

#: target:compiler/proclaim.lisp
msgid ""
"Defining as a SETF function a name that already has a SETF macro:~\n"
"       ~%  ~S"
msgstr ""
"Efiningday asway away ETFSAY unctionfay away amenay atthay alreadyway ashay "
"away ETFSAY acromay:~\n"
"       ~%  ~S"

#: target:compiler/proclaim.lisp
msgid ""
"Undefining structure type:~%  ~S~@\n"
"\t   so that this slot accessor can be redefined:~%  ~S"
msgstr ""
"Undefiningway ucturestray ypetay:~%  ~S~@\n"
"\t   osay atthay isthay otslay accessorway ancay ebay edefinedray:~%  ~S"

#: target:compiler/proclaim.lisp
msgid "~S previously defined as a macro."
msgstr "~S eviouslypray efinedday asway away acromay."

#: target:compiler/proclaim.lisp
msgid "Unknown optimization quality ~S in ~S."
msgstr "Unknownway optimizationway alityquay ~S inway ~S."

#: target:compiler/proclaim.lisp
msgid "Malformed optimization quality specifier ~S in ~S."
msgstr "Alformedmay optimizationway alityquay ecifierspay ~S inway ~S."

#: target:compiler/proclaim.lisp
msgid ""
"DECLAIM Declaration*\n"
"  Do a declaration for the global environment."
msgstr ""
"ECLAIMDAY Eclarationday*\n"
"  Oday away eclarationday orfay ethay obalglay environmentway."

#: target:compiler/ir1tran.lisp target:compiler/proclaim.lisp
msgid "Malformed PROCLAIM spec: ~S."
msgstr "Alformedmay OCLAIMPRAY ecspay: ~S."

#: target:compiler/ir1tran.lisp target:compiler/proclaim.lisp
msgid "Variable name is not a symbol: ~S."
msgstr "Ariablevay amenay isway otnay away ymbolsay: ~S."

#: target:compiler/proclaim.lisp
msgid "Nihil ex nihil, can't declare ~S special."
msgstr "Ihilnay exway ihilnay, ancay't eclareday ~S ecialspay."

#: target:compiler/proclaim.lisp
msgid "Veritas aeterna, can't declare ~S special."
msgstr "Eritasvay aeternaway, ancay't eclareday ~S ecialspay."

#: target:compiler/proclaim.lisp
msgid "Can't declare ~S special, it is a keyword."
msgstr "Ancay't eclareday ~S ecialspay, itway isway away eywordkay."

#: target:compiler/proclaim.lisp
msgid "Proceed anyway."
msgstr "Oceedpray anywayway."

#: target:compiler/proclaim.lisp
msgid "Trying to declare ~S special, which is ~A."
msgstr "Yingtray otay eclareday ~S ecialspay, ichwhay isway ~Away."

#: target:compiler/proclaim.lisp
msgid "a constant"
msgstr "away onstantcay"

#: target:compiler/proclaim.lisp
msgid "an alien variable"
msgstr "anway alienway ariablevay"

#: target:compiler/proclaim.lisp
msgid "a symbol macro"
msgstr "away ymbolsay acromay"

#: target:compiler/ir1tran.lisp target:compiler/proclaim.lisp
msgid "Declared functional type is not a function type: ~S."
msgstr "Eclaredday unctionalfay ypetay isway otnay away unctionfay ypetay: ~S."

#: target:compiler/proclaim.lisp
msgid "Ignoring FTYPE declaration for slot accesor:~%  ~S"
msgstr "Ignoringway TYPEFAY eclarationday orfay otslay accesorway:~%  ~S"

#: target:compiler/proclaim.lisp
msgid "Declaration to be RECOGNIZED is not a symbol: ~S."
msgstr "Eclarationday otay ebay ECOGNIZEDRAY isway otnay away ymbolsay: ~S."

#: target:compiler/proclaim.lisp
msgid "Declaration already names a type: ~S."
msgstr "Eclarationday alreadyway amesnay away ypetay: ~S."

#: target:compiler/ir1tran.lisp target:compiler/proclaim.lisp
msgid "Unrecognized proclamation: ~S."
msgstr "Unrecognizedway oclamationpray: ~S."

#: target:code/unidata.lisp
msgid "The Unicode data file is broken."
msgstr "Ethay Unicodeway ataday ilefay isway okenbray."

#: target:code/unidata.lisp
msgid "Unicode data file is for Unicode ~D.~D.~D"
msgstr "Unicodeway ataday ilefay isway orfay Unicodeway ~D.~D.~D"

#: target:code/unidata.lisp
msgid "No data in file."
msgstr "Onay ataday inway ilefay."

#: target:code/char.lisp
msgid "The upper exclusive bound on values produced by CHAR-CODE."
msgstr ""
"Ethay upperway exclusiveway oundbay onway aluesvay oducedpray ybay ARCHAY-"
"ODECAY."

#: target:code/char.lisp
msgid "The upper exclusive bound on the value of a Unicode codepoint"
msgstr ""
"Ethay upperway exclusiveway oundbay onway ethay aluevay ofway away "
"Unicodeway odepointcay"

#: target:code/char.lisp
msgid ""
"This is the alist of (character-name . character) for characters with\n"
"  long names.  The first name in this list for a given character is used\n"
"  on typeout and is the preferred form for input."
msgstr ""
"Isthay isway ethay alistway ofway (aracterchay-amenay . aracterchay) orfay "
"aracterschay ithway\n"
"  onglay amesnay.  Ethay irstfay amenay inway isthay istlay orfay away "
"ivengay aracterchay isway usedway\n"
"  onway ypeouttay andway isway ethay eferredpray ormfay orfay inputway."

#: target:code/char.lisp
msgid "Returns the integer code of CHAR."
msgstr "Eturnsray ethay integerway odecay ofway ARCHAY."

#: target:code/char.lisp
msgid ""
"Returns the integer code of CHAR.  This is the same as char-code, as\n"
"   CMU Common Lisp does not implement character bits or fonts."
msgstr ""
"Eturnsray ethay integerway odecay ofway ARCHAY.  Isthay isway ethay amesay "
"asway archay-odecay, asway\n"
"   MUCAY Ommoncay Isplay oesday otnay implementway aracterchay itsbay orway "
"ontsfay."

#: target:code/char.lisp
msgid "Returns the character with the code CODE."
msgstr "Eturnsray ethay aracterchay ithway ethay odecay ODECAY."

#: target:code/char.lisp
msgid ""
"Coerces its argument into a character object if possible.  Accepts\n"
"  characters, strings and symbols of length 1."
msgstr ""
"Oercescay itsway argumentway intoway away aracterchay objectway ifway "
"ossiblepay.  Acceptsway\n"
"  aracterschay, ingsstray andway ymbolssay ofway engthlay 1."

#: target:code/char.lisp
msgid "String is not of length one: ~S"
msgstr "Ingstray isway otnay ofway engthlay oneway: ~S"

#: target:code/char.lisp
msgid "Symbol name is not of length one: ~S"
msgstr "Ymbolsay amenay isway otnay ofway engthlay oneway: ~S"

#: target:code/char.lisp
msgid "~S cannot be coerced to a character."
msgstr "~S annotcay ebay oercedcay otay away aracterchay."

#: target:code/char.lisp
msgid ""
"Given a character object, char-name returns the name for that\n"
"  object (a symbol)."
msgstr ""
"Ivengay away aracterchay objectway, archay-amenay eturnsray ethay amenay "
"orfay atthay\n"
"  objectway (away ymbolsay)."

#: target:code/char.lisp
msgid ""
"Given an argument acceptable to string, name-char returns a character\n"
"  object whose name is that symbol, if one exists, otherwise NIL."
msgstr ""
"Ivengay anway argumentway acceptableway otay ingstray, amenay-archay "
"eturnsray away aracterchay\n"
"  objectway osewhay amenay isway atthay ymbolsay, ifway oneway existsway, "
"otherwiseway ILNAY."

#: target:code/char.lisp
msgid ""
"The argument must be a character object.  Standard-char-p returns T if the\n"
"   argument is a standard character -- one of the 95 ASCII printing "
"characters\n"
"   or <return>."
msgstr ""
"Ethay argumentway ustmay ebay away aracterchay objectway.  Tandardsay-archay-"
"p eturnsray T ifway ethay\n"
"   argumentway isway away tandardsay aracterchay -- oneway ofway ethay 95 "
"ASCIIWAY intingpray aractechaysray\n"
"   orway <eturnray>."

#: target:code/char.lisp
msgid ""
"Return T if and only if THING is a standard-char.  Differs from\n"
"  standard-char-p in that THING doesn't have to be a character."
msgstr ""
"Eturnray T ifway andway onlyway ifway INGTHAY isway away tandardsay-archay.  "
"Iffersday omfray\n"
"  tandardsay-archay-p inway atthay INGTHAY oesnday't avehay otay ebay away "
"aracterchay."

#: target:code/char.lisp
msgid ""
"The argument must be a character object.  Graphic-char-p returns T if the\n"
"  argument is a printing character, otherwise returns NIL."
msgstr ""
"Ethay argumentway ustmay ebay away aracterchay objectway.  Aphicgray-archay-"
"p eturnsray T ifway ethay\n"
"  argumentway isway away intingpray aracterchay, otherwiseway eturnsray "
"ILNAY."

#: target:code/char.lisp
msgid ""
"The argument must be a character object.  Alpha-char-p returns T if the\n"
"  argument is an alphabetic character; otherwise NIL."
msgstr ""
"Ethay argumentway ustmay ebay away aracterchay objectway.  Alphaway-archay-p "
"eturnsray T ifway ethay\n"
"  argumentway isway anway alphabeticway aracterchay; otherwiseway ILNAY."

#: target:code/char.lisp
msgid ""
"The argument must be a character object; upper-case-p returns T if the\n"
"  argument is an upper-case character, NIL otherwise."
msgstr ""
"Ethay argumentway ustmay ebay away aracterchay objectway; upperway-asecay-p "
"eturnsray T ifway ethay\n"
"  argumentway isway anway upperway-asecay aracterchay, ILNAY otherwiseway."

#: target:code/char.lisp
msgid ""
"The argument must be a character object; lower-case-p returns T if the \n"
"  argument is a lower-case character, NIL otherwise."
msgstr ""
"Ethay argumentway ustmay ebay away aracterchay objectway; owerlay-asecay-p "
"eturnsray T ifway ethay \n"
"  argumentway isway away owerlay-asecay aracterchay, ILNAY otherwiseway."

#: target:code/char.lisp
msgid ""
"The argument must be a character object; title-case-p returns T if the\n"
"  argument is a title-case character, NIL otherwise."
msgstr ""
"Ethay argumentway ustmay ebay away aracterchay objectway; itletay-asecay-p "
"eturnsray T ifway ethay\n"
"  argumentway isway away itletay-asecay aracterchay, ILNAY otherwiseway."

#: target:code/char.lisp
msgid ""
"The argument must be a character object.  Both-case-p returns T if the\n"
"  argument is an alphabetic character and if the character exists in\n"
"  both upper and lower case.  For ASCII, this is the same as Alpha-char-p."
msgstr ""
"Ethay argumentway ustmay ebay away aracterchay objectway.  Othbay-asecay-p "
"eturnsray T ifway ethay\n"
"  argumentway isway anway alphabeticway aracterchay andway ifway ethay "
"aracterchay existsway inway\n"
"  othbay upperway andway owerlay asecay.  Orfay ASCIIWAY, isthay isway ethay "
"amesay asway Alphaway-archay-p."

#: target:code/char.lisp
msgid ""
"If char is a digit in the specified radix, returns the fixnum for\n"
"  which that digit stands, else returns NIL.  Radix defaults to 10\n"
"  (decimal)."
msgstr ""
"Ifway archay isway away igitday inway ethay ecifiedspay adixray, eturnsray "
"ethay ixnumfay orfay\n"
"  ichwhay atthay igitday tandssay, elseway eturnsray ILNAY.  Adixray "
"efaultsday otay 10\n"
"  (ecimalday)."

#: target:code/char.lisp
msgid ""
"Given a character-object argument, alphanumericp returns T if the\n"
"  argument is either numeric or alphabetic."
msgstr ""
"Ivengay away aracterchay-objectway argumentway, alphanumericpway eturnsray T "
"ifway ethay\n"
"  argumentway isway eitherway umericnay orway alphabeticway."

#: target:code/char.lisp
msgid "Returns T if all of its arguments are the same character."
msgstr ""
"Eturnsray T ifway allway ofway itsway argumentsway areway ethay amesay "
"aracterchay."

#: target:code/char.lisp
msgid "Returns T if no two of its arguments are the same character."
msgstr ""
"Eturnsray T ifway onay wotay ofway itsway argumentsway areway ethay amesay "
"aracterchay."

#: target:code/char.lisp
msgid "Returns T if its arguments are in strictly increasing alphabetic order."
msgstr ""
"Eturnsray T ifway itsway argumentsway areway inway ictlystray increasingway "
"alphabeticway orderway."

#: target:code/char.lisp
msgid "Returns T if its arguments are in strictly decreasing alphabetic order."
msgstr ""
"Eturnsray T ifway itsway argumentsway areway inway ictlystray ecreasingday "
"alphabeticway orderway."

#: target:code/char.lisp
msgid ""
"Returns T if its arguments are in strictly non-decreasing alphabetic order."
msgstr ""
"Eturnsray T ifway itsway argumentsway areway inway ictlystray onnay-"
"ecreasingday alphabeticway orderway."

#: target:code/char.lisp
msgid ""
"Returns T if its arguments are in strictly non-increasing alphabetic order."
msgstr ""
"Eturnsray T ifway itsway argumentsway areway inway ictlystray onnay-"
"increasingway alphabeticway orderway."

#: target:code/char.lisp
msgid ""
"Returns T if all of its arguments are the same character.\n"
"   Case is ignored."
msgstr ""
"Eturnsray T ifway allway ofway itsway argumentsway areway ethay amesay "
"aracterchay.\n"
"   Asecay isway ignoredway."

#: target:code/char.lisp
msgid ""
"Returns T if no two of its arguments are the same character.\n"
"   Case is ignored."
msgstr ""
"Eturnsray T ifway onay wotay ofway itsway argumentsway areway ethay amesay "
"aracterchay.\n"
"   Asecay isway ignoredway."

#: target:code/char.lisp
msgid ""
"Returns T if its arguments are in strictly increasing alphabetic order.\n"
"   Case is ignored."
msgstr ""
"Eturnsray T ifway itsway argumentsway areway inway ictlystray increasingway "
"alphabeticway orderway.\n"
"   Asecay isway ignoredway."

#: target:code/char.lisp
msgid ""
"Returns T if its arguments are in strictly decreasing alphabetic order.\n"
"   Case is ignored."
msgstr ""
"Eturnsray T ifway itsway argumentsway areway inway ictlystray ecreasingday "
"alphabeticway orderway.\n"
"   Asecay isway ignoredway."

#: target:code/char.lisp
msgid ""
"Returns T if its arguments are in strictly non-decreasing alphabetic order.\n"
"   Case is ignored."
msgstr ""
"Eturnsray T ifway itsway argumentsway areway inway ictlystray onnay-"
"ecreasingday alphabeticway orderway.\n"
"   Asecay isway ignoredway."

#: target:code/char.lisp
msgid ""
"Returns T if its arguments are in strictly non-increasing alphabetic order.\n"
"   Case is ignored."
msgstr ""
"Eturnsray T ifway itsway argumentsway areway inway ictlystray onnay-"
"increasingway alphabeticway orderway.\n"
"   Asecay isway ignoredway."

#: target:code/char.lisp
msgid "Returns CHAR converted to upper-case if that is possible."
msgstr ""
"Eturnsray ARCHAY onvertedcay otay upperway-asecay ifway atthay isway "
"ossiblepay."

#: target:code/char.lisp
msgid "Returns CHAR converted to title-case if that is possible."
msgstr ""
"Eturnsray ARCHAY onvertedcay otay itletay-asecay ifway atthay isway "
"ossiblepay."

#: target:code/char.lisp
msgid "Returns CHAR converted to lower-case if that is possible."
msgstr ""
"Eturnsray ARCHAY onvertedcay otay owerlay-asecay ifway atthay isway "
"ossiblepay."

#: target:code/char.lisp
msgid ""
"All arguments must be integers.  Returns a character object that\n"
"  represents a digit of the given weight in the specified radix.  Returns\n"
"  NIL if no such character exists."
msgstr ""
"Allway argumentsway ustmay ebay integersway.  Eturnsray away aracterchay "
"objectway atthay\n"
"  epresentsray away igitday ofway ethay ivengay eightway inway ethay "
"ecifiedspay adixray.  Eturnsray\n"
"  ILNAY ifway onay uchsay aracterchay existsway."

#: target:pcl/cmucl-documentation.lisp target:code/misc.lisp
msgid ""
"Returns the documentation string of Doc-Type for X, or NIL if\n"
"  none exists.  System doc-types are VARIABLE, FUNCTION, STRUCTURE, TYPE,\n"
"  SETF, and T."
msgstr ""
"Eturnsray ethay ocumentationday ingstray ofway Ocday-Ypetay orfay X, orway "
"ILNAY ifway\n"
"  onenay existsway.  Ystemsay ocday-ypestay areway ARIABLEVAY, UNCTIONFAY, "
"UCTURESTRAY, YPETAY,\n"
"  ETFSAY, andway T."

#: target:code/misc.lisp
msgid "~S is not the name of a structure type."
msgstr "~S isway otnay ethay amenay ofway away ucturestray ypetay."

#: target:code/misc.lisp
msgid ""
"If X is an atom, see if it is present in *FEATURES*.  Also\n"
"  handle arbitrary combinations of atoms using NOT, AND, OR."
msgstr ""
"Ifway X isway anway atomway, eesay ifway itway isway esentpray inway "
"*EATURESFAY*.  Alsoway\n"
"  andlehay arbitraryway ombinationscay ofway atomsway usingway OTNAY, "
"ANDWAY, ORWAY."

#: target:code/misc.lisp
msgid "Unknown operator in feature expression: ~S."
msgstr "Unknownway operatorway inway eaturefay expressionway: ~S."

#: target:code/misc.lisp
msgid "Returns a string describing the implementation type."
msgstr "Eturnsray away ingstray escribingday ethay implementationway ypetay."

#: target:code/misc.lisp
msgid "Returns a string describing the implementation version."
msgstr ""
"Eturnsray away ingstray escribingday ethay implementationway ersionvay."

#: target:code/misc.lisp
msgid " Unicode"
msgstr " Unicodeway"

#: target:code/misc.lisp
msgid "Returns a string giving the name of the local machine."
msgstr ""
"Eturnsray away ingstray ivinggay ethay amenay ofway ethay ocallay achinemay."

#: target:code/misc.lisp
msgid "The value of SOFTWARE-TYPE.  Set in FOO-os.lisp."
msgstr ""
"Ethay aluevay ofway OFTWARESAY-YPETAY.  Etsay inway OOFAY-osway.isplay."

#: target:code/misc.lisp
msgid "Returns a string describing the supporting software."
msgstr "Eturnsray away ingstray escribingday ethay upportingsay oftwaresay."

#: target:code/misc.lisp
msgid "Unknown"
msgstr "Unknownway"

#: target:code/misc.lisp
msgid "The value of SHORT-SITE-NAME.  Set in library:site-init.lisp."
msgstr ""
"Ethay aluevay ofway ORTSHAY-ITESAY-AMENAY.  Etsay inway ibrarylay:itesay-"
"initway.isplay."

#: target:code/misc.lisp
msgid "Returns a string with the abbreviated site name."
msgstr "Eturnsray away ingstray ithway ethay abbreviatedway itesay amenay."

#: target:code/misc.lisp
msgid "Site name not initialized"
msgstr "Itesay amenay otnay initializedway"

#: target:code/misc.lisp
msgid "The value of LONG-SITE-NAME.  Set in library:site-init.lisp."
msgstr ""
"Ethay aluevay ofway ONGLAY-ITESAY-AMENAY.  Etsay inway ibrarylay:itesay-"
"initway.isplay."

#: target:code/misc.lisp
msgid "Returns a string with the long form of the site name."
msgstr ""
"Eturnsray away ingstray ithway ethay onglay ormfay ofway ethay itesay amenay."

#: target:code/misc.lisp
msgid ""
"With a file name as an argument, dribble opens the file and\n"
"   sends a record of further I/O to that file.  Without an\n"
"   argument, it closes the dribble file, and quits logging."
msgstr ""
"Ithway away ilefay amenay asway anway argumentway, ibbledray opensway ethay "
"ilefay andway\n"
"   endssay away ecordray ofway urtherfay Iway/O otay atthay ilefay.  "
"Ithoutway anway\n"
"   argumentway, itway osesclay ethay ibbledray ilefay, andway itsquay "
"ogginglay."

#: target:code/misc.lisp
msgid "Not currently dribbling."
msgstr "Otnay urrentlycay ibblingdray."

#: target:code/misc.lisp
msgid ""
"Default implementation of ed.  This does nothing.  If hemlock is\n"
"  loaded, ed can be used to edit a file"
msgstr ""
"Efaultday implementationway ofway edway.  Isthay oesday othingnay.  Ifway "
"emlockhay isway\n"
"  oadedlay, edway ancay ebay usedway otay editway away ilefay"

#: target:code/extensions.lisp
msgid ""
"This function can be used as the default value for keyword arguments that\n"
"  must be always be supplied.  Since it is known by the compiler to never\n"
"  return, it will avoid any compile-time type warnings that would result "
"from a\n"
"  default value inconsistent with the declared type.  When this function is\n"
"  called, it signals an error indicating that a required keyword argument "
"was\n"
"  not supplied.  This function is also useful for DEFSTRUCT slot defaults\n"
"  corresponding to required arguments."
msgstr ""
"Isthay unctionfay ancay ebay usedway asway ethay efaultday aluevay orfay "
"eywordkay argumentsway atthay\n"
"  ustmay ebay alwaysway ebay uppliedsay.  Incesay itway isway nownkay ybay "
"ethay ompilercay otay evernay\n"
"  eturnray, itway illway avoidway anyway ompilecay-imetay ypetay arningsway "
"atthay ouldway esultray omfray away\n"
"  efaultday aluevay inconsistentway ithway ethay eclaredday ypetay.  Enwhay "
"isthay unctionfay isway\n"
"  alledcay, itway ignalssay anway errorway indicatingway atthay away "
"equiredray eywordkay argumentway asway\n"
"  otnay uppliedsay.  Isthay unctionfay isway alsoway usefulway orfay "
"EFSTRUCTDAY otslay efaultsday\n"
"  orrespondingcay otay equiredray argumentsway."

#: target:code/extensions.lisp
msgid "A required keyword argument was not supplied."
msgstr "Away equiredray eywordkay argumentway asway otnay uppliedsay."

#: target:code/extensions.lisp
msgid ""
"FILE-COMMENT String\n"
"  When COMPILE-FILE sees this form at top-level, it places the constant "
"string\n"
"  in the run-time source location information.  DESCRIBE will print the "
"file\n"
"  comment for the file that a function was defined in.  The string is also\n"
"  textually present in the FASL, so the RCS \"ident\" command can find it,\n"
"  etc."
msgstr ""
"ILEFAY-OMMENTCAY Ingstray\n"
"  Enwhay OMPILECAY-ILEFAY eessay isthay ormfay atway optay-evellay, itway "
"acesplay ethay onstantcay ingstray\n"
"  inway ethay unray-imetay ourcesay ocationlay informationway.  ESCRIBEDAY "
"illway intpray ethay ilefay\n"
"  ommentcay orfay ethay ilefay atthay away unctionfay asway efinedday "
"inway.  Ethay ingstray isway alsoway\n"
"  extuallytay esentpray inway ethay ASLFAY, osay ethay CSRAY \"identway\" "
"ommandcay ancay indfay itway,\n"
"  etcway."

#: target:code/extensions.lisp
msgid "See listen.  Any whitespace in the input stream will be flushed."
msgstr ""
"Eesay istenlay.  Anyway itespacewhay inway ethay inputway eamstray illway "
"ebay ushedflay."

#: target:code/extensions.lisp
msgid ""
"Does what one might expect, saving the old values and setting the "
"generalized\n"
"  variables to the new values in sequence.  Unwind-protects and get-setf-"
"method\n"
"  are used to preserve the semantics one might expect in analogy to let*,\n"
"  and the once-only evaluation of subforms."
msgstr ""
"Oesday atwhay oneway ightmay expectway, avingsay ethay oldway aluesvay "
"andway ettingsay ethay eneralizegayd\n"
"  ariablesvay otay ethay ewnay aluesvay inway equencesay.  Unwindway-"
"otectspray andway etgay-etfsay-etmayodhay\n"
"  areway usedway otay eservepray ethay emanticssay oneway ightmay expectway "
"inway analogyway otay etlay*,\n"
"  andway ethay onceway-onlyway evaluationway ofway ubformssay."

#: target:code/extensions.lisp
msgid ""
"Like letf*, but evaluates all the implicit subforms and new values of all\n"
"  the implied setfs before altering any values.  However, the store forms\n"
"  (see get-setf-method) must still be evaluated in sequence.  Uses unwind-\n"
"  protects to protect the environment."
msgstr ""
"Ikelay etflay*, utbay evaluatesway allway ethay implicitway ubformssay "
"andway ewnay aluesvay ofway allway\n"
"  ethay impliedway etfssay eforebay alteringway anyway aluesvay.  Oweverhay, "
"ethay toresay ormsfay\n"
"  (eesay etgay-etfsay-ethodmay) ustmay tillsay ebay evaluatedway inway "
"equencesay.  Usesway unwindway-\n"
"  otectspray otay otectpray ethay environmentway."

#: target:code/extensions.lisp
msgid ""
"Causes the output of the indenting Stream to indent More spaces.  More is\n"
"  evaluated twice."
msgstr ""
"Ausescay ethay outputway ofway ethay indentingway Eamstray otay indentway "
"Oremay acesspay.  Oremay isway\n"
"  evaluatedway wicetay."

#: target:code/extensions.lisp
msgid "Just like dolist, but with one-dimensional arrays."
msgstr "Ustjay ikelay olistday, utbay ithway oneway-imensionalday arraysway."

#: target:code/extensions.lisp
msgid ""
"Iterate Name ({(Var Initial-Value)}*) Declaration* Form*\n"
"  This is syntactic sugar for Labels.  It creates a local function Name "
"with\n"
"  the specified Vars as its arguments and the Declarations and Forms as its\n"
"  body.  This function is then called with the Initial-Values, and the "
"result\n"
"  of the call is return from the macro."
msgstr ""
"Iterateway Amenay ({(Arvay Initialway-Aluevay)}*) Eclarationday* Ormfay*\n"
"  Isthay isway yntacticsay ugarsay orfay Abelslay.  Itway eatescray away "
"ocallay unctionfay Amenay ithway\n"
"  ethay ecifiedspay Arsvay asway itsway argumentsway andway ethay "
"Eclarationsday andway Ormsfay asway itsway\n"
"  odybay.  Isthay unctionfay isway enthay alledcay ithway ethay Initialway-"
"Aluesvay, andway ethay esultray\n"
"  ofway ethay allcay isway eturnray omfray ethay acromay."

#: target:code/extensions.lisp
msgid "Malformed iterate variable spec: ~S."
msgstr "Alformedmay iterateway ariablevay ecspay: ~S."

#: target:code/extensions.lisp
msgid ""
"Collect ({(Name [Initial-Value] [Function])}*) {Form}*\n"
"  Collect some values somehow.  Each of the collections specifies a bunch "
"of\n"
"  things which collected during the evaluation of the body of the form.  "
"The\n"
"  name of the collection is used to define a local macro, a la MACROLET.\n"
"  Within the body, this macro will evaluate each of its arguments and "
"collect\n"
"  the result, returning the current value after the collection is done.  "
"The\n"
"  body is evaluated as a PROGN; to get the final values when you are done, "
"just\n"
"  call the collection macro with no arguments.\n"
"\n"
"  Initial-Value is the value that the collection starts out with, which\n"
"  defaults to NIL.  Function is the function which does the collection.  It "
"is\n"
"  a function which will accept two arguments: the value to be collected and "
"the\n"
"  current collection.  The result of the function is made the new value for "
"the\n"
"  collection.  As a totally magical special-case, the Function may be "
"Collect,\n"
"  which tells us to build a list in forward order; this is the default.  If "
"an\n"
"  Initial-Value is supplied for Collect, the stuff will be rplacd'd onto "
"the\n"
"  end.  Note that Function may be anything that can appear in the "
"functional\n"
"  position, including macros and lambdas."
msgstr ""
"Ollectcay ({(Amenay [Initialway-Aluevay] [Unctionfay])}*) {Ormfay}*\n"
"  Ollectcay omesay aluesvay omehowsay.  Eachway ofway ethay ollectionscay "
"ecifiesspay away unchbay ofway\n"
"  ingsthay ichwhay ollectedcay uringday ethay evaluationway ofway ethay "
"odybay ofway ethay ormfay.  Ethay\n"
"  amenay ofway ethay ollectioncay isway usedway otay efineday away ocallay "
"acromay, away alay ACROLETMAY.\n"
"  Ithinway ethay odybay, isthay acromay illway evaluateway eachway ofway "
"itsway argumentsway andway ollectcay\n"
"  ethay esultray, eturningray ethay urrentcay aluevay afterway ethay "
"ollectioncay isway oneday.  Ethay\n"
"  odybay isway evaluatedway asway away OGNPRAY; otay etgay ethay inalfay "
"aluesvay enwhay ouyay areway oneday, ustjay\n"
"  allcay ethay ollectioncay acromay ithway onay argumentsway.\n"
"\n"
"  Initialway-Aluevay isway ethay aluevay atthay ethay ollectioncay tartssay "
"outway ithway, ichwhay\n"
"  efaultsday otay ILNAY.  Unctionfay isway ethay unctionfay ichwhay oesday "
"ethay ollectioncay.  Itway isway\n"
"  away unctionfay ichwhay illway acceptway wotay argumentsway: ethay aluevay "
"otay ebay ollectedcay andway ethay\n"
"  urrentcay ollectioncay.  Ethay esultray ofway ethay unctionfay isway "
"ademay ethay ewnay aluevay orfay ethay\n"
"  ollectioncay.  Asway away otallytay agicalmay ecialspay-asecay, ethay "
"Unctionfay aymay ebay Ollectcay,\n"
"  ichwhay ellstay usway otay uildbay away istlay inway orwardfay orderway; "
"isthay isway ethay efaultday.  Ifway anway\n"
"  Initialway-Aluevay isway uppliedsay orfay Ollectcay, ethay tuffsay illway "
"ebay placdray'd ontoway ethay\n"
"  endway.  Otenay atthay Unctionfay aymay ebay anythingway atthay ancay "
"appearway inway ethay unctionalfay\n"
"  ositionpay, includingway acrosmay andway ambdaslay."

#: target:code/extensions.lisp
msgid "Malformed collection specifier: ~S."
msgstr "Alformedmay ollectioncay ecifierspay: ~S."

#: target:code/extensions.lisp
msgid ""
"Once-Only ({(Var Value-Expression)}*) Form*\n"
"  Create a Let* which evaluates each Value-Expression, binding a temporary\n"
"  variable to the result, and wrapping the Let* around the result of the\n"
"  evaluation of Body.  Within the body, each Var is bound to the "
"corresponding\n"
"  temporary variable."
msgstr ""
"Onceway-Onlyway ({(Arvay Aluevay-Expressionway)}*) Ormfay*\n"
"  Eatecray away Etlay* ichwhay evaluatesway eachway Aluevay-Expressionway, "
"indingbay away emporarytay\n"
"  ariablevay otay ethay esultray, andway appingwray ethay Etlay* aroundway "
"ethay esultray ofway ethay\n"
"  evaluationway ofway Odybay.  Ithinway ethay odybay, eachway Arvay isway "
"oundbay otay ethay orrespondicaygnay\n"
"  emporarytay ariablevay."

#: target:code/extensions.lisp
msgid "Malformed Once-Only binding spec: ~S."
msgstr "Alformedmay Onceway-Onlyway indingbay ecspay: ~S."

#: target:code/extensions.lisp
msgid "Ill-formed ~S -- possibly illegal old style DO?"
msgstr "Illway-ormedfay ~S -- ossiblypay illegalway oldway tylesay ODAY?"

#: target:code/extensions.lisp
msgid "~S step variable is not a symbol: ~S"
msgstr "~S tepsay ariablevay isway otnay away ymbolsay: ~S"

#: target:code/extensions.lisp
msgid "~S is an illegal form for a ~S varlist."
msgstr "~S isway anway illegalway ormfay orfay away ~S arlistvay."

#: target:code/extensions.lisp
msgid ""
"DO-ANONYMOUS ({(Var [Init] [Step])}*) (Test Exit-Form*) Declaration* Form*\n"
"  Like DO, but has no implicit NIL block.  Each Var is initialized in "
"parallel\n"
"  to the value of the specified Init form.  On subsequent iterations, the "
"Vars\n"
"  are assigned the value of the Step form (if any) in paralell.  The Test "
"is\n"
"  evaluated before each evaluation of the body Forms.  When the Test is "
"true,\n"
"  the Exit-Forms are evaluated as a PROGN, with the result being the value\n"
"  of the DO."
msgstr ""
"ODAY-ANONYMOUSWAY ({(Arvay [Initway] [Tepsay])}*) (Esttay Exitway-Ormfay*) "
"Eclarationday* Ormfay*\n"
"  Ikelay ODAY, utbay ashay onay implicitway ILNAY ockblay.  Eachway Arvay "
"isway initializedway inway arallelpay\n"
"  otay ethay aluevay ofway ethay ecifiedspay Initway ormfay.  Onway "
"ubsequentsay iterationsway, ethay Arsvay\n"
"  areway assignedway ethay aluevay ofway ethay Tepsay ormfay (ifway anyway) "
"inway aralellpay.  Ethay Esttay isway\n"
"  evaluatedway eforebay eachway evaluationway ofway ethay odybay Ormsfay.  "
"Enwhay ethay Esttay isway uetray,\n"
"  ethay Exitway-Ormsfay areway evaluatedway asway away OGNPRAY, ithway ethay "
"esultray eingbay ethay aluevay\n"
"  ofway ethay ODAY."

#: target:code/extensions.lisp
msgid ""
"DO-HASH (Key-Var Value-Var Table [Result]) Declaration* Form*\n"
"   Iterate over the entries in a hash-table."
msgstr ""
"ODAY-ASHHAY (Eykay-Arvay Aluevay-Arvay Abletay [Esultray]) Eclarationday* "
"Ormfay*\n"
"   Iterateway overway ethay entriesway inway away ashhay-abletay."

#: target:code/extensions.lisp
msgid ""
"DEFINE-HASH-CACHE Name ({(Arg-Name Test-Function)}*) {Key Value}*\n"
"  Define a hash cache that associates some number of argument values to a\n"
"  result value.  The Test-Function paired with each Arg-Name is used to "
"compare\n"
"  the value for that arg in a cache entry with a supplied arg.  The\n"
"  Test-Function must not error when passed NIL as its first arg, but need "
"not\n"
"  return any particular value.  Test-Function may be any thing that can be\n"
"  place in CAR position.\n"
"\n"
"  Name is used to define functions these functions:\n"
"\n"
"  <name>-CACHE-LOOKUP Arg*\n"
"      See if there is an entry for the specified Args in the cache.  The if "
"not\n"
"      present, the :DEFAULT keyword (default NIL) determines the result(s).\n"
"\n"
"  <name>-CACHE-ENTER Arg* Value*\n"
"      Encache the association of the specified args with Value.\n"
"\n"
"  <name>-CACHE-FLUSH-<arg-name> Arg\n"
"      Flush all entries from the cache that have the value Arg for the "
"named\n"
"      arg.\n"
"\n"
"  <name>-CACHE-CLEAR\n"
"      Reinitialize the cache, invalidating all entries and allowing the\n"
"      arguments and result values to be GC'd.\n"
"\n"
"  These other keywords are defined:\n"
"\n"
"  :HASH-BITS <n>\n"
"      The size of the cache as a power of 2.\n"
"\n"
"  :HASH-FUNCTION function\n"
"      Some thing that can be placed in CAR position which will compute a "
"value\n"
"      between 0 and (1- (expt 2 <hash-bits>)).\n"
"\n"
"  :VALUES <n>\n"
"      The number of values cached.\n"
"\n"
"   :INIT-FORM <name>\n"
"      The DEFVAR for creating the cache is enclosed in a form with the\n"
"      specified name.  Default PROGN."
msgstr ""
"EFINEDAY-ASHHAY-ACHECAY Amenay ({(Argway-Amenay Esttay-Unctionfay)}*) {Eykay "
"Aluevay}*\n"
"  Efineday away ashhay achecay atthay associatesway omesay umbernay ofway "
"argumentway aluesvay otay away\n"
"  esultray aluevay.  Ethay Esttay-Unctionfay airedpay ithway eachway Argway-"
"Amenay isway usedway otay omparecay\n"
"  ethay aluevay orfay atthay argway inway away achecay entryway ithway away "
"uppliedsay argway.  Ethay\n"
"  Esttay-Unctionfay ustmay otnay errorway enwhay assedpay ILNAY asway itsway "
"irstfay argway, utbay eednay otnay\n"
"  eturnray anyway articularpay aluevay.  Esttay-Unctionfay aymay ebay anyway "
"ingthay atthay ancay ebay\n"
"  aceplay inway ARCAY ositionpay.\n"
"\n"
"  Amenay isway usedway otay efineday unctionsfay esethay unctionsfay:\n"
"\n"
"  <amenay>-ACHECAY-OOKUPLAY Argway*\n"
"      Eesay ifway erethay isway anway entryway orfay ethay ecifiedspay "
"Argsway inway ethay achecay.  Ethay ifway otnay\n"
"      esentpray, ethay :EFAULTDAY eywordkay (efaultday ILNAY) eterminesday "
"ethay esultray(s).\n"
"\n"
"  <amenay>-ACHECAY-ENTERWAY Argway* Aluevay*\n"
"      Encacheway ethay associationway ofway ethay ecifiedspay argsway ithway "
"Aluevay.\n"
"\n"
"  <amenay>-ACHECAY-USHFLAY-<argway-amenay> Argway\n"
"      Ushflay allway entriesway omfray ethay achecay atthay avehay ethay "
"aluevay Argway orfay ethay amednay\n"
"      argway.\n"
"\n"
"  <amenay>-ACHECAY-EARCLAY\n"
"      Einitializeray ethay achecay, invalidatingway allway entriesway andway "
"allowingway ethay\n"
"      argumentsway andway esultray aluesvay otay ebay CGAY'd.\n"
"\n"
"  Esethay otherway eywordskay areway efinedday:\n"
"\n"
"  :ASHHAY-ITSBAY <n>\n"
"      Ethay izesay ofway ethay achecay asway away owerpay ofway 2.\n"
"\n"
"  :ASHHAY-UNCTIONFAY unctionfay\n"
"      Omesay ingthay atthay ancay ebay acedplay inway ARCAY ositionpay "
"ichwhay illway omputecay away aluevay\n"
"      etweenbay 0 andway (1- (exptway 2 <ashhay-itsbay>)).\n"
"\n"
"  :ALUESVAY <n>\n"
"      Ethay umbernay ofway aluesvay achedcay.\n"
"\n"
"   :INITWAY-ORMFAY <amenay>\n"
"      Ethay EFVARDAY orfay eatingcray ethay achecay isway enclosedway inway "
"away ormfay ithway ethay\n"
"      ecifiedspay amenay.  Efaultday OGNPRAY."

#: target:code/extensions.lisp
msgid "Number of default values ~S differs from :VALUES ~D."
msgstr "Umbernay ofway efaultday aluesvay ~S iffersday omfray :ALUESVAY ~D."

#: target:code/extensions.lisp
msgid "Bad arg spec: ~S."
msgstr "Adbay argway ecspay: ~S."

#: target:code/extensions.lisp
msgid ""
"DEFUN-CACHED (Name {Key Value}*) ({(Arg-Name Test-Function)}*) Form*\n"
"  Some syntactic sugar for defining a function whose values are cached by\n"
"  DEFINE-HASH-CACHE."
msgstr ""
"EFUNDAY-ACHEDCAY (Amenay {Eykay Aluevay}*) ({(Argway-Amenay Esttay-"
"Unctionfay)}*) Ormfay*\n"
"  Omesay yntacticsay ugarsay orfay efiningday away unctionfay osewhay "
"aluesvay areway achedcay ybay\n"
"  EFINEDAY-ASHHAY-ACHECAY."

#: target:code/extensions.lisp
msgid ""
"Return an EQ hash of X.  The value of this hash for any given object can "
"(of\n"
"  course) change at arbitary times."
msgstr ""
"Eturnray anway EQWAY ashhay ofway X.  Ethay aluevay ofway isthay ashhay "
"orfay anyway ivengay objectway ancay (ofway\n"
"  oursecay) angechay atway arbitaryway imestay."

#: target:code/commandline.lisp
msgid "A list of all the command line arguments after --"
msgstr ""
"Away istlay ofway allway ethay ommandcay inelay argumentsway afterway --"

#: target:code/commandline.lisp
msgid ""
"A list of cmd-switch's representing the arguments used to invoke\n"
"  this process."
msgstr ""
"Away istlay ofway mdcay-witchsay's epresentingray ethay argumentsway usedway "
"otay invokeway\n"
"  isthay ocesspray."

#: target:code/commandline.lisp
msgid "The string name that was used to invoke this process."
msgstr ""
"Ethay ingstray amenay atthay asway usedway otay invokeway isthay ocesspray."

#: target:code/commandline.lisp
msgid "A list of words between the utility name and the first switch."
msgstr ""
"Away istlay ofway ordsway etweenbay ethay utilityway amenay andway ethay "
"irstfay witchsay."

#: target:code/commandline.lisp
msgid ""
"A list of strings obtained from the command line that invoked this process."
msgstr ""
"Away istlay ofway ingsstray obtainedway omfray ethay ommandcay inelay atthay "
"invokedway isthay ocesspray."

#: target:code/commandline.lisp
msgid "An Alist of (\"argument-name\" . demon-function)"
msgstr "Anway Alistway ofway (\"argumentway-amenay\" . emonday-unctionfay)"

#: target:code/commandline.lisp
msgid ""
"When True runs lisp with its input coming from standard-input.\n"
"   If an error is detected returns error code 1, otherwise 0."
msgstr ""
"Enwhay Uetray unsray isplay ithway itsway inputway omingcay omfray "
"tandardsay-inputway.\n"
"   Ifway anway errorway isway etectedday eturnsray errorway odecay 1, "
"otherwiseway 0."

#: target:code/commandline.lisp
msgid ""
"Accepts the name of a switch as a string and returns the value of the\n"
"   switch.  If no value was specified, then any following words are "
"returned.\n"
"   If there are no following words, then t is returned.  If the switch was "
"not\n"
"   specified, then nil is returned."
msgstr ""
"Acceptsway ethay amenay ofway away witchsay asway away ingstray andway "
"eturnsray ethay aluevay ofway ethay\n"
"   witchsay.  Ifway onay aluevay asway ecifiedspay, enthay anyway "
"ollowingfay ordsway areway eturnedray.\n"
"   Ifway erethay areway onay ollowingfay ordsway, enthay t isway "
"eturnedray.  Ifway ethay witchsay asway otnay\n"
"   ecifiedspay, enthay ilnay isway eturnedray."

#: target:code/commandline.lisp
msgid ""
"When set, invoking switch demons complains about illegal switches that have\n"
"   not been defined with DEFSWITCH."
msgstr ""
"Enwhay etsay, invokingway witchsay emonsday omplainscay aboutway illegalway "
"witchessay atthay avehay\n"
"   otnay eenbay efinedday ithway EFSWITCHDAY."

#: target:code/commandline.lisp
msgid "~S is an illegal switch"
msgstr "~S isway anway illegalway witchsay"

#: target:code/commandline.lisp
msgid ""
"Associates function with the switch name in *command-switch-demons*.  Name\n"
"   is a simple-string that does not begin with a hyphen, unless the switch "
"name\n"
"   really does begin with one.  Function is optional, but defining the "
"switch\n"
"   is necessary to keep invoking switch demons from complaining about "
"illegal\n"
"   switches.  This can be inhibited with *complain-about-illegal-switches*."
msgstr ""
"Associatesway unctionfay ithway ethay witchsay amenay inway *ommandcay-"
"witchsay-emonsday*.  Amenay\n"
"   isway away implesay-ingstray atthay oesday otnay eginbay ithway away "
"yphenhay, unlessway ethay witchsay amenay\n"
"   eallyray oesday eginbay ithway oneway.  Unctionfay isway optionalway, "
"utbay efiningday ethay witchsay\n"
"   isway ecessarynay otay eepkay invokingway witchsay emonsday omfray "
"omplainingcay aboutway illegalway\n"
"   witchessay.  Isthay ancay ebay inhibitedway ithway *omplaincay-aboutway-"
"illegalway-witchessay*."

#: target:code/commandline.lisp
msgid "a symbol or function"
msgstr "away ymbolsay orway unctionfay"

#: target:code/env-access.lisp
msgid ""
"Returns information about the symbol VAR in the lexical environment ENV.\n"
"Three values are returned:\n"
"  1) Type or binding of VAR.\n"
"     NIL           No definition or binding\n"
"     :special      VAR is special\n"
"     :lexical      VAR is lexical\n"
"     :symbol-macro VAR refers to a SYMBOL-MACROLET binding\n"
"     :constant     VAR refers to a named constant or VAR is a keyword\n"
"  2) non-NIL if there is a local binding\n"
"  3) An a-list containing information about any declarations that apply."
msgstr ""
"Eturnsray informationway aboutway ethay ymbolsay ARVAY inway ethay exicallay "
"environmentway ENVWAY.\n"
"Reethay aluesvay areway eturnedray:\n"
"  1) Ypetay orway indingbay ofway ARVAY.\n"
"     ILNAY           Onay efinitionday orway indingbay\n"
"     :ecialspay      ARVAY isway ecialspay\n"
"     :exicallay      ARVAY isway exicallay\n"
"     :ymbolsay-acromay ARVAY efersray otay away YMBOLSAY-ACROLETMAY "
"indingbay\n"
"     :onstantcay     ARVAY efersray otay away amednay onstantcay orway ARVAY "
"isway away eywordkay\n"
"  2) onnay-ILNAY ifway erethay isway away ocallay indingbay\n"
"  3) Anway away-istlay ontainingcay informationway aboutway anyway "
"eclarationsday atthay applyway."

#: target:code/env-access.lisp
msgid ""
"Returns information about declarations named by the symbol DECLARATION-"
"NAME.\n"
"Supported DECLARATION-NAMES are\n"
"  1) OPTIMIZE\n"
"     A list whose entries are of the form (QUALITY VALUE) is returned,\n"
"     where QUALITY and VALUE are standard optimization qualities and\n"
"     values.\n"
"  2) EXT:OPTIMIZE-INTERFACE\n"
"     Like OPTIMIZE, but for the EXT:OPTIMIZE-INTERFACE declaration.\n"
"  3) DECLARATION.\n"
"     A list of the declaration names the have been proclaimed as valid."
msgstr ""
"Eturnsray informationway aboutway eclarationsday amednay ybay ethay ymbolsay "
"ECLARATIONDAY-AMENAY.\n"
"Upportedsay ECLARATIONDAY-AMESNAY areway\n"
"  1) OPTIMIZEWAY\n"
"     Away istlay osewhay entriesway areway ofway ethay ormfay (ALITYQUAY "
"ALUEVAY) isway eturnedray,\n"
"     erewhay ALITYQUAY andway ALUEVAY areway tandardsay optimizationway "
"alitiesquay andway\n"
"     aluesvay.\n"
"  2) EXTWAY:OPTIMIZEWAY-INTERFACEWAY\n"
"     Ikelay OPTIMIZEWAY, utbay orfay ethay EXTWAY:OPTIMIZEWAY-INTERFACEWAY "
"eclarationday.\n"
"  3) ECLARATIONDAY.\n"
"     Away istlay ofway ethay eclarationday amesnay ethay avehay eenbay "
"oclaimedpray asway alidvay."

#: target:code/env-access.lisp
msgid "Unsupported declaration ~S."
msgstr "Unsupportedway eclarationday ~S."

#: target:code/env-access.lisp
msgid ""
"Process a macro in the same way that DEFMACRO or MACROLET would.\n"
"Three values are returned:\n"
"  1) A lambda-expression that accepts two arguments\n"
"  2) A form\n"
"  3) An environment"
msgstr ""
"Ocesspray away acromay inway ethay amesay ayway atthay EFMACRODAY orway "
"ACROLETMAY ouldway.\n"
"Reethay aluesvay areway eturnedray:\n"
"  1) Away ambdalay-expressionway atthay acceptsway wotay argumentsway\n"
"  2) Away ormfay\n"
"  3) Anway environmentway"

#: target:code/env-access.lisp
msgid ""
"Returns information about the function name FUNCTION in the lexical "
"environment ENV.\n"
"Three values are returned:\n"
"  1) Type of definition or binding:\n"
"     NIL          No apparent definition\n"
"    :function    FUNCTION refers to a function\n"
"    :macro        FUNCTION refers to a macro\n"
"    :special-form FUNCTION is a special form\n"
"  2) non-NIL if definition is local\n"
"  3) An a-list containing information about the declarations that apply."
msgstr ""
"Eturnsray informationway aboutway ethay unctionfay amenay UNCTIONFAY inway "
"ethay exicallay environmwayentway ENVWAY.\n"
"Reethay aluesvay areway eturnedray:\n"
"  1) Ypetay ofway efinitionday orway indingbay:\n"
"     ILNAY          Onay apparentway efinitionday\n"
"    :unctionfay    UNCTIONFAY efersray otay away unctionfay\n"
"    :acromay        UNCTIONFAY efersray otay away acromay\n"
"    :ecialspay-ormfay UNCTIONFAY isway away ecialspay ormfay\n"
"  2) onnay-ILNAY ifway efinitionday isway ocallay\n"
"  3) Anway away-istlay ontainingcay informationway aboutway ethay "
"eclarationsday atthay applyway."

#: target:code/env-access.lisp
msgid ""
"Return a new environment containing information in ENV that is augmented\n"
"by the specified parameters:\n"
"  :VARIABLE     a list of symbols visible as bound variables in the new\n"
"                environemnt\n"
"  :SYMBOL-MACRO a list of symbol macro definitions\n"
"  :FUNCTION     a list of function names that will be visible as local\n"
"                functions\n"
"  :MACRO        a list of local macro definitions\n"
"  :DECLARE      a list of declaration specifiers"
msgstr ""
"Eturnray away ewnay environmentway ontainingcay informationway inway ENVWAY "
"atthay isway augmentedway\n"
"ybay ethay ecifiedspay arameterspay:\n"
"  :ARIABLEVAY     away istlay ofway ymbolssay isiblevay asway oundbay "
"ariablesvay inway ethay ewnay\n"
"                environemntway\n"
"  :YMBOLSAY-ACROMAY away istlay ofway ymbolsay acromay efinitionsday\n"
"  :UNCTIONFAY     away istlay ofway unctionfay amesnay atthay illway ebay "
"isiblevay asway ocallay\n"
"                unctionsfay\n"
"  :ACROMAY        away istlay ofway ocallay acromay efinitionsday\n"
"  :ECLAREDAY      away istlay ofway eclarationday ecifiersspay"

#: target:code/dfixnum.lisp
msgid "increments dfixnum v by dfixnum i"
msgstr "incrementsway fixnumday v ybay fixnumday i"

#: target:code/dfixnum.lisp
msgid "dfixnum became too big ~a + ~a"
msgstr "fixnumday ecamebay ootay igbay ~away + ~away"

#: target:code/dfixnum.lisp
msgid "increments dfixnum v by i (max half fixnum)"
msgstr "incrementsway fixnumday v ybay i (axmay alfhay ixnumfay)"

#: target:code/dfixnum.lisp
msgid "not a half-fixnum: ~a"
msgstr "otnay away alfhay-ixnumfay: ~away"

#: target:code/dfixnum.lisp
msgid "decrement dfixnum v by dfixnum i"
msgstr "ecrementday fixnumday v ybay fixnumday i"

#: target:code/dfixnum.lisp
msgid "dfixnum became negative ~a - ~a (~a/~a)"
msgstr "fixnumday ecamebay egativenay ~away - ~away (~away/~away)"

#: target:code/dfixnum.lisp
msgid "decrement dfixnum v by half-fixnum i"
msgstr "ecrementday fixnumday v ybay alfhay-ixnumfay i"

#: target:code/dfixnum.lisp
msgid ""
"increments dfixnum by an interger which may be bigger than fixnum.\n"
"   May cons"
msgstr ""
"incrementsway fixnumday ybay anway intergerway ichwhay aymay ebay iggerbay "
"anthay ixnumfay.\n"
"   Aymay onscay"

#: target:code/dfixnum.lisp
msgid "returns a new dfixnum from number i"
msgstr "eturnsray away ewnay fixnumday omfray umbernay i"

#: target:code/dfixnum.lisp
msgid "increments a pair of halffixnums by another pair"
msgstr "incrementsway away airpay ofway alffixnumshay ybay anotherway airpay"

#: target:code/profile.lisp target:code/dfixnum.lisp
msgid "dfixnum became too big ~a/~a + ~a/~a"
msgstr "fixnumday ecamebay ootay igbay ~away/~away + ~away/~away"

#: target:code/dfixnum.lisp
msgid "decrement dfixnum pair by another pair"
msgstr "ecrementday fixnumday airpay ybay anotherway airpay"

#: target:code/profile.lisp target:code/dfixnum.lisp
msgid "dfixnum became negative ~a/~a - ~a/~a(~a/~a)"
msgstr "fixnumday ecamebay egativenay ~away/~away - ~away/~away(~away/~away)"

#: target:code/room.lisp
msgid "~2&Summary of spaces: ~(~{~A ~}~)~%"
msgstr "~2&Ummarysay ofway acesspay: ~(~{~Away ~}~)~%"

#: target:code/room.lisp
msgid "~%~A:~%    ~:D bytes, ~:D object~:P"
msgstr "~%~Away:~%    ~:D ytesbay, ~:D objectway~:P"

#: target:code/room.lisp
msgid "~%Summary total:~%    ~:D bytes, ~:D objects.~%"
msgstr "~%Ummarysay otaltay:~%    ~:D ytesbay, ~:D objectsway.~%"

#: target:code/room.lisp
msgid "~2&Breakdown for ~(~A~) space:~%"
msgstr "~2&Eakdownbray orfay ~(~Away~) acespay:~%"

#: target:code/room.lisp
msgid "  ~13:D bytes for ~9:D other object~2:*~P.~%"
msgstr "  ~13:D ytesbay orfay ~9:D otherway objectway~2:*~P.~%"

#: target:code/room.lisp
msgid "  ~13:D bytes for ~9:D ~(~A~) object~2:*~P.~%"
msgstr "  ~13:D ytesbay orfay ~9:D ~(~Away~) objectway~2:*~P.~%"

#: target:code/room.lisp
msgid "  ~13:D bytes for ~9:D ~(~A~) object~2:*~P (space total.)~%"
msgstr ""
"  ~13:D ytesbay orfay ~9:D ~(~Away~) objectway~2:*~P (acespay otaltay.)~%"

#: target:code/room.lisp
msgid ""
"Print out information about the heap memory in use.  :Print-Spaces is a "
"list\n"
"  of the spaces to print detailed information for.  :Count-Spaces is a list "
"of\n"
"  the spaces to scan.  For either one, T means all spaces (:Static, :"
"Dyanmic\n"
"  and :Read-Only.)  If :Print-Summary is true, then summary information will "
"be\n"
"  printed.  The defaults print only summary information for dynamic space.\n"
"  If true, Cutoff is a fraction of the usage in a report below which types "
"will\n"
"  be combined as OTHER."
msgstr ""
"Intpray outway informationway aboutway ethay eaphay emorymay inway useway.  :"
"Intpray-Acesspay isway away istlay\n"
"  ofway ethay acesspay otay intpray etailedday informationway orfay.  :"
"Ountcay-Acesspay isway away istlay ofway\n"
"  ethay acesspay otay anscay.  Orfay eitherway oneway, T eansmay allway "
"acesspay (:Taticsay, :Yanmicday\n"
"  andway :Eadray-Onlyway.)  Ifway :Intpray-Ummarysay isway uetray, enthay "
"ummarysay informationway illway ebay\n"
"  intedpray.  Ethay efaultsday intpray onlyway ummarysay informationway "
"orfay ynamicday acespay.\n"
"  Ifway uetray, Utoffcay isway away actionfray ofway ethay usageway inway "
"away eportray elowbay ichwhay ypestay illway\n"
"  ebay ombinedcay asway OTHERWAY."

#: target:code/room.lisp
msgid "Print info about how much code and no-ops there are in Space."
msgstr ""
"Intpray infoway aboutway owhay uchmay odecay andway onay-opsway erethay "
"areway inway Acespay."

#: target:code/room.lisp
msgid "~:D code-object bytes, ~:D code words, with ~:D no-ops (~D%).~%"
msgstr ""
"~:D odecay-objectway ytesbay, ~:D odecay ordsway, ithway ~:D onay-opsway (~D"
"%).~%"

#: target:code/room.lisp
msgid "Bogus type: ~D"
msgstr "Ogusbay ypetay: ~D"

#: target:code/room.lisp
msgid "~:D words allocated for descriptor objects.~%"
msgstr "~:D ordsway allocatedway orfay escriptorday objectsway.~%"

#: target:code/room.lisp
msgid "~:D bytes data/~:D words header for non-descriptor objects.~%"
msgstr ""
"~:D ytesbay ataday/~:D ordsway eaderhay orfay onnay-escriptorday objectsway.~"
"%"

#: target:code/room.lisp
msgid ""
"Print a breakdown by instance type of all the instances allocated in\n"
"  Space.  If TOP-N is true, print only information for the the TOP-N types "
"with\n"
"  largest usage."
msgstr ""
"Intpray away eakdownbray ybay instanceway ypetay ofway allway ethay "
"instancesway allocatedway inway\n"
"  Acespay.  Ifway OPTAY-N isway uetray, intpray onlyway informationway orfay "
"ethay ethay OPTAY-N ypestay ithway\n"
"  argestlay usageway."

#: target:code/room.lisp
msgid "~2&~@[Top ~D ~]~(~A~) instance types:~%"
msgstr "~2&~@[Optay ~D ~]~(~Away~) instanceway ypestay:~%"

#: target:code/room.lisp
msgid "  ~32A: ~7:D bytes, ~5D object~:P.~%"
msgstr "  ~32Away: ~7:D ytesbay, ~5D objectway~:P.~%"

#: target:code/room.lisp
msgid "  Other types: ~:D bytes, ~D: object~:P.~%"
msgstr "  Otherway ypestay: ~:D ytesbay, ~D: objectway~:P.~%"

#: target:code/room.lisp
msgid "  ~:(~A~) instance total: ~:D bytes, ~:D object~:P.~%"
msgstr "  ~:(~Away~) instanceway otaltay: ~:D ytesbay, ~:D objectway~:P.~%"

#: target:code/room.lisp
msgid "In ~A space:~%"
msgstr "Inway ~Away acespay:~%"

#: target:code/room.lisp
msgid "~D bytes at #x~X~%"
msgstr "~D ytesbay atway #x~X~%"

#: target:code/room.lisp
msgid "No source for ~S"
msgstr "Onay ourcesay orfay ~S"

#: target:code/room.lisp
msgid "~%Package ~A: ~32T~9:D bytes, ~9:D object~:P.~%"
msgstr "~%Ackagepay ~Away: ~32T~9:D ytesbay, ~9:D objectway~:P.~%"

#: target:code/room.lisp
msgid "~30@A: ~9:D bytes, ~9:D object~:P.~%"
msgstr "~30@Away: ~9:D ytesbay, ~9:D objectway~:P.~%"

#: target:code/room.lisp
msgid ""
"Given a hashtable, print a histogram of the contents.  Function should give\n"
"  the value to plot when applied to the hashtable values."
msgstr ""
"Ivengay away ashtablehay, intpray away istogramhay ofway ethay ontentscay.  "
"Unctionfay ouldshay ivegay\n"
"  ethay aluevay otay otplay enwhay appliedway otay ethay ashtablehay "
"aluesvay."

#: target:code/room.lisp
msgid ""
"Report the Top-N entries in the hashtable Table, when sorted by Function\n"
"  applied to the hash value.  If Top-N is NIL, report all entries."
msgstr ""
"Eportray ethay Optay-N entriesway inway ethay ashtablehay Abletay, enwhay "
"ortedsay ybay Unctionfay\n"
"  appliedway otay ethay ashhay aluevay.  Ifway Optay-N isway ILNAY, eportray "
"allway entriesway."

#: target:code/room.lisp
msgid "~8:D: Other~%"
msgstr "~8:D: Otherway~%"

#: target:code/room.lisp
msgid "~8:D: Total~%"
msgstr "~8:D: Otaltay~%"

#: target:code/room.lisp
msgid ""
"Return a hashtable mapping each function in for which a call appears in\n"
"  Space to the number of times such a call appears."
msgstr ""
"Eturnray away ashtablehay appingmay eachway unctionfay inway orfay ichwhay "
"away allcay appearsway inway\n"
"  Acespay otay ethay umbernay ofway imestay uchsay away allcay appearsway."

#: target:code/room.lisp
msgid ""
"Return a hashtable translating code objects to function constant counts for\n"
"  all code objects in Space with more than Above function constants."
msgstr ""
"Eturnray away ashtablehay anslatingtray odecay objectsway otay unctionfay "
"onstantcay ountscay orfay\n"
"  allway odecay objectsway inway Acespay ithway oremay anthay Aboveway "
"unctionfay onstantscay."

#: target:code/gc.lisp
msgid "Oh no.  The current dynamic space is missing!"
msgstr "Ohway onay.  Ethay urrentcay ynamicday acespay isway issingmay!"

#: target:code/gc.lisp
msgid "Dynamic Space Usage:    ~13:D bytes (out of ~4:D MB).~%"
msgstr ""
"Ynamicday Acespay Usageway:    ~13:D ytesbay (outway ofway ~4:D BMAY).~%"

#: target:code/gc.lisp
msgid "Read-Only Space Usage:  ~13:D bytes (out of ~4:D MB).~%"
msgstr ""
"Eadray-Onlyway Acespay Usageway:  ~13:D ytesbay (outway ofway ~4:D BMAY).~%"

#: target:code/gc.lisp
msgid "Static Space Usage:     ~13:D bytes (out of ~4:D MB).~%"
msgstr ""
"Taticsay Acespay Usageway:     ~13:D ytesbay (outway ofway ~4:D BMAY).~%"

#: target:code/gc.lisp
msgid "Control Stack Usage:    ~13:D bytes (out of ~4:D MB).~%"
msgstr ""
"Ontrolcay Tacksay Usageway:    ~13:D ytesbay (outway ofway ~4:D BMAY).~%"

#: target:code/gc.lisp
msgid "Binding Stack Usage:    ~13:D bytes (out of ~4:D MB).~%"
msgstr ""
"Indingbay Tacksay Usageway:    ~13:D ytesbay (outway ofway ~4:D BMAY).~%"

#: target:code/gc.lisp
msgid "The current dynamic space is ~D.~%"
msgstr "Ethay urrentcay ynamicday acespay isway ~D.~%"

#: target:code/gc.lisp
msgid "Garbage collection is currently ~:[enabled~;DISABLED~].~%"
msgstr ""
"Arbagegay ollectioncay isway urrentlycay ~:[enabledway~;ISABLEDDAY~].~%"

#: target:code/gc.lisp
msgid ""
"Prints to *STANDARD-OUTPUT* information about the state of internal\n"
"  storage and its management.  The optional argument controls the\n"
"  verbosity of ROOM.  If it is T, ROOM prints out a maximal amount of\n"
"  information.  If it is NIL, ROOM prints out a minimal amount of\n"
"  information.  If it is :DEFAULT or it is not supplied, ROOM prints out\n"
"  an intermediate amount of information.  See also VM:MEMORY-USAGE and\n"
"  VM:INSTANCE-USAGE for finer report control."
msgstr ""
"Intspray otay *TANDARDSAY-OUTPUTWAY* informationway aboutway ethay tatesay "
"ofway internalway\n"
"  toragesay andway itsway anagementmay.  Ethay optionalway argumentway "
"ontrolscay ethay\n"
"  erbosityvay ofway OOMRAY.  Ifway itway isway T, OOMRAY intspray outway "
"away aximalmay amountway ofway\n"
"  informationway.  Ifway itway isway ILNAY, OOMRAY intspray outway away "
"inimalmay amountway ofway\n"
"  informationway.  Ifway itway isway :EFAULTDAY orway itway isway otnay "
"uppliedsay, OOMRAY intspray outway\n"
"  anway intermediateway amountway ofway informationway.  Eesay alsoway MVAY:"
"EMORYMAY-USAGEWAY andway\n"
"  MVAY:INSTANCEWAY-USAGEWAY orfay inerfay eportray ontrolcay."

#: target:code/gc.lisp
msgid ""
"No way man!  The optional argument to ROOM must be T, NIL, ~\n"
"\t\t or :DEFAULT.~%What do you think you are doing?"
msgstr ""
"Onay ayway anmay!  Ethay optionalway argumentway otay OOMRAY ustmay ebay T, "
"ILNAY, ~\n"
"\t\t orway :EFAULTDAY.~%Atwhay oday ouyay inkthay ouyay areway oingday?"

#: target:code/gc.lisp
msgid "resetting GC counters"
msgstr "esettingray CGAY ounterscay"

#: target:code/gc.lisp
msgid ""
"Returns the number of bytes consed since the first time this function\n"
"  was called.  The first time it is called, it returns zero."
msgstr ""
"Eturnsray ethay umbernay ofway ytesbay onsedcay incesay ethay irstfay imetay "
"isthay unctionfay\n"
"  asway alledcay.  Ethay irstfay imetay itway isway alledcay, itway "
"eturnsray erozay."

#: target:code/gc.lisp
msgid ""
"This number specifies the minimum number of bytes of dynamic space\n"
"   that must be consed before the next gc will occur."
msgstr ""
"Isthay umbernay ecifiesspay ethay inimummay umbernay ofway ytesbay ofway "
"ynamicday acespay\n"
"   atthay ustmay ebay onsedcay eforebay ethay extnay cgay illway occurway."

#: target:code/gc.lisp
msgid ""
"The total CPU time spend doing garbage collection (as reported by\n"
"   GET-INTERNAL-RUN-TIME.)"
msgstr ""
"Ethay otaltay PUCAY imetay endspay oingday arbagegay ollectioncay (asway "
"eportedray ybay\n"
"   ETGAY-INTERNALWAY-UNRAY-IMETAY.)"

#: target:code/gc.lisp
msgid ""
"A list of functions that are called before garbage collection occurs.\n"
"  The functions should take no arguments."
msgstr ""
"Away istlay ofway unctionsfay atthay areway alledcay eforebay arbagegay "
"ollectioncay occursway.\n"
"  Ethay unctionsfay ouldshay aketay onay argumentsway."

#: target:code/gc.lisp
msgid ""
"A list of functions that are called after garbage collection occurs.\n"
"  The functions should take no arguments."
msgstr ""
"Away istlay ofway unctionsfay atthay areway alledcay afterway arbagegay "
"ollectioncay occursway.\n"
"  Ethay unctionsfay ouldshay aketay onay argumentsway."

#: target:code/gc.lisp
msgid ""
"Should be bound to a function or NIL.  If it is a function, this\n"
"  function should take one argument, the current amount of dynamic\n"
"  usage.  The function should return NIL if garbage collection should\n"
"  continue and non-NIL if it should be inhibited.  Use with caution."
msgstr ""
"Ouldshay ebay oundbay otay away unctionfay orway ILNAY.  Ifway itway isway "
"away unctionfay, isthay\n"
"  unctionfay ouldshay aketay oneway argumentway, ethay urrentcay amountway "
"ofway ynamicday\n"
"  usageway.  Ethay unctionfay ouldshay eturnray ILNAY ifway arbagegay "
"ollectioncay ouldshay\n"
"  ontinuecay andway onnay-ILNAY ifway itway ouldshay ebay inhibitedway.  "
"Useway ithway autioncay."

#: target:code/gc.lisp
msgid ""
"When non-NIL, causes the functions bound to *GC-NOTIFY-BEFORE* and\n"
"  *GC-NOTIFY-AFTER* to be called before and after a garbage collection\n"
"  occurs respectively.  If :BEEP, causes the default notify functions to "
"beep\n"
"  annoyingly."
msgstr ""
"Enwhay onnay-ILNAY, ausescay ethay unctionsfay oundbay otay *CGAY-OTIFYNAY-"
"EFOREBAY* andway\n"
"  *CGAY-OTIFYNAY-AFTERWAY* otay ebay alledcay eforebay andway afterway away "
"arbagegay ollectioncay\n"
"  occursway espectivelyray.  Ifway :EEPBAY, ausescay ethay efaultday "
"otifynay unctionsfay otay eepbay\n"
"  annoyinglyway."

#: target:code/gc.lisp
msgid ""
"~&; [GC threshold exceeded with ~:D bytes in use.  ~\n"
"             Commencing GC.]~%"
msgstr ""
"~&; [CGAY resholdthay exceededway ithway ~:D ytesbay inway useway.  ~\n"
"             Ommencingcay CGAY.]~%"

#: target:code/gc.lisp
msgid ""
"This function bound to this variable is invoked before GC'ing (unless\n"
"  *GC-VERBOSE* is NIL) with the current amount of dynamic usage (in\n"
"  bytes).  It should notify the user that the system is going to GC."
msgstr ""
"Isthay unctionfay oundbay otay isthay ariablevay isway invokedway eforebay "
"CGAY'ingway (unlessway\n"
"  *CGAY-ERBOSEVAY* isway ILNAY) ithway ethay urrentcay amountway ofway "
"ynamicday usageway (inway\n"
"  ytesbay).  Itway ouldshay otifynay ethay userway atthay ethay ystemsay "
"isway oinggay otay CGAY."

#: target:code/gc.lisp
msgid "~&; [GC completed with ~:D bytes retained and ~:D bytes freed.]~%"
msgstr ""
"~&; [CGAY ompletedcay ithway ~:D ytesbay etainedray andway ~:D ytesbay "
"eedfray.]~%"

#: target:code/gc.lisp
msgid "~&; [GC will next occur when at least ~:D bytes are in use.]~%"
msgstr ""
"~&; [CGAY illway extnay occurway enwhay atway eastlay ~:D ytesbay areway "
"inway useway.]~%"

#: target:code/gc.lisp
msgid ""
"The function bound to this variable is invoked after GC'ing (unless\n"
"  *GC-VERBOSE* is NIL) with the amount of dynamic usage (in bytes) now\n"
"  free, the number of bytes freed by the GC, and the new GC trigger\n"
"  threshold.  The function should notify the user that the system has\n"
"  finished GC'ing."
msgstr ""
"Ethay unctionfay oundbay otay isthay ariablevay isway invokedway afterway "
"CGAY'ingway (unlessway\n"
"  *CGAY-ERBOSEVAY* isway ILNAY) ithway ethay amountway ofway ynamicday "
"usageway (inway ytesbay) ownay\n"
"  eefray, ethay umbernay ofway ytesbay eedfray ybay ethay CGAY, andway ethay "
"ewnay CGAY iggertray\n"
"  resholdthay.  Ethay unctionfay ouldshay otifynay ethay userway atthay "
"ethay ystemsay ashay\n"
"  inishedfay CGAY'ingway."

#: target:code/gc.lisp
msgid "Attempt to set GC trigger to something bogus: ~S"
msgstr "Attemptway otay etsay CGAY iggertray otay omethingsay ogusbay: ~S"

#: target:code/gc.lisp
msgid "(FUNCALL ~S~{ ~S~}) lost:~%~A"
msgstr "(UNCALLFAY ~S~{ ~S~}) ostlay:~%~Away"

#: target:code/gc.lisp
msgid ""
"The value of *BYTES-CONSED-BETWEEN-GCS*, ~S, is not an ~\n"
"\t       integer.  Resetting it to ~D."
msgstr ""
"Ethay aluevay ofway *YTESBAY-ONSEDCAY-ETWEENBAY-CSGAY*, ~S, isway otnay "
"anway ~\n"
"\t       integerway.  Esettingray itway otay ~D."

#: target:code/gc.lisp
msgid "~&Adjusting *last-bytes-in-use* from ~:D to ~:D, gen ~d, pre ~:D ~%"
msgstr ""
"~&Adjustingway *astlay-ytesbay-inway-useway* omfray ~:D otay ~:D, engay ~d, "
"epray ~:D ~%"

#: target:code/gc.lisp
msgid ""
"Initiates a garbage collection.  The optional argument, VERBOSE-P,\n"
"  which defaults to the value of the variable *GC-VERBOSE* controls\n"
"  whether or not GC statistics are printed."
msgstr ""
"Initiatesway away arbagegay ollectioncay.  Ethay optionalway argumentway, "
"ERBOSEVAY-P,\n"
"  ichwhay efaultsday otay ethay aluevay ofway ethay ariablevay *CGAY-"
"ERBOSEVAY* ontrolscay\n"
"  etherwhay orway otnay CGAY tatisticssay areway intedpray."

#: target:code/gc.lisp
msgid ""
"Initiates a garbage collection.  The keyword :VERBOSE, which\n"
"   defaults to the value of the variable *GC-VERBOSE* controls whether or\n"
"   not GC statistics are printed. The keyword :GEN defaults to 0, and\n"
"   controls the number of generations to garbage collect."
msgstr ""
"Initiatesway away arbagegay ollectioncay.  Ethay eywordkay :ERBOSEVAY, "
"ichwhay\n"
"   efaultsday otay ethay aluevay ofway ethay ariablevay *CGAY-ERBOSEVAY* "
"ontrolscay etherwhay orway\n"
"   otnay CGAY tatisticssay areway intedpray. Ethay eywordkay :ENGAY "
"efaultsday otay 0, andway\n"
"   ontrolscay ethay umbernay ofway enerationsgay otay arbagegay ollectcay."

#: target:code/gc.lisp
msgid ""
"Return the amount of memory that will be allocated before the next garbage\n"
"   collection is initiated.  This can be set with SETF."
msgstr ""
"Eturnray ethay amountway ofway emorymay atthay illway ebay allocatedway "
"eforebay ethay extnay arbagegay\n"
"   ollectioncay isway initiatedway.  Isthay ancay ebay etsay ithway ETFSAY."

#: target:code/gc.lisp
msgid "Enables the garbage collector."
msgstr "Enablesway ethay arbagegay ollectorcay."

#: target:code/gc.lisp
msgid "Disables the garbage collector."
msgstr "Isablesday ethay arbagegay ollectorcay."

#: target:code/gc.lisp
msgid ""
"Return some GC statistics for the specified GENERATION.  The\n"
"  statistics are the number of bytes allocated in this generation; the\n"
"  gc-trigger; the number of bytes consed between GCs; the number of\n"
"  GCs that have occurred; the trigger age; the cumulative number of\n"
"  bytes allocated in this generation; and the average age of this\n"
"  generation.  See the gencgc source code for more info."
msgstr ""
"Eturnray omesay CGAY tatisticssay orfay ethay ecifiedspay ENERATIONGAY.  "
"Ethay\n"
"  tatisticssay areway ethay umbernay ofway ytesbay allocatedway inway isthay "
"enerationgay; ethay\n"
"  cgay-iggertray; ethay umbernay ofway ytesbay onsedcay etweenbay Csgay; "
"ethay umbernay ofway\n"
"  Csgay atthay avehay occurredway; ethay iggertray ageway; ethay "
"umulativecay umbernay ofway\n"
"  ytesbay allocatedway inway isthay enerationgay; andway ethay averageway "
"ageway ofway isthay\n"
"  enerationgay.  Eesay ethay encgcgay ourcesay odecay orfay oremay infoway."

#: target:code/purify.lisp
msgid ""
"This function optimizes garbage collection by moving all currently live\n"
"   objects into non-collected storage.  ROOT-STRUCTURES is an optional list "
"of\n"
"   objects which should be copied first to maximize locality.\n"
"\n"
"   DEFSTRUCT structures defined with the (:PURE T) option are moved into\n"
"   read-only storage, further reducing GC cost.  List and vector slots of "
"pure\n"
"   structures are also moved into read-only storage.\n"
"\n"
"   ENVIRONMENT-NAME is gratuitous documentation for compacted version of "
"the\n"
"   current global environment (as seen in C::*INFO-ENVIRONMENT*.)  If NIL "
"is\n"
"   supplied, then environment compaction is inhibited."
msgstr ""
"Isthay unctionfay optimizesway arbagegay ollectioncay ybay ovingmay allway "
"urrentlycay ivelay\n"
"   objectsway intoway onnay-ollectedcay toragesay.  OOTRAY-UCTURESSTRAY "
"isway anway optionalway istlay ofway\n"
"   objectsway ichwhay ouldshay ebay opiedcay irstfay otay aximizemay "
"ocalitylay.\n"
"\n"
"   EFSTRUCTDAY ucturesstray efinedday ithway ethay (:UREPAY T) optionway "
"areway ovedmay intoway\n"
"   eadray-onlyway toragesay, urtherfay educingray CGAY ostcay.  Istlay "
"andway ectorvay otsslay ofway urepay\n"
"   ucturesstray areway alsoway ovedmay intoway eadray-onlyway toragesay.\n"
"\n"
"   ENVIRONMENTWAY-AMENAY isway atuitousgray ocumentationday orfay "
"ompactedcay ersionvay ofway ethay\n"
"   urrentcay obalglay environmentway (asway eensay inway C::*INFOWAY-"
"ENVIRONMENTWAY*.)  Ifway ILNAY isway\n"
"   uppliedsay, enthay environmentway ompactioncay isway inhibitedway."

#: target:code/purify.lisp
msgid "[Doing purification: "
msgstr "[Oingday urificationpay: "

#: target:code/purify.lisp
msgid "Done.]"
msgstr "Oneday.]"

#: target:code/scavhook.lisp
msgid "Returns T if OBJECT is a scavenger-hook, and NIL if not."
msgstr ""
"Eturnsray T ifway OBJECTWAY isway away avengerscay-ookhay, andway ILNAY "
"ifway otnay."

#: target:code/scavhook.lisp
msgid ""
"Create a new scavenger-hook with the specified VALUE and FUNCTION.  For\n"
"   as long as the scavenger-hook is alive, the scavenger in the garbage\n"
"   collector will note whenever VALUE is moved, and arrange for FUNCTION\n"
"   to be funcalled."
msgstr ""
"Eatecray away ewnay avengerscay-ookhay ithway ethay ecifiedspay ALUEVAY "
"andway UNCTIONFAY.  Orfay\n"
"   asway onglay asway ethay avengerscay-ookhay isway aliveway, ethay "
"avengerscay inway ethay arbagegay\n"
"   ollectorcay illway otenay eneverwhay ALUEVAY isway ovedmay, andway "
"arrangeway orfay UNCTIONFAY\n"
"   otay ebay uncalledfay."

#: target:code/scavhook.lisp
msgid "Returns the VALUE being monitored by SCAVHOOK.  Can be setf."
msgstr ""
"Eturnsray ethay ALUEVAY eingbay onitoredmay ybay AVHOOKSCAY.  Ancay ebay "
"etfsay."

#: target:code/scavhook.lisp
msgid ""
"Returns the FUNCTION invoked when the monitored value is moved.  Can be\n"
"   setf."
msgstr ""
"Eturnsray ethay UNCTIONFAY invokedway enwhay ethay onitoredmay aluevay isway "
"ovedmay.  Ancay ebay\n"
"   etfsay."

#: target:code/save.lisp
msgid ""
"This is a list of functions which are called before creating a saved core\n"
"  image.  These functions are executed in the child process which has no "
"ports,\n"
"  so they cannot do anything that tries to talk to the outside world."
msgstr ""
"Isthay isway away istlay ofway unctionsfay ichwhay areway alledcay eforebay "
"eatingcray away avedsay orecay\n"
"  imageway.  Esethay unctionsfay areway executedway inway ethay ildchay "
"ocesspray ichwhay ashay onay ortspay,\n"
"  osay eythay annotcay oday anythingway atthay iestray otay alktay otay "
"ethay outsideway orldway."

#: target:code/save.lisp
msgid ""
"This is a list of functions which are called when a saved core image starts\n"
"  up.  The system itself should be initialized at this point, but "
"applications\n"
"  might not be."
msgstr ""
"Isthay isway away istlay ofway unctionsfay ichwhay areway alledcay enwhay "
"away avedsay orecay imageway tartssay\n"
"  upway.  Ethay ystemsay itselfway ouldshay ebay initializedway atway isthay "
"ointpay, utbay applicatiowaysnay\n"
"  ightmay otnay ebay."

#: target:code/save.lisp
msgid "An alist mapping environment variables (as keywords) to either values"
msgstr ""
"Anway alistway appingmay environmentway ariablesvay (asway eywordskay) otay "
"eitherway aluesvay"

#: target:code/save.lisp
msgid "Non-NIL if environment-init has been called"
msgstr "Onnay-ILNAY ifway environmentway-initway ashay eenbay alledcay"

#: target:code/save.lisp
msgid "This is true if and only if the lisp was started with the -edit switch."
msgstr ""
"Isthay isway uetray ifway andway onlyway ifway ethay isplay asway tartedsay "
"ithway ethay -editway witchsay."

#: target:code/save.lisp
msgid ""
"Saves a CMU Common Lisp core image in the file of the specified name.  The\n"
"  following keywords are defined:\n"
"  \n"
"  :purify\n"
"      If true (the default), do a purifying GC which moves all dynamically\n"
"  allocated objects into static space so that they stay pure.  This takes\n"
"  somewhat longer than the normal GC which is otherwise done, but GC's will\n"
"  be done less often and take less time in the resulting core file.  See\n"
"  EXT:PURIFY.\n"
"\n"
"  :root-structures\n"
"      This should be a list of the main entry points in any newly loaded\n"
"  systems.  This need not be supplied, but locality and/or GC performance\n"
"  will be better if they are.  Meaningless if :purify is NIL.  See EXT:"
"PURIFY.\n"
"\n"
"  :environment-name\n"
"      Also passed to EXT:PURIFY when :PURIFY is T.  Rarely used.\n"
"  \n"
"  :init-function\n"
"      This is the function that starts running when the created core file "
"is\n"
"  resumed.  The default function simply invokes the top level\n"
"  read-eval-print loop.  If the function returns the lisp will exit.\n"
"  \n"
"  :load-init-file\n"
"      If true, then look for an init.lisp or init.fasl file when the core\n"
"  file is resumed.\n"
"\n"
"  :site-init\n"
"      If true, then the name of the site init file to load.  The default is\n"
"      library:site-init.  No error if this does not exist.\n"
"\n"
"  :print-herald\n"
"      If true (the default), print out the lisp system herald when "
"starting.\n"
"\n"
"  :process-command-line\n"
"      If true (the default), process command-line switches via the normal\n"
"  mechanisms, otherwise ignore all switches (except those processed by the\n"
"  C startup code).\n"
"\n"
"  :executable\n"
"      If nil (the default), save-lisp will save using the traditional\n"
"   core-file format.  If true, save-lisp will create an executable\n"
"   file that contains the lisp image built in. \n"
"   (Not all architectures support this yet.)\n"
"\n"
"  :batch-mode\n"
"      If nil (the default), then the presence of the -batch command-line\n"
"  switch will invoke batch-mode processing.  If true, the produced core\n"
"  will always be in batch-mode, regardless of any command-line switches."
msgstr ""
"Avessay away MUCAY Ommoncay Isplay orecay imageway inway ethay ilefay ofway "
"ethay ecifiedspay amenay.  Ethay\n"
"  ollowingfay eywordskay areway efinedday:\n"
"  \n"
"  :urifypay\n"
"      Ifway uetray (ethay efaultday), oday away urifyingpay CGAY ichwhay "
"ovesmay allway ynamicallyday\n"
"  allocatedway objectsway intoway taticsay acespay osay atthay eythay taysay "
"urepay.  Isthay akestay\n"
"  omewhatsay ongerlay anthay ethay ormalnay CGAY ichwhay isway otherwiseway "
"oneday, utbay CGAY's illway\n"
"  ebay oneday esslay oftenway andway aketay esslay imetay inway ethay "
"esultingray orecay ilefay.  Eesay\n"
"  EXTWAY:URIFYPAY.\n"
"\n"
"  :ootray-ucturesstray\n"
"      Isthay ouldshay ebay away istlay ofway ethay ainmay entryway ointspay "
"inway anyway ewlynay oadedlay\n"
"  ystemssay.  Isthay eednay otnay ebay uppliedsay, utbay ocalitylay andway/"
"orway CGAY erformancepay\n"
"  illway ebay etterbay ifway eythay areway.  Eaninglessmay ifway :urifypay "
"isway ILNAY.  Eesay EXTWAY:URIFPAYY.\n"
"\n"
"  :environmentway-amenay\n"
"      Alsoway assedpay otay EXTWAY:URIFYPAY enwhay :URIFYPAY isway T.  "
"Arelyray usedway.\n"
"  \n"
"  :initway-unctionfay\n"
"      Isthay isway ethay unctionfay atthay tartssay unningray enwhay ethay "
"eatedcray orecay ilefay isway\n"
"  esumedray.  Ethay efaultday unctionfay implysay invokesway ethay optay "
"evellay\n"
"  eadray-evalway-intpray ooplay.  Ifway ethay unctionfay eturnsray ethay "
"isplay illway exitway.\n"
"  \n"
"  :oadlay-initway-ilefay\n"
"      Ifway uetray, enthay ooklay orfay anway initway.isplay orway initway."
"aslfay ilefay enwhay ethay orecay\n"
"  ilefay isway esumedray.\n"
"\n"
"  :itesay-initway\n"
"      Ifway uetray, enthay ethay amenay ofway ethay itesay initway ilefay "
"otay oadlay.  Ethay efaultday isway\n"
"      ibrarylay:itesay-initway.  Onay errorway ifway isthay oesday otnay "
"existway.\n"
"\n"
"  :intpray-eraldhay\n"
"      Ifway uetray (ethay efaultday), intpray outway ethay isplay ystemsay "
"eraldhay enwhay tartingsay.\n"
"\n"
"  :ocesspray-ommandcay-inelay\n"
"      Ifway uetray (ethay efaultday), ocesspray ommandcay-inelay witchessay "
"iavay ethay ormalnay\n"
"  echanismsmay, otherwiseway ignoreway allway witchessay (exceptway osethay "
"ocessedpray ybay ethay\n"
"  C tartupsay odecay).\n"
"\n"
"  :executableway\n"
"      Ifway ilnay (ethay efaultday), avesay-isplay illway avesay usingway "
"ethay aditionaltray\n"
"   orecay-ilefay ormatfay.  Ifway uetray, avesay-isplay illway eatecray "
"anway executableway\n"
"   ilefay atthay ontainscay ethay isplay imageway uiltbay inway. \n"
"   (Otnay allway architecturesway upportsay isthay etyay.)\n"
"\n"
"  :atchbay-odemay\n"
"      Ifway ilnay (ethay efaultday), enthay ethay esencepray ofway ethay -"
"atchbay ommandcay-inelay\n"
"  witchsay illway invokeway atchbay-odemay ocessingpray.  Ifway uetray, "
"ethay oducedpray orecay\n"
"  illway alwaysway ebay inway atchbay-odemay, egardlessray ofway anyway "
"ommandcay-inelay witchessay."

#: target:code/save.lisp
msgid "Directory ~S does not exist"
msgstr "Irectoryday ~S oesday otnay existway"

#: target:code/save.lisp
msgid "Skip remaining initializations."
msgstr "Kipsay emainingray initializationsway."

#: target:code/save.lisp
msgid "Error in batch processing:~%~A~%"
msgstr "Errorway inway atchbay ocessingpray:~%~Away~%"

#: target:code/save.lisp
msgid ""
"Determines what PRINT-HERALD prints (the system startup banner.)  This is a\n"
"   database which can be augmented by each loaded system.  The format is a\n"
"   property list which maps from subsystem names to the banner information "
"for\n"
"   that system.  This list can be manipulated with GETF -- entries are "
"printed\n"
"   in, reverse order, so the newest entry is printed last.  Usually the "
"system\n"
"   feature keyword is used as the system name.  A given banner is a list of\n"
"   strings and functions (or function names).  Strings are printed, and\n"
"   functions are called with an output stream argument."
msgstr ""
"Eterminesday atwhay INTPRAY-ERALDHAY intspray (ethay ystemsay tartupsay "
"annerbay.)  Isthay isway away\n"
"   atabaseday ichwhay ancay ebay augmentedway ybay eachway oadedlay "
"ystemsay.  Ethay ormatfay isway away\n"
"   opertypray istlay ichwhay apsmay omfray ubsystemsay amesnay otay ethay "
"annerbay informationway orfay\n"
"   atthay ystemsay.  Isthay istlay ancay ebay anipulatedmay ithway ETFGAY -- "
"entriesway areway intedpray\n"
"   inway, everseray orderway, osay ethay ewestnay entryway isway intedpray "
"astlay.  Usuallyway ethay ystemsay\n"
"   eaturefay eywordkay isway usedway asway ethay ystemsay amenay.  Away "
"ivengay annerbay isway away istlay ofway\n"
"   ingsstray andway unctionsfay (orway unctionfay amesnay).  Ingsstray "
"areway intedpray, andway\n"
"   unctionsfay areway alledcay ithway anway outputway eamstray argumentway."

#: target:code/save.lisp
msgid ", running on "
msgstr ", unningray onway "

#: target:code/save.lisp
msgid "With core: "
msgstr "Ithway orecay: "

#: target:code/save.lisp
msgid "Dumped on: "
msgstr "Umpedday onway: "

#: target:code/save.lisp
msgid " on "
msgstr " onway "

#: target:code/save.lisp
msgid "See <http://www.cons.org/cmucl/> for support information."
msgstr ""
"Eesay <ttphay://wwway.onscay.orgway/muclcay/> orfay upportsay informationway."

#: target:code/save.lisp
msgid "Loaded subsystems:"
msgstr "Oadedlay ubsystemssay:"

#: target:code/save.lisp
msgid "    Unicode "
msgstr "    Unicodeway "

#: target:code/save.lisp
msgid "with Unicode version "
msgstr "ithway Unicodeway ersionvay "

#: target:code/save.lisp
msgid ""
"Print some descriptive information about the Lisp system version and\n"
"   configuration."
msgstr ""
"Intpray omesay escriptiveday informationway aboutway ethay Isplay ystemsay "
"ersionvay andway\n"
"   onfigurationcay."

#: target:code/save.lisp
msgid "Unrecognized *HERALD-ITEMS* entry: ~S."
msgstr "Unrecognizedway *ERALDHAY-ITEMSWAY* entryway: ~S."

#: target:code/save.lisp
msgid "Change *PACKAGE* to the USER package and try again."
msgstr ""
"Angechay *ACKAGEPAY* otay ethay USERWAY ackagepay andway ytray againway."

#: target:code/stream.lisp
msgid "Terminal I/O stream."
msgstr "Erminaltay Iway/O eamstray."

#: target:code/stream.lisp
msgid "Default input stream."
msgstr "Efaultday inputway eamstray."

#: target:code/stream.lisp
msgid "Default output stream."
msgstr "Efaultday outputway eamstray."

#: target:code/stream.lisp
msgid "Error output stream."
msgstr "Errorway outputway eamstray."

#: target:code/stream.lisp
msgid "Query I/O stream."
msgstr "Eryquay Iway/O eamstray."

#: target:code/stream.lisp
msgid "Trace output stream."
msgstr "Acetray outputway eamstray."

#: target:code/stream.lisp
msgid "Interactive debugging stream."
msgstr "Interactiveway ebuggingday eamstray."

#: target:code/stream.lisp
msgid "~S is not an input stream."
msgstr "~S isway otnay anway inputway eamstray."

#: target:code/stream.lisp
msgid "~S is not an output stream."
msgstr "~S isway otnay anway outputway eamstray."

#: target:code/stream.lisp
msgid "~S is not a character input stream."
msgstr "~S isway otnay away aracterchay inputway eamstray."

#: target:code/stream.lisp
msgid "~S is not a character output stream."
msgstr "~S isway otnay away aracterchay outputway eamstray."

#: target:code/stream.lisp
msgid "~S is not a binary input stream."
msgstr "~S isway otnay away inarybay inputway eamstray."

#: target:code/stream.lisp
msgid ""
"~S is not a binary input stream ~\n"
"                          or does not support multi-byte read operations."
msgstr ""
"~S isway otnay away inarybay inputway eamstray ~\n"
"                          orway oesday otnay upportsay ultimay-ytebay eadray "
"operationsway."

#: target:code/stream.lisp
msgid "~S is not a binary output stream."
msgstr "~S isway otnay away inarybay outputway eamstray."

#: target:code/stream.lisp
msgid "~S is closed."
msgstr "~S isway osedclay."

#: target:code/stream.lisp
msgid "~S is an unsupported Gray stream."
msgstr "~S isway anway unsupportedway Aygray eamstray."

#: target:pcl/gray-streams.lisp target:code/stream.lisp
msgid "Returns non-nil if the given Stream can perform input operations."
msgstr ""
"Eturnsray onnay-ilnay ifway ethay ivengay Eamstray ancay erformpay inputway "
"operationsway."

#: target:pcl/gray-streams.lisp target:code/stream.lisp
msgid "Returns non-nil if the given Stream can perform output operations."
msgstr ""
"Eturnsray onnay-ilnay ifway ethay ivengay Eamstray ancay erformpay outputway "
"operationsway."

#: target:code/stream.lisp
msgid "Return true if Stream is not closed."
msgstr "Eturnray uetray ifway Eamstray isway otnay osedclay."

#: target:code/stream.lisp
msgid "Returns a type specifier for the kind of object returned by the Stream."
msgstr ""
"Eturnsray away ypetay ecifierspay orfay ethay indkay ofway objectway "
"eturnedray ybay ethay Eamstray."

#: target:code/stream.lisp
msgid ""
"Return true if Stream does I/O on a terminal or other interactive device."
msgstr ""
"Eturnray uetray ifway Eamstray oesday Iway/O onway away erminaltay orway "
"otherway interactiveway eviceday."

#: target:code/stream.lisp
msgid "Can't set interactive flag on ~S."
msgstr "Ancay't etsay interactiveway agflay onway ~S."

#: target:code/stream.lisp
msgid "Returns the external format used by the given Stream."
msgstr ""
"Eturnsray ethay externalway ormatfay usedway ybay ethay ivengay Eamstray."

#: target:code/stream.lisp
msgid ""
"Closes the given Stream.  No more I/O may be performed, but inquiries\n"
"  may still be made.  If :Abort is non-nil, an attempt is made to clean\n"
"  up the side effects of having created the stream."
msgstr ""
"Osesclay ethay ivengay Eamstray.  Onay oremay Iway/O aymay ebay erformedpay, "
"utbay inquiriesway\n"
"  aymay tillsay ebay ademay.  Ifway :Abortway isway onnay-ilnay, anway "
"attemptway isway ademay otay eanclay\n"
"  upway ethay idesay effectsway ofway avinghay eatedcray ethay eamstray."

#: target:code/stream.lisp
msgid ""
"With one argument returns the current position within the file\n"
"   File-Stream is open to.  If the second argument is supplied, then\n"
"   this becomes the new file position.  The second argument may also\n"
"   be :start or :end for the start and end of the file, respectively."
msgstr ""
"Ithway oneway argumentway eturnsray ethay urrentcay ositionpay ithinway "
"ethay ilefay\n"
"   Ilefay-Eamstray isway openway otay.  Ifway ethay econdsay argumentway "
"isway uppliedsay, enthay\n"
"   isthay ecomesbay ethay ewnay ilefay ositionpay.  Ethay econdsay "
"argumentway aymay alsoway\n"
"   ebay :tartsay orway :endway orfay ethay tartsay andway endway ofway ethay "
"ilefay, espectivelyray."

#: target:code/stream.lisp
msgid ""
"This function returns the length of the file that File-Stream is open to."
msgstr ""
"Isthay unctionfay eturnsray ethay engthlay ofway ethay ilefay atthay Ilefay-"
"Eamstray isway openway otay."

#: target:code/stream.lisp
msgid ""
"Returns a line of text read from the Stream as a string, discarding the\n"
"  newline character."
msgstr ""
"Eturnsray away inelay ofway exttay eadray omfray ethay Eamstray asway away "
"ingstray, iscardingday ethay\n"
"  ewlinenay aracterchay."

#: target:code/stream.lisp
msgid "Inputs a character from Stream and returns it."
msgstr "Inputsway away aracterchay omfray Eamstray andway eturnsray itway."

#: target:code/stream.lisp
msgid "Puts the Character back on the front of the input Stream."
msgstr ""
"Utspay ethay Aracterchay ackbay onway ethay ontfray ofway ethay inputway "
"Eamstray."

#: target:code/stream.lisp
msgid "Nothing to unread."
msgstr "Othingnay otay unreadway."

#: target:code/stream.lisp
msgid "Impossible case reached in PEEK-CHAR"
msgstr "Impossibleway asecay eachedray inway EEKPAY-ARCHAY"

#: target:code/stream.lisp
msgid ""
"Peeks at the next character in the input Stream.  See manual for details."
msgstr ""
"Eekspay atway ethay extnay aracterchay inway ethay inputway Eamstray.  Eesay "
"anualmay orfay etailsday."

#: target:code/stream.lisp
msgid "~@<bad PEEK-TYPE=~S, ~_expected ~S~:>"
msgstr "~@<adbay EEKPAY-YPETAY=~S, ~_expectedway ~S~:>"

#: target:code/stream.lisp
msgid "Returns T if a character is available on the given Stream."
msgstr ""
"Eturnsray T ifway away aracterchay isway availableway onway ethay ivengay "
"Eamstray."

#: target:code/stream.lisp
msgid "Returns the next character from the Stream if one is available, or nil."
msgstr ""
"Eturnsray ethay extnay aracterchay omfray ethay Eamstray ifway oneway isway "
"availableway, orway ilnay."

#: target:code/stream.lisp
msgid "Clears any buffered input associated with the Stream."
msgstr ""
"Earsclay anyway ufferedbay inputway associatedway ithway ethay Eamstray."

#: target:code/stream.lisp
msgid "Returns the next byte of the Stream."
msgstr "Eturnsray ethay extnay ytebay ofway ethay Eamstray."

#: target:code/stream.lisp
msgid ""
"Reads Numbytes bytes into the Buffer starting at Start, returning the "
"number\n"
"   of bytes read.\n"
"   -- If EOF-ERROR-P is true, an END-OF-FILE condition is signalled if\n"
"      end-of-file is encountered before Count bytes have been read.\n"
"   -- If EOF-ERROR-P is false, READ-N-BYTES reads as much data as is "
"currently\n"
"      available (up to count bytes).  On pipes or similar devices, this\n"
"      function returns as soon as any data is available, even if the amount\n"
"      read is less than Count and eof has not been hit."
msgstr ""
"Eadsray Umbytesnay ytesbay intoway ethay Ufferbay tartingsay atway Tartsay, "
"eturningray ethay umbernay\n"
"   ofway ytesbay eadray.\n"
"   -- Ifway EOFWAY-ERRORWAY-P isway uetray, anway ENDWAY-OFWAY-ILEFAY "
"onditioncay isway ignalledsay ifway\n"
"      endway-ofway-ilefay isway encounteredway eforebay Ountcay ytesbay "
"avehay eenbay eadray.\n"
"   -- Ifway EOFWAY-ERRORWAY-P isway alsefay, EADRAY-N-YTESBAY eadsray asway "
"uchmay ataday asway isway urrentlycay\n"
"      availableway (upway otay ountcay ytesbay).  Onway ipespay orway "
"imilarsay evicesday, isthay\n"
"      unctionfay eturnsray asway oonsay asway anyway ataday isway "
"availableway, evenway ifway ethay amountway\n"
"      eadray isway esslay anthay Ountcay andway eofway ashay otnay eenbay "
"ithay."

#: target:code/stream.lisp
msgid "Outputs the Character to the Stream."
msgstr "Outputsway ethay Aracterchay otay ethay Eamstray."

#: target:code/stream.lisp
msgid "Outputs a new line to the Stream."
msgstr "Outputsway away ewnay inelay otay ethay Eamstray."

#: target:code/stream.lisp
msgid ""
"Outputs a new line to the Stream if it is not positioned at the beginning "
"of\n"
"   a line.  Returns T if it output a new line, nil otherwise."
msgstr ""
"Outputsway away ewnay inelay otay ethay Eamstray ifway itway isway otnay "
"ositionedpay atway ethay eginningbay ofway\n"
"   away inelay.  Eturnsray T ifway itway outputway away ewnay inelay, ilnay "
"otherwiseway."

#: target:code/stream.lisp
msgid "Outputs the String to the given Stream."
msgstr "Outputsway ethay Ingstray otay ethay ivengay Eamstray."

#: target:code/stream.lisp
msgid ""
"Outputs the String to the given Stream, followed by a newline character."
msgstr ""
"Outputsway ethay Ingstray otay ethay ivengay Eamstray, ollowedfay ybay away "
"ewlinenay aracterchay."

#: target:code/stream.lisp
msgid ""
"Returns the number of characters on the current line of output of the given\n"
"  Stream, or Nil if that information is not availible."
msgstr ""
"Eturnsray ethay umbernay ofway aracterschay onway ethay urrentcay inelay "
"ofway outputway ofway ethay ivengay\n"
"  Eamstray, orway Ilnay ifway atthay informationway isway otnay availibleway."

#: target:code/stream.lisp
msgid ""
"Returns the number of characters that will fit on a line of output on the\n"
"  given Stream, or Nil if that information is not available."
msgstr ""
"Eturnsray ethay umbernay ofway aracterschay atthay illway itfay onway away "
"inelay ofway outputway onway ethay\n"
"  ivengay Eamstray, orway Ilnay ifway atthay informationway isway otnay "
"availableway."

#: target:code/stream.lisp
msgid ""
"Attempts to ensure that all output sent to the Stream has reached its\n"
"   destination, and only then returns."
msgstr ""
"Attemptsway otay ensureway atthay allway outputway entsay otay ethay "
"Eamstray ashay eachedray itsway\n"
"   estinationday, andway onlyway enthay eturnsray."

#: target:code/stream.lisp
msgid "Attempts to force any buffered output to be sent."
msgstr "Attemptsway otay orcefay anyway ufferedbay outputway otay ebay entsay."

#: target:code/stream.lisp
msgid "Clears the given output Stream."
msgstr "Earsclay ethay ivengay outputway Eamstray."

#: target:code/stream.lisp
msgid "Outputs the Integer to the binary Stream."
msgstr "Outputsway ethay Integerway otay ethay inarybay Eamstray."

#: target:code/stream.lisp
msgid ""
"Returns an output stream which sends its output to all of the given\n"
"streams."
msgstr ""
"Eturnsray anway outputway eamstray ichwhay endssay itsway outputway otay "
"allway ofway ethay ivengay\n"
"eamsstray."

#: target:code/stream.lisp
msgid ""
"Returns a stream which performs its operations on the stream which is the\n"
"   value of the dynamic variable named by Symbol."
msgstr ""
"Eturnsray away eamstray ichwhay erformspay itsway operationsway onway ethay "
"eamstray ichwhay isway ethay\n"
"   aluevay ofway ethay ynamicday ariablevay amednay ybay Ymbolsay."

#: target:code/stream.lisp
msgid ""
"Returns a bidirectional stream which gets its input from Input-Stream and\n"
"   sends its output to Output-Stream."
msgstr ""
"Eturnsray away idirectionalbay eamstray ichwhay etsgay itsway inputway "
"omfray Inputway-Eamstray andway\n"
"   endssay itsway outputway otay Outputway-Eamstray."

#: target:code/stream.lisp
msgid ""
"Returns a stream which takes its input from each of the Streams in turn,\n"
"   going on to the next at EOF."
msgstr ""
"Eturnsray away eamstray ichwhay akestay itsway inputway omfray eachway ofway "
"ethay Eamsstray inway urntay,\n"
"   oinggay onway otay ethay extnay atway EOFWAY."

#: target:code/stream.lisp
msgid ""
"Returns an echo stream that takes input from Input-stream and sends\n"
"output to Output-stream"
msgstr ""
"Eturnsray anway echoway eamstray atthay akestay inputway omfray Inputway-"
"eamstray andway endssay\n"
"outputway otay Outputway-eamstray"

#: target:code/stream.lisp
msgid ""
"Returns a bidirectional stream which gets its input from Input-Stream and\n"
"   sends its output to Output-Stream.  In addition, all input is echoed to\n"
"   the output stream"
msgstr ""
"Eturnsray away idirectionalbay eamstray ichwhay etsgay itsway inputway "
"omfray Inputway-Eamstray andway\n"
"   endssay itsway outputway otay Outputway-Eamstray.  Inway additionway, "
"allway inputway isway echoedway otay\n"
"   ethay outputway eamstray"

#: target:code/stream.lisp
msgid ""
"Returns an input stream which will supply the characters of String between\n"
"  Start and End in order."
msgstr ""
"Eturnsray anway inputway eamstray ichwhay illway upplysay ethay aracterschay "
"ofway Ingstray etweenbay\n"
"  Tartsay andway Endway inway orderway."

#: target:code/stream.lisp
msgid ""
"Returns an Output stream which will accumulate all output given to it for\n"
"   the benefit of the function Get-Output-Stream-String."
msgstr ""
"Eturnsray anway Outputway eamstray ichwhay illway accumulateway allway "
"outputway ivengay otay itway orfay\n"
"   ethay enefitbay ofway ethay unctionfay Etgay-Outputway-Eamstray-Ingstray."

#: target:code/stream.lisp
msgid ""
"Returns a string of all the characters sent to a stream made by\n"
"   Make-String-Output-Stream since the last call to this function."
msgstr ""
"Eturnsray away ingstray ofway allway ethay aracterschay entsay otay away "
"eamstray ademay ybay\n"
"   Akemay-Ingstray-Outputway-Eamstray incesay ethay astlay allcay otay "
"isthay unctionfay."

#: target:code/stream.lisp
msgid ""
"Dumps the characters buffer up in the In-Stream to the Out-Stream as\n"
"  Get-Output-Stream-String would return them."
msgstr ""
"Umpsday ethay aracterschay ufferbay upway inway ethay Inway-Eamstray otay "
"ethay Outway-Eamstray asway\n"
"  Etgay-Outputway-Eamstray-Ingstray ouldway eturnray emthay."

#: target:code/stream.lisp
msgid "Returns an output stream which indents its output by some amount."
msgstr ""
"Eturnsray anway outputway eamstray ichwhay indentsway itsway outputway ybay "
"omesay amountway."

#: target:code/stream.lisp
msgid ""
"Returns a stream that sends all output to the stream TARGET, but modifies\n"
"   the case of letters, depending on KIND, which should be one of:\n"
"     :upcase - convert to upper case.\n"
"     :downcase - convert to lower case.\n"
"     :capitalize - convert the first letter of words to upper case and the\n"
"        rest of the word to lower case.\n"
"     :capitalize-first - convert the first letter of the first word to "
"upper\n"
"        case and everything else to lower case."
msgstr ""
"Eturnsray away eamstray atthay endssay allway outputway otay ethay eamstray "
"ARGETTAY, utbay odifiesmay\n"
"   ethay asecay ofway etterslay, ependingday onway INDKAY, ichwhay ouldshay "
"ebay oneway ofway:\n"
"     :upcaseway - onvertcay otay upperway asecay.\n"
"     :owncaseday - onvertcay otay owerlay asecay.\n"
"     :apitalizecay - onvertcay ethay irstfay etterlay ofway ordsway otay "
"upperway asecay andway ethay\n"
"        estray ofway ethay ordway otay owerlay asecay.\n"
"     :apitalizecay-irstfay - onvertcay ethay irstfay etterlay ofway ethay "
"irstfay ordway otay upperway\n"
"        asecay andway everythingway elseway otay owerlay asecay."

#: target:code/stream.lisp
msgid ""
"This takes a stream and waits for text or a command to appear on it.  If\n"
"   text appears before a command, this returns nil, and otherwise it "
"returns\n"
"   a command."
msgstr ""
"Isthay akestay away eamstray andway aitsway orfay exttay orway away "
"ommandcay otay appearway onway itway.  Ifway\n"
"   exttay appearsway eforebay away ommandcay, isthay eturnsray ilnay, andway "
"otherwiseway itway eturnsray\n"
"   away ommandcay."

#: target:code/stream.lisp
msgid ""
"Destructively modify SEQ by reading elements from STREAM.\n"
"\n"
"  Seq is bounded by Start and End. Seq is destructively modified by\n"
"  copying successive elements into it from Stream. If the end of file\n"
"  for Stream is reached before copying all elements of the subsequence,\n"
"  then the extra elements near the end of sequence are not updated.\n"
"\n"
"  Argument(s):\n"
"  SEQ:\t    a proper SEQUENCE\n"
"  STREAM:   an input STREAM\n"
"  START:    a bounding index designator of type '(INTEGER 0 *)' (default 0)\n"
"  END:      a bounding index designator which be NIL or an INTEGER of\n"
"\t    type '(INTEGER 0 *)' (default NIL)\n"
"\n"
"  Value(s):\n"
"  POSITION: an INTEGER greater than or equal to zero, and less than or\n"
"\t    equal to the length of the SEQ. POSITION is the index of\n"
"\t    the first element of SEQ that was not updated, which might be\n"
"\t    less than END because the end of file was reached."
msgstr ""
"Estructivelyday odifymay EQSAY ybay eadingray elementsway omfray EAMSTRAY.\n"
"\n"
"  Eqsay isway oundedbay ybay Tartsay andway Endway. Eqsay isway "
"estructivelyday odifiedmay ybay\n"
"  opyingcay uccessivesay elementsway intoway itway omfray Eamstray. Ifway "
"ethay endway ofway ilefay\n"
"  orfay Eamstray isway eachedray eforebay opyingcay allway elementsway ofway "
"ethay ubsequencesay,\n"
"  enthay ethay extraway elementsway earnay ethay endway ofway equencesay "
"areway otnay updatedway.\n"
"\n"
"  Argumentway(s):\n"
"  EQSAY:\t    away operpray EQUENCESAY\n"
"  EAMSTRAY:   anway inputway EAMSTRAY\n"
"  TARTSAY:    away oundingbay indexway esignatorday ofway ypetay "
"'(INTEGERWAY 0 *)' (efaultday 0)\n"
"  ENDWAY:      away oundingbay indexway esignatorday ichwhay ebay ILNAY "
"orway anway INTEGERWAY ofway\n"
"\t    ypetay '(INTEGERWAY 0 *)' (efaultday ILNAY)\n"
"\n"
"  Aluevay(s):\n"
"  OSITIONPAY: anway INTEGERWAY eatergray anthay orway equalway otay erozay, "
"andway esslay anthay orway\n"
"\t    equalway otay ethay engthlay ofway ethay EQSAY. OSITIONPAY isway ethay "
"indexway ofway\n"
"\t    ethay irstfay elementway ofway EQSAY atthay asway otnay updatedway, "
"ichwhay ightmay ebay\n"
"\t    esslay anthay ENDWAY ecausebay ethay endway ofway ilefay asway "
"eachedray."

#: target:code/stream.lisp
msgid "The stream is not open."
msgstr "Ethay eamstray isway otnay openway."

#: target:code/stream.lisp
msgid "The stream is not open for input."
msgstr "Ethay eamstray isway otnay openway orfay inputway."

#: target:code/stream.lisp
msgid "Trying to read characters from a binary stream."
msgstr "Yingtray otay eadray aracterschay omfray away inarybay eamstray."

#: target:code/stream.lisp
msgid "Trying to read binary data from a text stream."
msgstr "Yingtray otay eadray inarybay ataday omfray away exttay eamstray."

#: target:code/stream.lisp
msgid ""
"Writes the elements of the Seq bounded by Start and End to Stream.\n"
"\n"
"  Argument(s):\n"
"  SEQ:     a proper SEQUENCE\n"
"  STREAM:  an output STREAM\n"
"  START:   a bounding index designator of type '(INTEGER 0 *)' (default 0)\n"
"  END:     a bounding index designator which be NIL or an INTEGER of\n"
"           type '(INTEGER 0 *)' (default NIL)\n"
"\n"
"  Value(s):\n"
"  SEQ:\ta proper SEQUENCE\n"
msgstr ""
"Iteswray ethay elementsway ofway ethay Eqsay oundedbay ybay Tartsay andway "
"Endway otay Eamstray.\n"
"\n"
"  Argumentway(s):\n"
"  EQSAY:     away operpray EQUENCESAY\n"
"  EAMSTRAY:  anway outputway EAMSTRAY\n"
"  TARTSAY:   away oundingbay indexway esignatorday ofway ypetay '(INTEGERWAY "
"0 *)' (efaultday 0)\n"
"  ENDWAY:     away oundingbay indexway esignatorday ichwhay ebay ILNAY orway "
"anway INTEGERWAY ofway\n"
"           ypetay '(INTEGERWAY 0 *)' (efaultday ILNAY)\n"
"\n"
"  Aluevay(s):\n"
"  EQSAY:\taway operpray EQUENCESAY\n"

#: target:code/stream.lisp
msgid "The stream is not open for output."
msgstr "Ethay eamstray isway otnay openway orfay outputway."

#: target:code/stream.lisp
msgid "Trying to output an element of unproper type to a stream."
msgstr ""
"Yingtray otay outputway anway elementway ofway unproperway ypetay otay away "
"eamstray."

#: target:code/stream.lisp
msgid "Trying to output a string to a binary stream."
msgstr "Yingtray otay outputway away ingstray otay away inarybay eamstray."

#: target:code/stream.lisp
msgid "Trying to output binary data to a text stream."
msgstr "Yingtray otay outputway inarybay ataday otay away exttay eamstray."

#: target:code/print.lisp
msgid ""
"If true, all objects will printed readably.  If readably printing is\n"
"  impossible, an error will be signalled.  This overrides the value of\n"
"  *PRINT-ESCAPE*."
msgstr ""
"Ifway uetray, allway objectsway illway intedpray eadablyray.  Ifway "
"eadablyray intingpray isway\n"
"  impossibleway, anway errorway illway ebay ignalledsay.  Isthay "
"overridesway ethay aluevay ofway\n"
"  *INTPRAY-ESCAPEWAY*."

#: target:code/print.lisp
msgid "Flag which indicates that slashification is on.  See the manual"
msgstr ""
"Agflay ichwhay indicatesway atthay ashificationslay isway onway.  Eesay "
"ethay anualmay"

#: target:code/print.lisp
msgid "Flag which indicates that pretty printing is to be used"
msgstr ""
"Agflay ichwhay indicatesway atthay ettypray intingpray isway otay ebay "
"usedway"

#: target:code/print.lisp
msgid "The output base for integers and rationals."
msgstr "Ethay outputway asebay orfay integersway andway ationalsray."

#: target:code/print.lisp
msgid "This flag requests to verify base when printing rationals."
msgstr ""
"Isthay agflay equestsray otay erifyvay asebay enwhay intingpray ationalsray."

#: target:code/print.lisp
msgid "How many levels deep to print.  Unlimited if null."
msgstr "Owhay anymay evelslay eepday otay intpray.  Unlimitedway ifway ullnay."

#: target:code/print.lisp
msgid "How many elements to print on each level.  Unlimited if null."
msgstr ""
"Owhay anymay elementsway otay intpray onway eachway evellay.  Unlimitedway "
"ifway ullnay."

#: target:code/print.lisp
msgid "Whether to worry about circular list structures. See the manual."
msgstr ""
"Etherwhay otay orryway aboutway ircularcay istlay ucturesstray. Eesay ethay "
"anualmay."

#: target:code/print.lisp
msgid "What kind of case the printer should use by default"
msgstr ""
"Atwhay indkay ofway asecay ethay interpray ouldshay useway ybay efaultday"

#: target:code/print.lisp
msgid "Whether the array should print it's guts out"
msgstr "Etherwhay ethay arrayway ouldshay intpray itway's utsgay outway"

#: target:code/print.lisp
msgid ""
"If true, symbols with no home package are printed with a #: prefix.\n"
"  If false, no prefix is printed."
msgstr ""
"Ifway uetray, ymbolssay ithway onay omehay ackagepay areway intedpray ithway "
"away #: efixpray.\n"
"  Ifway alsefay, onay efixpray isway intedpray."

#: target:code/print.lisp
msgid "The maximum number of lines to print.  If NIL, unlimited."
msgstr ""
"Ethay aximummay umbernay ofway ineslay otay intpray.  Ifway ILNAY, "
"unlimitedway."

#: target:code/print.lisp
msgid ""
"The position of the right margin in ems.  If NIL, try to determine this\n"
"   from the stream in use."
msgstr ""
"Ethay ositionpay ofway ethay ightray arginmay inway emsway.  Ifway ILNAY, "
"ytray otay etermineday isthay\n"
"   omfray ethay eamstray inway useway."

#: target:code/print.lisp
msgid ""
"If the remaining space between the current column and the right margin\n"
"   is less than this, then print using ``miser-style'' output.  Miser\n"
"   style conditional newlines are turned on, and all indentations are\n"
"   turned off.  If NIL, never use miser mode."
msgstr ""
"Ifway ethay emainingray acespay etweenbay ethay urrentcay olumncay andway "
"ethay ightray arginmay\n"
"   isway esslay anthay isthay, enthay intpray usingway ``isermay-tylesay'' "
"outputway.  Isermay\n"
"   tylesay onditionalcay ewlinesnay areway urnedtay onway, andway allway "
"indentationsway areway\n"
"   urnedtay offway.  Ifway ILNAY, evernay useway isermay odemay."

#: target:code/print.lisp
msgid ""
"The pprint-dispatch-table that controls how to pretty print objects.  See\n"
"   COPY-PPRINT-DISPATH, PPRINT-DISPATCH, and SET-PPRINT-DISPATCH."
msgstr ""
"Ethay printpay-ispatchday-abletay atthay ontrolscay owhay otay ettypray "
"intpray objectsway.  Eesay\n"
"   OPYCAY-PRINTPAY-ISPATHDAY, PRINTPAY-ISPATCHDAY, andway ETSAY-PRINTPAY-"
"ISPATCHDAY."

#: target:code/print.lisp
msgid ""
"Bind the reader and printer control variables to values that enable READ\n"
"   to reliably read the results of PRINT.  These values are:\n"
"       *PACKAGE*\t\t\tThe COMMON-LISP-USER package\n"
"       *PRINT-ARRAY*\t\t\tT\n"
"       *PRINT-BASE*\t\t\t10\n"
"       *PRINT-CASE*\t\t\t:UPCASE\n"
"       *PRINT-CIRCLE*\t\t\tNIL\n"
"       *PRINT-ESCAPE*\t\t\tT\n"
"       *PRINT-GENSYM*\t\t\tT\n"
"       *PRINT-LENGTH*\t\t\tNIL\n"
"       *PRINT-LEVEL*\t\t\tNIL\n"
"       *PRINT-LINES*\t\t\tNIL\n"
"       *PRINT-MISER-WIDTH*\t\tNIL\n"
"       *PRINT-PRETTY*\t\t\tNIL\n"
"       *PRINT-RADIX*\t\t\tNIL\n"
"       *PRINT-READABLY*\t\t\tT\n"
"       *PRINT-RIGHT-MARGIN*\t\tNIL\n"
"       *READ-BASE*\t\t\t10\n"
"       *READ-DEFAULT-FLOAT-FORMAT* \tSINGLE-FLOAT\n"
"       *READ-EVAL*\t\t\tT\n"
"       *READ-SUPPRESS*\t\t\tNIL\n"
"       *READTABLE*\t\t\tthe standard readtable."
msgstr ""
"Indbay ethay eaderray andway interpray ontrolcay ariablesvay otay aluesvay "
"atthay enableway EADRAY\n"
"   otay eliablyray eadray ethay esultsray ofway INTPRAY.  Esethay aluesvay "
"areway:\n"
"       *ACKAGEPAY*\t\t\tEthay OMMONCAY-ISPLAY-USERWAY ackagepay\n"
"       *INTPRAY-ARRAYWAY*\t\t\tT\n"
"       *INTPRAY-ASEBAY*\t\t\t10\n"
"       *INTPRAY-ASECAY*\t\t\t:UPCASEWAY\n"
"       *INTPRAY-IRCLECAY*\t\t\tILNAY\n"
"       *INTPRAY-ESCAPEWAY*\t\t\tT\n"
"       *INTPRAY-ENSYMGAY*\t\t\tT\n"
"       *INTPRAY-ENGTHLAY*\t\t\tILNAY\n"
"       *INTPRAY-EVELLAY*\t\t\tILNAY\n"
"       *INTPRAY-INESLAY*\t\t\tILNAY\n"
"       *INTPRAY-ISERMAY-IDTHWAY*\t\tILNAY\n"
"       *INTPRAY-ETTYPRAY*\t\t\tILNAY\n"
"       *INTPRAY-ADIXRAY*\t\t\tILNAY\n"
"       *INTPRAY-EADABLYRAY*\t\t\tT\n"
"       *INTPRAY-IGHTRAY-ARGINMAY*\t\tILNAY\n"
"       *EADRAY-ASEBAY*\t\t\t10\n"
"       *EADRAY-EFAULTDAY-OATFLAY-ORMATFAY* \tINGLESAY-OATFLAY\n"
"       *EADRAY-EVALWAY*\t\t\tT\n"
"       *EADRAY-UPPRESSSAY*\t\t\tILNAY\n"
"       *EADTABLERAY*\t\t\tethay tandardsay eadtableray."

#: target:code/print.lisp
msgid "Outputs OBJECT to the specified stream, defaulting to *standard-output*"
msgstr ""
"Outputsway OBJECTWAY otay ethay ecifiedspay eamstray, efaultingday otay "
"*tandardsay-outputway*"

#: target:code/print.lisp
msgid ""
"Outputs a mostly READable printed representation of OBJECT on the specified\n"
"  stream."
msgstr ""
"Outputsway away ostlymay Eadableray intedpray epresentationray ofway "
"OBJECTWAY onway ethay ecifiedspay\n"
"  eamstray."

#: target:code/print.lisp
msgid ""
"Outputs an asthetic but not READable printed representation of OBJECT on "
"the\n"
"  specified stream."
msgstr ""
"Outputsway anway astheticway utbay otnay Eadableray intedpray "
"epresentationray ofway OBJECTWAY onway ethay\n"
"  ecifiedspay eamstray."

#: target:code/print.lisp
msgid ""
"Outputs a terpri, the mostly READable printed represenation of OBJECT, and \n"
"  space to the stream."
msgstr ""
"Outputsway away erpritay, ethay ostlymay Eadableray intedpray "
"epresenationray ofway OBJECTWAY, andway \n"
"  acespay otay ethay eamstray."

#: target:code/print.lisp
msgid "Prettily outputs the Object preceded by a newline."
msgstr "Ettilypray outputsway ethay Objectway ecededpray ybay away ewlinenay."

#: target:code/print.lisp
msgid "Returns the printed representation of OBJECT as a string."
msgstr ""
"Eturnsray ethay intedpray epresentationray ofway OBJECTWAY asway away "
"ingstray."

#: target:code/print.lisp
msgid ""
"Returns the printed representation of OBJECT as a string with \n"
"   slashification on."
msgstr ""
"Eturnsray ethay intedpray epresentationray ofway OBJECTWAY asway away "
"ingstray ithway \n"
"   ashificationslay onway."

#: target:code/print.lisp
msgid ""
"Returns the printed representation of OBJECT as a string with\n"
"  slashification off."
msgstr ""
"Eturnsray ethay intedpray epresentationray ofway OBJECTWAY asway away "
"ingstray ithway\n"
"  ashificationslay offway."

#: target:compiler/byte-comp.lisp target:compiler/dyncount.lisp
#: target:compiler/knownfun.lisp target:compiler/new-assem.lisp
#: target:compiler/meta-vmdef.lisp target:compiler/vop.lisp
#: target:compiler/node.lisp target:compiler/sset.lisp
#: target:compiler/backend.lisp target:compiler/macros.lisp
#: target:code/print.lisp
msgid "~S cannot be printed readably."
msgstr "~S annotcay ebay intedpray eadablyray."

#: target:code/print.lisp
msgid "Determines whether or not the character is considered whitespace."
msgstr ""
"Eterminesday etherwhay orway otnay ethay aracterchay isway onsideredcay "
"itespacewhay."

#: target:code/print.lisp
msgid ""
"Check to see if OBJECT is a circular reference, and return something non-"
"NIL\n"
"   if it is.  If ASSIGN is T, then the number to use in the #n= and #n# "
"noise\n"
"   is assigned at this time.  Note: CHECK-FOR-CIRCULARITY must be called\n"
"   *EXACTLY* once with ASSIGN T, or the circularity detection noise will "
"get\n"
"   confused about when to use #n= and when to use #n#.  If this returns\n"
"   non-NIL when ASSIGN is T, then you must call HANDLE-CIRCULARITY on it."
msgstr ""
"Eckchay otay eesay ifway OBJECTWAY isway away ircularcay eferenceray, andway "
"eturnray omethingsay onnay-ILNAY\n"
"   ifway itway isway.  Ifway ASSIGNWAY isway T, enthay ethay umbernay otay "
"useway inway ethay #n= andway #n# oisenay\n"
"   isway assignedway atway isthay imetay.  Otenay: ECKCHAY-ORFAY-"
"IRCULARITYCAY ustmay ebay alledcay\n"
"   *EXACTLYWAY* onceway ithway ASSIGNWAY T, orway ethay ircularitycay "
"etectionday oisenay illway etgay\n"
"   onfusedcay aboutway enwhay otay useway #n= andway enwhay otay useway "
"#n#.  Ifway isthay eturnsray\n"
"   onnay-ILNAY enwhay ASSIGNWAY isway T, enthay ouyay ustmay allcay ANDLEHAY-"
"IRCULARITYCAY onway itway."

#: target:code/print.lisp
msgid ""
"Handle the results of CHECK-FOR-CIRCULARITY.  If this returns T then\n"
"   you should go ahead and print the object.  If it returns NIL, then\n"
"   you should blow it off."
msgstr ""
"Andlehay ethay esultsray ofway ECKCHAY-ORFAY-IRCULARITYCAY.  Ifway isthay "
"eturnsray T enthay\n"
"   ouyay ouldshay ogay aheadway andway intpray ethay objectway.  Ifway itway "
"eturnsray ILNAY, enthay\n"
"   ouyay ouldshay owblay itway offway."

#: target:code/print.lisp
msgid ""
"Attempt to use CHECK-FOR-CIRCULARITY when circularity ~\n"
"\t       checking has not been initiated."
msgstr ""
"Attemptway otay useway ECKCHAY-ORFAY-IRCULARITYCAY enwhay ircularitycay ~\n"
"\t       eckingchay ashay otnay eenbay initiatedway."

#: target:code/print.lisp
msgid ""
"The current level we are printing at, to be compared against *PRINT-LEVEL*.\n"
"   See the macro DESCEND-INTO for a handy interface to depth abbreviation."
msgstr ""
"Ethay urrentcay evellay eway areway intingpray atway, otay ebay omparedcay "
"againstway *INTPRAY-EVELLAY*.\n"
"   Eesay ethay acromay ESCENDDAY-INTOWAY orfay away andyhay interfaceway "
"otay epthday abbreviationway."

#: target:code/print.lisp
msgid ""
"Automatically handle *print-level* abbreviation.  If we are too deep, then\n"
"   a # is printed to STREAM and BODY is ignored."
msgstr ""
"Automaticallyway andlehay *intpray-evellay* abbreviationway.  Ifway eway "
"areway ootay eepday, enthay\n"
"   away # isway intedpray otay EAMSTRAY andway ODYBAY isway ignoredway."

#: target:code/print.lisp
msgid ""
"Punt if INDEX is equal or larger then *PRINT-LENGTH* (and *PRINT-READABLY*\n"
"   is NIL) by outputting \"...\" and returning from the block named NIL."
msgstr ""
"Untpay ifway INDEXWAY isway equalway orway argerlay enthay *INTPRAY-"
"ENGTHLAY* (andway *INTPRAY-EADABLYRAY*\n"
"   isway ILNAY) ybay outputtingway \"...\" andway eturningray omfray ethay "
"ockblay amednay ILNAY."

#: target:code/print.lisp
msgid ""
"The current pretty printer.  Should be either a function that takes two\n"
"   arguments (the object and the stream) or NIL to indicate that there is\n"
"   no pretty printer installed."
msgstr ""
"Ethay urrentcay ettypray interpray.  Ouldshay ebay eitherway away unctionfay "
"atthay akestay wotay\n"
"   argumentsway (ethay objectway andway ethay eamstray) orway ILNAY otay "
"indicateway atthay erethay isway\n"
"   onay ettypray interpray installedway."

#: target:code/print.lisp
msgid "Output OBJECT to STREAM observing all printer control variables."
msgstr ""
"Outputway OBJECTWAY otay EAMSTRAY observingway allway interpray ontrolcay "
"ariablesvay."

#: target:code/print.lisp
msgid ""
"Output OBJECT to STREAM observing all printer control variables except\n"
"   for *PRINT-PRETTY*.  Note: if *PRINT-PRETTY* is non-NIL, then the pretty\n"
"   printer will be used for any components of OBJECT, just not for OBJECT\n"
"   itself."
msgstr ""
"Outputway OBJECTWAY otay EAMSTRAY observingway allway interpray ontrolcay "
"ariablesvay exceptway\n"
"   orfay *INTPRAY-ETTYPRAY*.  Otenay: ifway *INTPRAY-ETTYPRAY* isway onnay-"
"ILNAY, enthay ethay ettypray\n"
"   interpray illway ebay usedway orfay anyway omponentscay ofway OBJECTWAY, "
"ustjay otnay orfay OBJECTWAY\n"
"   itselfway."

#: target:code/print.lisp
msgid "Invalid *PRINT-CASE* value: ~S"
msgstr "Invalidway *INTPRAY-ASECAY* aluevay: ~S"

#: target:code/print.lisp
msgid "Invalid READTABLE-CASE value: ~S"
msgstr "Invalidway EADTABLERAY-ASECAY aluevay: ~S"

#: target:code/print.lisp
msgid ""
"Outputs the printed representation of any array in either the #< or #A\n"
"   form."
msgstr ""
"Outputsway ethay intedpray epresentationray ofway anyway arrayway inway "
"eitherway ethay #< orway #Away\n"
"   ormfay."

#: target:code/print.lisp
msgid "Obsolete Instance"
msgstr "Obsoleteway Instanceway"

#: target:code/print.lisp
msgid "Unprintable Instance"
msgstr "Unprintableway Instanceway"

#: target:code/print.lisp
msgid "~A is not a reasonable value for *Print-Base*."
msgstr "~Away isway otnay away easonableray aluevay orfay *Intpray-Asebay*."

#: target:code/print.lisp
msgid ""
"Compute a list of pairs (2^i . r^{2^i}), stopping with the largest r^{2^i}\n"
"greater than n."
msgstr ""
"Omputecay away istlay ofway airspay (2^i . r^{2^i}), toppingsay ithway ethay "
"argestlay r^{2^i}\n"
"eatergray anthay n."

#: target:code/print.lisp
msgid ""
"Convert digit into a character representation.  We use 0..9, a..z for\n"
"10..35, and A..Z for 36..52."
msgstr ""
"Onvertcay igitday intoway away aracterchay epresentationray.  Eway useway "
"0..9, away..z orfay\n"
"10..35, andway Away..Z orfay 36..52."

#: target:code/print.lisp
msgid "overflow in digit-to-char"
msgstr "overflowway inway igitday-otay-archay"

#: target:code/print.lisp
msgid ""
"Print a fixnum N to stream S, maybe with leading zeros.  This isn't\n"
"ever-so efficient, but we probably don't need to care."
msgstr ""
"Intpray away ixnumfay N otay eamstray S, aybemay ithway eadinglay eroszay.  "
"Isthay isnway't\n"
"everway-osay efficientway, utbay eway obablypray onday't eednay otay arecay."

#: target:code/print.lisp
msgid ""
"Use the power list (see power-list) PL to split N roughly in half; then\n"
"print the left and right halves using (cdr PL).  Make sure we count the\n"
"leading zeroes correctly."
msgstr ""
"Useway ethay owerpay istlay (eesay owerpay-istlay) PLAY otay litspay N "
"oughlyray inway alfhay; enthay\n"
"intpray ethay eftlay andway ightray alveshay usingway (drcay PLAY).  Akemay "
"uresay eway ountcay ethay\n"
"eadinglay eroeszay orrectlycay."

#: target:code/print.lisp
msgid ""
"Primary fast bignum-printing interface.  Prints integer N to stream S in\n"
"radix-R.  If you have a power-list then pass it in as PL."
msgstr ""
"Imarypray astfay ignumbay-intingpray interfaceway.  Intspray integerway N "
"otay eamstray S inway\n"
"adixray-R.  Ifway ouyay avehay away owerpay-istlay enthay asspay itway inway "
"asway PLAY."

#: target:code/print.lisp
msgid ""
"Minimum power of 10 that allows the float printer to use free format,\n"
"   instead of exponential format.  See section 22.1.3.1.3: Printing Floats\n"
"   in the ANSI CL standard."
msgstr ""
"Inimummay owerpay ofway 10 atthay allowsway ethay oatflay interpray otay "
"useway eefray ormatfay,\n"
"   insteadway ofway exponentialway ormatfay.  Eesay ectionsay 22.1.3.1.3: "
"Intingpray Oatsflay\n"
"   inway ethay ANSIWAY CLAY tandardsay."

#: target:code/print.lisp
msgid ""
"Maximum power of 10 that allows the float printer to use free format,\n"
"   instead of exponential format.  See section 22.1.3.1.3: Printing Floats\n"
"   in the ANSI CL standard."
msgstr ""
"Aximummay owerpay ofway 10 atthay allowsway ethay oatflay interpray otay "
"useway eefray ormatfay,\n"
"   insteadway ofway exponentialway ormatfay.  Eesay ectionsay 22.1.3.1.3: "
"Intingpray Oatsflay\n"
"   inway ethay ANSIWAY CLAY tandardsay."

#: target:code/print.lisp
msgid "Convert a DD number to a lisp rational"
msgstr "Onvertcay away DDAY umbernay otay away isplay ationalray"

#: target:code/print.lisp
msgid "Print out a double-double to a string"
msgstr "Intpray outway away oubleday-oubleday otay away ingstray"

#: target:code/print.lisp
msgid "Weak Pointer: "
msgstr "Eakway Ointerpay: "

#: target:code/print.lisp
msgid "Broken Weak Pointer"
msgstr "Okenbray Eakway Ointerpay"

#: target:code/print.lisp
msgid "Bogus Code Object"
msgstr "Ogusbay Odecay Objectway"

#: target:code/print.lisp
msgid "Code Object"
msgstr "Odecay Objectway"

#: target:code/print.lisp
msgid "Return PC Object"
msgstr "Eturnray CPAY Objectway"

#: target:code/print.lisp
msgid "FDEFINITION object for "
msgstr "DEFINITIONFAY objectway orfay "

#: target:code/print.lisp
msgid "Function "
msgstr "Unctionfay "

#: target:code/print.lisp
msgid "Interpreted Function ~S"
msgstr "Interpretedway Unctionfay ~S"

#: target:code/print.lisp
msgid "Byte Compiled Function"
msgstr "Ytebay Ompiledcay Unctionfay"

#: target:code/print.lisp
msgid "Byte Compiled Closure"
msgstr "Ytebay Ompiledcay Osureclay"

#: target:code/print.lisp
msgid "Closure Over "
msgstr "Osureclay Overway "

#: target:code/print.lisp
msgid "Unknown Function"
msgstr "Unknownway Unctionfay"

#: target:code/print.lisp
msgid "Value Cell "
msgstr "Aluevay Ellcay "

#: target:code/print.lisp
msgid "Unknown Pointer Object, type="
msgstr "Unknownway Ointerpay Objectway, ypetay="

#: target:code/print.lisp
msgid "Unbound Marker"
msgstr "Unboundway Arkermay"

#: target:code/print.lisp
msgid "Unknown Immediate Object, lowtag="
msgstr "Unknownway Immediateway Objectway, owtaglay="

#: target:code/print.lisp
msgid ", type="
msgstr ", ypetay="

#: target:code/print.lisp
msgid "Continue anyway"
msgstr "Ontinuecay anywayway"

#: target:code/print.lisp
msgid "Cannot find ~S, so unicode support is not available"
msgstr "Annotcay indfay ~S, osay unicodeway upportsay isway otnay availableway"

#: target:code/pprint.lisp
msgid ""
"Insert an annotation into the pretty-printing stream STREAM.\n"
"HANDLER is a function, and RECORD is an arbitrary datum.  The\n"
"pretty-printing stream conceptionally queues annotations in sequence\n"
"with the characters that are printed to the stream, until the stream\n"
"has decided on the concrete layout.  When the characters are forwarded\n"
"to the target stream, annotations are invoked at the right position.\n"
"An annotation is invoked by calling the function HANDLER with the\n"
"three arguments RECORD, TARGET-STREAM, and TRUNCATEP.  The argument\n"
"TRUNCATEP is true if the text surrounding the annotation is suppressed\n"
"due to line abbreviation (see *PRINT-LINES*).\n"
"If STREAM is not a pretty-printing stream, simply call HANDLER\n"
"with the arguments RECORD, STREAM and nil."
msgstr ""
"Insertway anway annotationway intoway ethay ettypray-intingpray eamstray "
"EAMSTRAY.\n"
"ANDLERHAY isway away unctionfay, andway ECORDRAY isway anway arbitraryway "
"atumday.  Ethay\n"
"ettypray-intingpray eamstray onceptionallycay euesquay annotationsway inway "
"equencesay\n"
"ithway ethay aracterschay atthay areway intedpray otay ethay eamstray, "
"untilway ethay eamstray\n"
"ashay ecidedday onway ethay oncretecay ayoutlay.  Enwhay ethay aracterschay "
"areway orwardedfay\n"
"otay ethay argettay eamstray, annotationsway areway invokedway atway ethay "
"ightray ositionpay.\n"
"Anway annotationway isway invokedway ybay allingcay ethay unctionfay "
"ANDLERHAY ithway ethay\n"
"reethay argumentsway ECORDRAY, ARGETTAY-EAMSTRAY, andway UNCATEPTRAY.  Ethay "
"argumentway\n"
"UNCATEPTRAY isway uetray ifway ethay exttay urroundingsay ethay "
"annotationway isway uppressedsay\n"
"ueday otay inelay abbreviationway (eesay *INTPRAY-INESLAY*).\n"
"Ifway EAMSTRAY isway otnay away ettypray-intingpray eamstray, implysay "
"allcay ANDLERHAY\n"
"ithway ethay argumentsway ECORDRAY, EAMSTRAY andway ilnay."

#: target:code/pprint.lisp
msgid "Insert ANNOTATION into the queue of annotations in STREAM."
msgstr ""
"Insertway ANNOTATIONWAY intoway ethay euequay ofway annotationsway inway "
"EAMSTRAY."

#: target:code/pprint.lisp
msgid ""
"Insert all annotations in STREAM from the queue of pending\n"
"operations into the queue of annotations.  When END is non-nil, \n"
"stop before reaching the queued-op END."
msgstr ""
"Insertway allway annotationsway inway EAMSTRAY omfray ethay euequay ofway "
"endingpay\n"
"operationsway intoway ethay euequay ofway annotationsway.  Enwhay ENDWAY "
"isway onnay-ilnay, \n"
"topsay eforebay eachingray ethay euedquay-opway ENDWAY."

#: target:code/pprint.lisp
msgid ""
"Dequeue the next annotation from the queue of annotations of STREAM\n"
"and return it.  Return nil if there are no more annotations.  When\n"
":END-POSN is given and the next annotation has a posn greater than\n"
"this, also return nil."
msgstr ""
"Equeueday ethay extnay annotationway omfray ethay euequay ofway "
"annotationsway ofway EAMSTRAY\n"
"andway eturnray itway.  Eturnray ilnay ifway erethay areway onay oremay "
"annotationsway.  Enwhay\n"
":ENDWAY-OSNPAY isway ivengay andway ethay extnay annotationway ashay away "
"osnpay eatergray anthay\n"
"isthay, alsoway eturnray ilnay."

#: target:code/pprint.lisp
msgid ""
"Output the buffer of STREAM up to (excluding) the buffer index END.\n"
"When annotations are present, invoke them at the right positions."
msgstr ""
"Outputway ethay ufferbay ofway EAMSTRAY upway otay (excludingway) ethay "
"ufferbay indexway ENDWAY.\n"
"Enwhay annotationsway areway esentpray, invokeway emthay atway ethay ightray "
"ositionspay."

#: target:code/pprint.lisp
msgid ""
"Invoke all annotations in STREAM up to (including) the buffer index END."
msgstr ""
"Invokeway allway annotationsway inway EAMSTRAY upway otay (includingway) "
"ethay ufferbay indexway ENDWAY."

#: target:code/pprint.lisp
msgid "Output-partial-line called when nothing can be output."
msgstr ""
"Outputway-artialpay-inelay alledcay enwhay othingnay ancay ebay outputway."

#: target:code/pprint.lisp
msgid ""
"Group some output into a logical block.  STREAM-SYMBOL should be either a\n"
"   stream, T (for *TERMINAL-IO*), or NIL (for *STANDARD-OUTPUT*).  The "
"printer\n"
"   control variable *PRINT-LEVEL* is automatically handled."
msgstr ""
"Oupgray omesay outputway intoway away ogicallay ockblay.  EAMSTRAY-YMBOLSAY "
"ouldshay ebay eitherway away\n"
"   eamstray, T (orfay *ERMINALTAY-IOWAY*), orway ILNAY (orfay *TANDARDSAY-"
"OUTPUTWAY*).  Ethay interpray\n"
"   ontrolcay ariablevay *INTPRAY-EVELLAY* isway automaticallyway andledhay."

#: target:code/pprint.lisp
msgid "Cannot specify both a prefix and a per-line-prefix."
msgstr ""
"Annotcay ecifyspay othbay away efixpray andway away erpay-inelay-efixpray."

#: target:code/pprint.lisp
msgid ""
"Cause the closest enclosing use of PPRINT-LOGICAL-BLOCK to return\n"
"   if it's list argument is exhausted.  Can only be used inside\n"
"   PPRINT-LOGICAL-BLOCK, and only when the LIST argument to\n"
"   PPRINT-LOGICAL-BLOCK is supplied."
msgstr ""
"Ausecay ethay osestclay enclosingway useway ofway PRINTPAY-OGICALLAY-OCKBLAY "
"otay eturnray\n"
"   ifway itway's istlay argumentway isway exhaustedway.  Ancay onlyway ebay "
"usedway insideway\n"
"   PRINTPAY-OGICALLAY-OCKBLAY, andway onlyway enwhay ethay ISTLAY "
"argumentway otay\n"
"   PRINTPAY-OGICALLAY-OCKBLAY isway uppliedsay."

#: target:code/pprint.lisp
msgid ""
"PPRINT-EXIT-IF-LIST-EXHAUSTED must be lexically inside ~\n"
"\t  PPRINT-LOGICAL-BLOCK."
msgstr ""
"PRINTPAY-EXITWAY-IFWAY-ISTLAY-EXHAUSTEDWAY ustmay ebay exicallylay insideway "
"~\n"
"\t  PRINTPAY-OGICALLAY-OCKBLAY."

#: target:code/pprint.lisp
msgid ""
"Return the next element from LIST argument to the closest enclosing\n"
"   use of PPRINT-LOGICAL-BLOCK, automatically handling *PRINT-LENGTH*\n"
"   and *PRINT-CIRCLE*.  Can only be used inside PPRINT-LOGICAL-BLOCK.\n"
"   If the LIST argument to PPRINT-LOGICAL-BLOCK was NIL, then nothing\n"
"   is poped, but the *PRINT-LENGTH* testing still happens."
msgstr ""
"Eturnray ethay extnay elementway omfray ISTLAY argumentway otay ethay "
"osestclay enclosingway\n"
"   useway ofway PRINTPAY-OGICALLAY-OCKBLAY, automaticallyway andlinghay "
"*INTPRAY-ENGTHLAY*\n"
"   andway *INTPRAY-IRCLECAY*.  Ancay onlyway ebay usedway insideway PRINTPAY-"
"OGICALLAY-OCKBLAY.\n"
"   Ifway ethay ISTLAY argumentway otay PRINTPAY-OGICALLAY-OCKBLAY asway "
"ILNAY, enthay othingnay\n"
"   isway opedpay, utbay ethay *INTPRAY-ENGTHLAY* estingtay tillsay appenshay."

#: target:code/pprint.lisp
msgid "PPRINT-POP must be lexically inside PPRINT-LOGICAL-BLOCK."
msgstr ""
"PRINTPAY-OPPAY ustmay ebay exicallylay insideway PRINTPAY-OGICALLAY-OCKBLAY."

#: target:code/pprint.lisp
msgid ""
"Output a conditional newline to STREAM (which defaults to\n"
"   *STANDARD-OUTPUT*) if it is a pretty-printing stream, and do\n"
"   nothing if not.  KIND can be one of:\n"
"     :LINEAR - A line break is inserted if and only if the immediatly\n"
"        containing section cannot be printed on one line.\n"
"     :MISER - Same as LINEAR, but only if ``miser-style'' is in effect.\n"
"        (See *PRINT-MISER-WIDTH*.)\n"
"     :FILL - A line break is inserted if and only if either:\n"
"       (a) the following section cannot be printed on the end of the\n"
"           current line,\n"
"       (b) the preceding section was not printed on a single line, or\n"
"       (c) the immediately containing section cannot be printed on one\n"
"           line and miser-style is in effect.\n"
"     :MANDATORY - A line break is always inserted.\n"
"   When a line break is inserted by any type of conditional newline, any\n"
"   blanks that immediately precede the conditional newline are ommitted\n"
"   from the output and indentation is introduced at the beginning of the\n"
"   next line.  (See PPRINT-INDENT.)"
msgstr ""
"Outputway away onditionalcay ewlinenay otay EAMSTRAY (ichwhay efaultsday "
"otay\n"
"   *TANDARDSAY-OUTPUTWAY*) ifway itway isway away ettypray-intingpray "
"eamstray, andway oday\n"
"   othingnay ifway otnay.  INDKAY ancay ebay oneway ofway:\n"
"     :INEARLAY - Away inelay eakbray isway insertedway ifway andway onlyway "
"ifway ethay immediatlyway\n"
"        ontainingcay ectionsay annotcay ebay intedpray onway oneway inelay.\n"
"     :ISERMAY - Amesay asway INEARLAY, utbay onlyway ifway ``isermay-"
"tylesay'' isway inway effectway.\n"
"        (Eesay *INTPRAY-ISERMAY-IDTHWAY*.)\n"
"     :ILLFAY - Away inelay eakbray isway insertedway ifway andway onlyway "
"ifway eitherway:\n"
"       (away) ethay ollowingfay ectionsay annotcay ebay intedpray onway "
"ethay endway ofway ethay\n"
"           urrentcay inelay,\n"
"       (b) ethay ecedingpray ectionsay asway otnay intedpray onway away "
"inglesay inelay, orway\n"
"       (c) ethay immediatelyway ontainingcay ectionsay annotcay ebay "
"intedpray onway oneway\n"
"           inelay andway isermay-tylesay isway inway effectway.\n"
"     :ANDATORYMAY - Away inelay eakbray isway alwaysway insertedway.\n"
"   Enwhay away inelay eakbray isway insertedway ybay anyway ypetay ofway "
"onditionalcay ewlinenay, anyway\n"
"   anksblay atthay immediatelyway ecedepray ethay onditionalcay ewlinenay "
"areway ommittedway\n"
"   omfray ethay outputway andway indentationway isway introducedway atway "
"ethay eginningbay ofway ethay\n"
"   extnay inelay.  (Eesay PRINTPAY-INDENTWAY.)"

#: target:code/pprint.lisp
msgid ""
"Specify the indentation to use in the current logical block if STREAM\n"
"   (which defaults to *STANDARD-OUTPUT*) is a pretty-printing stream\n"
"   and do nothing if not.  (See PPRINT-LOGICAL-BLOCK.)  N is the indention\n"
"   to use (in ems, the width of an ``m'') and RELATIVE-TO can be either:\n"
"     :BLOCK - Indent relative to the column the current logical block\n"
"        started on.\n"
"     :CURRENT - Indent relative to the current column.\n"
"   The new indention value does not take effect until the following line\n"
"   break.  The indention value is silently truncated to an integer."
msgstr ""
"Ecifyspay ethay indentationway otay useway inway ethay urrentcay ogicallay "
"ockblay ifway EAMSTRAY\n"
"   (ichwhay efaultsday otay *TANDARDSAY-OUTPUTWAY*) isway away ettypray-"
"intingpray eamstray\n"
"   andway oday othingnay ifway otnay.  (Eesay PRINTPAY-OGICALLAY-OCKBLAY.)  "
"N isway ethay indentionway\n"
"   otay useway (inway emsway, ethay idthway ofway anway ``m'') andway "
"ELATIVERAY-OTAY ancay ebay eitherway:\n"
"     :OCKBLAY - Indentway elativeray otay ethay olumncay ethay urrentcay "
"ogicallay ockblay\n"
"        tartedsay onway.\n"
"     :URRENTCAY - Indentway elativeray otay ethay urrentcay olumncay.\n"
"   Ethay ewnay indentionway aluevay oesday otnay aketay effectway untilway "
"ethay ollowingfay inelay\n"
"   eakbray.  Ethay indentionway aluevay isway ilentlysay uncatedtray otay "
"anway integerway."

#: target:code/pprint.lisp
msgid ""
"If STREAM (which defaults to *STANDARD-OUTPUT*) is a pretty-printing\n"
"   stream, perform tabbing based on KIND, otherwise do nothing.  KIND can\n"
"   be one of:\n"
"     :LINE - Tab to column COLNUM.  If already past COLNUM tab to the next\n"
"       multiple of COLINC.\n"
"     :SECTION - Same as :LINE, but count from the start of the current\n"
"       section, not the start of the line.\n"
"     :LINE-RELATIVE - Output COLNUM spaces, then tab to the next multiple "
"of\n"
"       COLINC.\n"
"     :SECTION-RELATIVE - Same as :LINE-RELATIVE, but count from the start\n"
"       of the current section, not the start of the line."
msgstr ""
"Ifway EAMSTRAY (ichwhay efaultsday otay *TANDARDSAY-OUTPUTWAY*) isway away "
"ettypray-intingpray\n"
"   eamstray, erformpay abbingtay asedbay onway INDKAY, otherwiseway oday "
"othingnay.  INDKAY ancay\n"
"   ebay oneway ofway:\n"
"     :INELAY - Abtay otay olumncay OLNUMCAY.  Ifway alreadyway astpay "
"OLNUMCAY abtay otay ethay extnay\n"
"       ultiplemay ofway OLINCCAY.\n"
"     :ECTIONSAY - Amesay asway :INELAY, utbay ountcay omfray ethay tartsay "
"ofway ethay urrentcay\n"
"       ectionsay, otnay ethay tartsay ofway ethay inelay.\n"
"     :INELAY-ELATIVERAY - Outputway OLNUMCAY acesspay, enthay abtay otay "
"ethay extnay ultiplemay ofway\n"
"       OLINCCAY.\n"
"     :ECTIONSAY-ELATIVERAY - Amesay asway :INELAY-ELATIVERAY, utbay ountcay "
"omfray ethay tartsay\n"
"       ofway ethay urrentcay ectionsay, otnay ethay tartsay ofway ethay "
"inelay."

#: target:code/pprint.lisp
msgid ""
"Output LIST to STREAM putting :FILL conditional newlines between each\n"
"   element.  If COLON? is NIL (defaults to T), then no parens are printed\n"
"   around the output.  ATSIGN? is ignored (but allowed so that PPRINT-FILL\n"
"   can be used with the ~/.../ format directive."
msgstr ""
"Outputway ISTLAY otay EAMSTRAY uttingpay :ILLFAY onditionalcay ewlinesnay "
"etweenbay eachway\n"
"   elementway.  Ifway OLONCAY? isway ILNAY (efaultsday otay T), enthay onay "
"arenspay areway intedpray\n"
"   aroundway ethay outputway.  ATSIGNWAY? isway ignoredway (utbay allowedway "
"osay atthay PRINTPAY-ILLFAY\n"
"   ancay ebay usedway ithway ethay ~/.../ ormatfay irectiveday."

#: target:code/pprint.lisp
msgid ""
"Output LIST to STREAM putting :LINEAR conditional newlines between each\n"
"   element.  If COLON? is NIL (defaults to T), then no parens are printed\n"
"   around the output.  ATSIGN? is ignored (but allowed so that PPRINT-"
"LINEAR\n"
"   can be used with the ~/.../ format directive."
msgstr ""
"Outputway ISTLAY otay EAMSTRAY uttingpay :INEARLAY onditionalcay ewlinesnay "
"etweenbay eachway\n"
"   elementway.  Ifway OLONCAY? isway ILNAY (efaultsday otay T), enthay onay "
"arenspay areway intedpray\n"
"   aroundway ethay outputway.  ATSIGNWAY? isway ignoredway (utbay allowedway "
"osay atthay PRINTPAY-INEARLAY\n"
"   ancay ebay usedway ithway ethay ~/.../ ormatfay irectiveday."

#: target:code/pprint.lisp
msgid ""
"Output LIST to STREAM tabbing to the next column that is an even multiple\n"
"   of TABSIZE (which defaults to 16) between each element.  :FILL style\n"
"   conditional newlines are also output between each element.  If COLON? is\n"
"   NIL (defaults to T), then no parens are printed around the output.\n"
"   ATSIGN? is ignored (but allowed so that PPRINT-TABULAR can be used with\n"
"   the ~/.../ format directive."
msgstr ""
"Outputway ISTLAY otay EAMSTRAY abbingtay otay ethay extnay olumncay atthay "
"isway anway evenway ultiplemay\n"
"   ofway ABSIZETAY (ichwhay efaultsday otay 16) etweenbay eachway "
"elementway.  :ILLFAY tylesay\n"
"   onditionalcay ewlinesnay areway alsoway outputway etweenbay eachway "
"elementway.  Ifway OLONCAY? isway\n"
"   ILNAY (efaultsday otay T), enthay onay arenspay areway intedpray "
"aroundway ethay outputway.\n"
"   ATSIGNWAY? isway ignoredway (utbay allowedway osay atthay PRINTPAY-"
"ABULARTAY ancay ebay usedway ithway\n"
"   ethay ~/.../ ormatfay irectiveday."

#: target:code/pprint.lisp
msgid "CONS PPRINT dispatch ignored w/o compiler loaded:~%  ~S"
msgstr "ONSCAY PRINTPAY ispatchday ignoredway w/o ompilercay oadedlay:~%  ~S"

#: target:pcl/env.lisp target:pcl/methods.lisp target:pcl/std-class.lisp
#: target:pcl/defclass.lisp target:code/format.lisp
#: target:code/pprint-loop.lisp target:code/pprint.lisp
msgid "No more arguments."
msgstr "Onay oremay argumentsway."

#: target:code/format.lisp
msgid ""
"~:[~;Error in format: ~]~\n"
"\t      ~?~@[~%  ~A~%  ~V@T^~]"
msgstr ""
"~:[~;Errorway inway ormatfay: ~]~\n"
"\t      ~?~@[~%  ~Away~%  ~V@T^~]"

#: target:code/format.lisp
msgid ""
"A justification directive cannot be in the same format string~%~\n"
"                         as ~~W, ~~I, ~~:T, or a logical-block directive."
msgstr ""
"Away ustificationjay irectiveday annotcay ebay inway ethay amesay ormatfay "
"ingstray~%~\n"
"                         asway ~~W, ~~Iway, ~~:T, orway away ogicallay-"
"ockblay irectiveday."

#: target:code/format.lisp
msgid "String ended before directive was found."
msgstr "Ingstray endedway eforebay irectiveday asway oundfay."

#: target:code/format.lisp
msgid "Too many colons supplied."
msgstr "Ootay anymay olonscay uppliedsay."

#: target:code/format.lisp
msgid "Too many at-signs supplied."
msgstr "Ootay anymay atway-ignssay uppliedsay."

#: target:code/format.lisp
msgid "No matching closing slash."
msgstr "Onay atchingmay osingclay ashslay."

#: target:code/format.lisp
msgid ""
"Provides various facilities for formatting output.\n"
"  CONTROL-STRING contains a string to be output, possibly with embedded\n"
"  directives, which are flagged with the escape character \"~\".  "
"Directives\n"
"  generally expand into additional text to be output, usually consuming one\n"
"  or more of the FORMAT-ARGUMENTS in the process.  A few useful directives\n"
"  are:\n"
"        ~A or ~nA     Prints one argument as if by PRINC\n"
"        ~S or ~nS     Prints one argument as if by PRIN1\n"
"        ~D or ~nD     Prints one argument as a decimal integer\n"
"        ~%            Does a TERPRI\n"
"        ~&            Does a FRESH-LINE\n"
"\n"
"         where n is the width of the field in which the object is printed.\n"
"  \n"
"  DESTINATION controls where the result will go.  If DESTINATION is T, then\n"
"  the output is sent to the standard output stream.  If it is NIL, then the\n"
"  output is returned in a string as the value of the call.  Otherwise,\n"
"  DESTINATION must be a stream to which the output will be sent.\n"
"\n"
"  Example:   (FORMAT NIL \"The answer is ~D.\" 10) => \"The answer is 10.\"\n"
"\n"
"  FORMAT has many additional capabilities not described here.  Consult\n"
"  Section 22.3 (Formatted Output) of the ANSI Common Lisp standard for\n"
"  details."
msgstr ""
"Ovidespray ariousvay acilitiesfay orfay ormattingfay outputway.\n"
"  ONTROLCAY-INGSTRAY ontainscay away ingstray otay ebay outputway, "
"ossiblypay ithway embeddedway\n"
"  irectivesday, ichwhay areway aggedflay ithway ethay escapeway aracterchay "
"\"~\".  Irectivesday\n"
"  enerallygay expandway intoway additionalway exttay otay ebay outputway, "
"usuallyway onsumingcay oneway\n"
"  orway oremay ofway ethay ORMATFAY-ARGUMENTSWAY inway ethay ocesspray.  "
"Away ewfay usefulway irectivesday\n"
"  areway:\n"
"        ~Away orway ~anay     Intspray oneway argumentway asway ifway ybay "
"INCPRAY\n"
"        ~S orway ~snay     Intspray oneway argumentway asway ifway ybay "
"INPRAY1\n"
"        ~D orway ~dnay     Intspray oneway argumentway asway away ecimalday "
"integerway\n"
"        ~%            Oesday away ERPRITAY\n"
"        ~&            Oesday away ESHFRAY-INELAY\n"
"\n"
"         erewhay n isway ethay idthway ofway ethay ieldfay inway ichwhay "
"ethay objectway isway intedpray.\n"
"  \n"
"  ESTINATIONDAY ontrolscay erewhay ethay esultray illway ogay.  Ifway "
"ESTINATIONDAY isway T, enthay\n"
"  ethay outputway isway entsay otay ethay tandardsay outputway eamstray.  "
"Ifway itway isway ILNAY, enthay ethay\n"
"  outputway isway eturnedray inway away ingstray asway ethay aluevay ofway "
"ethay allcay.  Otherwiseway,\n"
"  ESTINATIONDAY ustmay ebay away eamstray otay ichwhay ethay outputway "
"illway ebay entsay.\n"
"\n"
"  Exampleway:   (ORMATFAY ILNAY \"Ethay answerway isway ~D.\" 10) => \"Ethay "
"answerway isway 10.\"\n"
"\n"
"  ORMATFAY ashay anymay additionalway apabilitiescay otnay escribedday "
"erehay.  Onsultcay\n"
"  Ectionsay 22.3 (Ormattedfay Outputway) ofway ethay ANSIWAY Ommoncay Isplay "
"tandardsay orfay\n"
"  etailsday."

#: target:code/format.lisp
msgid "Unknown format directive."
msgstr "Unknownway ormatfay irectiveday."

#: target:code/format.lisp
msgid "Unknown directive."
msgstr "Unknownway irectiveday."

#: target:code/format.lisp
msgid "Too many parameters, expected no more than ~D"
msgstr "Ootay anymay arameterspay, expectedway onay oremay anthay ~D"

#: target:code/format.lisp
msgid "Too many parameters, expected no more than 0"
msgstr "Ootay anymay arameterspay, expectedway onay oremay anthay 0"

#: target:code/format.lisp
msgid "Table of ordinal ones-place digits in English"
msgstr "Abletay ofway ordinalway onesway-aceplay igitsday inway Englishway"

#: target:code/format.lisp
msgid "Table of ordinal tens-place digits in English"
msgstr "Abletay ofway ordinalway enstay-aceplay igitsday inway Englishway"

#: target:code/format.lisp
msgid "Number too large to print in old Roman numerals: ~:D"
msgstr ""
"Umbernay ootay argelay otay intpray inway oldway Omanray umeralsnay: ~:D"

#: target:code/format.lisp
msgid "Number too large to print in Roman numerals: ~:D"
msgstr "Umbernay ootay argelay otay intpray inway Omanray umeralsnay: ~:D"

#: target:code/format.lisp
msgid "No previous argument."
msgstr "Onay eviouspray argumentway."

#: target:code/format.lisp
msgid "Cannot specify the colon modifier with this directive."
msgstr "Annotcay ecifyspay ethay oloncay odifiermay ithway isthay irectiveday."

#: target:code/format.lisp
msgid "Cannot specify either colon or atsign for this directive."
msgstr ""
"Annotcay ecifyspay eitherway oloncay orway atsignway orfay isthay "
"irectiveday."

#: target:code/format.lisp
msgid "Cannot specify both colon and atsign for this directive."
msgstr ""
"Annotcay ecifyspay othbay oloncay andway atsignway orfay isthay irectiveday."

#: target:code/format.lisp
msgid "Cannot specify the at-sign modifier."
msgstr "Annotcay ecifyspay ethay atway-ignsay odifiermay."

#: target:code/format.lisp
msgid "Cannot specify both colon and at-sign."
msgstr "Annotcay ecifyspay othbay oloncay andway atway-ignsay."

#: target:code/format.lisp
msgid ""
"Index ~D out of bounds.  Should have been ~\n"
"\t\t\t\t    between 0 and ~D."
msgstr ""
"Indexway ~D outway ofway oundsbay.  Ouldshay avehay eenbay ~\n"
"\t\t\t\t    etweenbay 0 andway ~D."

#: target:code/format.lisp
msgid ""
"Index ~D out of bounds.  Should have been ~\n"
"\t\t\t\tbetween 0 and ~D."
msgstr ""
"Indexway ~D outway ofway oundsbay.  Ouldshay avehay eenbay ~\n"
"\t\t\t\tetweenbay 0 andway ~D."

#: target:code/format.lisp
msgid ""
"Index ~D out of bounds.  Should have been ~\n"
"\t\t\t\t   between 0 and ~D."
msgstr ""
"Indexway ~D outway ofway oundsbay.  Ouldshay avehay eenbay ~\n"
"\t\t\t\t   etweenbay 0 andway ~D."

#: target:code/format.lisp
msgid ""
"Index ~D out of bounds.  Should have been ~\n"
"\t\t\t       between 0 and ~D."
msgstr ""
"Indexway ~D outway ofway oundsbay.  Ouldshay avehay eenbay ~\n"
"\t\t\t       etweenbay 0 andway ~D."

#: target:code/format.lisp
msgid "Cannot specify the colon modifier."
msgstr "Annotcay ecifyspay ethay oloncay odifiermay."

#: target:pcl/seal.lisp target:pcl/method-slot-access-optimization.lisp
#: target:pcl/low.lisp target:code/format.lisp
msgid "~A~%while processing indirect format string:"
msgstr "~Away~%ilewhay ocessingpray indirectway ormatfay ingstray:"

#: target:code/format.lisp
msgid "No corresponding close paren."
msgstr "Onay orrespondingcay oseclay arenpay."

#: target:code/format.lisp
msgid "No corresponding open paren."
msgstr "Onay orrespondingcay openway arenpay."

#: target:code/format.lisp
msgid "No corresponding close bracket."
msgstr "Onay orrespondingcay oseclay acketbray."

#: target:code/format.lisp
msgid "Cannot specify both the colon and at-sign modifiers."
msgstr ""
"Annotcay ecifyspay othbay ethay oloncay andway atway-ignsay odifiersmay."

#: target:code/format.lisp
msgid "Can only specify one section"
msgstr "Ancay onlyway ecifyspay oneway ectionsay"

#: target:code/format.lisp
msgid "Must specify exactly two sections."
msgstr "Ustmay ecifyspay exactlyway wotay ectionssay."

#: target:code/format.lisp
msgid "~~; not contained within either ~~[...~~] or ~~<...~~>."
msgstr "~~; otnay ontainedcay ithinway eitherway ~~[...~~] orway ~~<...~~>."

#: target:code/format.lisp
msgid "No corresponding open bracket."
msgstr "Onay orrespondingcay openway acketbray."

#: target:code/format.lisp
msgid "Attempt to use ~~:^ outside a ~~:{...~~} construct."
msgstr "Attemptway otay useway ~~:^ outsideway away ~~:{...~~} onstructcay."

#: target:code/format.lisp
msgid "No corresponding close brace."
msgstr "Onay orrespondingcay oseclay acebray."

#: target:code/format.lisp
msgid "No corresponding open brace."
msgstr "Onay orrespondingcay openway acebray."

#: target:code/format.lisp
msgid "~D illegal directive~:P found inside justification block"
msgstr "~D illegalway irectiveday~:P oundfay insideway ustificationjay ockblay"

#: target:code/format.lisp
msgid "No parameters can be supplied with ~~<...~~:>."
msgstr "Onay arameterspay ancay ebay uppliedsay ithway ~~<...~~:>."

#: target:code/format.lisp
msgid ""
"Cannot include format directives inside the ~\n"
"\t\t\t       ~:[suffix~;prefix~] segment of ~~<...~~:>"
msgstr ""
"Annotcay includeway ormatfay irectivesday insideway ethay ~\n"
"\t\t\t       ~:[uffixsay~;efixpray~] egmentsay ofway ~~<...~~:>"

#: target:code/format.lisp
msgid "Too many segments for ~~<...~~:>."
msgstr "Ootay anymay egmentssay orfay ~~<...~~:>."

#: target:code/format.lisp
msgid "Malformed ~~/ directive."
msgstr "Alformedmay ~~/ irectiveday."

#: target:code/format.lisp
msgid "No package named ~S"
msgstr "Onay ackagepay amednay ~S"

#: target:code/package.lisp
msgid ""
"The list of packages to use by default of no :USE argument is supplied\n"
"   to MAKE-PACKAGE or other package creation forms."
msgstr ""
"Ethay istlay ofway ackagespay otay useway ybay efaultday ofway onay :USEWAY "
"argumentway isway uppliedsay\n"
"   otay AKEMAY-ACKAGEPAY orway otherway ackagepay eationcray ormsfay."

#: target:code/package.lisp
msgid ""
"Standard structure for the description of a package.  Consists of \n"
"   a list of all hash tables, the name of the package, the nicknames of\n"
"   the package, the use-list for the package, the used-by- list, hash-\n"
"   tables for the internal and external symbols, and a list of the\n"
"   shadowing symbols."
msgstr ""
"Tandardsay ucturestray orfay ethay escriptionday ofway away ackagepay.  "
"Onsistscay ofway \n"
"   away istlay ofway allway ashhay ablestay, ethay amenay ofway ethay "
"ackagepay, ethay icknamesnay ofway\n"
"   ethay ackagepay, ethay useway-istlay orfay ethay ackagepay, ethay usedway-"
"ybay- istlay, ashhay-\n"
"   ablestay orfay ethay internalway andway externalway ymbolssay, andway "
"away istlay ofway ethay\n"
"   adowingshay ymbolssay."

#: target:code/package.lisp
msgid "The ~A package, ~D/~D internal, ~D/~D external"
msgstr "Ethay ~Away ackagepay, ~D/~D internalway, ~D/~D externalway"

#: target:code/package.lisp
msgid "The ~A package"
msgstr "Ethay ~Away ackagepay"

#: target:code/package.lisp
msgid "deleted package"
msgstr "eletedday ackagepay"

#: target:code/package.lisp
msgid "The current package."
msgstr "Ethay urrentcay ackagepay."

#: target:code/package.lisp
msgid "~&~@<Attempt to modify the locked package ~A, by ~3i~:_~?~:>"
msgstr ""
"~&~@<Attemptway otay odifymay ethay ockedlay ackagepay ~Away, ybay ~3i~:_~?~:"
">"

#: target:code/package.lisp
msgid "redefining function ~A"
msgstr "edefiningray unctionfay ~Away"

#: target:code/macros.lisp target:code/defstruct.lisp target:code/package.lisp
msgid "Ignore the lock and continue"
msgstr "Ignoreway ethay ocklay andway ontinuecay"

#: target:code/package.lisp
msgid "Disable package's definition-lock, then continue"
msgstr "Isableday ackagepay's efinitionday-ocklay, enthay ontinuecay"

#: target:code/package.lisp
msgid "Disable all package locks, then continue"
msgstr "Isableday allway ackagepay ockslay, enthay ontinuecay"

#: target:code/package.lisp
msgid "Bogus ~A name: ~S"
msgstr "Ogusbay ~Away amenay: ~S"

#: target:code/package.lisp
msgid "Can't do anything to a deleted package: ~S"
msgstr "Ancay't oday anythingway otay away eletedday ackagepay: ~S"

#: target:code/package.lisp
msgid ""
"Given PACKAGE-SPECIFIER, a package, symbol or string, return the\n"
"  parent package.  If there is not a parent, signal an error."
msgstr ""
"Ivengay ACKAGEPAY-ECIFIERSPAY, away ackagepay, ymbolsay orway ingstray, "
"eturnray ethay\n"
"  arentpay ackagepay.  Ifway erethay isway otnay away arentpay, ignalsay "
"anway errorway."

#: target:code/package.lisp
msgid "The parent of ~a does not exist."
msgstr "Ethay arentpay ofway ~away oesday otnay existway."

#: target:code/package.lisp
msgid "There is no parent of ~a."
msgstr "Erethay isway onay arentpay ofway ~away."

#: target:code/package.lisp
msgid ""
"Given PACKAGE-SPECIFIER, a package, symbol or string, return all the\n"
"  packages which are in the hierarchy 'under' the given package.  If\n"
"  :recurse is nil, then only return the immediate children of the package."
msgstr ""
"Ivengay ACKAGEPAY-ECIFIERSPAY, away ackagepay, ymbolsay orway ingstray, "
"eturnray allway ethay\n"
"  ackagespay ichwhay areway inway ethay ierarchyhay 'underway' ethay ivengay "
"ackagepay.  Ifway\n"
"  :ecurseray isway ilnay, enthay onlyway eturnray ethay immediateway "
"ildrenchay ofway ethay ackagepay."

#: target:code/package.lisp
msgid "Find the package having the specified name."
msgstr "Indfay ethay ackagepay avinghay ethay ecifiedspay amenay."

#: target:code/package.lisp
msgid "Make this package."
msgstr "Akemay isthay ackagepay."

#: target:code/package.lisp
msgid "#<Package-Hashtable: Size = ~D, Free = ~D, Deleted = ~D>"
msgstr "#<Ackagepay-Ashtablehay: Izesay = ~D, Eefray = ~D, Eletedday = ~D>"

#: target:code/package.lisp
msgid ""
"DO-SYMBOLS (VAR [PACKAGE [RESULT-FORM]]) {DECLARATION}* {TAG | FORM}*\n"
"   Executes the FORMs at least once for each symbol accessible in the given\n"
"   PACKAGE with VAR bound to the current symbol."
msgstr ""
"ODAY-YMBOLSSAY (ARVAY [ACKAGEPAY [ESULTRAY-ORMFAY]]) {ECLARATIONDAY}* {AGTAY "
"| ORMFAY}*\n"
"   Executesway ethay Ormsfay atway eastlay onceway orfay eachway ymbolsay "
"accessibleway inway ethay ivengay\n"
"   ACKAGEPAY ithway ARVAY oundbay otay ethay urrentcay ymbolsay."

#: target:code/package.lisp
msgid ""
"DO-EXTERNAL-SYMBOLS (VAR [PACKAGE [RESULT-FORM]]) {DECL}* {TAG | FORM}*\n"
"   Executes the FORMs once for each external symbol in the given PACKAGE "
"with\n"
"   VAR bound to the current symbol."
msgstr ""
"ODAY-EXTERNALWAY-YMBOLSSAY (ARVAY [ACKAGEPAY [ESULTRAY-ORMFAY]]) {ECLDAY}* "
"{AGTAY | ORMFAY}*\n"
"   Executesway ethay Ormsfay onceway orfay eachway externalway ymbolsay "
"inway ethay ivengay ACKAGEPAY ithway\n"
"   ARVAY oundbay otay ethay urrentcay ymbolsay."

#: target:code/package.lisp
msgid ""
"DO-ALL-SYMBOLS (VAR [RESULT-FORM]) {DECLARATION}* {TAG | FORM}*\n"
"   Executes the FORMs once for each symbol in every package with VAR bound\n"
"   to the current symbol."
msgstr ""
"ODAY-ALLWAY-YMBOLSSAY (ARVAY [ESULTRAY-ORMFAY]) {ECLARATIONDAY}* {AGTAY | "
"ORMFAY}*\n"
"   Executesway ethay Ormsfay onceway orfay eachway ymbolsay inway everyway "
"ackagepay ithway ARVAY oundbay\n"
"   otay ethay urrentcay ymbolsay."

#: target:code/package.lisp
msgid ""
"Within the lexical scope of the body forms, MNAME is defined via macrolet\n"
"   such that successive invocations of (mname) will return the symbols,\n"
"   one by one, from the packages in PACKAGE-LIST. SYMBOL-TYPES may be\n"
"   any of :inherited :external :internal."
msgstr ""
"Ithinway ethay exicallay opescay ofway ethay odybay ormsfay, AMEMNAY isway "
"efinedday iavay acroletmay\n"
"   uchsay atthay uccessivesay invocationsway ofway (amemnay) illway eturnray "
"ethay ymbolssay,\n"
"   oneway ybay oneway, omfray ethay ackagespay inway ACKAGEPAY-ISTLAY. "
"YMBOLSAY-YPESTAY aymay ebay\n"
"   anyway ofway :inheritedway :externalway :internalway."

#: target:code/package.lisp
msgid "~@<~S does not name a package ~:>"
msgstr "~@<~S oesday otnay amenay away ackagepay ~:>"

#: target:code/package.lisp
msgid ""
"Must supply at least one of :internal, ~\n"
"\t                             :external, or :inherited."
msgstr ""
"Ustmay upplysay atway eastlay oneway ofway :internalway, ~\n"
"\t                             :externalway, orway :inheritedway."

#: target:code/package.lisp
msgid ""
"~S is not one of :internal, :external, ~\n"
"\t\t                       or :inherited."
msgstr ""
"~S isway otnay oneway ofway :internalway, :externalway, ~\n"
"\t\t                       orway :inheritedway."

#: target:code/package.lisp
msgid ""
"Defines a new package called PACKAGE.  Each of OPTIONS should be one of the\n"
"   following:\n"
"     (:NICKNAMES {package-name}*)\n"
"     (:SIZE <integer>)\n"
"     (:SHADOW {symbol-name}*)\n"
"     (:SHADOWING-IMPORT-FROM <package-name> {symbol-name}*)\n"
"     (:USE {package-name}*)\n"
"     (:IMPORT-FROM <package-name> {symbol-name}*)\n"
"     (:INTERN {symbol-name}*)\n"
"     (:EXPORT {symbol-name}*)\n"
"     (:DOCUMENTATION doc-string)\n"
"   All options except :SIZE and :DOCUMENTATION can be used multiple times."
msgstr ""
"Efinesday away ewnay ackagepay alledcay ACKAGEPAY.  Eachway ofway OPTIONSWAY "
"ouldshay ebay oneway ofway ethay\n"
"   ollowingfay:\n"
"     (:ICKNAMESNAY {ackagepay-amenay}*)\n"
"     (:IZESAY <integerway>)\n"
"     (:ADOWSHAY {ymbolsay-amenay}*)\n"
"     (:ADOWINGSHAY-IMPORTWAY-OMFRAY <ackagepay-amenay> {ymbolsay-amenay}*)\n"
"     (:USEWAY {ackagepay-amenay}*)\n"
"     (:IMPORTWAY-OMFRAY <ackagepay-amenay> {ymbolsay-amenay}*)\n"
"     (:INTERNWAY {ymbolsay-amenay}*)\n"
"     (:EXPORTWAY {ymbolsay-amenay}*)\n"
"     (:OCUMENTATIONDAY ocday-ingstray)\n"
"   Allway optionsway exceptway :IZESAY andway :OCUMENTATIONDAY ancay ebay "
"usedway ultiplemay imestay."

#: target:code/package.lisp
msgid "Bogus DEFPACKAGE option: ~S"
msgstr "Ogusbay EFPACKAGEDAY optionway: ~S"

#: target:code/package.lisp
msgid "Can't specify :SIZE twice."
msgstr "Ancay't ecifyspay :IZESAY wicetay."

#: target:code/package.lisp
msgid "Bogus :SIZE, must be a positive integer: ~S"
msgstr "Ogusbay :IZESAY, ustmay ebay away ositivepay integerway: ~S"

#: target:code/package.lisp
msgid "Can't specify :DOCUMENTATION twice."
msgstr "Ancay't ecifyspay :OCUMENTATIONDAY wicetay."

#: target:code/package.lisp
msgid ""
"Parameters ~S and ~S must be disjoint ~\n"
"\t                             but have common elements ~%   ~S"
msgstr ""
"Arameterspay ~S andway ~S ustmay ebay isjointday ~\n"
"\t                             utbay avehay ommoncay elementsway ~%   ~S"

#: target:code/package.lisp
msgid "~A is a nick-name for the package ~A"
msgstr "~Away isway away icknay-amenay orfay ethay ackagepay ~Away"

#: target:code/package.lisp
msgid "~A also shadows the following symbols:~%  ~S"
msgstr "~Away alsoway adowsshay ethay ollowingfay ymbolssay:~%  ~S"

#: target:code/package.lisp
msgid "~A previously used the following packages:~%  ~S"
msgstr "~Away eviouslypray usedway ethay ollowingfay ackagespay:~%  ~S"

#: target:code/package.lisp
msgid "~A also exports the following symbols:~%  ~S"
msgstr "~Away alsoway exportsway ethay ollowingfay ymbolssay:~%  ~S"

#: target:code/package.lisp
msgid "~A does not contain a symbol ~A"
msgstr "~Away oesday otnay ontaincay away ymbolsay ~Away"

#: target:code/package.lisp
msgid "Ignore this nickname."
msgstr "Ignoreway isthay icknamenay."

#: target:code/package.lisp
msgid "~S is a package name, so it cannot be a nickname for ~S."
msgstr ""
"~S isway away ackagepay amenay, osay itway annotcay ebay away icknamenay "
"orfay ~S."

#: target:code/package.lisp
msgid "Redefine this nickname."
msgstr "Edefineray isthay icknamenay."

#: target:code/package.lisp
msgid "~S is already a nickname for ~S."
msgstr "~S isway alreadyway away icknamenay orfay ~S."

#: target:code/package.lisp
msgid ""
"Makes a new package having the specified Name and Nicknames.  The\n"
"  package will inherit all external symbols from each package in\n"
"  the use list.  :Internal-Symbols and :External-Symbols are\n"
"  estimates for the number of internal and external symbols which\n"
"  will ultimately be present in the package."
msgstr ""
"Akesmay away ewnay ackagepay avinghay ethay ecifiedspay Amenay andway "
"Icknamesnay.  Ethay\n"
"  ackagepay illway inheritway allway externalway ymbolssay omfray eachway "
"ackagepay inway\n"
"  ethay useway istlay.  :Internalway-Ymbolssay andway :Externalway-Ymbolssay "
"areway\n"
"  estimatesway orfay ethay umbernay ofway internalway andway externalway "
"ymbolssay ichwhay\n"
"  illway ultimatelyway ebay esentpray inway ethay ackagepay."

#: target:code/package.lisp
msgid "Leave existing package alone."
msgstr "Eavelay existingway ackagepay aloneway."

#: target:code/package.lisp
msgid "A package named ~S already exists"
msgstr "Away ackagepay amednay ~S alreadyway existsway"

#: target:code/package.lisp
msgid ""
"Sets *PACKAGE* to package with given NAME, creating the package if\n"
"   it does not exist.  If the package already exists then it is modified\n"
"   to agree with the :USE and :NICKNAMES arguments.  Any new nicknames\n"
"   are added without removing any old ones not specified.  If any package\n"
"   in the :Use list is not currently used, then it is added to the use\n"
"   list."
msgstr ""
"Etssay *ACKAGEPAY* otay ackagepay ithway ivengay AMENAY, eatingcray ethay "
"ackagepay ifway\n"
"   itway oesday otnay existway.  Ifway ethay ackagepay alreadyway existsway "
"enthay itway isway odifiedmay\n"
"   otay agreeway ithway ethay :USEWAY andway :ICKNAMESNAY argumentsway.  "
"Anyway ewnay icknamesnay\n"
"   areway addedway ithoutway emovingray anyway oldway onesway otnay "
"ecifiedspay.  Ifway anyway ackagepay\n"
"   inway ethay :Useway istlay isway otnay urrentlycay usedway, enthay itway "
"isway addedway otay ethay useway\n"
"   istlay."

#: target:code/package.lisp
msgid "Old-style IN-PACKAGE."
msgstr "Oldway-tylesay INWAY-ACKAGEPAY."

#: target:code/package.lisp
msgid "The package named ~S doesn't exist."
msgstr "Ethay ackagepay amednay ~S oesnday't existway."

#: target:code/package.lisp
msgid "Changes the name and nicknames for a package."
msgstr "Angeschay ethay amenay andway icknamesnay orfay away ackagepay."

#: target:code/package.lisp
msgid "A package named ~S already exists."
msgstr "Away ackagepay amednay ~S alreadyway existsway."

#: target:code/package.lisp
msgid "Delete the PACKAGE-OR-NAME from the package system data structures."
msgstr ""
"Eleteday ethay ACKAGEPAY-ORWAY-AMENAY omfray ethay ackagepay ystemsay ataday "
"ucturesstray."

#: target:code/package.lisp
msgid "Return NIL"
msgstr "Eturnray ILNAY"

#: target:code/package.lisp
msgid "No package of name ~S."
msgstr "Onay ackagepay ofway amenay ~S."

#: target:code/package.lisp
msgid "Remove dependency in other packages."
msgstr "Emoveray ependencyday inway otherway ackagespay."

#: target:code/package.lisp
msgid "Returns a list of all existing packages."
msgstr "Eturnsray away istlay ofway allway existingway ackagespay."

#: target:code/package.lisp
msgid "Returns a symbol having the specified name, creating it if necessary."
msgstr ""
"Eturnsray away ymbolsay avinghay ethay ecifiedspay amenay, eatingcray itway "
"ifway ecessarynay."

#: target:code/package.lisp
msgid ""
"Returns the symbol NAME in PACKAGE.  If such a symbol is found\n"
"  then the second value is :internal, :external or :inherited to indicate\n"
"  how the symbol is accessible.  If no symbol is found then both values\n"
"  are NIL."
msgstr ""
"Eturnsray ethay ymbolsay AMENAY inway ACKAGEPAY.  Ifway uchsay away ymbolsay "
"isway oundfay\n"
"  enthay ethay econdsay aluevay isway :internalway, :externalway orway :"
"inheritedway otay indicateway\n"
"  owhay ethay ymbolsay isway accessibleway.  Ifway onay ymbolsay isway "
"oundfay enthay othbay aluesvay\n"
"  areway ILNAY."

#: target:code/package.lisp
msgid "interning symbol ~A"
msgstr "interningway ymbolsay ~Away"

#: target:code/package.lisp
msgid ""
"Makes SYMBOL no longer present in PACKAGE.  If SYMBOL was present\n"
"  then T is returned, otherwise NIL.  If PACKAGE is SYMBOL's home\n"
"  package, then it is made uninterned."
msgstr ""
"Akesmay YMBOLSAY onay ongerlay esentpray inway ACKAGEPAY.  Ifway YMBOLSAY "
"asway esentpray\n"
"  enthay T isway eturnedray, otherwiseway ILNAY.  Ifway ACKAGEPAY isway "
"YMBOLSAY's omehay\n"
"  ackagepay, enthay itway isway ademay uninternedway."

#: target:code/package.lisp
msgid "uninterning symbol ~A"
msgstr "uninterningway ymbolsay ~Away"

#: target:code/package.lisp
msgid "Disable package's lock then continue"
msgstr "Isableday ackagepay's ocklay enthay ontinuecay"

#: target:code/macros.lisp target:code/defstruct.lisp target:code/package.lisp
msgid "Unlock all packages, then continue"
msgstr "Unlockway allway ackagespay, enthay ontinuecay"

#: target:code/package.lisp
msgid "prompt for a symbol to shadowing-import."
msgstr "omptpray orfay away ymbolsay otay adowingshay-importway."

#: target:code/package.lisp
msgid "Uninterning symbol ~S causes name conflict among these symbols:~%~S"
msgstr ""
"Uninterningway ymbolsay ~S ausescay amenay onflictcay amongway esethay "
"ymbolssay:~%~S"

#: target:code/package.lisp
msgid "Symbol to shadowing-import: "
msgstr "Ymbolsay otay adowingshay-importway: "

#: target:code/package.lisp
msgid "~S is not a symbol."
msgstr "~S isway otnay away ymbolsay."

#: target:code/package.lisp
msgid "~S is not one of the conflicting symbols."
msgstr "~S isway otnay oneway ofway ethay onflictingcay ymbolssay."

#: target:code/package.lisp
msgid "~S is neither a symbol nor a list of symbols."
msgstr "~S isway eithernay away ymbolsay ornay away istlay ofway ymbolssay."

#: target:code/package.lisp
msgid "Exports SYMBOLS from PACKAGE, checking that no name conflicts result."
msgstr ""
"Exportsway YMBOLSSAY omfray ACKAGEPAY, eckingchay atthay onay amenay "
"onflictscay esultray."

#: target:code/package.lisp
msgid ""
"Exporting these symbols from the ~A package:~%~S~%~\n"
"\t      results in name conflicts with these packages:~%~{~A ~}"
msgstr ""
"Exportingway esethay ymbolssay omfray ethay ~Away ackagepay:~%~S~%~\n"
"\t      esultsray inway amenay onflictscay ithway esethay ackagespay:~%~"
"{~Away ~}"

#: target:code/package.lisp
msgid "Unintern conflicting symbols."
msgstr "Uninternway onflictingcay ymbolssay."

#: target:code/package.lisp
msgid "Skip exporting conflicting symbols."
msgstr "Kipsay exportingway onflictingcay ymbolssay."

#: target:code/package.lisp
msgid "Import these symbols into the ~A package."
msgstr "Importway esethay ymbolssay intoway ethay ~Away ackagepay."

#: target:code/package.lisp
msgid "These symbols are not accessible in the ~A package:~%~S"
msgstr ""
"Esethay ymbolssay areway otnay accessibleway inway ethay ~Away ackagepay:~%~S"

#: target:code/package.lisp
msgid "Makes SYMBOLS no longer exported from PACKAGE."
msgstr "Akesmay YMBOLSSAY onay ongerlay exportedway omfray ACKAGEPAY."

#: target:code/package.lisp
msgid "unexporting symbols ~A"
msgstr "unexportingway ymbolssay ~Away"

#: target:code/package.lisp
msgid "~S is not accessible in the ~A package."
msgstr "~S isway otnay accessibleway inway ethay ~Away ackagepay."

#: target:code/package.lisp
msgid ""
"Make SYMBOLS accessible as internal symbols in PACKAGE.  If a symbol\n"
"  is already accessible then it has no effect.  If a name conflict\n"
"  would result from the importation, then a correctable error is signalled."
msgstr ""
"Akemay YMBOLSSAY accessibleway asway internalway ymbolssay inway ACKAGEPAY.  "
"Ifway away ymbolsay\n"
"  isway alreadyway accessibleway enthay itway ashay onay effectway.  Ifway "
"away amenay onflictcay\n"
"  ouldway esultray omfray ethay importationway, enthay away orrectablecay "
"errorway isway ignalledsay."

#: target:code/package.lisp
msgid "Import these symbols with Shadowing-Import."
msgstr "Importway esethay ymbolssay ithway Adowingshay-Importway."

#: target:code/package.lisp
msgid ""
"Importing these symbols into the ~A package ~\n"
"\t\tcauses a name conflict:~%~S"
msgstr ""
"Importingway esethay ymbolssay intoway ethay ~Away ackagepay ~\n"
"\t\tausescay away amenay onflictcay:~%~S"

#: target:code/package.lisp
msgid ""
"Import SYMBOLS into PACKAGE, disregarding any name conflict.  If\n"
"  a symbol of the same name is present, then it is uninterned.\n"
"  The symbols are added to the Package-Shadowing-Symbols."
msgstr ""
"Importway YMBOLSSAY intoway ACKAGEPAY, isregardingday anyway amenay "
"onflictcay.  Ifway\n"
"  away ymbolsay ofway ethay amesay amenay isway esentpray, enthay itway "
"isway uninternedway.\n"
"  Ethay ymbolssay areway addedway otay ethay Ackagepay-Adowingshay-Ymbolssay."

#: target:code/package.lisp
msgid ""
"Make an internal symbol in PACKAGE with the same name as each of the\n"
"  specified SYMBOLS, adding the new symbols to the Package-Shadowing-"
"Symbols.\n"
"  If a symbol with the given name is already present in PACKAGE, then\n"
"  the existing symbol is placed in the shadowing symbols list if it is\n"
"  not already present."
msgstr ""
"Akemay anway internalway ymbolsay inway ACKAGEPAY ithway ethay amesay amenay "
"asway eachway ofway ethay\n"
"  ecifiedspay YMBOLSSAY, addingway ethay ewnay ymbolssay otay ethay "
"Ackagepay-Adowingshay-Ymbolssay.\n"
"  Ifway away ymbolsay ithway ethay ivengay amenay isway alreadyway esentpray "
"inway ACKAGEPAY, enthay\n"
"  ethay existingway ymbolsay isway acedplay inway ethay adowingshay "
"ymbolssay istlay ifway itway isway\n"
"  otnay alreadyway esentpray."

#: target:code/package.lisp
msgid ""
"Add all the PACKAGES-TO-USE to the use list for PACKAGE so that\n"
"  the external symbols of the used packages are accessible as internal\n"
"  symbols in PACKAGE."
msgstr ""
"Addway allway ethay ACKAGESPAY-OTAY-USEWAY otay ethay useway istlay orfay "
"ACKAGEPAY osay atthay\n"
"  ethay externalway ymbolssay ofway ethay usedway ackagespay areway "
"accessibleway asway internalway\n"
"  ymbolssay inway ACKAGEPAY."

#: target:code/package.lisp
msgid "Unintern the conflicting symbols in the ~2*~A package."
msgstr ""
"Uninternway ethay onflictingcay ymbolssay inway ethay ~2*~Away ackagepay."

#: target:code/package.lisp
msgid "Use'ing package ~A results in name conflicts for these symbols:~%~S"
msgstr ""
"Useway'ingway ackagepay ~Away esultsray inway amenay onflictscay orfay "
"esethay ymbolssay:~%~S"

#: target:code/package.lisp
msgid "Remove PACKAGES-TO-UNUSE from the use list for PACKAGE."
msgstr ""
"Emoveray ACKAGESPAY-OTAY-UNUSEWAY omfray ethay useway istlay orfay ACKAGEPAY."

#: target:code/package.lisp
msgid "Return a list of all symbols in the system having the specified name."
msgstr ""
"Eturnray away istlay ofway allway ymbolssay inway ethay ystemsay avinghay "
"ethay ecifiedspay amenay."

#: target:code/describe.lisp target:code/package.lisp
msgid "special variable"
msgstr "ecialspay ariablevay"

#: target:code/describe.lisp target:code/package.lisp
msgid "constant"
msgstr "onstantcay"

#: target:code/describe.lisp target:code/package.lisp
msgid "undefined variable"
msgstr "undefinedway ariablevay"

#: target:code/describe.lisp target:code/package.lisp
msgid "symbol macro"
msgstr "ymbolsay acromay"

#: target:code/package.lisp
msgid "alien variable"
msgstr "alienway ariablevay"

#: target:code/package.lisp
msgid "value: "
msgstr "aluevay: "

#: target:code/package.lisp
msgid "macro"
msgstr "acromay"

#: target:code/package.lisp
msgid "special operator"
msgstr "ecialspay operatorway"

#: target:code/package.lisp
msgid "function"
msgstr "unctionfay"

#: target:code/package.lisp
msgid "class"
msgstr "assclay"

#: target:code/package.lisp
msgid "type"
msgstr "ypetay"

#: target:code/package.lisp
msgid ""
"Call FUN with each symbol that contains STRING.\n"
"  If PACKAGE is supplied then only use symbols present in\n"
"  that package.  If EXTERNAL-ONLY is true then only use\n"
"  symbols exported from the specified package."
msgstr ""
"Allcay UNFAY ithway eachway ymbolsay atthay ontainscay INGSTRAY.\n"
"  Ifway ACKAGEPAY isway uppliedsay enthay onlyway useway ymbolssay esentpray "
"inway\n"
"  atthay ackagepay.  Ifway EXTERNALWAY-ONLYWAY isway uetray enthay onlyway "
"useway\n"
"  ymbolssay exportedway omfray ethay ecifiedspay ackagepay."

#: target:code/package.lisp
msgid ""
"Briefly describe all symbols which contain the specified STRING.\n"
"  If PACKAGE is supplied then only describe symbols present in\n"
"  that package.  If EXTERNAL-ONLY is non-NIL then only describe\n"
"  external symbols in the specified package."
msgstr ""
"Ieflybray escribeday allway ymbolssay ichwhay ontaincay ethay ecifiedspay "
"INGSTRAY.\n"
"  Ifway ACKAGEPAY isway uppliedsay enthay onlyway escribeday ymbolssay "
"esentpray inway\n"
"  atthay ackagepay.  Ifway EXTERNALWAY-ONLYWAY isway onnay-ILNAY enthay "
"onlyway escribeday\n"
"  externalway ymbolssay inway ethay ecifiedspay ackagepay."

#: target:code/package.lisp
msgid ""
"Identical to APROPOS, except that it returns a list of the symbols\n"
"  found instead of describing them."
msgstr ""
"Identicalway otay APROPOSWAY, exceptway atthay itway eturnsray away istlay "
"ofway ethay ymbolssay\n"
"  oundfay insteadway ofway escribingday emthay."

#: target:code/reader.lisp
msgid "Float format for 1.0E1"
msgstr "Oatflay ormatfay orfay 1.0E1"

#: target:code/reader.lisp
msgid "Variable bound to current readtable."
msgstr "Ariablevay oundbay otay urrentcay eadtableray."

#: target:code/reader.lisp
msgid "Reader error ~@[at ~D ~]on ~S:~%~?"
msgstr "Eaderray errorway ~@[atway ~D ~]onway ~S:~%~?"

#: target:code/reader.lisp
msgid "Unexpected EOF on ~S ~A."
msgstr "Unexpectedway EOFWAY onway ~S ~Away."

#: target:code/reader.lisp
msgid ""
"Standard lisp readtable. This is for recovery from broken\n"
"   read-tables, and should not normally be user-visible."
msgstr ""
"Tandardsay isplay eadtableray. Isthay isway orfay ecoveryray omfray "
"okenbray\n"
"   eadray-ablestay, andway ouldshay otnay ormallynay ebay userway-isiblevay."

#: target:code/reader.lisp
msgid ""
"Readtable is a data structure that maps characters into syntax\n"
"   types for the Common Lisp expression reader."
msgstr ""
"Eadtableray isway away ataday ucturestray atthay apsmay aracterschay intoway "
"yntaxsay\n"
"   ypestay orfay ethay Ommoncay Isplay expressionway eaderray."

#: target:code/reader.lisp
msgid "Value of *package* at the start of the last read or Nil."
msgstr ""
"Aluevay ofway *ackagepay* atway ethay tartsay ofway ethay astlay eadray "
"orway Ilnay."

#: target:code/reader.lisp
msgid "Undefined read-macro character ~S"
msgstr "Undefinedway eadray-acromay aracterchay ~S"

#: target:code/reader.lisp
msgid "A copy is made of from-readtable and place into to-readtable."
msgstr ""
"Away opycay isway ademay ofway omfray-eadtableray andway aceplay intoway "
"otay-eadtableray."

#: target:code/reader.lisp
msgid ""
"Causes the syntax of to-char to be the same as from-char in the \n"
"  optional readtable (defaults to the current readtable).  The\n"
"  from-table defaults the standard lisp readtable by being nil."
msgstr ""
"Ausescay ethay yntaxsay ofway otay-archay otay ebay ethay amesay asway "
"omfray-archay inway ethay \n"
"  optionalway eadtableray (efaultsday otay ethay urrentcay eadtableray).  "
"Ethay\n"
"  omfray-abletay efaultsday ethay tandardsay isplay eadtableray ybay eingbay "
"ilnay."

#: target:code/reader.lisp
msgid ""
"Causes char to be a macro character which invokes function when\n"
"   seen by the reader.  The non-terminatingp flag can be used to\n"
"   make the macro character non-terminating.  The optional readtable\n"
"   argument defaults to the current readtable.  Set-macro-character\n"
"   returns T."
msgstr ""
"Ausescay archay otay ebay away acromay aracterchay ichwhay invokesway "
"unctionfay enwhay\n"
"   eensay ybay ethay eaderray.  Ethay onnay-erminatingptay agflay ancay ebay "
"usedway otay\n"
"   akemay ethay acromay aracterchay onnay-erminatingtay.  Ethay optionalway "
"eadtableray\n"
"   argumentway efaultsday otay ethay urrentcay eadtableray.  Etsay-acromay-"
"aracterchay\n"
"   eturnsray T."

#: target:code/reader.lisp
msgid ""
"Returns the function associated with the specified char which is a macro\n"
"  character.  The optional readtable argument defaults to the current\n"
"  readtable."
msgstr ""
"Eturnsray ethay unctionfay associatedway ithway ethay ecifiedspay archay "
"ichwhay isway away acromay\n"
"  aracterchay.  Ethay optionalway eadtableray argumentway efaultsday otay "
"ethay urrentcay\n"
"  eadtableray."

#: target:code/reader.lisp
msgid "Bind *read-buffer* to a fresh buffer and execute Body."
msgstr ""
"Indbay *eadray-ufferbay* otay away eshfray ufferbay andway executeway Odybay."

#: target:code/reader.lisp
msgid "If true, only warn when there is an extra close paren, otherwise error."
msgstr ""
"Ifway uetray, onlyway arnway enwhay erethay isway anway extraway oseclay "
"arenpay, otherwiseway errorway."

#: target:code/reader.lisp
msgid ""
"Reads from stream and returns the object read, preserving the whitespace\n"
"   that followed the object."
msgstr ""
"Eadsray omfray eamstray andway eturnsray ethay objectway eadray, "
"eservingpray ethay itespacewhay\n"
"   atthay ollowedfay ethay objectway."

#: target:code/reader.lisp
msgid ""
"Reads in the next object in the stream, which defaults to\n"
"   *standard-input*. For details see the I/O chapter of\n"
"   the manual."
msgstr ""
"Eadsray inway ethay extnay objectway inway ethay eamstray, ichwhay "
"efaultsday otay\n"
"   *tandardsay-inputway*. Orfay etailsday eesay ethay Iway/O apterchay "
"ofway\n"
"   ethay anualmay."

#: target:code/reader.lisp
msgid ""
"Reads objects from input-stream until the next character after an\n"
"   object's representation is endchar.  A list of those objects read\n"
"   is returned."
msgstr ""
"Eadsray objectsway omfray inputway-eamstray untilway ethay extnay "
"aracterchay afterway anway\n"
"   objectway's epresentationray isway endcharway.  Away istlay ofway osethay "
"objectsway eadray\n"
"   isway eturnedray."

#: target:code/reader.lisp
msgid "Nothing appears before . in list."
msgstr "Othingnay appearsway eforebay . inway istlay."

#: target:code/reader.lisp
msgid "Nothing appears after . in list."
msgstr "Othingnay appearsway afterway . inway istlay."

#: target:code/reader.lisp
msgid "More than one object follows . in list."
msgstr "Oremay anthay oneway objectway ollowsfay . inway istlay."

#: target:code/reader.lisp
msgid ""
"Ignoring unmatched close parenthesis~\n"
"\t\t  ~@[ at file position ~D~]."
msgstr ""
"Ignoringway unmatchedway oseclay arenthesispay~\n"
"\t\t  ~@[ atway ilefay ositionpay ~D~]."

#: target:code/reader.lisp
msgid "Unmatched close parenthesis."
msgstr "Unmatchedway oseclay arenthesispay."

#: target:code/reader.lisp
msgid "after escape character"
msgstr "afterway escapeway aracterchay"

#: target:code/reader.lisp
msgid "inside extended token"
msgstr "insideway extendedway okentay"

#: target:code/reader.lisp
msgid "invalid constituent"
msgstr "invalidway onstituentcay"

#: target:code/reader.lisp
msgid "Suppresses most interpreting of the reader when T"
msgstr "Uppressessay ostmay interpretingway ofway ethay eaderray enwhay T"

#: target:code/reader.lisp
msgid "The radix that Lisp reads numbers in."
msgstr "Ethay adixray atthay Isplay eadsray umbersnay inway."

#: target:code/reader.lisp
msgid "This function is just an fsm that recognizes numbers and symbols."
msgstr ""
"Isthay unctionfay isway ustjay anway smfay atthay ecognizesray umbersnay "
"andway ymbolssay."

#: target:code/reader.lisp
msgid "impossible!"
msgstr "impossibleway!"

#: target:code/reader.lisp
msgid "dot context error"
msgstr "otday ontextcay errorway"

#: target:code/reader.lisp
msgid "too many dots"
msgstr "ootay anymay otsday"

#: target:code/reader.lisp
msgid "too many colons in ~S"
msgstr "ootay anymay olonscay inway ~S"

#: target:code/reader.lisp
msgid "after reading a colon"
msgstr "afterway eadingray away oloncay"

#: target:code/reader.lisp
msgid "package ~S not found"
msgstr "ackagepay ~S otnay oundfay"

#: target:code/reader.lisp
msgid "Use symbol anyway."
msgstr "Useway ymbolsay anywayway."

#: target:code/reader.lisp
msgid "The symbol ~S is not external in the ~A package."
msgstr "Ethay ymbolsay ~S isway otnay externalway inway ethay ~Away ackagepay."

#: target:code/reader.lisp
msgid "Symbol ~S not found in the ~A package."
msgstr "Ymbolsay ~S otnay oundfay inway ethay ~Away ackagepay."

#: target:code/reader.lisp
msgid ""
"For semi-external use: returns 3 values: the string for the token,\n"
"   a flag for whether there was an escape char, and the position of any\n"
"   package delimiter."
msgstr ""
"Orfay emisay-externalway useway: eturnsray 3 aluesvay: ethay ingstray orfay "
"ethay okentay,\n"
"   away agflay orfay etherwhay erethay asway anway escapeway archay, andway "
"ethay ositionpay ofway anyway\n"
"   ackagepay elimiterday."

#: target:code/reader.lisp
msgid ""
"For semi-external use: read an extended token with the first character\n"
"  escaped.  Returns the string for the token."
msgstr ""
"Orfay emisay-externalway useway: eadray anway extendedway okentay ithway "
"ethay irstfay aracterchay\n"
"  escapedway.  Eturnsray ethay ingstray orfay ethay okentay."

#: target:code/reader.lisp
msgid "after escape"
msgstr "afterway escapeway"

#: target:code/reader.lisp
msgid ""
"Holds the mapping of base to 'safe' number of digits to read for a fixnum."
msgstr ""
"Oldshay ethay appingmay ofway asebay otay 'afesay' umbernay ofway igitsday "
"otay eadray orfay away ixnumfay."

#: target:code/reader.lisp
msgid "Holds the largest fixnum power of the base for make-integer."
msgstr ""
"Oldshay ethay argestlay ixnumfay owerpay ofway ethay asebay orfay akemay-"
"integerway."

#: target:code/reader.lisp
msgid ""
"Minimizes bignum-fixnum multiplies by reading a 'safe' number of digits, \n"
"  then multiplying by a power of the base and adding."
msgstr ""
"Inimizesmay ignumbay-ixnumfay ultipliesmay ybay eadingray away 'afesay' "
"umbernay ofway igitsday, \n"
"  enthay ultiplyingmay ybay away owerpay ofway ethay asebay andway addingway."

#: target:code/reader.lisp
msgid ""
"Fast bignum-reading interface.  Reads from stream S an integer in radix\n"
"R.  If we find some kind of error (bad characters, EOF), then NIL is\n"
"returned; otherwise the number.  Reads at least one digit, but may not get "
"to\n"
"the end of the stream."
msgstr ""
"Astfay ignumbay-eadingray interfaceway.  Eadsray omfray eamstray S anway "
"integerway inway adixray\n"
"R.  Ifway eway indfay omesay indkay ofway errorway (adbay aracterschay, "
"EOFWAY), enthay ILNAY isway\n"
"eturnedray; otherwiseway ethay umbernay.  Eadsray atway eastlay oneway "
"igitday, utbay aymay otnay etgay otay\n"
"ethay endway ofway ethay eamstray."

#: target:code/reader.lisp
msgid "Internal error in floating point reader."
msgstr "Internalway errorway inway oatingflay ointpay eaderray."

#: target:code/reader.lisp
msgid "Underflow"
msgstr "Underflowway"

#: target:code/reader.lisp
msgid "Floating-point number not representable"
msgstr "Oatingflay-ointpay umbernay otnay epresentableray"

#: target:code/reader.lisp
msgid "Invalid ratio: ~S/~S"
msgstr "Invalidway atioray: ~S/~S"

#: target:code/reader.lisp
msgid "No dispatch function defined for ~S."
msgstr "Onay ispatchday unctionfay efinedday orfay ~S."

#: target:code/reader.lisp
msgid ""
"Causes char to become a dispatching macro character in readtable\n"
"   (which defaults to the current readtable).  If the non-terminating-p\n"
"   flag is set to T, the char will be non-terminating.  Make-dispatch-\n"
"   macro-character returns T."
msgstr ""
"Ausescay archay otay ecomebay away ispatchingday acromay aracterchay inway "
"eadtableray\n"
"   (ichwhay efaultsday otay ethay urrentcay eadtableray).  Ifway ethay onnay-"
"erminatingtay-p\n"
"   agflay isway etsay otay T, ethay archay illway ebay onnay-erminatingtay.  "
"Akemay-ispatchday-\n"
"   acromay-aracterchay eturnsray T."

#: target:code/reader.lisp
msgid ""
"Causes function to be called whenever the reader reads\n"
"   disp-char followed by sub-char. Set-dispatch-macro-character\n"
"   returns T."
msgstr ""
"Ausescay unctionfay otay ebay alledcay eneverwhay ethay eaderray eadsray\n"
"   ispday-archay ollowedfay ybay ubsay-archay. Etsay-ispatchday-acromay-"
"aracterchay\n"
"   eturnsray T."

#: target:code/reader.lisp
msgid "Dispatch Sub-Char must not be a decimal digit: ~S"
msgstr "Ispatchday Ubsay-Archay ustmay otnay ebay away ecimalday igitday: ~S"

#: target:code/reader.lisp
msgid "~S is not a dispatch character."
msgstr "~S isway otnay away ispatchday aracterchay."

#: target:code/reader.lisp
msgid ""
"Returns the macro character function for sub-char under disp-char\n"
"   or nil if there is no associated function."
msgstr ""
"Eturnsray ethay acromay aracterchay unctionfay orfay ubsay-archay underway "
"ispday-archay\n"
"   orway ilnay ifway erethay isway onay associatedway unctionfay."

#: target:code/reader.lisp
msgid "inside dispatch character"
msgstr "insideway ispatchday aracterchay"

#: target:code/reader.lisp
msgid "No dispatch table for dispatch char."
msgstr "Onay ispatchday abletay orfay ispatchday archay."

#: target:code/reader.lisp
msgid "A resource of string streams for Read-From-String."
msgstr "Away esourceray ofway ingstray eamsstray orfay Eadray-Omfray-Ingstray."

#: target:code/reader.lisp
msgid ""
"The characters of string are successively given to the lisp reader\n"
"   and the lisp object built by the reader is returned.  Macro chars\n"
"   will take effect."
msgstr ""
"Ethay aracterschay ofway ingstray areway uccessivelysay ivengay otay ethay "
"isplay eaderray\n"
"   andway ethay isplay objectway uiltbay ybay ethay eaderray isway "
"eturnedray.  Acromay arschay\n"
"   illway aketay effectway."

#: target:code/reader.lisp
msgid ""
"Examine the substring of string delimited by start and end\n"
"  (default to the beginning and end of the string)  It skips over\n"
"  whitespace characters and then tries to parse an integer.  The\n"
"  radix parameter must be between 2 and 36."
msgstr ""
"Examineway ethay ubstringsay ofway ingstray elimitedday ybay tartsay andway "
"endway\n"
"  (efaultday otay ethay eginningbay andway endway ofway ethay ingstray)  "
"Itway kipssay overway\n"
"  itespacewhay aracterschay andway enthay iestray otay arsepay anway "
"integerway.  Ethay\n"
"  adixray arameterpay ustmay ebay etweenbay 2 andway 36."

#: target:code/reader.lisp
msgid "There are no digits in this string: ~S"
msgstr "Erethay areway onay igitsday inway isthay ingstray: ~S"

#: target:code/reader.lisp
msgid "There's junk in this string: ~S."
msgstr "Erethay's unkjay inway isthay ingstray: ~S."

#: target:code/sharpm.lisp
msgid "Numeric argument ignored in #~D~A."
msgstr "Umericnay argumentway ignoredway inway #~D~Away."

#: target:code/sharpm.lisp
msgid "Unrecognized character name: ~S"
msgstr "Unrecognizedway aracterchay amenay: ~S"

#: target:code/sharpm.lisp
msgid "Ill-formed vector: #~S"
msgstr "Illway-ormedfay ectorvay: #~S"

#: target:code/sharpm.lisp
msgid "Vector longer than specified length: #~S~S"
msgstr "Ectorvay ongerlay anthay ecifiedspay engthlay: #~S~S"

#: target:code/sharpm.lisp
msgid "Escape character appeared after #*"
msgstr "Escapeway aracterchay appearedway afterway #*"

#: target:code/sharpm.lisp
msgid "You have to give a little bit for non-zero #* bit-vectors."
msgstr ""
"Ouyay avehay otay ivegay away ittlelay itbay orfay onnay-erozay #* itbay-"
"ectorsvay."

#: target:code/sharpm.lisp
msgid "Illegal element given for bit-vector: ~S"
msgstr "Illegalway elementway ivengay orfay itbay-ectorvay: ~S"

#: target:code/sharpm.lisp
msgid "Bit vector is longer than specified length #~A*~A"
msgstr "Itbay ectorvay isway ongerlay anthay ecifiedspay engthlay #~Away*~Away"

#: target:code/sharpm.lisp
msgid "Symbol following #: contains a package marker: ~S"
msgstr "Ymbolsay ollowingfay #: ontainscay away ackagepay arkermay: ~S"

#: target:code/sharpm.lisp
msgid "If false, then the #. read macro is disabled."
msgstr "Ifway alsefay, enthay ethay #. eadray acromay isway isabledday."

#: target:code/sharpm.lisp
msgid "Attempt to read #. while *READ-EVAL* is bound to NIL."
msgstr ""
"Attemptway otay eadray #. ilewhay *EADRAY-EVALWAY* isway oundbay otay ILNAY."

#: target:code/sharpm.lisp
msgid "Radix missing in #R."
msgstr "Adixray issingmay inway #R."

#: target:code/sharpm.lisp
msgid "Illegal radix for #R: ~D."
msgstr "Illegalway adixray orfay #R: ~D."

#: target:code/sharpm.lisp
msgid "#~A (base ~D) value is not a rational: ~S."
msgstr "#~Away (asebay ~D) aluevay isway otnay away ationalray: ~S."

#: target:code/sharpm.lisp
msgid ""
"#~DA axis ~D is empty, but axis ~\n"
"\t\t\t\t          ~D is non-empty."
msgstr ""
"#~ADAY axisway ~D isway emptyway, utbay axisway ~\n"
"\t\t\t\t          ~D isway onnay-emptyway."

#: target:code/sharpm.lisp
msgid "Non-list following #S"
msgstr "Onnay-istlay ollowingfay #S"

#: target:code/sharpm.lisp
msgid "Non-list following #S: ~S"
msgstr "Onnay-istlay ollowingfay #S: ~S"

#: target:code/sharpm.lisp
msgid "Structure type is not a symbol: ~S"
msgstr "Ucturestray ypetay isway otnay away ymbolsay: ~S"

#: target:code/sharpm.lisp
msgid "~S is not a defined structure type."
msgstr "~S isway otnay away efinedday ucturestray ypetay."

#: target:code/sharpm.lisp
msgid "The ~S structure does not have a default constructor."
msgstr "Ethay ~S ucturestray oesday otnay avehay away efaultday onstructorcay."

#: target:code/sharpm.lisp
msgid "Missing label for #=."
msgstr "Issingmay abellay orfay #=."

#: target:code/sharpm.lisp
msgid "Multiply defined label: #~D="
msgstr "Ultiplymay efinedday abellay: #~D="

#: target:code/sharpm.lisp
msgid "Have to tag something more than just #~D#."
msgstr "Avehay otay agtay omethingsay oremay anthay ustjay #~D#."

#: target:code/sharpm.lisp
msgid "Missing label for ##."
msgstr "Issingmay abellay orfay ##."

#: target:code/sharpm.lisp
msgid "reference to undefined label #~D#"
msgstr "eferenceray otay undefinedway abellay #~D#"

#: target:code/sharpm.lisp
msgid "Illegal complex number format: #C~S"
msgstr "Illegalway omplexcay umbernay ormatfay: #C~S"

#: target:code/sharpm.lisp
msgid "Illegal sharp character ~S"
msgstr "Illegalway arpshay aracterchay ~S"

#: target:code/backq.lisp
msgid "How deep we are into backquotes"
msgstr "Owhay eepday eway areway intoway ackquotesbay"

#: target:code/backq.lisp
msgid ",@ after backquote in ~S"
msgstr ",@ afterway ackquotebay inway ~S"

#: target:code/backq.lisp
msgid ",. after backquote in ~S"
msgstr ",. afterway ackquotebay inway ~S"

#: target:code/backq.lisp
msgid "Comma not inside a backquote."
msgstr "Ommacay otnay insideway away ackquotebay."

#: target:code/backq.lisp
msgid ",@ after dot in ~S"
msgstr ",@ afterway otday inway ~S"

#: target:code/backq.lisp
msgid ",. after dot in ~S"
msgstr ",. afterway otday inway ~S"

#: target:code/backq.lisp
msgid ""
"Given a lisp form containing the magic functions BACKQ-LIST, BACKQ-LIST*,\n"
"  BACKQ-APPEND, etc. produced by the backquote reader macro, will return a\n"
"  corresponding backquote input form.  In this form, `,' `,@' and `,.' are\n"
"  represented by lists whose cars are BACKQ-COMMA, BACKQ-COMMA-AT, and\n"
"  BACKQ-COMMA-DOT respectively, and whose cadrs are the form after the "
"comma.\n"
"  SPLICING indicates whether a comma-escape return should be modified for\n"
"  splicing with other forms: a value of T or :NCONC meaning that an extra\n"
"  level of parentheses should be added."
msgstr ""
"Ivengay away isplay ormfay ontainingcay ethay agicmay unctionsfay ACKQBAY-"
"ISTLAY, ACKQBAY-ISTLAY*,\n"
"  ACKQBAY-APPENDWAY, etcway. oducedpray ybay ethay ackquotebay eaderray "
"acromay, illway eturnray away\n"
"  orrespondingcay ackquotebay inputway ormfay.  Inway isthay ormfay, `,' `,"
"@' andway `,.' areway\n"
"  epresentedray ybay istslay osewhay arscay areway ACKQBAY-OMMACAY, ACKQBAY-"
"OMMACAY-ATWAY, andway\n"
"  ACKQBAY-OMMACAY-OTDAY espectivelyray, andway osewhay adrscay areway ethay "
"ormfay afterway ethay ommacay.\n"
"  LICINGSPAY indicatesway etherwhay away ommacay-escapeway eturnray ouldshay "
"ebay odifiedmay orfay\n"
"  licingspay ithway otherway ormsfay: away aluevay ofway T orway :CONCNAY "
"eaningmay atthay anway extraway\n"
"  evellay ofway arenthesespay ouldshay ebay addedway."

#: target:code/backq.lisp
msgid "### illegal dotted backquote form ###"
msgstr "### illegalway ottedday ackquotebay ormfay ###"

#: target:code/serve-event.lisp
msgid ""
"Make an object set for use by a RPC/xevent server.  Name is for\n"
"      descriptive purposes only."
msgstr ""
"Akemay anway objectway etsay orfay useway ybay away PCRAY/eventxay "
"erversay.  Amenay isway orfay\n"
"      escriptiveday urposespay onlyway."

#: target:code/serve-event.lisp
msgid "You lose, object: ~S"
msgstr "Ouyay oselay, objectway: ~S"

#: target:code/serve-event.lisp
msgid ""
"Return the handler function in Object-Set for the operation specified by\n"
"   Message-ID, if none, NIL is returned."
msgstr ""
"Eturnray ethay andlerhay unctionfay inway Objectway-Etsay orfay ethay "
"operationway ecifiedspay ybay\n"
"   Essagemay-IDWAY, ifway onenay, ILNAY isway eturnedray."

#: target:code/serve-event.lisp
msgid "Sets the handler function for an object set operation."
msgstr ""
"Etssay ethay andlerhay unctionfay orfay anway objectway etsay operationway."

#: target:code/serve-event.lisp
msgid "#<Handler for ~A on ~:[~;BOGUS ~]descriptor ~D: ~S>"
msgstr "#<Andlerhay orfay ~Away onway ~:[~;OGUSBAY ~]escriptorday ~D: ~S>"

#: target:code/serve-event.lisp
msgid "List of all the currently active handlers for file descriptors"
msgstr ""
"Istlay ofway allway ethay urrentlycay activeway andlershay orfay ilefay "
"escriptorsday"

#: target:code/serve-event.lisp
msgid ""
"Arange to call FUNCTION whenever FD is usable. DIRECTION should be\n"
"  either :INPUT or :OUTPUT. The value returned should be passed to\n"
"  SYSTEM:REMOVE-FD-HANDLER when it is no longer needed."
msgstr ""
"Arangeway otay allcay UNCTIONFAY eneverwhay DFAY isway usableway. "
"IRECTIONDAY ouldshay ebay\n"
"  eitherway :INPUTWAY orway :OUTPUTWAY. Ethay aluevay eturnedray ouldshay "
"ebay assedpay otay\n"
"  YSTEMSAY:EMOVERAY-DFAY-ANDLERHAY enwhay itway isway onay ongerlay eedednay."

#: target:code/serve-event.lisp
msgid "Invalid direction ~S, must be either :INPUT or :OUTPUT"
msgstr ""
"Invalidway irectionday ~S, ustmay ebay eitherway :INPUTWAY orway :OUTPUTWAY"

#: target:code/serve-event.lisp
msgid "Removes HANDLER from the list of active handlers."
msgstr "Emovesray ANDLERHAY omfray ethay istlay ofway activeway andlershay."

#: target:code/serve-event.lisp
msgid ""
"Remove any handers refering to FD. This should only be used when attempting\n"
"  to recover from a detected inconsistency."
msgstr ""
"Emoveray anyway andershay eferingray otay DFAY. Isthay ouldshay onlyway ebay "
"usedway enwhay attemptingway\n"
"  otay ecoverray omfray away etectedday inconsistencyway."

#: target:code/serve-event.lisp
msgid ""
"Establish a handler with SYSTEM:ADD-FD-HANDLER for the duration of BODY.\n"
"   DIRECTION should be either :INPUT or :OUTPUT, FD is the file descriptor "
"to\n"
"   use, and FUNCTION is the function to call whenever FD is usable."
msgstr ""
"Establishway away andlerhay ithway YSTEMSAY:ADDWAY-DFAY-ANDLERHAY orfay "
"ethay urationday ofway ODYBAY.\n"
"   IRECTIONDAY ouldshay ebay eitherway :INPUTWAY orway :OUTPUTWAY, DFAY "
"isway ethay ilefay escriptorday otay\n"
"   useway, andway UNCTIONFAY isway ethay unctionfay otay allcay eneverwhay "
"DFAY isway usableway."

#: target:code/serve-event.lisp
msgid "Remove bogus handlers."
msgstr "Emoveray ogusbay andlershay."

#: target:code/serve-event.lisp
msgid "Retry bogus handlers."
msgstr "Etryray ogusbay andlershay."

#: target:code/serve-event.lisp
msgid "Go on, leaving handlers marked as bogus."
msgstr "Ogay onway, eavinglay andlershay arkedmay asway ogusbay."

#: target:code/serve-event.lisp
msgid "Timeout is not a real number or NIL: ~S"
msgstr "Imeouttay isway otnay away ealray umbernay orway ILNAY: ~S"

#: target:code/serve-event.lisp
msgid ""
"Wait until FD is usable for DIRECTION. DIRECTION should be either :INPUT or\n"
"  :OUTPUT. TIMEOUT, if supplied, is the number of seconds to wait before "
"giving\n"
"  up."
msgstr ""
"Aitway untilway DFAY isway usableway orfay IRECTIONDAY. IRECTIONDAY ouldshay "
"ebay eitherway :INPUTWAY orway\n"
"  :OUTPUTWAY. IMEOUTTAY, ifway uppliedsay, isway ethay umbernay ofway "
"econdssay otay aitway eforebay ivinggay\n"
"  upway."

#: target:code/serve-event.lisp
msgid ""
"This is an alist mapping displays to user functions to be called when\n"
"   SYSTEM:SERVE-EVENT notices input on a display connection.  Do not modify\n"
"   this directly; use EXT:ENABLE-CLX-EVENT-HANDLING.  A given display\n"
"   should be represented here only once."
msgstr ""
"Isthay isway anway alistway appingmay isplaysday otay userway unctionsfay "
"otay ebay alledcay enwhay\n"
"   YSTEMSAY:ERVESAY-EVENTWAY oticesnay inputway onway away isplayday "
"onnectioncay.  Oday otnay odifymay\n"
"   isthay irectlyday; useway EXTWAY:ENABLEWAY-XCLAY-EVENTWAY-ANDLINGHAY.  "
"Away ivengay isplayday\n"
"   ouldshay ebay epresentedray erehay onlyway onceway."

#: target:code/serve-event.lisp
msgid ""
"SERVE-ALL-EVENTS calls SERVE-EVENT with the specified timeout.  If\n"
"  SERVE-EVENT does something (returns T) it loops over SERVE-EVENT with "
"timeout\n"
"  0 until all events have been served.  SERVE-ALL-EVENTS returns T if\n"
"  SERVE-EVENT did something and NIL if not."
msgstr ""
"ERVESAY-ALLWAY-EVENTSWAY allscay ERVESAY-EVENTWAY ithway ethay ecifiedspay "
"imeouttay.  Ifway\n"
"  ERVESAY-EVENTWAY oesday omethingsay (eturnsray T) itway oopslay overway "
"ERVESAY-EVENTWAY ithway imeouttay\n"
"  0 untilway allway eventsway avehay eenbay ervedsay.  ERVESAY-ALLWAY-"
"EVENTSWAY eturnsray T ifway\n"
"  ERVESAY-EVENTWAY idday omethingsay andway ILNAY ifway otnay."

#: target:code/serve-event.lisp
msgid ""
"Receive on all ports and Xevents and dispatch to the appropriate handler\n"
"  function.  If timeout is specified, server will wait the specified time "
"(in\n"
"  seconds) and then return, otherwise it will wait until something happens.\n"
"  Server returns T if something happened and NIL otherwise."
msgstr ""
"Eceiveray onway allway ortspay andway Eventsxay andway ispatchday otay ethay "
"appropriateway andlerhay\n"
"  unctionfay.  Ifway imeouttay isway ecifiedspay, erversay illway aitway "
"ethay ecifiedspay imetay (inway\n"
"  econdssay) andway enthay eturnray, otherwiseway itway illway aitway "
"untilway omethingsay appenshay.\n"
"  Erversay eturnsray T ifway omethingsay appenedhay andway ILNAY "
"otherwiseway."

#: target:code/serve-event.lisp
msgid "Event-listen was true, but handler didn't handle: ~%~S"
msgstr ""
"Eventway-istenlay asway uetray, utbay andlerhay idnday't andlehay: ~%~S"

#: target:code/extfmts.lisp
msgid "Attempting unimplemented external-format I/O."
msgstr "Attemptingway unimplementedway externalway-ormatfay Iway/O."

#: target:code/extfmts.lisp
msgid "Nonsensical argument (~S) to DEFINE-EXTERNAL-FORMAT."
msgstr "Onsensicalnay argumentway (~S) otay EFINEDAY-EXTERNALWAY-ORMATFAY."

#: target:code/extfmts.lisp
msgid "External-format aliases file ends early."
msgstr "Externalway-ormatfay aliasesway ilefay endsway earlyway."

#: target:code/extfmts.lisp
msgid "Bad entry in external-format aliases file: ~S => ~S."
msgstr "Adbay entryway inway externalway-ormatfay aliasesway ilefay: ~S => ~S."

#: target:code/extfmts.lisp
msgid "External-format aliasing depth exceeded."
msgstr "Externalway-ormatfay aliasingway epthday exceededway."

#: target:code/extfmts.lisp
msgid "~S is a Composing-External-Format."
msgstr "~S isway away Omposingcay-Externalway-Ormatfay."

#: target:code/extfmts.lisp
msgid "~S is not a Composing-External-Format."
msgstr "~S isway otnay away Omposingcay-Externalway-Ormatfay."

#: target:code/extfmts.lisp
msgid "~S is not a valid external format name."
msgstr "~S isway otnay away alidvay externalway ormatfay amenay."

#: target:code/extfmts.lisp
msgid "External format ~S not found."
msgstr "Externalway ormatfay ~S otnay oundfay."

#: target:code/extfmts.lisp
msgid "Attempting I/O through void external-format."
msgstr "Attemptingway Iway/O roughthay oidvay externalway-ormatfay."

#: target:code/extfmts.lisp
msgid ""
"Convert String to octets using the specified External-format.  The\n"
"   string is bounded by Start (defaulting to 0) and End (defaulting to\n"
"   the end of the string.  If Buffer is given, the octets are stored\n"
"   there.  If not, a new buffer is created."
msgstr ""
"Onvertcay Ingstray otay octetsway usingway ethay ecifiedspay Externalway-"
"ormatfay.  Ethay\n"
"   ingstray isway oundedbay ybay Tartsay (efaultingday otay 0) andway Endway "
"(efaultingday otay\n"
"   ethay endway ofway ethay ingstray.  Ifway Ufferbay isway ivengay, ethay "
"octetsway areway toredsay\n"
"   erethay.  Ifway otnay, away ewnay ufferbay isway eatedcray."

#: target:code/extfmts.lisp
msgid ""
"Octets-to-string converts an array of octets in Octets to a string\n"
"  according to the specified External-format.  The array of octets is\n"
"  bounded by Start (defaulting ot 0) and End (defaulting to the end of\n"
"  the array.  If String is not given, a new string is created.  If\n"
"  String is given, the converted octets are stored in String, starting\n"
"  at S-Start (defaulting to the 0) and ending at S-End (defaulting to\n"
"  the length of String).  If the string is not large enough to hold\n"
"  all of characters, then some octets will not be converted.  A State\n"
"  may also be specified; this is used as the state of the external\n"
"  format.\n"
"\n"
"  Four values are returned: the string, the number of characters read,\n"
"  the number of octets actually consumed and the new state of the\n"
"  external format."
msgstr ""
"Octetsway-otay-ingstray onvertscay anway arrayway ofway octetsway inway "
"Octetsway otay away ingstray\n"
"  accordingway otay ethay ecifiedspay Externalway-ormatfay.  Ethay arrayway "
"ofway octetsway isway\n"
"  oundedbay ybay Tartsay (efaultingday otway 0) andway Endway (efaultingday "
"otay ethay endway ofway\n"
"  ethay arrayway.  Ifway Ingstray isway otnay ivengay, away ewnay ingstray "
"isway eatedcray.  Ifway\n"
"  Ingstray isway ivengay, ethay onvertedcay octetsway areway toredsay inway "
"Ingstray, tartingsay\n"
"  atway S-Tartsay (efaultingday otay ethay 0) andway endingway atway S-"
"Endway (efaultingday otay\n"
"  ethay engthlay ofway Ingstray).  Ifway ethay ingstray isway otnay argelay "
"enoughway otay oldhay\n"
"  allway ofway aracterschay, enthay omesay octetsway illway otnay ebay "
"onvertedcay.  Away Tatesay\n"
"  aymay alsoway ebay ecifiedspay; isthay isway usedway asway ethay tatesay "
"ofway ethay externalway\n"
"  ormatfay.\n"
"\n"
"  Ourfay aluesvay areway eturnedray: ethay ingstray, ethay umbernay ofway "
"aracterschay eadray,\n"
"  ethay umbernay ofway octetsway actuallyway onsumedcay andway ethay ewnay "
"tatesay ofway ethay\n"
"  externalway ormatfay."

#: target:code/extfmts.lisp
msgid ""
"Encode the given String using External-Format and return a new\n"
"  string.  The characters of the new string are the octets of the\n"
"  encoded result, with each octet converted to a character via\n"
"  code-char.  This is the inverse to String-Decode"
msgstr ""
"Encodeway ethay ivengay Ingstray usingway Externalway-Ormatfay andway "
"eturnray away ewnay\n"
"  ingstray.  Ethay aracterschay ofway ethay ewnay ingstray areway ethay "
"octetsway ofway ethay\n"
"  encodedway esultray, ithway eachway octetway onvertedcay otay away "
"aracterchay iavay\n"
"  odecay-archay.  Isthay isway ethay inverseway otay Ingstray-Ecodeday"

#: target:code/extfmts.lisp
msgid ""
"Decode String using the given External-Format and return the new\n"
"  string.  The input string is treated as if it were an array of\n"
"  octets, where the char-code of each character is the octet.  This is\n"
"  the inverse of String-Encode."
msgstr ""
"Ecodeday Ingstray usingway ethay ivengay Externalway-Ormatfay andway "
"eturnray ethay ewnay\n"
"  ingstray.  Ethay inputway ingstray isway eatedtray asway ifway itway "
"ereway anway arrayway ofway\n"
"  octetsway, erewhay ethay archay-odecay ofway eachway aracterchay isway "
"ethay octetway.  Isthay isway\n"
"  ethay inverseway ofway Ingstray-Encodeway."

#: target:code/extfmts.lisp
msgid ""
"Change the external format of the standard streams to Terminal.\n"
"  The standard streams are sys::*stdin*, sys::*stdout*, and\n"
"  sys::*stderr*, which are normally the input and/or output streams\n"
"  for *standard-input* and *standard-output*.  Also sets sys::*tty*\n"
"  (normally *terminal-io* to the given external format.  If the\n"
"  optional argument Filenames is gvien, then the filename encoding is\n"
"  set to the specified format."
msgstr ""
"Angechay ethay externalway ormatfay ofway ethay tandardsay eamsstray otay "
"Erminaltay.\n"
"  Ethay tandardsay eamsstray areway yssay::*tdinsay*, yssay::*tdoutsay*, "
"andway\n"
"  yssay::*tderrsay*, ichwhay areway ormallynay ethay inputway andway/orway "
"outputway eamsstray\n"
"  orfay *tandardsay-inputway* andway *tandardsay-outputway*.  Alsoway etssay "
"yssay::*tytay*\n"
"  (ormallynay *erminaltay-ioway* otay ethay ivengay externalway ormatfay.  "
"Ifway ethay\n"
"  optionalway argumentway Ilenamesfay isway viengay, enthay ethay ilenamefay "
"encodingway isway\n"
"  etsay otay ethay ecifiedspay ormatfay."

#: target:code/extfmts.lisp
msgid "Can't find external-format ~S."
msgstr "Ancay't indfay externalway-ormatfay ~S."

#: target:code/extfmts.lisp
msgid "Change it anyway."
msgstr "Angechay itway anywayway."

#: target:code/extfmts.lisp
msgid "The external-format for encoding filenames is already set."
msgstr ""
"Ethay externalway-ormatfay orfay encodingway ilenamesfay isway alreadyway "
"etsay."

#: target:code/fd-stream.lisp
msgid ""
"List of available buffers.  Each buffer is an sap pointing to\n"
"  bytes-per-buffer of memory."
msgstr ""
"Istlay ofway availableway uffersbay.  Eachway ufferbay isway anway apsay "
"ointingpay otay\n"
"  ytesbay-erpay-ufferbay ofway emorymay."

#: target:code/fd-stream.lisp
msgid "Number of bytes per buffer."
msgstr "Umbernay ofway ytesbay erpay ufferbay."

#: target:code/fd-stream.lisp
msgid "The maximum supported byte size for a stream element-type."
msgstr ""
"Ethay aximummay upportedsay ytebay izesay orfay away eamstray elementway-"
"ypetay."

#: target:code/fd-stream.lisp
msgid "Timeout ~(~A~)ing ~S."
msgstr "Imeouttay ~(~Away~)ingway ~S."

#: target:code/fd-stream.lisp
msgid ""
"List of all available output routines. Each element is a list of the\n"
"  element-type output, the kind of buffering, the function name, and the "
"number\n"
"  of bytes per element."
msgstr ""
"Istlay ofway allway availableway outputway outinesray. Eachway elementway "
"isway away istlay ofway ethay\n"
"  elementway-ypetay outputway, ethay indkay ofway ufferingbay, ethay "
"unctionfay amenay, andway ethay umbernay\n"
"  ofway ytesbay erpay elementway."

#: target:code/fd-stream.lisp
msgid "Write would have blocked, but SERVER told us to go."
msgstr ""
"Itewray ouldway avehay ockedblay, utbay ERVERSAY oldtay usway otay ogay."

#: target:code/fd-stream.lisp
msgid "While writing ~S: ~A"
msgstr "Ilewhay itingwray ~S: ~Away"

#: target:code/fd-stream.lisp
msgid ""
"Output THING to stream.  THING can be any kind of vector or a sap.  If "
"THING\n"
"  is a SAP, END must be supplied (as length won't work)."
msgstr ""
"Outputway INGTHAY otay eamstray.  INGTHAY ancay ebay anyway indkay ofway "
"ectorvay orway away apsay.  Ifway INGTHAY\n"
"  isway away APSAY, ENDWAY ustmay ebay uppliedsay (asway engthlay onway't "
"orkway)."

#: target:code/fd-stream.lisp
msgid "Just go on as if nothing happened..."
msgstr "Ustjay ogay onway asway ifway othingnay appenedhay..."

#: target:code/fd-stream.lisp
msgid "~S called with :END before :START!"
msgstr "~S alledcay ithway :ENDWAY eforebay :TARTSAY!"

#: target:code/fd-stream.lisp
msgid ""
"List of all available input routines. Each element is a list of the\n"
"  element-type input, the function name, and the number of bytes per element."
msgstr ""
"Istlay ofway allway availableway inputway outinesray. Eachway elementway "
"isway away istlay ofway ethay\n"
"  elementway-ypetay inputway, ethay unctionfay amenay, andway ethay umbernay "
"ofway ytesbay erpay elementway."

#: target:code/fd-stream.lisp
msgid "Error reading ~S: ~A"
msgstr "Errorway eadingray ~S: ~Away"

#: target:code/fd-stream.lisp
msgid "Could not find any input routine for ~S"
msgstr "Ouldcay otnay indfay anyway inputway outineray orfay ~S"

#: target:code/fd-stream.lisp
msgid "Could not find any output routine for ~S buffered ~S."
msgstr ""
"Ouldcay otnay indfay anyway outputway outineray orfay ~S ufferedbay ~S."

#: target:code/fd-stream.lisp
msgid "Element sizes for input (~S:~S) and output (~S:~S) differ?"
msgstr ""
"Elementway izessay orfay inputway (~S:~S) andway outputway (~S:~S) ifferday?"

#: target:code/fd-stream.lisp
msgid "Input type (~S) and output type (~S) are unrelated?"
msgstr "Inputway ypetay (~S) andway outputway ypetay (~S) areway unrelatedway?"

#: target:code/fd-stream.lisp
msgid "Go on as if nothing bad happened."
msgstr "Ogay onway asway ifway othingnay adbay appenedhay."

#: target:code/fd-stream.lisp
msgid "Could not restore ~S to its original contents: ~A"
msgstr "Ouldcay otnay estoreray ~S otay itsway originalway ontentscay: ~Away"

#: target:code/fd-stream.lisp
msgid "~s is not a stream associated with a file."
msgstr "~s isway otnay away eamstray associatedway ithway away ilefay."

#: target:code/fd-stream.lisp
msgid "Error fstating ~S: ~A"
msgstr "Errorway statingfay ~S: ~Away"

#: target:code/fd-stream.lisp
msgid "Error lseek'ing ~S: ~A"
msgstr "Errorway seeklay'ingway ~S: ~Away"

#: target:code/fd-stream.lisp
msgid "Invalid position given to file-position: ~S"
msgstr "Invalidway ositionpay ivengay otay ilefay-ositionpay: ~S"

#: target:code/fd-stream.lisp
msgid "file ~S"
msgstr "ilefay ~S"

#: target:code/fd-stream.lisp
msgid "descriptor ~D"
msgstr "escriptorday ~D"

#: target:code/fd-stream.lisp
msgid ""
"Create a stream for the given unix file descriptor.\n"
"  If input is non-nil, allow input operations.\n"
"  If output is non-nil, allow output operations.\n"
"  If neither input nor output are specified, default to allowing input.\n"
"  Element-type indicates the element type to use (as for open).\n"
"  Buffering indicates the kind of buffering to use.\n"
"  Timeout (if true) is the number of seconds to wait for input.  If NIL "
"(the\n"
"    default), then wait forever.  When we time out, we signal IO-TIMEOUT.\n"
"  File is the name of the file (will be returned by PATHNAME).\n"
"  Name is used to identify the stream when printed."
msgstr ""
"Eatecray away eamstray orfay ethay ivengay unixway ilefay escriptorday.\n"
"  Ifway inputway isway onnay-ilnay, allowway inputway operationsway.\n"
"  Ifway outputway isway onnay-ilnay, allowway outputway operationsway.\n"
"  Ifway eithernay inputway ornay outputway areway ecifiedspay, efaultday "
"otay allowingway inputway.\n"
"  Elementway-ypetay indicatesway ethay elementway ypetay otay useway (asway "
"orfay openway).\n"
"  Ufferingbay indicatesway ethay indkay ofway ufferingbay otay useway.\n"
"  Imeouttay (ifway uetray) isway ethay umbernay ofway econdssay otay aitway "
"orfay inputway.  Ifway ILNAY (ethay\n"
"    efaultday), enthay aitway oreverfay.  Enwhay eway imetay outway, eway "
"ignalsay IOWAY-IMEOUTTAY.\n"
"  Ilefay isway ethay amenay ofway ethay ilefay (illway ebay eturnedray ybay "
"ATHNAMEPAY).\n"
"  Amenay isway usedway otay identifyway ethay eamstray enwhay intedpray."

#: target:code/fd-stream.lisp
msgid "File descriptor must be opened either for input or output."
msgstr ""
"Ilefay escriptorday ustmay ebay openedway eitherway orfay inputway orway "
"outputway."

#: target:code/fd-stream.lisp
msgid "** Closed ~A~%"
msgstr "** Osedclay ~Away~%"

#: target:code/fd-stream.lisp
msgid ""
"This is a string that OPEN tacks on the end of a file namestring to produce\n"
"   a name for the :if-exists :rename-and-delete and :rename options.  Also,\n"
"   this can be a function that takes a namestring and returns a complete\n"
"   namestring."
msgstr ""
"Isthay isway away ingstray atthay OPENWAY ackstay onway ethay endway ofway "
"away ilefay amestringnay otay oducepray\n"
"   away amenay orfay ethay :ifway-existsway :enameray-andway-eleteday "
"andway :enameray optionsway.  Alsoway,\n"
"   isthay ancay ebay away unctionfay atthay akestay away amestringnay andway "
"eturnsray away ompletecay\n"
"   amestringnay."

#: target:code/fd-stream.lisp
msgid "Enter new value for ~*~S"
msgstr "Enterway ewnay aluevay orfay ~*~S"

#: target:code/fd-stream.lisp
msgid "~S is invalid for ~S. Must be one of~{ ~S~}"
msgstr "~S isway invalidway orfay ~S. Ustmay ebay oneway ofway~{ ~S~}"

#: target:code/fd-stream.lisp
msgid "Enter new value for ~S: "
msgstr "Enterway ewnay aluevay orfay ~S: "

#: target:code/fd-stream.lisp
msgid "Try to rename it anyway."
msgstr "Ytray otay enameray itway anywayway."

#: target:code/fd-stream.lisp
msgid "File ~S is not writable."
msgstr "Ilefay ~S isway otnay itablewray."

#: target:code/fd-stream.lisp
msgid "Use :SUPERSEDE instead."
msgstr "Useway :UPERSEDESAY insteadway."

#: target:code/fd-stream.lisp
msgid "Could not rename ~S to ~S: ~A."
msgstr "Ouldcay otnay enameray ~S otay ~S: ~Away."

#: target:code/fd-stream.lisp
msgid "Cannot open ~S for output: Is a directory."
msgstr "Annotcay openway ~S orfay outputway: Isway away irectoryday."

#: target:code/fd-stream.lisp
msgid "Cannot find ~S: ~A"
msgstr "Annotcay indfay ~S: ~Away"

#: target:code/fd-stream.lisp
msgid "Return NIL."
msgstr "Eturnray ILNAY."

#: target:code/fd-stream.lisp
msgid "Error opening ~S, ~A."
msgstr "Errorway openingway ~S, ~Away."

#: target:code/fd-stream.lisp
msgid "Error creating ~S, path does not exist."
msgstr "Errorway eatingcray ~S, athpay oesday otnay existway."

#: target:pcl/braid.lisp target:code/fd-stream.lisp
msgid "Try again."
msgstr "Ytray againway."

#: target:code/fd-stream.lisp
msgid ""
"Return a stream which reads from or writes to Filename.\n"
"  Defined keywords:\n"
"   :direction - one of :input, :output, :io, or :probe\n"
"   :element-type - Type of object to read or write, default BASE-CHAR\n"
"   :if-exists - one of :error, :new-version, :rename, :rename-and-delete,\n"
"                       :overwrite, :append, :supersede or nil\n"
"   :if-does-not-exist - one of :error, :create or nil\n"
"   :external-format - an external format name\n"
"  See the manual for details."
msgstr ""
"Eturnray away eamstray ichwhay eadsray omfray orway iteswray otay "
"Ilenamefay.\n"
"  Efinedday eywordskay:\n"
"   :irectionday - oneway ofway :inputway, :outputway, :ioway, orway :"
"obepray\n"
"   :elementway-ypetay - Ypetay ofway objectway otay eadray orway itewray, "
"efaultday ASEBAY-ARCHAY\n"
"   :ifway-existsway - oneway ofway :errorway, :ewnay-ersionvay, :enameray, :"
"enameray-andway-eleteday,\n"
"                       :overwriteway, :appendway, :upersedesay orway ilnay\n"
"   :ifway-oesday-otnay-existway - oneway ofway :errorway, :eatecray orway "
"ilnay\n"
"   :externalway-ormatfay - anway externalway ormatfay amenay\n"
"  Eesay ethay anualmay orfay etailsday."

#: target:code/fd-stream.lisp
msgid "Do it anyway."
msgstr "Oday itway anywayway."

#: target:code/fd-stream.lisp
msgid "Can't create simple-streams with an element-type."
msgstr "Ancay't eatecray implesay-eamsstray ithway anway elementway-ypetay."

#: target:code/fd-stream.lisp
msgid "Unable to open streams of class ~S."
msgstr "Unableway otay openway eamsstray ofway assclay ~S."

#: target:pcl/std-class.lisp target:pcl/boot.lisp target:pcl/defs.lisp
#: target:pcl/defclass.lisp target:code/macros.lisp target:code/fd-stream.lisp
msgid "Odd-length property list in REMF."
msgstr "Oddway-engthlay opertypray istlay inway EMFRAY."

#: target:code/fd-stream.lisp
msgid ""
"The stream connected to the controlling terminal or NIL if there is none."
msgstr ""
"Ethay eamstray onnectedcay otay ethay ontrollingcay erminaltay orway ILNAY "
"ifway erethay isway onenay."

#: target:code/fd-stream.lisp
msgid "The stream connected to the standard input (file descriptor 0)."
msgstr ""
"Ethay eamstray onnectedcay otay ethay tandardsay inputway (ilefay "
"escriptorday 0)."

#: target:code/fd-stream.lisp
msgid "The stream connected to the standard output (file descriptor 1)."
msgstr ""
"Ethay eamstray onnectedcay otay ethay tandardsay outputway (ilefay "
"escriptorday 1)."

#: target:code/fd-stream.lisp
msgid "The stream connected to the standard error output (file descriptor 2)."
msgstr ""
"Ethay eamstray onnectedcay otay ethay tandardsay errorway outputway (ilefay "
"escriptorday 2)."

#: target:code/fd-stream.lisp
msgid "This is called in BEEP to feep the user.  It takes a stream."
msgstr ""
"Isthay isway alledcay inway EEPBAY otay eepfay ethay userway.  Itway akestay "
"away eamstray."

#: target:code/fd-stream.lisp
msgid ""
"Return the delta in Stream's FILE-POSITION that would be caused by writing\n"
"   Object to Stream.  Non-trivial only in implementations that support\n"
"   international character sets."
msgstr ""
"Eturnray ethay eltaday inway Eamstray's ILEFAY-OSITIONPAY atthay ouldway "
"ebay ausedcay ybay itingwray\n"
"   Objectway otay Eamstray.  Onnay-ivialtray onlyway inway "
"implementationsway atthay upportsay\n"
"   internationalway aracterchay etssay."

#: target:code/fd-stream-extfmt.lisp
msgid "Loading simple-streams should redefine this"
msgstr "Oadinglay implesay-eamsstray ouldshay edefineray isthay"

#: target:code/fd-stream-extfmt.lisp
msgid "Don't know how to set external-format for ~S."
msgstr "Onday't nowkay owhay otay etsay externalway-ormatfay orfay ~S."

#: target:code/fd-stream-extfmt.lisp
msgid "Setting external-format on Gray streams not supported."
msgstr ""
"Ettingsay externalway-ormatfay onway Aygray eamsstray otnay upportedsay."

#: target:code/pathname.lisp
msgid ""
"When non-nil, attempt to load \"library:<host>.translations\" to resolve\n"
"   an otherwise undefined logical host."
msgstr ""
"Enwhay onnay-ilnay, attemptway otay oadlay \"ibrarylay:<osthay>."
"anslationstray\" otay esolveray\n"
"   anway otherwiseway undefinedway ogicallay osthay."

#: target:code/pathname.lisp
msgid "A path specification, either a string, file-stream or pathname."
msgstr ""
"Away athpay ecificationspay, eitherway away ingstray, ilefay-eamstray orway "
"athnamepay."

#: target:code/pathname.lisp
msgid "Convert thing (a pathname, string or stream) into a pathname."
msgstr ""
"Onvertcay ingthay (away athnamepay, ingstray orway eamstray) intoway away "
"athnamepay."

#: target:code/pathname.lisp
msgid ""
"Construct a filled in pathname by completing the unspecified components\n"
"   from the defaults."
msgstr ""
"Onstructcay away illedfay inway athnamepay ybay ompletingcay ethay "
"unspecifiedway omponentscay\n"
"   omfray ethay efaultsday."

#: target:code/pathname.lisp
msgid "~S is not allowed as a directory component."
msgstr "~S isway otnay allowedway asway away irectoryday omponentcay."

#: target:code/pathname.lisp
msgid ""
"Makes a new pathname from the component arguments.  Note that host is\n"
"a host-structure or string."
msgstr ""
"Akesmay away ewnay athnamepay omfray ethay omponentcay argumentsway.  Otenay "
"atthay osthay isway\n"
"away osthay-ucturestray orway ingstray."

#: target:code/pathname.lisp
msgid "Silly argument for a unix ~A: ~S"
msgstr "Illysay argumentway orfay away unixway ~Away: ~S"

#: target:code/pathname.lisp
msgid "Silly argument for a unix PATHNAME-NAME: ~S"
msgstr "Illysay argumentway orfay away unixway ATHNAMEPAY-AMENAY: ~S"

#: target:code/pathname.lisp
msgid ""
"Illegal pathname: ~\n"
"                                Directory with ~S immediately followed by ~S"
msgstr ""
"Illegalway athnamepay: ~\n"
"                                Irectoryday ithway ~S immediatelyway "
"ollowedfay ybay ~S"

#: target:code/pathname.lisp
msgid "Accessor for the pathname's host."
msgstr "Accessorway orfay ethay athnamepay's osthay."

#: target:code/pathname.lisp
msgid "Accessor for pathname's device."
msgstr "Accessorway orfay athnamepay's eviceday."

#: target:code/pathname.lisp
msgid "Accessor for the pathname's directory list."
msgstr "Accessorway orfay ethay athnamepay's irectoryday istlay."

#: target:code/pathname.lisp
msgid "Accessor for the pathname's name."
msgstr "Accessorway orfay ethay athnamepay's amenay."

#: target:code/pathname.lisp
msgid "Accessor for the pathname's version."
msgstr "Accessorway orfay ethay athnamepay's ersionvay."

#: target:code/pathname.lisp
msgid "Parse error in namestring: ~?~%  ~A~%  ~V@T^"
msgstr "Arsepay errorway inway amestringnay: ~?~%  ~Away~%  ~V@T^"

#: target:code/pathname.lisp
msgid ""
"When Host arg is not supplied, Defaults arg must ~\n"
"\t\t  have a non-null PATHNAME-HOST."
msgstr ""
"Enwhay Osthay argway isway otnay uppliedsay, Efaultsday argway ustmay ~\n"
"\t\t  avehay away onnay-ullnay ATHNAMEPAY-OSTHAY."

#: target:code/pathname.lisp
msgid ""
"Host in namestring: ~S~@\n"
"\t\t    does not match explicit host argument: ~S"
msgstr ""
"Osthay inway amestringnay: ~S~@\n"
"\t\t    oesday otnay atchmay explicitway osthay argumentway: ~S"

#: target:code/pathname.lisp
msgid ""
"Converts pathname, a pathname designator, into a pathname structure,\n"
"   for a physical pathname, returns the printed representation. Host may be\n"
"   a physical host structure or host namestring."
msgstr ""
"Onvertscay athnamepay, away athnamepay esignatorday, intoway away athnamepay "
"ucturestray,\n"
"   orfay away ysicalphay athnamepay, eturnsray ethay intedpray "
"epresentationray. Osthay aymay ebay\n"
"   away ysicalphay osthay ucturestray orway osthay amestringnay."

#: target:code/pathname.lisp
msgid ""
"A LIST representing a pathname host is not ~\n"
"                              supported in this implementation:~%  ~S"
msgstr ""
"Away ISTLAY epresentingray away athnamepay osthay isway otnay ~\n"
"                              upportedsay inway isthay implementationway:~%  "
"~S"

#: target:code/pathname.lisp
msgid "Hosts do not match: ~S and ~S."
msgstr "Ostshay oday otnay atchmay: ~S andway ~S."

#: target:code/pathname.lisp
msgid "Can't figure out the file associated with stream:~%  ~S"
msgstr ""
"Ancay't igurefay outway ethay ilefay associatedway ithway eamstray:~%  ~S"

#: target:code/pathname.lisp
msgid "Construct the full (name)string form of the pathname."
msgstr ""
"Onstructcay ethay ullfay (amenay)ingstray ormfay ofway ethay athnamepay."

#: target:code/pathname.lisp
msgid ""
"Cannot determine the namestring for pathnames with no ~\n"
"\t\t  host:~%  ~S"
msgstr ""
"Annotcay etermineday ethay amestringnay orfay athnamespay ithway onay ~\n"
"\t\t  osthay:~%  ~S"

#: target:code/pathname.lisp
msgid ""
"Returns a string representation of the name of the host in the pathname."
msgstr ""
"Eturnsray away ingstray epresentationray ofway ethay amenay ofway ethay "
"osthay inway ethay athnamepay."

#: target:code/pathname.lisp
msgid "Cannot determine the namestring for pathnames with no host:~%  ~S"
msgstr ""
"Annotcay etermineday ethay amestringnay orfay athnamespay ithway onay osthay:"
"~%  ~S"

#: target:code/pathname.lisp
msgid ""
"Returns a string representation of the directories used in the pathname."
msgstr ""
"Eturnsray away ingstray epresentationray ofway ethay irectoriesday usedway "
"inway ethay athnamepay."

#: target:code/pathname.lisp
msgid "Returns a string representation of the name used in the pathname."
msgstr ""
"Eturnsray away ingstray epresentationray ofway ethay amenay usedway inway "
"ethay athnamepay."

#: target:code/pathname.lisp
msgid ""
"Returns an abbreviated pathname sufficent to identify the pathname relative\n"
"   to the defaults."
msgstr ""
"Eturnsray anway abbreviatedway athnamepay ufficentsay otay identifyway ethay "
"athnamepay elativeray\n"
"   otay ethay efaultsday."

#: target:code/pathname.lisp
msgid "Predicate for determining whether pathname contains any wildcards."
msgstr ""
"Edicatepray orfay eterminingday etherwhay athnamepay ontainscay anyway "
"ildcardsway."

#: target:code/pathname.lisp
msgid "Pathname matches the wildname template?"
msgstr "Athnamepay atchesmay ethay ildnameway emplatetay?"

#: target:code/pathname.lisp
msgid ""
"Not enough wildcards in FROM pattern to match ~\n"
"\t\t       TO pattern:~%  ~S"
msgstr ""
"Otnay enoughway ildcardsway inway OMFRAY atternpay otay atchmay ~\n"
"\t\t       OTAY atternpay:~%  ~S"

#: target:code/pathname.lisp
msgid ""
"Can't substitute this into the middle of a word:~\n"
"\t\t\t  ~%  ~S"
msgstr ""
"Ancay't ubstitutesay isthay intoway ethay iddlemay ofway away ordway:~\n"
"\t\t\t  ~%  ~S"

#: target:code/pathname.lisp
msgid ""
"Pathname components from Source and From args to TRANSLATE-PATHNAME~@\n"
"\t  did not match:~%  ~S ~S"
msgstr ""
"Athnamepay omponentscay omfray Ourcesay andway Omfray argsway otay "
"ANSLATETRAY-ATHNAMEPAY~@\n"
"\t  idday otnay atchmay:~%  ~S ~S"

#: target:code/pathname.lisp
msgid ""
":WILD-INFERIORS not paired in from and to ~\n"
"\t\t\t   patterns:~%  ~S ~S"
msgstr ""
":ILDWAY-INFERIORSWAY otnay airedpay inway omfray andway otay ~\n"
"\t\t\t   atternspay:~%  ~S ~S"

#: target:code/pathname.lisp
msgid ""
"Use the source pathname to translate the from-wildname's wild and\n"
"   unspecified elements into a completed to-pathname based on the to-"
"wildname."
msgstr ""
"Useway ethay ourcesay athnamepay otay anslatetray ethay omfray-ildnameway's "
"ildway andway\n"
"   unspecifiedway elementsway intoway away ompletedcay otay-athnamepay "
"asedbay onway ethay otay-ildnamwaye."

#: target:code/pathname.lisp
msgid "~S doesn't match ~S"
msgstr "~S oesnday't atchmay ~S"

#: target:code/pathname.lisp
msgid "Search-list ~a not defined."
msgstr "Earchsay-istlay ~away otnay efinedday."

#: target:code/pathname.lisp
msgid ""
"Clear the current definition for the search-list NAME.  Returns T if such\n"
"   a definition existed, and NIL if not."
msgstr ""
"Earclay ethay urrentcay efinitionday orfay ethay earchsay-istlay AMENAY.  "
"Eturnsray T ifway uchsay\n"
"   away efinitionday existedway, andway ILNAY ifway otnay."

#: target:code/pathname.lisp
msgid ""
"Clear the definition for all search-lists.  Only use this if you know\n"
"   what you are doing."
msgstr ""
"Earclay ethay efinitionday orfay allway earchsay-istslay.  Onlyway useway "
"isthay ifway ouyay nowkay\n"
"   atwhay ouyay areway oingday."

#: target:code/pathname.lisp
msgid "~S doesn't start with a search-list."
msgstr "~S oesnday't tartsay ithway away earchsay-istlay."

#: target:code/pathname.lisp
msgid ""
"Return the expansions for the search-list starting PATHNAME.  If PATHNAME\n"
"   does not start with a search-list, then an error is signaled.  If\n"
"   the search-list has not been defined yet, then an error is signaled.\n"
"   The expansion for a search-list can be set with SETF."
msgstr ""
"Eturnray ethay expansionsway orfay ethay earchsay-istlay tartingsay "
"ATHNAMEPAY.  Ifway ATHNAMEPAY\n"
"   oesday otnay tartsay ithway away earchsay-istlay, enthay anway errorway "
"isway ignaledsay.  Ifway\n"
"   ethay earchsay-istlay ashay otnay eenbay efinedday etyay, enthay anway "
"errorway isway ignaledsay.\n"
"   Ethay expansionway orfay away earchsay-istlay ancay ebay etsay ithway "
"ETFSAY."

#: target:code/pathname.lisp
msgid "Search list ~S has not been defined yet."
msgstr "Earchsay istlay ~S ashay otnay eenbay efinedday etyay."

#: target:code/pathname.lisp
msgid ""
"Returns T if the search-list starting PATHNAME is currently defined, and\n"
"   NIL otherwise.  An error is signaled if PATHNAME does not start with a\n"
"   search-list."
msgstr ""
"Eturnsray T ifway ethay earchsay-istlay tartingsay ATHNAMEPAY isway "
"urrentlycay efinedday, andway\n"
"   ILNAY otherwiseway.  Anway errorway isway ignaledsay ifway ATHNAMEPAY "
"oesday otnay tartsay ithway away\n"
"   earchsay-istlay."

#: target:code/pathname.lisp
msgid ""
"That would result in a circularity:~%  ~\n"
"\t\t     ~A~{ -> ~A~} -> ~A"
msgstr ""
"Atthay ouldway esultray inway away ircularitycay:~%  ~\n"
"\t\t     ~Away~{ -> ~Away~} -> ~Away"

#: target:code/pathname.lisp
msgid ""
"Search-lists cannot expand into pathnames that have ~\n"
"\t\t       a name, type, or ~%version specified:~%  ~S"
msgstr ""
"Earchsay-istslay annotcay expandway intoway athnamespay atthay avehay ~\n"
"\t\t       away amenay, ypetay, orway ~%ersionvay ecifiedspay:~%  ~S"

#: target:code/pathname.lisp
msgid ""
"Execute BODY with VAR bound to each successive possible expansion for\n"
"   PATHNAME and then return RESULT.  Note: if PATHNAME does not contain a\n"
"   search-list, then BODY is executed exactly once.  Everything is wrapped\n"
"   in a block named NIL, so RETURN can be used to terminate early.  Note:\n"
"   VAR is *not* bound inside of RESULT."
msgstr ""
"Executeway ODYBAY ithway ARVAY oundbay otay eachway uccessivesay ossiblepay "
"expansionway orfay\n"
"   ATHNAMEPAY andway enthay eturnray ESULTRAY.  Otenay: ifway ATHNAMEPAY "
"oesday otnay ontaincay away\n"
"   earchsay-istlay, enthay ODYBAY isway executedway exactlyway onceway.  "
"Everythingway isway appedwray\n"
"   inway away ockblay amednay ILNAY, osay ETURNRAY ancay ebay usedway otay "
"erminatetay earlyway.  Otenay:\n"
"   ARVAY isway *otnay* oundbay insideway ofway ESULTRAY."

#: target:code/pathname.lisp
msgid "Undefined search list: ~A"
msgstr "Undefinedway earchsay istlay: ~Away"

#: target:code/pathname.lisp
msgid ""
"Logical namestring character ~\n"
"\t\t\t     is not alphanumeric or hyphen:~%  ~S"
msgstr ""
"Ogicallay amestringnay aracterchay ~\n"
"\t\t\t     isway otnay alphanumericway orway yphenhay:~%  ~S"

#: target:code/pathname.lisp
msgid "Logical host not yet defined: ~S"
msgstr "Ogicallay osthay otnay etyay efinedday: ~S"

#: target:code/pathname.lisp
msgid ""
"Double asterisk inside of logical ~\n"
"\t\t\t\t     word: ~S"
msgstr ""
"Oubleday asteriskway insideway ofway ogicallay ~\n"
"\t\t\t\t     ordway: ~S"

#: target:code/pathname.lisp
msgid "Illegal character for logical pathname:~%  ~S"
msgstr "Illegalway aracterchay orfay ogicallay athnamepay:~%  ~S"

#: target:code/pathname.lisp
msgid "Expecting ~A, got ~:[nothing~;~:*~S~]."
msgstr "Expectingway ~Away, otgay ~:[othingnay~;~:*~S~]."

#: target:code/pathname.lisp
msgid "a host name"
msgstr "away osthay amenay"

#: target:code/pathname.lisp
msgid "a directory name"
msgstr "away irectoryday amenay"

#: target:code/pathname.lisp
msgid "a file name"
msgstr "away ilefay amenay"

#: target:code/pathname.lisp
msgid "Expecting a dot, got ~S."
msgstr "Expectingway away otday, otgay ~S."

#: target:code/pathname.lisp
msgid "a file type"
msgstr "away ilefay ypetay"

#: target:code/pathname.lisp
msgid "a positive integer, * or NEWEST"
msgstr "away ositivepay integerway, * orway EWESTNAY"

#: target:code/pathname.lisp
msgid ""
"Expected a positive integer, ~\n"
"\t\t\t\t\t    got ~S"
msgstr ""
"Expectedway away ositivepay integerway, ~\n"
"\t\t\t\t\t    otgay ~S"

#: target:code/pathname.lisp
msgid "Extra stuff after end of file name."
msgstr "Extraway tuffsay afterway endway ofway ilefay amenay."

#: target:code/pathname.lisp
msgid "Converts the pathspec argument to a logical-pathname and returns it."
msgstr ""
"Onvertscay ethay athspecpay argumentway otay away ogicallay-athnamepay "
"andway eturnsray itway."

#: target:code/pathname.lisp
msgid "Logical namestring does not specify a host:~%  ~S"
msgstr "Ogicallay amestringnay oesday otnay ecifyspay away osthay:~%  ~S"

#: target:code/filesys.lisp target:code/pathname.lisp
msgid "Invalid directory component: ~S"
msgstr "Invalidway irectoryday omponentcay: ~S"

#: target:code/pathname.lisp
msgid "Invalid keyword: ~S"
msgstr "Invalidway eywordkay: ~S"

#: target:code/pathname.lisp
msgid "Logical pathname translation is not a two-list:~%  ~S"
msgstr ""
"Ogicallay athnamepay anslationtray isway otnay away wotay-istlay:~%  ~S"

#: target:code/pathname.lisp
msgid "Return the (logical) host object argument's list of translations."
msgstr ""
"Eturnray ethay (ogicallay) osthay objectway argumentway's istlay ofway "
"anslationstray."

#: target:code/pathname.lisp
msgid ""
"Set the translations list for the logical host argument.\n"
"   Return translations."
msgstr ""
"Etsay ethay anslationstray istlay orfay ethay ogicallay osthay argumentway.\n"
"   Eturnray anslationstray."

#: target:code/pathname.lisp
msgid "Clobber search-list host with logical pathname host"
msgstr "Obberclay earchsay-istlay osthay ithway ogicallay athnamepay osthay"

#: target:code/pathname.lisp
msgid "~S names a CMUCL search-list"
msgstr "~S amesnay away MUCLCAY earchsay-istlay"

#: target:code/pathname.lisp
msgid ""
"Search for a logical pathname named host, if not already defined. If "
"already\n"
"   defined no attempt to find or load a definition is attempted and NIL is\n"
"   returned. If host is not already defined, but definition is found and "
"loaded\n"
"   successfully, T is returned, else error."
msgstr ""
"Earchsay orfay away ogicallay athnamepay amednay osthay, ifway otnay "
"alreadyway efinedday. Ifway alreadyway\n"
"   efinedday onay attemptway otay indfay orway oadlay away efinitionday "
"isway attemptedway andway ILNAY isway\n"
"   eturnedray. Ifway osthay isway otnay alreadyway efinedday, utbay "
"efinitionday isway oundfay andway oadedlay\n"
"   uccessfullysay, T isway eturnedray, elseway errorway."

#: target:code/pathname.lisp
msgid ";; Loading pathname translations from ~A~%"
msgstr ";; Oadinglay athnamepay anslationstray omfray ~Away~%"

#: target:code/pathname.lisp
msgid "Translates pathname to a physical pathname, which is returned."
msgstr ""
"Anslatestray athnamepay otay away ysicalphay athnamepay, ichwhay isway "
"eturnedray."

#: target:code/pathname.lisp
msgid "No translation for ~S"
msgstr "Onay anslationtray orfay ~S"

#: target:code/filesys.lisp
msgid ""
"Remove any occurrences of \\ from the string because we've already\n"
"   checked for whatever may have been backslashed."
msgstr ""
"Emoveray anyway occurrencesway ofway \\ omfray ethay ingstray ecausebay "
"eway'evay alreadyway\n"
"   eckedchay orfay ateverwhay aymay avehay eenbay ackslashedbay."

#: target:code/filesys.lisp
msgid "Backslash in bad place."
msgstr "Ackslashbay inway adbay aceplay."

#: target:code/filesys.lisp
msgid ""
"If non-NIL, Unix shell-style wildcards are ignored when parsing\n"
"  pathname namestrings.  They are also ignored when computing\n"
"  namestrings for pathname objects.  Thus, *, ?, etc. are not\n"
"  wildcards when parsing a namestring, and are not escaped when\n"
"  printing pathnames."
msgstr ""
"Ifway onnay-ILNAY, Unixway ellshay-tylesay ildcardsway areway ignoredway "
"enwhay arsingpay\n"
"  athnamepay amestringsnay.  Eythay areway alsoway ignoredway enwhay "
"omputingcay\n"
"  amestringsnay orfay athnamepay objectsway.  Usthay, *, ?, etcway. areway "
"otnay\n"
"  ildcardsway enwhay arsingpay away amestringnay, andway areway otnay "
"escapedway enwhay\n"
"  intingpray athnamespay."

#: target:code/filesys.lisp
msgid "``['' with no corresponding ``]''"
msgstr "``['' ithway onay orrespondingcay ``]''"

#: target:code/filesys.lisp
msgid "~A already names a logical host"
msgstr "~Away alreadyway amesnay away ogicallay osthay"

#: target:code/filesys.lisp
msgid "Invalid pattern piece: ~S"
msgstr "Invalidway atternpay iecepay: ~S"

#: target:code/filesys.lisp
msgid ":BACK cannot be represented in namestrings."
msgstr ":ACKBAY annotcay ebay epresentedray inway amestringsnay."

#: target:code/filesys.lisp
msgid "Cannot specify a directory separator in a pathname name: ~S"
msgstr ""
"Annotcay ecifyspay away irectoryday eparatorsay inway away athnamepay "
"amenay: ~S"

#: target:code/filesys.lisp
msgid "Cannot specify a dot in a pathname name without a pathname type: ~S"
msgstr ""
"Annotcay ecifyspay away otday inway away athnamepay amenay ithoutway away "
"athnamepay ypetay: ~S"

#: target:code/filesys.lisp
msgid "Invalid value for a pathname name: ~S"
msgstr "Invalidway aluevay orfay away athnamepay amenay: ~S"

#: target:code/filesys.lisp
msgid "Cannot specify the type without a file: ~S"
msgstr "Annotcay ecifyspay ethay ypetay ithoutway away ilefay: ~S"

#: target:code/filesys.lisp
msgid "Cannot specify a directory separator in a pathname type: ~S"
msgstr ""
"Annotcay ecifyspay away irectoryday eparatorsay inway away athnamepay "
"ypetay: ~S"

#: target:code/filesys.lisp
msgid "Cannot specify a dot in a pathname type: ~S"
msgstr "Annotcay ecifyspay away otday inway away athnamepay ypetay: ~S"

#: target:code/filesys.lisp
msgid "Cannot specify a version without a file: ~S"
msgstr "Annotcay ecifyspay away ersionvay ithoutway away ilefay: ~S"

#: target:code/filesys.lisp
msgid "~S cannot be represented relative to ~S"
msgstr "~S annotcay ebay epresentedray elativeray otay ~S"

#: target:code/filesys.lisp
msgid "Cannot supply a type without a name:~%  ~S"
msgstr "Annotcay upplysay away ypetay ithoutway away amenay:~%  ~S"

#: target:code/filesys.lisp
msgid ""
"Convert PATHNAME into a string that can be used with UNIX system calls.\n"
"   Search-lists and wild-cards are expanded. If optional argument\n"
"   FOR-INPUT is true and PATHNAME doesn't exist, NIL is returned.\n"
"   If optional argument EXECUTABLE-ONLY is true, NIL is returned\n"
"   unless an executable version of PATHNAME exists."
msgstr ""
"Onvertcay ATHNAMEPAY intoway away ingstray atthay ancay ebay usedway ithway "
"UNIXWAY ystemsay allscay.\n"
"   Earchsay-istslay andway ildway-ardscay areway expandedway. Ifway "
"optionalway argumentway\n"
"   ORFAY-INPUTWAY isway uetray andway ATHNAMEPAY oesnday't existway, ILNAY "
"isway eturnedray.\n"
"   Ifway optionalway argumentway EXECUTABLEWAY-ONLYWAY isway uetray, ILNAY "
"isway eturnedray\n"
"   unlessway anway executableway ersionvay ofway ATHNAMEPAY existsway."

#: target:code/filesys.lisp
msgid "~S is ambiguous:~{~%  ~A~}"
msgstr "~S isway ambiguousway:~{~%  ~Away~}"

#: target:code/filesys.lisp
msgid ""
"Return the pathname for the actual file described by the pathname\n"
"  An error of type file-error is signalled if no such file exists,\n"
"  or the pathname is wild."
msgstr ""
"Eturnray ethay athnamepay orfay ethay actualway ilefay escribedday ybay "
"ethay athnamepay\n"
"  Anway errorway ofway ypetay ilefay-errorway isway ignalledsay ifway onay "
"uchsay ilefay existsway,\n"
"  orway ethay athnamepay isway ildway."

#: target:code/filesys.lisp
msgid "Bad place for a wild pathname."
msgstr "Adbay aceplay orfay away ildway athnamepay."

#: target:code/filesys.lisp
msgid "The file ~S does not exist."
msgstr "Ethay ilefay ~S oesday otnay existway."

#: target:code/filesys.lisp
msgid ""
"Return a pathname which is the truename of the file if it exists, NIL\n"
"  otherwise. An error of type file-error is signalled if pathname is wild."
msgstr ""
"Eturnray away athnamepay ichwhay isway ethay uenametray ofway ethay ilefay "
"ifway itway existsway, ILNAY\n"
"  otherwiseway. Anway errorway ofway ypetay ilefay-errorway isway "
"ignalledsay ifway athnamepay isway ildway."

#: target:code/filesys.lisp
msgid ""
"Rename File to have the specified New-Name.  If file is a stream open to a\n"
"  file, then the associated file is renamed."
msgstr ""
"Enameray Ilefay otay avehay ethay ecifiedspay Ewnay-Amenay.  Ifway ilefay "
"isway away eamstray openway otay away\n"
"  ilefay, enthay ethay associatedway ilefay isway enamedray."

#: target:code/filesys.lisp
msgid "~S can't be created."
msgstr "~S ancay't ebay eatedcray."

#: target:code/filesys.lisp
msgid "Failed to rename ~A to ~A: ~A"
msgstr "Ailedfay otay enameray ~Away otay ~Away: ~Away"

#: target:code/filesys.lisp
msgid "Delete the specified file."
msgstr "Eleteday ethay ecifiedspay ilefay."

#: target:code/filesys.lisp
msgid "~S doesn't exist."
msgstr "~S oesnday't existway."

#: target:code/filesys.lisp
msgid "Could not delete ~A: ~A."
msgstr "Ouldcay otnay eleteday ~Away: ~Away."

#: target:code/filesys.lisp
msgid ""
"Delete old versions of files matching the given Pathname,\n"
"optionally keeping some of the most recent old versions."
msgstr ""
"Eleteday oldway ersionsvay ofway ilesfay atchingmay ethay ivengay "
"Athnamepay,\n"
"optionallyway eepingkay omesay ofway ethay ostmay ecentray oldway ersionsvay."

#: target:code/filesys.lisp
msgid ""
"Returns the home directory of the logged in user as a pathname.\n"
"  This is obtained from the logical name \"home:\"."
msgstr ""
"Eturnsray ethay omehay irectoryday ofway ethay oggedlay inway userway asway "
"away athnamepay.\n"
"  Isthay isway obtainedway omfray ethay ogicallay amenay \"omehay:\"."

#: target:code/filesys.lisp
msgid ""
"Return file's creation date, or NIL if it doesn't exist.\n"
" An error of type file-error is signalled if file is a wild pathname"
msgstr ""
"Eturnray ilefay's eationcray ateday, orway ILNAY ifway itway oesnday't "
"existway.\n"
" Anway errorway ofway ypetay ilefay-errorway isway ignalledsay ifway ilefay "
"isway away ildway athnamepay"

#: target:code/filesys.lisp
msgid ""
"Returns the file author as a string, or nil if the author cannot be\n"
" determined.  Signals an error of type file-error if file doesn't exist,\n"
" or file is a wild pathname."
msgstr ""
"Eturnsray ethay ilefay authorway asway away ingstray, orway ilnay ifway "
"ethay authorway annotcay ebay\n"
" eterminedday.  Ignalssay anway errorway ofway ypetay ilefay-errorway ifway "
"ilefay oesnday't existway,\n"
" orway ilefay isway away ildway athnamepay."

#: target:code/filesys.lisp
msgid ""
"Returns a list of pathnames, one for each file that matches the given\n"
"   pathname.  Supplying :ALL as nil causes this to ignore Unix dot files.  "
"This\n"
"   never includes Unix dot and dot-dot in the result.  If :TRUENAMEP is "
"NIL,\n"
"   then symbolic links in the result are not expanded, which is not the\n"
"   default because TRUENAME does follow links and the result pathnames are\n"
"   defined to be the TRUENAME of the pathname (the truename of a link may "
"well\n"
"   be in another directory).  If FOLLOW-LINKS is NIL then symbolic links "
"are\n"
"   not followed."
msgstr ""
"Eturnsray away istlay ofway athnamespay, oneway orfay eachway ilefay atthay "
"atchesmay ethay ivengay\n"
"   athnamepay.  Upplyingsay :ALLWAY asway ilnay ausescay isthay otay "
"ignoreway Unixway otday ilesfay.  Isthay\n"
"   evernay includesway Unixway otday andway otday-otday inway ethay "
"esultray.  Ifway :UENAMEPTRAY isway ILNAY,\n"
"   enthay ymbolicsay inkslay inway ethay esultray areway otnay expandedway, "
"ichwhay isway otnay ethay\n"
"   efaultday ecausebay UENAMETRAY oesday ollowfay inkslay andway ethay "
"esultray athnamespay areway\n"
"   efinedday otay ebay ethay UENAMETRAY ofway ethay athnamepay (ethay "
"uenametray ofway away inklay aymay ellway\n"
"   ebay inway anotherway irectoryday).  Ifway OLLOWFAY-INKSLAY isway ILNAY "
"enthay ymbolicsay inkslay areway\n"
"   otnay ollowedfay."

#: target:code/filesys.lisp
msgid ""
"Like Directory, but prints a terse, multi-column directory listing\n"
"   instead of returning a list of pathnames.  When :all is supplied and\n"
"   non-nil, then Unix dot files are included too (as ls -a).  When :verbose\n"
"   is supplied and non-nil, then a long listing of miscellaneous\n"
"   information is output one file per line."
msgstr ""
"Ikelay Irectoryday, utbay intspray away ersetay, ultimay-olumncay "
"irectoryday istinglay\n"
"   insteadway ofway eturningray away istlay ofway athnamespay.  Enwhay :"
"allway isway uppliedsay andway\n"
"   onnay-ilnay, enthay Unixway otday ilesfay areway includedway ootay (asway "
"slay -away).  Enwhay :erbosevay\n"
"   isway uppliedsay andway onnay-ilnay, enthay away onglay istinglay ofway "
"iscellaneousmay\n"
"   informationway isway outputway oneway ilefay erpay inelay."

#: target:code/filesys.lisp
msgid "Directory of ~A:~%"
msgstr "Irectoryday ofway ~Away:~%"

#: target:code/filesys.lisp
msgid "Couldn't stat ~A -- ~A.~%"
msgstr "Ouldncay't tatsay ~Away -- ~Away.~%"

#: target:code/filesys.lisp
msgid ""
"Return a list of all files which are possible completions of Pathname.\n"
"   We look in the directory specified by Defaults as well as looking down\n"
"   the search list."
msgstr ""
"Eturnray away istlay ofway allway ilesfay ichwhay areway ossiblepay "
"ompletionscay ofway Athnamepay.\n"
"   Eway ooklay inway ethay irectoryday ecifiedspay ybay Efaultsday asway "
"ellway asway ookinglay ownday\n"
"   ethay earchsay istlay."

#: target:code/filesys.lisp
msgid ""
"File-writable accepts a pathname and returns T if the current\n"
"  process can write it, and NIL otherwise."
msgstr ""
"Ilefay-itablewray acceptsway away athnamepay andway eturnsray T ifway ethay "
"urrentcay\n"
"  ocesspray ancay itewray itway, andway ILNAY otherwiseway."

#: target:code/filesys.lisp
msgid ""
"Returns the pathname for the default directory.  This is the place where\n"
"  a file will be written if no directory is specified.  This may be changed\n"
"  with setf."
msgstr ""
"Eturnsray ethay athnamepay orfay ethay efaultday irectoryday.  Isthay isway "
"ethay aceplay erewhay\n"
"  away ilefay illway ebay ittenwray ifway onay irectoryday isway "
"ecifiedspay.  Isthay aymay ebay angedchay\n"
"  ithway etfsay."

#: target:code/filesys.lisp
msgid ""
"Tests whether the directories containing the specified file\n"
"  actually exist, and attempts to create them if they do not.\n"
"  Portable programs should avoid using the :MODE keyword argument."
msgstr ""
"Eststay etherwhay ethay irectoriesday ontainingcay ethay ecifiedspay ilefay\n"
"  actuallyway existway, andway attemptsway otay eatecray emthay ifway eythay "
"oday otnay.\n"
"  Ortablepay ogramspray ouldshay avoidway usingway ethay :ODEMAY eywordkay "
"argumentway."

#: target:code/filesys.lisp
msgid "~&Creating directory: ~A~%"
msgstr "~&Eatingcray irectoryday: ~Away~%"

#: target:code/filesys.lisp
msgid "Can't create directory ~A."
msgstr "Ancay't eatecray irectoryday ~Away."

#: target:code/load.lisp
msgid "The default for the :IF-SOURCE-NEWER argument to load."
msgstr ""
"Ethay efaultday orfay ethay :IFWAY-OURCESAY-EWERNAY argumentway otay oadlay."

#: target:code/load.lisp
msgid "The source file types which LOAD recognizes."
msgstr "Ethay ourcesay ilefay ypestay ichwhay OADLAY ecognizesray."

#: target:code/load.lisp
msgid "A list of the object file types recognized by LOAD."
msgstr ""
"Away istlay ofway ethay objectway ilefay ypestay ecognizedray ybay OADLAY."

#: target:code/load.lisp
msgid ""
"A list of the object file types recognized by LOAD for logical pathnames."
msgstr ""
"Away istlay ofway ethay objectway ilefay ypestay ecognizedray ybay OADLAY "
"orfay ogicallay athnamespay."

#: target:code/load.lisp
msgid "The default for the :VERBOSE argument to Load."
msgstr "Ethay efaultday orfay ethay :ERBOSEVAY argumentway otay Oadlay."

#: target:code/load.lisp
msgid "The default for the :PRINT argument to Load."
msgstr "Ethay efaultday orfay ethay :INTPRAY argumentway otay Oadlay."

#: target:code/load.lisp
msgid "The TRUENAME of the file that LOAD is currently loading."
msgstr ""
"Ethay UENAMETRAY ofway ethay ilefay atthay OADLAY isway urrentlycay "
"oadinglay."

#: target:code/load.lisp
msgid "The defaulted pathname that LOAD is currently loading."
msgstr ""
"Ethay efaultedday athnamepay atthay OADLAY isway urrentlycay oadinglay."

#: target:code/load.lisp
msgid "Count of the number of recursive loads."
msgstr "Ountcay ofway ethay umbernay ofway ecursiveray oadslay."

#: target:code/load.lisp
msgid ""
"~A was compiled for fasl-file version ~X, ~\n"
"                     but this is version ~X"
msgstr ""
"~Away asway ompiledcay orfay aslfay-ilefay ersionvay ~X, ~\n"
"                     utbay isthay isway ersionvay ~X"

#: target:code/load.lisp
msgid "List of free fop tables for the fasloader."
msgstr "Istlay ofway eefray opfay ablestay orfay ethay asloaderfay."

#: target:code/load.lisp
msgid "The fop stack (we only need one!)."
msgstr "Ethay opfay tacksay (eway onlyway eednay oneway!)."

#: target:code/load.lisp
msgid "Vector indexed by a FaslOP that yields the FOP's name."
msgstr ""
"Ectorvay indexedway ybay away Aslopfay atthay ieldsyay ethay OPFAY's amenay."

#: target:code/load.lisp
msgid "Losing FOP!"
msgstr "Osinglay OPFAY!"

#: target:code/load.lisp
msgid ""
"Vector indexed by a FaslOP that yields a function of 0 arguments which\n"
"  will perform the operation."
msgstr ""
"Ectorvay indexedway ybay away Aslopfay atthay ieldsyay away unctionfay ofway "
"0 argumentsway ichwhay\n"
"  illway erformpay ethay operationway."

#: target:code/load.lisp
msgid "Loading ~S.~%"
msgstr "Oadinglay ~S.~%"

#: target:code/load.lisp
msgid "Loading stuff from ~S.~%"
msgstr "Oadinglay tuffsay omfray ~S.~%"

#: target:code/load.lisp
msgid "Attempt to load an empty FASL FILE:~%  ~S"
msgstr "Attemptway otay oadlay anway emptyway ASLFAY ILEFAY:~%  ~S"

#: target:code/load.lisp
msgid "Bad FASL file format."
msgstr "Adbay ASLFAY ilefay ormatfay."

#: target:code/load.lisp
msgid ""
"Loads the file named by Filename into the Lisp environment.  The file type\n"
"   (a.k.a extension) is defaulted if missing.  These options are defined:\n"
"\n"
"   :IF-SOURCE-NEWER <keyword>\n"
"\tIf the file type is not specified, and both source and object files\n"
"        exist, then this argument controls which is loaded:\n"
"\t    :LOAD-OBJECT - load object file (default),\n"
"\t    :LOAD-SOURCE - load the source file,\n"
"\t    :COMPILE - compile the source and then load the object file, or\n"
"\t    :QUERY - ask the user which to load.\n"
"\n"
"   :IF-DOES-NOT-EXIST {:ERROR | NIL}\n"
"       If :ERROR (the default), signal an error if the file can't be "
"located.\n"
"       If NIL, simply return NIL (LOAD normally returns T.)\n"
"\n"
"   :VERBOSE {T | NIL}\n"
"       If true (the default), print a line describing each file loaded.\n"
"\n"
"   :PRINT {T | NIL}\n"
"       If true, print information about loaded values.  When loading the\n"
"       source, the result of evaluating each top-level form is printed.\n"
"\n"
"   :CONTENTS {NIL | :SOURCE | :BINARY}\n"
"       Forces the input to be interpreted as a source or object file, "
"instead\n"
"       of guessing based on the file type.  This also inhibits file type\n"
"       defaulting.  Probably only necessary if you have source files with a\n"
"       \"fasl\" type. \n"
"\n"
"   The variables *LOAD-VERBOSE*, *LOAD-PRINT* and EXT:*LOAD-IF-SOURCE-"
"NEWER*\n"
"   determine the defaults for the corresponding keyword arguments.  These\n"
"   variables are also bound to the specified argument values, so specifying "
"a\n"
"   keyword affects nested loads.  The variables EXT:*LOAD-SOURCE-TYPES*,\n"
"   EXT:*LOAD-OBJECT-TYPES*, and EXT:*LOAD-LP-OBJECT-TYPES* determine the "
"file\n"
"   types that we use for defaulting when none is specified."
msgstr ""
"Oadslay ethay ilefay amednay ybay Ilenamefay intoway ethay Isplay "
"environmentway.  Ethay ilefay ypetay\n"
"   (away.k.away extensionway) isway efaultedday ifway issingmay.  Esethay "
"optionsway areway efinedday:\n"
"\n"
"   :IFWAY-OURCESAY-EWERNAY <eywordkay>\n"
"\tIfway ethay ilefay ypetay isway otnay ecifiedspay, andway othbay ourcesay "
"andway objectway ilesfay\n"
"        existway, enthay isthay argumentway ontrolscay ichwhay isway "
"oadedlay:\n"
"\t    :OADLAY-OBJECTWAY - oadlay objectway ilefay (efaultday),\n"
"\t    :OADLAY-OURCESAY - oadlay ethay ourcesay ilefay,\n"
"\t    :OMPILECAY - ompilecay ethay ourcesay andway enthay oadlay ethay "
"objectway ilefay, orway\n"
"\t    :ERYQUAY - askway ethay userway ichwhay otay oadlay.\n"
"\n"
"   :IFWAY-OESDAY-OTNAY-EXISTWAY {:ERRORWAY | ILNAY}\n"
"       Ifway :ERRORWAY (ethay efaultday), ignalsay anway errorway ifway "
"ethay ilefay ancay't ebay ocatedlay.\n"
"       Ifway ILNAY, implysay eturnray ILNAY (OADLAY ormallynay eturnsray "
"T.)\n"
"\n"
"   :ERBOSEVAY {T | ILNAY}\n"
"       Ifway uetray (ethay efaultday), intpray away inelay escribingday "
"eachway ilefay oadedlay.\n"
"\n"
"   :INTPRAY {T | ILNAY}\n"
"       Ifway uetray, intpray informationway aboutway oadedlay aluesvay.  "
"Enwhay oadinglay ethay\n"
"       ourcesay, ethay esultray ofway evaluatingway eachway optay-evellay "
"ormfay isway intedpray.\n"
"\n"
"   :ONTENTSCAY {ILNAY | :OURCESAY | :INARYBAY}\n"
"       Orcesfay ethay inputway otay ebay interpretedway asway away ourcesay "
"orway objectway ilefay, insteadway\n"
"       ofway uessinggay asedbay onway ethay ilefay ypetay.  Isthay alsoway "
"inhibitsway ilefay ypetay\n"
"       efaultingday.  Obablypray onlyway ecessarynay ifway ouyay avehay "
"ourcesay ilesfay ithway away\n"
"       \"aslfay\" ypetay. \n"
"\n"
"   Ethay ariablesvay *OADLAY-ERBOSEVAY*, *OADLAY-INTPRAY* andway EXTWAY:"
"*OADLAY-IFWAY-OURCESAY-EWERNAY*\n"
"   etermineday ethay efaultsday orfay ethay orrespondingcay eywordkay "
"argumentsway.  Esethay\n"
"   ariablesvay areway alsoway oundbay otay ethay ecifiedspay argumentway "
"aluesvay, osay ecifyingspay away\n"
"   eywordkay affectsway estednay oadslay.  Ethay ariablesvay EXTWAY:*OADLAY-"
"OURCESAY-YPESTAY*,\n"
"   EXTWAY:*OADLAY-OBJECTWAY-YPESTAY*, andway EXTWAY:*OADLAY-PLAY-OBJECTWAY-"
"YPESTAY* etermineday ethay ilefay\n"
"   ypestay atthay eway useway orfay efaultingday enwhay onenay isway "
"ecifiedspay."

#: target:code/load.lisp
msgid "Return NIL from load of ~S."
msgstr "Eturnray ILNAY omfray oadlay ofway ~S."

#: target:code/load.lisp
msgid "~S does not exist."
msgstr "~S oesday otnay existway."

#: target:code/load.lisp
msgid "See if it exists now."
msgstr "Eesay ifway itway existsway ownay."

#: target:code/load.lisp
msgid "Prompt for a new name."
msgstr "Omptpray orfay away ewnay amenay."

#: target:code/load.lisp
msgid "New name: "
msgstr "Ewnay amenay: "

#: target:code/load.lisp
msgid "Load it as a source file."
msgstr "Oadlay itway asway away ourcesay ilefay."

#: target:code/load.lisp
msgid "File has a fasl file type, but no fasl file header:~%  ~S"
msgstr ""
"Ilefay ashay away aslfay ilefay ypetay, utbay onay aslfay ilefay eaderhay:~"
"%  ~S"

#: target:code/load.lisp
msgid ""
"Loading object file ~A,~@\n"
"\t\t  which is older than the presumed source:~%  ~A."
msgstr ""
"Oadinglay objectway ilefay ~Away,~@\n"
"\t\t  ichwhay isway olderway anthay ethay esumedpray ourcesay:~%  ~Away."

#: target:code/load.lisp
msgid ""
"Loading source file ~A,~@\n"
"\t\t  which is newer than the presumed object file:~%  ~A."
msgstr ""
"Oadinglay ourcesay ilefay ~Away,~@\n"
"\t\t  ichwhay isway ewernay anthay ethay esumedpray objectway ilefay:~%  "
"~Away."

#: target:code/load.lisp
msgid "Compile of source failed, cannot load object."
msgstr "Ompilecay ofway ourcesay ailedfay, annotcay oadlay objectway."

#: target:code/load.lisp
msgid ""
"Object file ~A is~@\n"
"\t\t       older than the presumed source:~%  ~A."
msgstr ""
"Objectway ilefay ~Away isway~@\n"
"\t\t       olderway anthay ethay esumedpray ourcesay:~%  ~Away."

#: target:code/load.lisp
msgid "load source file"
msgstr "oadlay ourcesay ilefay"

#: target:code/load.lisp
msgid "load object file"
msgstr "oadlay objectway ilefay"

#: target:code/load.lisp
msgid "Fop-End-Header was executed???"
msgstr "Opfay-Endway-Eaderhay asway executedway???"

#: target:code/load.lisp
msgid "Fasl table of improper size.  Bug!"
msgstr "Aslfay abletay ofway improperway izesay.  Ugbay!"

#: target:code/load.lisp
msgid "Fasl stack not empty.  Bug!"
msgstr "Aslfay tacksay otnay emptyway.  Ugbay!"

#: target:code/load.lisp
msgid "The package ~S does not exist."
msgstr "Ethay ackagepay ~S oesday otnay existway."

#: target:code/load.lisp
msgid "Losing i-vector element size: ~S"
msgstr "Osinglay i-ectorvay elementway izesay: ~S"

#: target:code/load.lisp
msgid "Load ~A anyway"
msgstr "Oadlay ~Away anywayway"

#: target:code/load.lisp
msgid "~A was compiled for a ~A, but this is a ~A"
msgstr "~Away asway ompiledcay orfay away ~Away, utbay isthay isway away ~Away"

#: target:compiler/dfo.lisp target:code/load.lisp
msgid "Top-Level Form"
msgstr "Optay-Evellay Ormfay"

#: target:compiler/generic/core.lisp target:code/load.lisp
msgid "Unaligned function object, offset = #x~X."
msgstr "Unalignedway unctionfay objectway, offsetway = #x~X."

#: target:code/load.lisp
msgid "~S defined~%"
msgstr "~S efinedday~%"

#: target:code/load.lisp
msgid "Cannot load assembler code."
msgstr "Annotcay oadlay assemblerway odecay."

#: target:compiler/generic/core.lisp target:code/load.lisp
msgid "Undefined assembler routine: ~S"
msgstr "Undefinedway assemblerway outineray: ~S"

#: target:code/foreign-linkage.lisp
msgid "~A is not defined as a foreign symbol"
msgstr "~Away isway otnay efinedday asway away oreignfay ymbolsay"

#: target:code/module.lisp
msgid ""
"This is a list of module names that have been loaded into Lisp so far.\n"
"   It is used by PROVIDE and REQUIRE."
msgstr ""
"Isthay isway away istlay ofway odulemay amesnay atthay avehay eenbay "
"oadedlay intoway Isplay osay arfay.\n"
"   Itway isway usedway ybay OVIDEPRAY andway EQUIRERAY."

#: target:code/module.lisp
msgid "*load-verbose* is bound to this before loading files."
msgstr ""
"*oadlay-erbosevay* isway oundbay otay isthay eforebay oadinglay ilesfay."

#: target:code/module.lisp
msgid "See function documentation for REQUIRE"
msgstr "Eesay unctionfay ocumentationday orfay EQUIRERAY"

#: target:code/module.lisp
msgid ""
"Defines a module by registering the files that need to be loaded when\n"
"   the module is required.  If name is a symbol, its print name is used\n"
"   after downcasing it."
msgstr ""
"Efinesday away odulemay ybay egisteringray ethay ilesfay atthay eednay otay "
"ebay oadedlay enwhay\n"
"   ethay odulemay isway equiredray.  Ifway amenay isway away ymbolsay, "
"itsway intpray amenay isway usedway\n"
"   afterway owncasingday itway."

#: target:code/module.lisp
msgid ""
"Adds a new module name to *modules* indicating that it has been loaded.\n"
"   Module-name may be any valid string designator.  All comparisons are\n"
"   done using string=, i.e. module names are case-sensitive."
msgstr ""
"Addsway away ewnay odulemay amenay otay *odulesmay* indicatingway atthay "
"itway ashay eenbay oadedlay.\n"
"   Odulemay-amenay aymay ebay anyway alidvay ingstray esignatorday.  Allway "
"omparisonscay areway\n"
"   oneday usingway ingstray=, i.e. odulemay amesnay areway asecay-"
"ensitivesay."

#: target:code/module.lisp
msgid ""
"Loads a module when it has not been already.  Pathname, if supplied,\n"
"   is a single pathname or list of pathnames to be loaded if the module\n"
"   needs to be.  If pathname is not supplied, then functions from the list\n"
"   *MODULE-PROVIDER-FUNCTIONS* are called in order with the stringified\n"
"   MODULE-NAME as the argument, until one of them returns non-NIL.  By\n"
"   default the functions MODULE-PROVIDE-CMUCL-DEFMODULE and MODULE-PROVIDE-\n"
"   CMUCL-LIBRARY are on this list of functions, in that order.  The first\n"
"   of those looks for a list of files that was registered by a EXT:"
"DEFMODULE\n"
"   form.  If the module has not been defined, then the second function\n"
"   causes a file to be loaded whose name is formed by merging \"modules:\"\n"
"   and the concatenation of module-name with the suffix \"-LIBRARY\".\n"
"   Note that both the module-name and the suffix are each, separately,\n"
"   converted from :case :common to :case :local.  This merged name will be\n"
"   probed with both a .lisp and .fasl extensions, calling LOAD if it "
"exists.\n"
"\n"
"   Note that in all cases covered above, user code is responsible for\n"
"   calling PROVIDE to indicate a successful load of the module.\n"
"\n"
"   While loading any files, *load-verbose* is bound to *require-verbose*\n"
"   which defaults to t."
msgstr ""
"Oadslay away odulemay enwhay itway ashay otnay eenbay alreadyway.  "
"Athnamepay, ifway uppliedsay,\n"
"   isway away inglesay athnamepay orway istlay ofway athnamespay otay ebay "
"oadedlay ifway ethay odulemay\n"
"   eedsnay otay ebay.  Ifway athnamepay isway otnay uppliedsay, enthay "
"unctionsfay omfray ethay istlay\n"
"   *ODULEMAY-OVIDERPRAY-UNCTIONSFAY* areway alledcay inway orderway ithway "
"ethay ingifiedstray\n"
"   ODULEMAY-AMENAY asway ethay argumentway, untilway oneway ofway emthay "
"eturnsray onnay-ILNAY.  Ybay\n"
"   efaultday ethay unctionsfay ODULEMAY-OVIDEPRAY-MUCLCAY-EFMODULEDAY andway "
"ODULEMAY-OVIDEPRAY-\n"
"   MUCLCAY-IBRARYLAY areway onway isthay istlay ofway unctionsfay, inway "
"atthay orderway.  Ethay irstfay\n"
"   ofway osethay ookslay orfay away istlay ofway ilesfay atthay asway "
"egisteredray ybay away EXTWAY:EFMODULEDAY\n"
"   ormfay.  Ifway ethay odulemay ashay otnay eenbay efinedday, enthay ethay "
"econdsay unctionfay\n"
"   ausescay away ilefay otay ebay oadedlay osewhay amenay isway ormedfay "
"ybay ergingmay \"odulesmay:\"\n"
"   andway ethay oncatenationcay ofway odulemay-amenay ithway ethay uffixsay "
"\"-IBRARYLAY\".\n"
"   Otenay atthay othbay ethay odulemay-amenay andway ethay uffixsay areway "
"eachway, eparatelysay,\n"
"   onvertedcay omfray :asecay :ommoncay otay :asecay :ocallay.  Isthay "
"ergedmay amenay illway ebay\n"
"   obedpray ithway othbay away .isplay andway .aslfay extensionsway, "
"allingcay OADLAY ifway itway existsway.\n"
"\n"
"   Otenay atthay inway allway asescay overedcay aboveway, userway odecay "
"isway esponsibleray orfay\n"
"   allingcay OVIDEPRAY otay indicateway away uccessfulsay oadlay ofway ethay "
"odulemay.\n"
"\n"
"   Ilewhay oadinglay anyway ilesfay, *oadlay-erbosevay* isway oundbay otay "
"*equireray-erbosevay*\n"
"   ichwhay efaultsday otay t."

#: target:code/module.lisp
msgid "Don't know how to load ~A"
msgstr "Onday't nowkay owhay otay oadlay ~Away"

#: target:code/module.lisp
msgid "Coerce a string designator to a module name."
msgstr "Oercecay away ingstray esignatorday otay away odulemay amenay."

#: target:code/module.lisp
msgid ""
"Derive a default pathname to try to load for an undefined module\n"
"named module-name.  The default pathname is constructed from the\n"
"module-name by appending the suffix \"-LIBRARY\" to it, and merging\n"
"with \"modules:\".  Note that both the module-name and the suffix are\n"
"each, separately, converted from :case :common to :case :local."
msgstr ""
"Eriveday away efaultday athnamepay otay ytray otay oadlay orfay anway "
"undefinedway odulemay\n"
"amednay odulemay-amenay.  Ethay efaultday athnamepay isway onstructedcay "
"omfray ethay\n"
"odulemay-amenay ybay appendingway ethay uffixsay \"-IBRARYLAY\" otay itway, "
"andway ergingmay\n"
"ithway \"odulesmay:\".  Otenay atthay othbay ethay odulemay-amenay andway "
"ethay uffixsay areway\n"
"eachway, eparatelysay, onvertedcay omfray :asecay :ommoncay otay :asecay :"
"ocallay."

#: target:code/eval.lisp
msgid ""
"Keywords that you can put in a lambda-list, supposing you should want\n"
"  to do such a thing."
msgstr ""
"Eywordskay atthay ouyay ancay utpay inway away ambdalay-istlay, upposingsay "
"ouyay ouldshay antway\n"
"  otay oday uchsay away ingthay."

#: target:code/eval.lisp
msgid ""
"The exclusive upper bound on the number of arguments which may be passed\n"
"  to a function, including rest args."
msgstr ""
"Ethay exclusiveway upperway oundbay onway ethay umbernay ofway argumentsway "
"ichwhay aymay ebay assedpay\n"
"  otay away unctionfay, includingway estray argsway."

#: target:code/eval.lisp
msgid ""
"The exclusive upper bound on the number of parameters which may be specifed\n"
"  in a given lambda list.  This is actually the limit on required and "
"optional\n"
"  parameters.  With &key and &aux you can get more."
msgstr ""
"Ethay exclusiveway upperway oundbay onway ethay umbernay ofway arameterspay "
"ichwhay aymay ebay ecifedspay\n"
"  inway away ivengay ambdalay istlay.  Isthay isway actuallyway ethay "
"imitlay onway equiredray andway optionalway\n"
"  arameterspay.  Ithway &eykay andway &auxway ouyay ancay etgay oremay."

#: target:code/eval.lisp
msgid ""
"The exclusive upper bound on the number of multiple-values that you can\n"
"  have."
msgstr ""
"Ethay exclusiveway upperway oundbay onway ethay umbernay ofway ultiplemay-"
"aluesvay atthay ouyay ancay\n"
"  avehay."

#: target:code/eval.lisp
msgid ""
"This variable controls whether assignments to unknown variables at top-"
"level\n"
"   (or in any other call to EVAL of SETQ) will implicitly declare the "
"variable\n"
"   SPECIAL.  These values are meaningful:\n"
"     :WARN  -- Print a warning, but declare the variable special (the "
"default.)\n"
"      T     -- Quietly declare the variable special.\n"
"      NIL   -- Never declare the variable, giving warnings on each use."
msgstr ""
"Isthay ariablevay ontrolscay etherwhay assignmentsway otay unknownway "
"ariablesvay atway optay-evellay\n"
"   (orway inway anyway otherway allcay otay EVALWAY ofway ETQSAY) illway "
"implicitlyway eclareday ethay ariablevay\n"
"   ECIALSPAY.  Esethay aluesvay areway eaningfulmay:\n"
"     :ARNWAY  -- Intpray away arningway, utbay eclareday ethay ariablevay "
"ecialspay (ethay efaultday.)\n"
"      T     -- Ietlyquay eclareday ethay ariablevay ecialspay.\n"
"      ILNAY   -- Evernay eclareday ethay ariablevay, ivinggay arningsway "
"onway eachway useway."

#: target:code/eval.lisp
msgid ""
"Evaluates its single arg in a null lexical environment, returns the\n"
"  result or results."
msgstr ""
"Evaluatesway itsway inglesay argway inway away ullnay exicallay "
"environmentway, eturnsray ethay\n"
"  esultray orway esultsray."

#: target:code/eval.lisp
msgid "Wrong number of args to FUNCTION:~% ~S."
msgstr "Ongwray umbernay ofway argsway otay UNCTIONFAY:~% ~S."

#: target:code/eval.lisp
msgid "~S is a macro."
msgstr "~S isway away acromay."

#: target:code/eval.lisp
msgid "~S is a special operator."
msgstr "~S isway away ecialspay operatorway."

#: target:code/eval.lisp
msgid "Wrong number of args to QUOTE:~% ~S."
msgstr "Ongwray umbernay ofway argsway otay OTEQUAY:~% ~S."

#: target:code/eval.lisp
msgid "Odd number of args to SETQ:~% ~S."
msgstr "Oddway umbernay ofway argsway otay ETQSAY:~% ~S."

#: target:code/eval.lisp
msgid "Declaring ~S special."
msgstr "Eclaringday ~S ecialspay."

#: target:compiler/ir1tran.lisp target:code/eval.lisp
msgid "Bad Eval-When situation list: ~S."
msgstr "Adbay Evalway-Enwhay ituationsay istlay: ~S."

#: target:code/eval.lisp
msgid ""
"Attempt to evaluation a complex expression:~%     ~S~@\n"
"\t  This expression must be compiled, but the compiler is not loaded."
msgstr ""
"Attemptway otay evaluationway away omplexcay expressionway:~%     ~S~@\n"
"\t  Isthay expressionway ustmay ebay ompiledcay, utbay ethay ompilercay "
"isway otnay oadedlay."

#: target:code/eval.lisp
msgid ""
"EVAL called on #'(lambda (x) ...) when the compiler isn't loaded:~\n"
"\t  ~%     ~S~%"
msgstr ""
"EVALWAY alledcay onway #'(ambdalay (x) ...) enwhay ethay ompilercay isnway't "
"oadedlay:~\n"
"\t  ~%     ~S~%"

#: target:code/eval.lisp
msgid ""
"Given a function, return three values:\n"
"   1] A lambda expression that could be used to define the function, or NIL "
"if\n"
"      the definition isn't available.\n"
"   2] NIL if the function was definitely defined in a null lexical "
"environment,\n"
"      and T otherwise.\n"
"   3] Some object that \"names\" the function.  Although this is allowed to "
"be\n"
"      any object, CMU CL always returns a valid function name or a string."
msgstr ""
"Ivengay away unctionfay, eturnray reethay aluesvay:\n"
"   1] Away ambdalay expressionway atthay ouldcay ebay usedway otay efineday "
"ethay unctionfay, orway ILNAY ifway\n"
"      ethay efinitionday isnway't availableway.\n"
"   2] ILNAY ifway ethay unctionfay asway efinitelyday efinedday inway away "
"ullnay exicallay environmewaytnay,\n"
"      andway T otherwiseway.\n"
"   3] Omesay objectway atthay \"amesnay\" ethay unctionfay.  Althoughway "
"isthay isway allowedway otay ebay\n"
"      anyway objectway, MUCAY CLAY alwaysway eturnsray away alidvay "
"unctionfay amenay orway away ingstray."

#: target:code/eval.lisp
msgid "If the symbol globally names a special form, returns T, otherwise NIL."
msgstr ""
"Ifway ethay ymbolsay oballyglay amesnay away ecialspay ormfay, eturnsray T, "
"otherwiseway ILNAY."

#: target:code/eval.lisp
msgid ""
"The value of this variable must be a function that can take three\n"
"  arguments, a macro expander function, the macro form to be expanded,\n"
"  and the lexical environment to expand in.  The function should\n"
"  return the expanded form.  This function is called by MACROEXPAND-1\n"
"  whenever a runtime expansion is needed.  Initially this is set to\n"
"  FUNCALL."
msgstr ""
"Ethay aluevay ofway isthay ariablevay ustmay ebay away unctionfay atthay "
"ancay aketay reethay\n"
"  argumentsway, away acromay expanderway unctionfay, ethay acromay ormfay "
"otay ebay expandedway,\n"
"  andway ethay exicallay environmentway otay expandway inway.  Ethay "
"unctionfay ouldshay\n"
"  eturnray ethay expandedway ormfay.  Isthay unctionfay isway alledcay ybay "
"ACROEXPANDMAY-1\n"
"  eneverwhay away untimeray expansionway isway eedednay.  Initiallyway "
"isthay isway etsay otay\n"
"  UNCALLFAY."

#: target:code/eval.lisp
msgid ""
"Invoke *MACROEXPAND-HOOK* on FUN, FORM, and ENV after coercing it to\n"
"   a function."
msgstr ""
"Invokeway *ACROEXPANDMAY-OOKHAY* onway UNFAY, ORMFAY, andway ENVWAY afterway "
"oercingcay itway otay\n"
"   away unctionfay."

#: target:code/eval.lisp
msgid ""
"If SYMBOL names a macro in ENV, returns the expansion function,\n"
"   else returns NIL.  If ENV is unspecified or NIL, use the global\n"
"   environment only."
msgstr ""
"Ifway YMBOLSAY amesnay away acromay inway ENVWAY, eturnsray ethay "
"expansionway unctionfay,\n"
"   elseway eturnsray ILNAY.  Ifway ENVWAY isway unspecifiedway orway ILNAY, "
"useway ethay obalglay\n"
"   environmentway onlyway."

#: target:code/eval.lisp
msgid "~S names a special form."
msgstr "~S amesnay away ecialspay ormfay."

#: target:code/eval.lisp
msgid "Cannot funcall macro functions."
msgstr "Annotcay uncallfay acromay unctionsfay."

#: target:code/eval.lisp
msgid ""
"If form is a macro (or symbol macro), expands it once.  Returns two values,\n"
"   the expanded form and a T-or-NIL flag indicating whether the form was, "
"in\n"
"   fact, a macro.  Env is the lexical environment to expand in, which "
"defaults\n"
"   to the null environment."
msgstr ""
"Ifway ormfay isway away acromay (orway ymbolsay acromay), expandsway itway "
"onceway.  Eturnsray wotay aluesvay,\n"
"   ethay expandedway ormfay andway away T-orway-ILNAY agflay indicatingway "
"etherwhay ethay ormfay asway, inway\n"
"   actfay, away acromay.  Envway isway ethay exicallay environmentway otay "
"expandway inway, ichwhay efaultsday\n"
"   otay ethay ullnay environmentway."

#: target:code/eval.lisp
msgid ""
"Repetitively call MACROEXPAND-1 until the form can no longer be expanded.\n"
"   Returns the final resultant form, and T if it was expanded.  ENV is the\n"
"   lexical environment to expand in, or NIL (the default) for the null\n"
"   environment."
msgstr ""
"Epetitivelyray allcay ACROEXPANDMAY-1 untilway ethay ormfay ancay onay "
"ongerlay ebay expandedway.\n"
"   Eturnsray ethay inalfay esultantray ormfay, andway T ifway itway asway "
"expandedway.  ENVWAY isway ethay\n"
"   exicallay environmentway otay expandway inway, orway ILNAY (ethay "
"efaultday) orfay ethay ullnay\n"
"   environmentway."

#: target:code/eval.lisp
msgid ""
"If NAME names a compiler-macro, returns the expansion function,\n"
"   else returns NIL.  Note: if the name is shadowed in ENV by a local\n"
"   definition, or declared NOTINLINE, NIL is returned.  Can be\n"
"   set with SETF."
msgstr ""
"Ifway AMENAY amesnay away ompilercay-acromay, eturnsray ethay expansionway "
"unctionfay,\n"
"   elseway eturnsray ILNAY.  Otenay: ifway ethay amenay isway adowedshay "
"inway ENVWAY ybay away ocallay\n"
"   efinitionday, orway eclaredday OTINLINENAY, ILNAY isway eturnedray.  "
"Ancay ebay\n"
"   etsay ithway ETFSAY."

#: target:code/eval.lisp
msgid ""
"If FORM is a function call for which a compiler-macro has been defined,\n"
"   invoke the expander function using *macroexpand-hook* and return the\n"
"   results and T.  Otherwise, return the original form and NIL."
msgstr ""
"Ifway ORMFAY isway away unctionfay allcay orfay ichwhay away ompilercay-"
"acromay ashay eenbay efinedday,\n"
"   invokeway ethay expanderway unctionfay usingway *acroexpandmay-ookhay* "
"andway eturnray ethay\n"
"   esultsray andway T.  Otherwiseway, eturnray ethay originalway ormfay "
"andway ILNAY."

#: target:code/eval.lisp
msgid ""
"Repetitively call COMPILER-MACROEXPAND-1 until the form can no longer be\n"
"   expanded.  ENV is the lexical environment to expand in, or NIL (the\n"
"   default) for the null environment."
msgstr ""
"Epetitivelyray allcay OMPILERCAY-ACROEXPANDMAY-1 untilway ethay ormfay ancay "
"onay ongerlay ebay\n"
"   expandedway.  ENVWAY isway ethay exicallay environmentway otay expandway "
"inway, orway ILNAY (ethay\n"
"   efaultday) orfay ethay ullnay environmentway."

#: target:code/eval.lisp
msgid ""
"True of any Lisp object that has a constant value: types that eval to\n"
"  themselves, keywords, constants, and list whose car is QUOTE."
msgstr ""
"Uetray ofway anyway Isplay objectway atthay ashay away onstantcay aluevay: "
"ypestay atthay evalway otay\n"
"  emselvesthay, eywordskay, onstantscay, andway istlay osewhay arcay isway "
"OTEQUAY."

#: target:code/eval.lisp
msgid ""
"Applies FUNCTION to a list of arguments produced by evaluating ARGS in\n"
"  the manner of LIST*.  That is, a list is made of the values of all but "
"the\n"
"  last argument, appended to the value of the last argument, which must be "
"a\n"
"  list."
msgstr ""
"Appliesway UNCTIONFAY otay away istlay ofway argumentsway oducedpray ybay "
"evaluatingway ARGSWAY inway\n"
"  ethay annermay ofway ISTLAY*.  Atthay isway, away istlay isway ademay "
"ofway ethay aluesvay ofway allway utbay ethay\n"
"  astlay argumentway, appendedway otay ethay aluevay ofway ethay astlay "
"argumentway, ichwhay ustmay ebay away\n"
"  istlay."

#: target:code/eval.lisp
msgid "Calls Function with the given Arguments."
msgstr "Allscay Unctionfay ithway ethay ivengay Argumentsway."

#: target:code/eval.lisp
msgid "Returns all of its arguments, in order, as values."
msgstr ""
"Eturnsray allway ofway itsway argumentsway, inway orderway, asway aluesvay."

#: target:code/eval.lisp
msgid "Returns all of the elements of List, in order, as values."
msgstr ""
"Eturnsray allway ofway ethay elementsway ofway Istlay, inway orderway, asway "
"aluesvay."

#: target:code/signal.lisp
msgid "A list of unix signal structures."
msgstr "Away istlay ofway unixway ignalsay ucturesstray."

#: target:code/signal.lisp
msgid "~S is not a valid signal name or number."
msgstr "~S isway otnay away alidvay ignalsay amenay orway umbernay."

#: target:code/signal.lisp
msgid ""
"Return the name of the signal as a string.  Signal should be a valid\n"
"  signal number or a keyword of the standard UNIX signal name."
msgstr ""
"Eturnray ethay amenay ofway ethay ignalsay asway away ingstray.  Ignalsay "
"ouldshay ebay away alidvay\n"
"  ignalsay umbernay orway away eywordkay ofway ethay tandardsay UNIXWAY "
"ignalsay amenay."

#: target:code/signal.lisp
msgid ""
"Return a string describing signal.  Signal should be a valid signal\n"
"  number or a keyword of the standard UNIX signal name."
msgstr ""
"Eturnray away ingstray escribingday ignalsay.  Ignalsay ouldshay ebay away "
"alidvay ignalsay\n"
"  umbernay orway away eywordkay ofway ethay tandardsay UNIXWAY ignalsay "
"amenay."

#: target:code/signal.lisp
msgid ""
"Return the number of the given signal.  Signal should be a valid\n"
"  signal number or a keyword of the standard UNIX signal name."
msgstr ""
"Eturnray ethay umbernay ofway ethay ivengay ignalsay.  Ignalsay ouldshay "
"ebay away alidvay\n"
"  ignalsay umbernay orway away eywordkay ofway ethay tandardsay UNIXWAY "
"ignalsay amenay."

#: target:code/signal.lisp
msgid "Returns a mask given a set of signals."
msgstr "Eturnsray away askmay ivengay away etsay ofway ignalssay."

#: target:code/signal.lisp
msgid ""
"Unix-kill sends the signal signal to the process with process \n"
"   id pid.  Signal should be a valid signal number or a keyword of the\n"
"   standard UNIX signal name."
msgstr ""
"Unixway-illkay endssay ethay ignalsay ignalsay otay ethay ocesspray ithway "
"ocesspray \n"
"   idway idpay.  Ignalsay ouldshay ebay away alidvay ignalsay umbernay orway "
"away eywordkay ofway ethay\n"
"   tandardsay UNIXWAY ignalsay amenay."

#: target:code/signal.lisp
msgid ""
"Unix-killpg sends the signal signal to the all the process in process\n"
"  group PGRP.  Signal should be a valid signal number or a keyword of\n"
"  the standard UNIX signal name."
msgstr ""
"Unixway-illpgkay endssay ethay ignalsay ignalsay otay ethay allway ethay "
"ocesspray inway ocesspray\n"
"  oupgray GRPPAY.  Ignalsay ouldshay ebay away alidvay ignalsay umbernay "
"orway away eywordkay ofway\n"
"  ethay tandardsay UNIXWAY ignalsay amenay."

#: target:code/signal.lisp
msgid ""
"Unix-sigblock cause the signals specified in mask to be\n"
"   added to the set of signals currently being blocked from\n"
"   delivery.  The macro sigmask is provided to create masks."
msgstr ""
"Unixway-igblocksay ausecay ethay ignalssay ecifiedspay inway askmay otay "
"ebay\n"
"   addedway otay ethay etsay ofway ignalssay urrentlycay eingbay ockedblay "
"omfray\n"
"   eliveryday.  Ethay acromay igmasksay isway ovidedpray otay eatecray "
"asksmay."

#: target:code/signal.lisp
msgid ""
"Unix-sigpause sets the set of masked signals to its argument\n"
"   and then waits for a signal to arrive, restoring the previous\n"
"   mask upon its return."
msgstr ""
"Unixway-igpausesay etssay ethay etsay ofway askedmay ignalssay otay itsway "
"argumentway\n"
"   andway enthay aitsway orfay away ignalsay otay arriveway, estoringray "
"ethay eviouspray\n"
"   askmay uponway itsway eturnray."

#: target:code/signal.lisp
msgid ""
"Unix-sigsetmask sets the current set of masked signals (those\n"
"   being blocked from delivery) to the argument.  The macro sigmask\n"
"   can be used to create the mask.  The previous value of the signal\n"
"   mask is returned."
msgstr ""
"Unixway-igsetmasksay etssay ethay urrentcay etsay ofway askedmay ignalssay "
"(osethay\n"
"   eingbay ockedblay omfray eliveryday) otay ethay argumentway.  Ethay "
"acromay igmasksay\n"
"   ancay ebay usedway otay eatecray ethay askmay.  Ethay eviouspray aluevay "
"ofway ethay ignalsay\n"
"   askmay isway eturnedray."

#: target:code/signal.lisp
msgid "Enable all the default signals that Lisp knows how to deal with."
msgstr ""
"Enableway allway ethay efaultday ignalssay atthay Isplay nowskay owhay otay "
"ealday ithway."

#: target:code/signal.lisp
msgid "Execute BODY in a context impervious to interrupts."
msgstr ""
"Executeway ODYBAY inway away ontextcay imperviousway otay interruptsway."

#: target:code/signal.lisp
msgid ""
"Allow interrupts while executing BODY.  As interrupts are normally allowed,\n"
"  this is only useful inside a WITHOUT-INTERRUPTS."
msgstr ""
"Allowway interruptsway ilewhay executingway ODYBAY.  Asway interruptsway "
"areway ormallynay allowedway,\n"
"  isthay isway onlyway usefulway insideway away ITHOUTWAY-INTERRUPTSWAY."

#: target:code/signal.lisp
msgid ""
"With-enabled-interrupts ({(interrupt function)}*) {form}*\n"
"   Establish function as a handler for the Unix signal interrupt which\n"
"   should be a number between 1 and 31 inclusive."
msgstr ""
"Ithway-enabledway-interruptsway ({(interruptway unctionfay)}*) {ormfay}*\n"
"   Establishway unctionfay asway away andlerhay orfay ethay Unixway ignalsay "
"interruptway ichwhay\n"
"   ouldshay ebay away umbernay etweenbay 1 andway 31 inclusiveway."

#: target:code/interr.lisp
msgid "~S isn't one of the required args."
msgstr "~S isnway't oneway ofway ethay equiredray argsway."

#: target:code/interr.lisp
msgid "Unknown error:~{ ~S~})"
msgstr "Unknownway errorway:~{ ~S~})"

#: target:code/interr.lisp
msgid "Invalid number of arguments: ~S"
msgstr "Invalidway umbernay ofway argumentsway: ~S"

#: target:code/interr.lisp
msgid "Attempt to use VALUES-LIST on a dotted-list:~%  ~S"
msgstr ""
"Attemptway otay useway ALUESVAY-ISTLAY onway away ottedday-istlay:~%  ~S"

#: target:code/interr.lisp
msgid "Attempt to RETURN-FROM a block or GO to a tag that no longer exists"
msgstr ""
"Attemptway otay ETURNRAY-OMFRAY away ockblay orway OGAY otay away agtay "
"atthay onay ongerlay existsway"

#: target:code/interr.lisp
msgid "Attempt to THROW to a tag that does not exist: ~S"
msgstr ""
"Attemptway otay ROWTHAY otay away agtay atthay oesday otnay existway: ~S"

#: target:code/interr.lisp
msgid "Function with declared result type NIL returned:~%  ~S"
msgstr "Unctionfay ithway eclaredday esultray ypetay ILNAY eturnedray:~%  ~S"

#: target:code/interr.lisp
msgid "Invalid array index, ~D for ~S.  Array has no elements."
msgstr ""
"Invalidway arrayway indexway, ~D orfay ~S.  Arrayway ashay onay elementsway."

#: target:code/interr.lisp
msgid ""
"Invalid array index, ~D for ~S.  Should have greater than or equal to 0."
msgstr ""
"Invalidway arrayway indexway, ~D orfay ~S.  Ouldshay avehay eatergray anthay "
"orway equalway otay 0."

#: target:code/interr.lisp
msgid "Invalid array index, ~D for ~S.  Should have been less than ~D"
msgstr ""
"Invalidway arrayway indexway, ~D orfay ~S.  Ouldshay avehay eenbay esslay "
"anthay ~D"

#: target:code/interr.lisp
msgid "Undefined foreign symbol: ~S"
msgstr "Undefinedway oreignfay ymbolsay: ~S"

#: target:code/interr.lisp
msgid ""
"The maximum number of nested errors allowed.  Internal errors are\n"
"   double-counted."
msgstr ""
"Ethay aximummay umbernay ofway estednay errorsway allowedway.  Internalway "
"errorsway areway\n"
"   oubleday-ountedcay."

#: target:code/interr.lisp
msgid "The current number of nested errors."
msgstr "Ethay urrentcay umbernay ofway estednay errorsway."

#: target:code/interr.lisp
msgid "Unknown internal error, ~D?  args=~S"
msgstr "Unknownway internalway errorway, ~D?  argsway=~S"

#: target:code/interr.lisp
msgid "Internal error ~D: ~A.  args=~S"
msgstr "Internalway errorway ~D: ~Away.  argsway=~S"

#: target:code/interr.lisp
msgid ""
"~2&~@<A control stack overflow has occurred: ~\n"
"            the program has entered the yellow control stack guard zone.  ~\n"
"            Please note that you will be returned to the Top-Level if you ~\n"
"            enter the red control stack guard zone while debugging.~@:>~2%"
msgstr ""
"~2&~@<Away ontrolcay tacksay overflowway ashay occurredway: ~\n"
"            ethay ogrampray ashay enteredway ethay ellowyay ontrolcay "
"tacksay uardgay onezay.  ~\n"
"            Easeplay otenay atthay ouyay illway ebay eturnedray otay ethay "
"Optay-Evellay ifway ouyay ~\n"
"            enterway ethay edray ontrolcay tacksay uardgay onezay ilewhay "
"ebuggingday.~@:>~2%"

#: target:code/interr.lisp
msgid ""
"~2&~@<Fatal control stack overflow.  You have entered~%~\n"
"           the red control stack guard zone while debugging.~%~\n"
"           Returning to Top-Level.~@:>~2%"
msgstr ""
"~2&~@<Atalfay ontrolcay tacksay overflowway.  Ouyay avehay enteredway~%~\n"
"           ethay edray ontrolcay tacksay uardgay onezay ilewhay ebuggingday.~"
"%~\n"
"           Eturningray otay Optay-Evellay.~@:>~2%"

#: target:code/interr.lisp
msgid ""
"~2&~@<Imminent dynamic space overflow has occurred:~%~\n"
"            Only a small amount of dynamic space is available now.~%~\n"
"            Please note that you will be returned to the Top-Level without~%"
"~\n"
"            warning if you run out of space while debugging.~@:>~%"
msgstr ""
"~2&~@<Imminentway ynamicday acespay overflowway ashay occurredway:~%~\n"
"            Onlyway away mallsay amountway ofway ynamicday acespay isway "
"availableway ownay.~%~\n"
"            Easeplay otenay atthay ouyay illway ebay eturnedray otay ethay "
"Optay-Evellay ithoutway~%~\n"
"            arningway ifway ouyay unray outway ofway acespay ilewhay "
"ebuggingday.~@:>~%"

#: target:code/debug-int.lisp
msgid ""
"All debug-conditions inherit from this type.  These are serious conditions\n"
"    that must be handled, but they are not programmer errors."
msgstr ""
"Allway ebugday-onditionscay inheritway omfray isthay ypetay.  Esethay areway "
"erioussay onditionscay\n"
"    atthay ustmay ebay andledhay, utbay eythay areway otnay ogrammerpray "
"errorsway."

#: target:code/debug-int.lisp
msgid "There is absolutely no debugging information available."
msgstr ""
"Erethay isway absolutelyway onay ebuggingday informationway availableway."

#: target:code/debug-int.lisp
msgid "No debugging information available."
msgstr "Onay ebuggingday informationway availableway."

#: target:code/debug-int.lisp
msgid ""
"The system could not return values from a frame with debug-function since\n"
"    it lacked information about returning values."
msgstr ""
"Ethay ystemsay ouldcay otnay eturnray aluesvay omfray away amefray ithway "
"ebugday-unctionfay incesay\n"
"    itway ackedlay informationway aboutway eturningray aluesvay."

#: target:code/debug-int.lisp
msgid ""
"~&Cannot return values from ~:[frame~;~:*~S~] since ~\n"
"\t\t\tthe debug information lacks details about returning ~\n"
"\t\t\tvalues here."
msgstr ""
"~&Annotcay eturnray aluesvay omfray ~:[amefray~;~:*~S~] incesay ~\n"
"\t\t\tethay ebugday informationway ackslay etailsday aboutway eturningray ~\n"
"\t\t\taluesvay erehay."

#: target:code/debug-int.lisp
msgid "The debug-function has no debug-block information."
msgstr "Ethay ebugday-unctionfay ashay onay ebugday-ockblay informationway."

#: target:code/debug-int.lisp
msgid "~&~S has no debug-block information."
msgstr "~&~S ashay onay ebugday-ockblay informationway."

#: target:code/debug-int.lisp
msgid "The debug-function has no debug-variable information."
msgstr "Ethay ebugday-unctionfay ashay onay ebugday-ariablevay informationway."

#: target:code/debug-int.lisp
msgid "~&~S has no debug-variable information."
msgstr "~&~S ashay onay ebugday-ariablevay informationway."

#: target:code/debug-int.lisp
msgid ""
"The debug-function has no lambda-list since argument debug-variables are\n"
"    unavailable."
msgstr ""
"Ethay ebugday-unctionfay ashay onay ambdalay-istlay incesay argumentway "
"ebugday-ariablesvay areway\n"
"    unavailableway."

#: target:code/debug-int.lisp
msgid "~&~S has no lambda-list information available."
msgstr "~&~S ashay onay ambdalay-istlay informationway availableway."

#: target:code/debug-int.lisp
msgid "~&~S has :invalid or :unknown value in ~S."
msgstr "~&~S ashay :invalidway orway :unknownway aluevay inway ~S."

#: target:code/debug-int.lisp
msgid "~&~S names more than one valid variable in ~S."
msgstr "~&~S amesnay oremay anthay oneway alidvay ariablevay inway ~S."

#: target:code/debug-int.lisp
msgid ""
"All programmer errors from using the interface for building debugging\n"
"    tools inherit from this type."
msgstr ""
"Allway ogrammerpray errorsway omfray usingway ethay interfaceway orfay "
"uildingbay ebuggingday\n"
"    oolstay inheritway omfray isthay ypetay."

#: target:code/debug-int.lisp
msgid "~&Unhandled debug-condition:~%~A"
msgstr "~&Unhandledway ebugday-onditioncay:~%~Away"

#: target:code/debug-int.lisp
msgid "~&Invalid use of an unknown code-location -- ~S."
msgstr "~&Invalidway useway ofway anway unknownway odecay-ocationlay -- ~S."

#: target:code/debug-int.lisp
msgid "~&~S not in ~S."
msgstr "~&~S otnay inway ~S."

#: target:code/debug-int.lisp
msgid "Invalid control stack pointer."
msgstr "Invalidway ontrolcay tacksay ointerpay."

#: target:code/debug-int.lisp
msgid "~&Form was preprocessed for ~S,~% but called on ~S:~%  ~S"
msgstr ""
"~&Ormfay asway eprocessedpray orfay ~S,~% utbay alledcay onway ~S:~%  ~S"

#: target:code/debug-int.lisp
msgid ""
"Returns the name of the debug-variable.  The name is the name of the symbol\n"
"   used as an identifier when writing the code."
msgstr ""
"Eturnsray ethay amenay ofway ethay ebugday-ariablevay.  Ethay amenay isway "
"ethay amenay ofway ethay ymbolsay\n"
"   usedway asway anway identifierway enwhay itingwray ethay odecay."

#: target:code/debug-int.lisp
msgid ""
"Returns the package name of the debug-variable.  This is the package name "
"of\n"
"   the symbol used as an identifier when writing the code."
msgstr ""
"Eturnsray ethay ackagepay amenay ofway ethay ebugday-ariablevay.  Isthay "
"isway ethay ackagepay amenay ofway\n"
"   ethay ymbolsay usedway asway anway identifierway enwhay itingwray ethay "
"odecay."

#: target:code/debug-int.lisp
msgid ""
"Returns the integer that makes debug-variable's name and package name "
"unique\n"
"   with respect to other debug-variable's in the same function."
msgstr ""
"Eturnsray ethay integerway atthay akesmay ebugday-ariablevay's amenay andway "
"ackagepay amenay uniqueway\n"
"   ithway espectray otay otherway ebugday-ariablevay's inway ethay amesay "
"unctionfay."

#: target:code/debug-int.lisp
msgid ""
"Returns the frame immediately above frame on the stack.  When frame is\n"
"   the top of the stack, this returns nil."
msgstr ""
"Eturnsray ethay amefray immediatelyway aboveway amefray onway ethay "
"tacksay.  Enwhay amefray isway\n"
"   ethay optay ofway ethay tacksay, isthay eturnsray ilnay."

#: target:code/debug-int.lisp
msgid ""
"Returns the debug-function for the function whose call frame represents."
msgstr ""
"Eturnsray ethay ebugday-unctionfay orfay ethay unctionfay osewhay allcay "
"amefray epresentsray."

#: target:code/debug-int.lisp
msgid ""
"Returns the code-location where the frame's debug-function will continue\n"
"   running when program execution returns to this frame.  If someone\n"
"   interrupted this frame, the result could be an unknown code-location."
msgstr ""
"Eturnsray ethay odecay-ocationlay erewhay ethay amefray's ebugday-unctionfay "
"illway ontinuecay\n"
"   unningray enwhay ogrampray executionway eturnsray otay isthay amefray.  "
"Ifway omeonesay\n"
"   interruptedway isthay amefray, ethay esultray ouldcay ebay anway "
"unknownway odecay-ocationlay."

#: target:code/debug-int.lisp
msgid "#<Compiled-Frame ~S~:[~;, interrupted~]>"
msgstr "#<Ompiledcay-Amefray ~S~:[~;, interruptedway~]>"

#: target:code/debug-int.lisp
msgid "#<~A-Debug-Function ~S>"
msgstr "#<~Away-Ebugday-Unctionfay ~S>"

#: target:code/debug-int.lisp
msgid ""
"Returns the list of possible code-locations where execution may continue\n"
"   when the basic-block represented by debug-block completes its execution."
msgstr ""
"Eturnsray ethay istlay ofway ossiblepay odecay-ocationslay erewhay "
"executionway aymay ontinuecay\n"
"   enwhay ethay asicbay-ockblay epresentedray ybay ebugday-ockblay "
"ompletescay itsway executionway."

#: target:code/debug-int.lisp
msgid "Returns whether debug-block represents elsewhere code."
msgstr "Eturnsray etherwhay ebugday-ockblay epresentsray elsewhereway odecay."

#: target:code/debug-int.lisp
msgid ""
"Returns the breakpoint's function the system calls when execution "
"encounters\n"
"   the breakpoint, and it is active.  This is SETF'able."
msgstr ""
"Eturnsray ethay eakpointbray's unctionfay ethay ystemsay allscay enwhay "
"executionway encountersway\n"
"   ethay eakpointbray, andway itway isway activeway.  Isthay isway "
"ETFSAY'ableway."

#: target:code/debug-int.lisp
msgid "Returns the breakpoint's what specification."
msgstr "Eturnsray ethay eakpointbray's atwhay ecificationspay."

#: target:code/debug-int.lisp
msgid "Returns the breakpoint's kind specification."
msgstr "Eturnsray ethay eakpointbray's indkay ecificationspay."

#: target:code/debug-int.lisp
msgid ""
"Returns the debug-function representing information about the function\n"
"   corresponding to the code-location."
msgstr ""
"Eturnsray ethay ebugday-unctionfay epresentingray informationway aboutway "
"ethay unctionfay\n"
"   orrespondingcay otay ethay odecay-ocationlay."

#: target:code/debug-int.lisp
msgid ""
"Returns the number of top-level forms processed by the compiler before\n"
"   compiling this source.  If this source is uncompiled, this is zero.  "
"This\n"
"   may be zero even if the source is compiled since the first form in the "
"first\n"
"   file compiled in one compilation, for example, must have a root number "
"of\n"
"   zero -- the compiler saw no other top-level forms before it."
msgstr ""
"Eturnsray ethay umbernay ofway optay-evellay ormsfay ocessedpray ybay ethay "
"ompilercay eforebay\n"
"   ompilingcay isthay ourcesay.  Ifway isthay ourcesay isway uncompiledway, "
"isthay isway erozay.  Isthay\n"
"   aymay ebay erozay evenway ifway ethay ourcesay isway ompiledcay incesay "
"ethay irstfay ormfay inway ethay irstfay\n"
"   ilefay ompiledcay inway oneway ompilationcay, orfay exampleway, ustmay "
"avehay away ootray umbernay ofway\n"
"   erozay -- ethay ompilercay awsay onay otherway optay-evellay ormsfay "
"eforebay itway."

#: target:code/debug-int.lisp
msgid ""
"Returns an indication of the type of source.  The following are the "
"possible\n"
"   values:\n"
"      :file    from a file (obtained by COMPILE-FILE if compiled).\n"
"      :lisp    from Lisp (obtained by COMPILE if compiled).\n"
"      :stream  from a non-file stream."
msgstr ""
"Eturnsray anway indicationway ofway ethay ypetay ofway ourcesay.  Ethay "
"ollowingfay areway ethay ossiblepay\n"
"   aluesvay:\n"
"      :ilefay    omfray away ilefay (obtainedway ybay OMPILECAY-ILEFAY ifway "
"ompiledcay).\n"
"      :isplay    omfray Isplay (obtainedway ybay OMPILECAY ifway "
"ompiledcay).\n"
"      :eamstray  omfray away onnay-ilefay eamstray."

#: target:code/debug-int.lisp
msgid ""
"Returns the actual source in some sense represented by debug-source, which\n"
"   is related to DEBUG-SOURCE-FROM:\n"
"      :file    the pathname of the file.\n"
"      :lisp    a lambda-expression.\n"
"      :stream  some descriptive string that's otherwise useless."
msgstr ""
"Eturnsray ethay actualway ourcesay inway omesay ensesay epresentedray ybay "
"ebugday-ourcesay, ichwhay\n"
"   isway elatedray otay EBUGDAY-OURCESAY-OMFRAY:\n"
"      :ilefay    ethay athnamepay ofway ethay ilefay.\n"
"      :isplay    away ambdalay-expressionway.\n"
"      :eamstray  omesay escriptiveday ingstray atthay's otherwiseway "
"uselessway."

#: target:code/debug-int.lisp
msgid ""
"Returns the universal time someone created the source.  This may be nil if\n"
"   it is unavailable."
msgstr ""
"Eturnsray ethay universalway imetay omeonesay eatedcray ethay ourcesay.  "
"Isthay aymay ebay ilnay ifway\n"
"   itway isway unavailableway."

#: target:code/debug-int.lisp
msgid ""
"Returns the time someone compiled the source.  This is nil if the source\n"
"   is uncompiled."
msgstr ""
"Eturnsray ethay imetay omeonesay ompiledcay ethay ourcesay.  Isthay isway "
"ilnay ifway ethay ourcesay\n"
"   isway uncompiledway."

#: target:code/debug-int.lisp
msgid ""
"This function returns the file position of each top-level form as an array\n"
"   if debug-source is from a :file.  If DEBUG-SOURCE-FROM is :lisp or :"
"stream,\n"
"   this returns nil."
msgstr ""
"Isthay unctionfay eturnsray ethay ilefay ositionpay ofway eachway optay-"
"evellay ormfay asway anway arrayway\n"
"   ifway ebugday-ourcesay isway omfray away :ilefay.  Ifway EBUGDAY-OURCESAY-"
"OMFRAY isway :isplay orway :eamstray,\n"
"   isthay eturnsray ilnay."

#: target:code/debug-int.lisp
msgid "Returns whether object is a debug-source."
msgstr "Eturnsray etherwhay objectway isway away ebugday-ourcesay."

#: target:code/debug-int.lisp
msgid ""
"Returns the top frame of the control stack as it was before calling this\n"
"   function."
msgstr ""
"Eturnsray ethay optay amefray ofway ethay ontrolcay tacksay asway itway "
"asway eforebay allingcay isthay\n"
"   unctionfay."

#: target:code/debug-int.lisp
msgid ""
"Flush all of the frames above FRAME, and renumber all the frames below\n"
"   FRAME."
msgstr ""
"Ushflay allway ofway ethay amesfray aboveway AMEFRAY, andway enumberray "
"allway ethay amesfray elowbay\n"
"   AMEFRAY."

#: target:code/debug-int.lisp
msgid ""
"Returns the frame immediately below frame on the stack.  When frame is\n"
"   the bottom of the stack, this returns nil."
msgstr ""
"Eturnsray ethay amefray immediatelyway elowbay amefray onway ethay tacksay.  "
"Enwhay amefray isway\n"
"   ethay ottombay ofway ethay tacksay, isthay eturnsray ilnay."

#: target:code/debug-int.lisp
msgid ""
"When set, the debugger foregoes making interpreted-frames, so you can\n"
"   debug the functions that manifest the interpreter."
msgstr ""
"Enwhay etsay, ethay ebuggerday oregoesfay akingmay interpretedway-amesfray, "
"osay ouyay ancay\n"
"   ebugday ethay unctionsfay atthay anifestmay ethay interpreterway."

#: target:code/debug-int.lisp
msgid ""
"Zero or more than one ~A variable in ~\n"
"\t\t\t   EVAL::INTERNAL-APPLY-LOOP?"
msgstr ""
"Erozay orway oremay anthay oneway ~Away ariablevay inway ~\n"
"\t\t\t   EVALWAY::INTERNALWAY-APPLYWAY-OOPLAY?"

#: target:code/debug-int.lisp
msgid "Return a string describing the foreign function near ADDRESS"
msgstr ""
"Eturnray away ingstray escribingday ethay oreignfay unctionfay earnay "
"ADDRESSWAY"

#: target:code/debug-int.lisp
msgid "Foreign function call land"
msgstr "Oreignfay unctionfay allcay andlay"

#: target:code/debug-int.lisp
msgid "Return t if COMPONENT contains code from assembly routines."
msgstr ""
"Eturnray t ifway OMPONENTCAY ontainscay odecay omfray assemblyway outinesray."

#: target:code/debug-int.lisp
msgid ""
"Return the name of the assembly routine at offset PC in COMPONENT.\n"
"The result is a symbol or nil if the routine cannot be found."
msgstr ""
"Eturnray ethay amenay ofway ethay assemblyway outineray atway offsetway CPAY "
"inway OMPONENTCAY.\n"
"Ethay esultray isway away ymbolsay orway ilnay ifway ethay outineray "
"annotcay ebay oundfay."

#: target:code/debug-int.lisp
msgid "no debug info: ~A:~A"
msgstr "onay ebugday infoway: ~Away:~Away"

#: target:code/debug-int.lisp
msgid "find the PC"
msgstr "indfay ethay CPAY"

#: target:code/debug-int.lisp
msgid ""
"Returns an a-list mapping catch tags to code-locations.  These are\n"
"   code-locations at which execution would continue with frame as the top\n"
"   frame if someone threw to the corresponding tag."
msgstr ""
"Eturnsray anway away-istlay appingmay atchcay agstay otay odecay-"
"ocationslay.  Esethay areway\n"
"   odecay-ocationslay atway ichwhay executionway ouldway ontinuecay ithway "
"amefray asway ethay optay\n"
"   amefray ifway omeonesay rewthay otay ethay orrespondingcay agtay."

#: target:code/debug-int.lisp
msgid ""
"Executes the forms in a context with block-var bound to each debug-block in\n"
"   debug-function successively.  Result is an optional form to execute for\n"
"   return values, and DO-DEBUG-FUNCTION-BLOCKS returns nil if there is no\n"
"   result form.  This signals a no-debug-blocks condition when the\n"
"   debug-function lacks debug-block information."
msgstr ""
"Executesway ethay ormsfay inway away ontextcay ithway ockblay-arvay oundbay "
"otay eachway ebugday-ockblay inway\n"
"   ebugday-unctionfay uccessivelysay.  Esultray isway anway optionalway "
"ormfay otay executeway orfay\n"
"   eturnray aluesvay, andway ODAY-EBUGDAY-UNCTIONFAY-OCKSBLAY eturnsray "
"ilnay ifway erethay isway onay\n"
"   esultray ormfay.  Isthay ignalssay away onay-ebugday-ocksblay onditioncay "
"enwhay ethay\n"
"   ebugday-unctionfay ackslay ebugday-ockblay informationway."

#: target:code/debug-int.lisp
msgid ""
"Executes body in a context with var bound to each debug-variable in\n"
"   debug-function.  This returns the value of executing result (defaults to\n"
"   nil).  This may iterate over only some of debug-function's variables or "
"none\n"
"   depending on debug policy; for example, possibly the compilation only\n"
"   preserved argument information."
msgstr ""
"Executesway odybay inway away ontextcay ithway arvay oundbay otay eachway "
"ebugday-ariablevay inway\n"
"   ebugday-unctionfay.  Isthay eturnsray ethay aluevay ofway executingway "
"esultray (efaultsday otay\n"
"   ilnay).  Isthay aymay iterateway overway onlyway omesay ofway ebugday-"
"unctionfay's ariablesvay orway onenay\n"
"   ependingday onway ebugday olicypay; orfay exampleway, ossiblypay ethay "
"ompilationcay onlyway\n"
"   eservedpray argumentway informationway."

#: target:code/debug-int.lisp
msgid ""
"Returns the Common Lisp function associated with the debug-function.  This\n"
"   returns nil if the function is unavailable or is non-existent as a user\n"
"   callable function object."
msgstr ""
"Eturnsray ethay Ommoncay Isplay unctionfay associatedway ithway ethay "
"ebugday-unctionfay.  Isthay\n"
"   eturnsray ilnay ifway ethay unctionfay isway unavailableway orway isway "
"onnay-existentway asway away userway\n"
"   allablecay unctionfay objectway."

#: target:code/debug-int.lisp
msgid ""
"Returns the name of the function represented by debug-function.  This may\n"
"   be a string or a cons; do not assume it is a symbol."
msgstr ""
"Eturnsray ethay amenay ofway ethay unctionfay epresentedray ybay ebugday-"
"unctionfay.  Isthay aymay\n"
"   ebay away ingstray orway away onscay; oday otnay assumeway itway isway "
"away ymbolsay."

#: target:code/debug-int.lisp
msgid ""
"Returns a debug-function that represents debug information for function."
msgstr ""
"Eturnsray away ebugday-unctionfay atthay epresentsray ebugday informationway "
"orfay unctionfay."

#: target:code/debug-int.lisp
msgid ""
"Returns the kind of the function which is one of :optional, :external,\n"
"   :top-level, :cleanup, nil."
msgstr ""
"Eturnsray ethay indkay ofway ethay unctionfay ichwhay isway oneway ofway :"
"optionalway, :externalway,\n"
"   :optay-evellay, :eanupclay, ilnay."

#: target:code/debug-int.lisp
msgid "Returns whether there is any variable information for debug-function."
msgstr ""
"Eturnsray etherwhay erethay isway anyway ariablevay informationway orfay "
"ebugday-unctionfay."

#: target:code/debug-int.lisp
msgid ""
"Returns a list of debug-variables in debug-function having the same name\n"
"   and package as symbol.  If symbol is uninterned, then this returns a list "
"of\n"
"   debug-variables without package names and with the same name as symbol.  "
"The\n"
"   result of this function is limited to the availability of variable\n"
"   information in debug-function; for example, possibly debug-function only\n"
"   knows about its arguments."
msgstr ""
"Eturnsray away istlay ofway ebugday-ariablesvay inway ebugday-unctionfay "
"avinghay ethay amesay amenay\n"
"   andway ackagepay asway ymbolsay.  Ifway ymbolsay isway uninternedway, "
"enthay isthay eturnsray away istlay ofway\n"
"   ebugday-ariablesvay ithoutway ackagepay amesnay andway ithway ethay "
"amesay amenay asway ymbolsay.  Ethay\n"
"   esultray ofway isthay unctionfay isway imitedlay otay ethay "
"availabilityway ofway ariablevay\n"
"   informationway inway ebugday-unctionfay; orfay exampleway, ossiblypay "
"ebugday-unctionfay onlyway\n"
"   nowskay aboutway itsway argumentsway."

#: target:code/debug-int.lisp
msgid ""
"Returns a list of debug-variables in debug-function whose names contain\n"
"    name-prefix-string as an intial substring.  The result of this function "
"is\n"
"    limited to the availability of variable information in debug-function; "
"for\n"
"    example, possibly debug-function only knows about its arguments."
msgstr ""
"Eturnsray away istlay ofway ebugday-ariablesvay inway ebugday-unctionfay "
"osewhay amesnay ontaincay\n"
"    amenay-efixpray-ingstray asway anway intialway ubstringsay.  Ethay "
"esultray ofway isthay unctionfay isway\n"
"    imitedlay otay ethay availabilityway ofway ariablevay informationway "
"inway ebugday-unctionfay; orfay\n"
"    exampleway, ossiblypay ebugday-unctionfay onlyway nowskay aboutway "
"itsway argumentsway."

#: target:code/debug-int.lisp
msgid ""
"Returns a list representing the lambda-list for debug-function.  The list\n"
"   has the following structure:\n"
"      (required-var1 required-var2\n"
"       ...\n"
"       (:optional var3 suppliedp-var4)\n"
"       (:optional var5)\n"
"       ...\n"
"       (:rest var6) (:rest var7)\n"
"       ...\n"
"       (:keyword keyword-symbol var8 suppliedp-var9)\n"
"       (:keyword keyword-symbol var10)\n"
"       ...\n"
"      )\n"
"   Each VARi is a debug-variable; however it may be the symbol :deleted it\n"
"   is unreferenced in debug-function.  This signals a lambda-list-"
"unavaliable\n"
"   condition when there is no argument list information."
msgstr ""
"Eturnsray away istlay epresentingray ethay ambdalay-istlay orfay ebugday-"
"unctionfay.  Ethay istlay\n"
"   ashay ethay ollowingfay ucturestray:\n"
"      (equiredray-arvay1 equiredray-arvay2\n"
"       ...\n"
"       (:optionalway arvay3 uppliedpsay-arvay4)\n"
"       (:optionalway arvay5)\n"
"       ...\n"
"       (:estray arvay6) (:estray arvay7)\n"
"       ...\n"
"       (:eywordkay eywordkay-ymbolsay arvay8 uppliedpsay-arvay9)\n"
"       (:eywordkay eywordkay-ymbolsay arvay10)\n"
"       ...\n"
"      )\n"
"   Eachway Arivay isway away ebugday-ariablevay; oweverhay itway aymay ebay "
"ethay ymbolsay :eletedday itway\n"
"   isway unreferencedway inway ebugday-unctionfay.  Isthay ignalssay away "
"ambdalay-istlay-unavaliablwaye\n"
"   onditioncay enwhay erethay isway onay argumentway istlay informationway."

#: target:code/debug-int.lisp
msgid "Malformed arguments description."
msgstr "Alformedmay argumentsway escriptionday."

#: target:code/debug-int.lisp
msgid ""
"Returns whether basic-code-location is unknown.  It returns nil when the\n"
"   code-location is known."
msgstr ""
"Eturnsray etherwhay asicbay-odecay-ocationlay isway unknownway.  Itway "
"eturnsray ilnay enwhay ethay\n"
"   odecay-ocationlay isway nownkay."

#: target:code/debug-int.lisp
msgid ""
"Returns the debug-block containing code-location if it is available.  Some\n"
"   debug policies inhibit debug-block information, and if none is "
"available,\n"
"   then this signals a no-debug-blocks condition."
msgstr ""
"Eturnsray ethay ebugday-ockblay ontainingcay odecay-ocationlay ifway itway "
"isway availableway.  Omesay\n"
"   ebugday oliciespay inhibitway ebugday-ockblay informationway, andway "
"ifway onenay isway availableway,\n"
"   enthay isthay ignalssay away onay-ebugday-ocksblay onditioncay."

#: target:code/debug-int.lisp
msgid "Returns the code-location's debug-source."
msgstr "Eturnsray ethay odecay-ocationlay's ebugday-ourcesay."

#: target:code/debug-int.lisp
msgid ""
"Returns the number of top-level forms before the one containing\n"
"   code-location as seen by the compiler in some compilation unit.  A\n"
"   compilation unit is not necessarily a single file, see the section on\n"
"   debug-sources."
msgstr ""
"Eturnsray ethay umbernay ofway optay-evellay ormsfay eforebay ethay oneway "
"ontainingcay\n"
"   odecay-ocationlay asway eensay ybay ethay ompilercay inway omesay "
"ompilationcay unitway.  Away\n"
"   ompilationcay unitway isway otnay ecessarilynay away inglesay ilefay, "
"eesay ethay ectionsay onway\n"
"   ebugday-ourcessay."

#: target:code/debug-int.lisp
msgid "Unknown code location?  It should be known."
msgstr "Unknownway odecay ocationlay?  Itway ouldshay ebay nownkay."

#: target:code/debug-int.lisp
msgid ""
"Returns the number of the form corresponding to code-location.  The form\n"
"   number is derived by a walking the subforms of a top-level form in\n"
"   depth-first order."
msgstr ""
"Eturnsray ethay umbernay ofway ethay ormfay orrespondingcay otay odecay-"
"ocationlay.  Ethay ormfay\n"
"   umbernay isway erivedday ybay away alkingway ethay ubformssay ofway away "
"optay-evellay ormfay inway\n"
"   epthday-irstfay orderway."

#: target:code/debug-int.lisp
msgid ""
"Return the kind of CODE-LOCATION, one of:\n"
"     :interpreted, :unknown-return, :known-return, :internal-error,\n"
"     :non-local-exit, :block-start, :call-site, :single-value-return,\n"
"     :non-local-entry"
msgstr ""
"Eturnray ethay indkay ofway ODECAY-OCATIONLAY, oneway ofway:\n"
"     :interpretedway, :unknownway-eturnray, :nownkay-eturnray, :internalway-"
"errorway,\n"
"     :onnay-ocallay-exitway, :ockblay-tartsay, :allcay-itesay, :inglesay-"
"aluevay-eturnray,\n"
"     :onnay-ocallay-entryway"

#: target:code/debug-int.lisp
msgid "Returns whether obj1 and obj2 are the same place in the code."
msgstr ""
"Eturnsray etherwhay objway1 andway objway2 areway ethay amesay aceplay inway "
"ethay odecay."

#: target:code/debug-int.lisp
msgid ""
"Executes forms in a context with code-var bound to each code-location in\n"
"   debug-block.  This returns the value of executing result (defaults to "
"nil)."
msgstr ""
"Executesway ormsfay inway away ontextcay ithway odecay-arvay oundbay otay "
"eachway odecay-ocationlay inway\n"
"   ebugday-ockblay.  Isthay eturnsray ethay aluevay ofway executingway "
"esultray (efaultsday otay ilnay)."

#: target:code/debug-int.lisp
msgid "??? Can't get name of debug-block's function."
msgstr "??? Ancay't etgay amenay ofway ebugday-ockblay's unctionfay."

#: target:code/debug-int.lisp
msgid ""
"Returns the symbol from interning DEBUG-VARIABLE-NAME in the package named\n"
"   by DEBUG-VARIABLE-PACKAGE."
msgstr ""
"Eturnsray ethay ymbolsay omfray interningway EBUGDAY-ARIABLEVAY-AMENAY inway "
"ethay ackagepay amednay\n"
"   ybay EBUGDAY-ARIABLEVAY-ACKAGEPAY."

#: target:code/debug-int.lisp
msgid ""
"Returns the value stored for debug-variable in frame.  If the value is not\n"
"   :valid, then this signals an invalid-value error."
msgstr ""
"Eturnsray ethay aluevay toredsay orfay ebugday-ariablevay inway amefray.  "
"Ifway ethay aluevay isway otnay\n"
"   :alidvay, enthay isthay ignalssay anway invalidway-aluevay errorway."

#: target:code/debug-int.lisp
msgid ""
"Returns the value stored for debug-variable in frame.  The value may be\n"
"   invalid.  This is SETF'able."
msgstr ""
"Eturnsray ethay aluevay toredsay orfay ebugday-ariablevay inway amefray.  "
"Ethay aluevay aymay ebay\n"
"   invalidway.  Isthay isway ETFSAY'ableway."

#: target:code/debug-int.lisp
msgid "Local non-descriptor register access?"
msgstr "Ocallay onnay-escriptorday egisterray accessway?"

#: target:code/debug-int.lisp
msgid "Local interior register access?"
msgstr "Ocallay interiorway egisterray accessway?"

#: target:code/debug-int.lisp
msgid ""
"Returns three values reflecting the validity of debug-variable's value\n"
"   at basic-code-location:\n"
"      :valid    The value is known to be available.\n"
"      :invalid  The value is known to be unavailable.\n"
"      :unknown  The value's availability is unknown."
msgstr ""
"Eturnsray reethay aluesvay eflectingray ethay alidityvay ofway ebugday-"
"ariablevay's aluevay\n"
"   atway asicbay-odecay-ocationlay:\n"
"      :alidvay    Ethay aluevay isway nownkay otay ebay availableway.\n"
"      :invalidway  Ethay aluevay isway nownkay otay ebay unavailableway.\n"
"      :unknownway  Ethay aluevay's availabilityway isway unknownway."

#: target:code/debug-int.lisp
msgid ""
"This returns a table mapping form numbers to source-paths.  A source-path\n"
"   indicates a descent into the top-level-form form, going directly to the\n"
"   subform corressponding to the form number."
msgstr ""
"Isthay eturnsray away abletay appingmay ormfay umbersnay otay ourcesay-"
"athspay.  Away ourcesay-athpay\n"
"   indicatesway away escentday intoway ethay optay-evellay-ormfay ormfay, "
"oinggay irectlyday otay ethay\n"
"   ubformsay orresspondingcay otay ethay ormfay umbernay."

#: target:code/debug-int.lisp
msgid ""
"Form is a top-level form, and path is a source-path into it.  This returns\n"
"   the form indicated by the source-path.  Context is the number of "
"enclosing\n"
"   forms to return instead of directly returning the source-path form.  "
"When\n"
"   context is non-zero, the form returned contains a marker, #:"
"****HERE****,\n"
"   immediately before the form indicated by path."
msgstr ""
"Ormfay isway away optay-evellay ormfay, andway athpay isway away ourcesay-"
"athpay intoway itway.  Isthay eturnsray\n"
"   ethay ormfay indicatedway ybay ethay ourcesay-athpay.  Ontextcay isway "
"ethay umbernay ofway enclosinwayg\n"
"   ormsfay otay eturnray insteadway ofway irectlyday eturningray ethay "
"ourcesay-athpay ormfay.  Enwhay\n"
"   ontextcay isway onnay-erozay, ethay ormfay eturnedray ontainscay away "
"arkermay, #:****EREHAY****,\n"
"   immediatelyway eforebay ethay ormfay indicatedway ybay athpay."

#: target:code/debug-int.lisp
msgid ""
"Return a function of one argument that evaluates form in the lexical\n"
"   context of the basic-code-location loc.  PREPROCESS-FOR-EVAL signals a\n"
"   no-debug-variables condition when the loc's debug-function has no\n"
"   debug-variable information available.  The returned function takes the "
"frame\n"
"   to get values from as its argument, and it returns the values of form.\n"
"   The returned function signals the following conditions: invalid-value,\n"
"   ambiguous-variable-name, and frame-function-mismatch"
msgstr ""
"Eturnray away unctionfay ofway oneway argumentway atthay evaluatesway ormfay "
"inway ethay exicallay\n"
"   ontextcay ofway ethay asicbay-odecay-ocationlay oclay.  EPROCESSPRAY-"
"ORFAY-EVALWAY ignalssay away\n"
"   onay-ebugday-ariablesvay onditioncay enwhay ethay oclay's ebugday-"
"unctionfay ashay onay\n"
"   ebugday-ariablevay informationway availableway.  Ethay eturnedray "
"unctionfay akestay ethay amefray\n"
"   otay etgay aluesvay omfray asway itsway argumentway, andway itway "
"eturnsray ethay aluesvay ofway ormfay.\n"
"   Ethay eturnedray unctionfay ignalssay ethay ollowingfay onditionscay: "
"invalidway-aluevay,\n"
"   ambiguousway-ariablevay-amenay, andway amefray-unctionfay-ismatchmay"

#: target:code/debug-int.lisp
msgid ""
"Evaluate Form in the lexical context of Frame's current code location,\n"
"   returning the results of the evaluation."
msgstr ""
"Evaluateway Ormfay inway ethay exicallay ontextcay ofway Amefray's urrentcay "
"odecay ocationlay,\n"
"   eturningray ethay esultsray ofway ethay evaluationway."

#: target:code/debug-int.lisp
msgid "Find and return the debug catch tag for a given frame, if it exists."
msgstr ""
"Indfay andway eturnray ethay ebugday atchcay agtay orfay away ivengay "
"amefray, ifway itway existsway."

#: target:code/debug-int.lisp
msgid ""
"Evaluate Form in the lexical context of Frame's current code location,\n"
"   returning from the current frame the results of the evaluation."
msgstr ""
"Evaluateway Ormfay inway ethay exicallay ontextcay ofway Amefray's urrentcay "
"odecay ocationlay,\n"
"   eturningray omfray ethay urrentcay amefray ethay esultsray ofway ethay "
"evaluationway."

#: target:code/debug-int.lisp
msgid ""
"This creates and returns a breakpoint.  When program execution encounters\n"
"   the breakpoint, the system calls hook-function.  Hook-function takes the\n"
"   current frame for the function in which the program is running and the\n"
"   breakpoint object.\n"
"      What and kind determine where in a function the system invokes\n"
"   hook-function.  What is either a code-location or a debug-function.  Kind "
"is\n"
"   one of :code-location, :function-start, or :function-end.  Since the "
"starts\n"
"   and ends of functions may not have code-locations representing them,\n"
"   designate these places by supplying what as a debug-function and kind\n"
"   indicating the :function-start or :function-end.  When what is a\n"
"   debug-function and kind is :function-end, then hook-function must take "
"two\n"
"   additional arguments, a list of values returned by the function and a\n"
"   function-end-cookie.\n"
"      Info is information supplied by and used by the user.\n"
"      Function-end-cookie is a function.  To implement :function-end "
"breakpoints,\n"
"   the system uses starter breakpoints to establish the :function-end "
"breakpoint\n"
"   for each invocation of the function.  Upon each entry, the system creates "
"a\n"
"   unique cookie to identify the invocation, and when the user supplies a\n"
"   function for this argument, the system invokes it on the frame and the\n"
"   cookie.  The system later invokes the :function-end breakpoint hook on "
"the\n"
"   same cookie.  The user may save the cookie for comparison in the hook\n"
"   function.\n"
"      This signals an error if what is an unknown code-location."
msgstr ""
"Isthay eatescray andway eturnsray away eakpointbray.  Enwhay ogrampray "
"executionway encountersway\n"
"   ethay eakpointbray, ethay ystemsay allscay ookhay-unctionfay.  Ookhay-"
"unctionfay akestay ethay\n"
"   urrentcay amefray orfay ethay unctionfay inway ichwhay ethay ogrampray "
"isway unningray andway ethay\n"
"   eakpointbray objectway.\n"
"      Atwhay andway indkay etermineday erewhay inway away unctionfay ethay "
"ystemsay invokesway\n"
"   ookhay-unctionfay.  Atwhay isway eitherway away odecay-ocationlay orway "
"away ebugday-unctionfay.  Indkay isway\n"
"   oneway ofway :odecay-ocationlay, :unctionfay-tartsay, orway :unctionfay-"
"endway.  Incesay ethay tartssay\n"
"   andway endsway ofway unctionsfay aymay otnay avehay odecay-ocationslay "
"epresentingray emthay,\n"
"   esignateday esethay acesplay ybay upplyingsay atwhay asway away ebugday-"
"unctionfay andway indkay\n"
"   indicatingway ethay :unctionfay-tartsay orway :unctionfay-endway.  Enwhay "
"atwhay isway away\n"
"   ebugday-unctionfay andway indkay isway :unctionfay-endway, enthay ookhay-"
"unctionfay ustmay aketay wotay\n"
"   additionalway argumentsway, away istlay ofway aluesvay eturnedray ybay "
"ethay unctionfay andway away\n"
"   unctionfay-endway-ookiecay.\n"
"      Infoway isway informationway uppliedsay ybay andway usedway ybay ethay "
"userway.\n"
"      Unctionfay-endway-ookiecay isway away unctionfay.  Otay implementway :"
"unctionfay-endway eakpointsbray,\n"
"   ethay ystemsay usesway tartersay eakpointsbray otay establishway ethay :"
"unctionfay-endway eakpointbray\n"
"   orfay eachway invocationway ofway ethay unctionfay.  Uponway eachway "
"entryway, ethay ystemsay eatescray away\n"
"   uniqueway ookiecay otay identifyway ethay invocationway, andway enwhay "
"ethay userway uppliessay away\n"
"   unctionfay orfay isthay argumentway, ethay ystemsay invokesway itway "
"onway ethay amefray andway ethay\n"
"   ookiecay.  Ethay ystemsay aterlay invokesway ethay :unctionfay-endway "
"eakpointbray ookhay onway ethay\n"
"   amesay ookiecay.  Ethay userway aymay avesay ethay ookiecay orfay "
"omparisoncay inway ethay ookhay\n"
"   unctionfay.\n"
"      Isthay ignalssay anway errorway ifway atwhay isway anway unknownway "
"odecay-ocationlay."

#: target:code/debug-int.lisp
msgid "Cannot make a breakpoint at an unknown code location -- ~S."
msgstr ""
"Annotcay akemay away eakpointbray atway anway unknownway odecay ocationlay "
"-- ~S."

#: target:code/debug-int.lisp
msgid "Breakpoints in interpreted code are currently unsupported."
msgstr ""
"Eakpointsbray inway interpretedway odecay areway urrentlycay unsupportedway."

#: target:code/debug-int.lisp
msgid ""
":FUNCTION-END breakpoints are currently unsupported ~\n"
"\t\t       for the known return convention."
msgstr ""
":UNCTIONFAY-ENDWAY eakpointsbray areway urrentlycay unsupportedway ~\n"
"\t\t       orfay ethay nownkay eturnray onventioncay."

#: target:code/debug-int.lisp
msgid ""
":function-end breakpoints are currently unsupported ~\n"
"\t     for interpreted-debug-functions."
msgstr ""
":unctionfay-endway eakpointsbray areway urrentlycay unsupportedway ~\n"
"\t     orfay interpretedway-ebugday-unctionsfay."

#: target:code/debug-int.lisp
msgid ""
"This takes a function-end-cookie and a frame, and it returns whether the\n"
"   cookie is still valid.  A cookie becomes invalid when the frame that\n"
"   established the cookie has exited.  Sometimes cookie holders are unaware\n"
"   of cookie invalidation because their :function-end breakpoint hooks "
"didn't\n"
"   run due to THROW'ing.  This takes a frame as an efficiency hack since "
"the\n"
"   user probably has a frame object in hand when using this routine, and it\n"
"   saves repeated parsing of the stack and consing when asking whether a\n"
"   series of cookies is valid."
msgstr ""
"Isthay akestay away unctionfay-endway-ookiecay andway away amefray, andway "
"itway eturnsray etherwhay ethay\n"
"   ookiecay isway tillsay alidvay.  Away ookiecay ecomesbay invalidway "
"enwhay ethay amefray atthay\n"
"   establishedway ethay ookiecay ashay exitedway.  Ometimessay ookiecay "
"oldershay areway unawareway\n"
"   ofway ookiecay invalidationway ecausebay eirthay :unctionfay-endway "
"eakpointbray ookshay idnday't\n"
"   unray ueday otay ROWTHAY'ingway.  Isthay akestay away amefray asway anway "
"efficiencyway ackhay incesay ethay\n"
"   userway obablypray ashay away amefray objectway inway andhay enwhay "
"usingway isthay outineray, andway itway\n"
"   avessay epeatedray arsingpay ofway ethay tacksay andway onsingcay enwhay "
"askingway etherwhay away\n"
"   eriessay ofway ookiescay isway alidvay."

#: target:code/debug-int.lisp
msgid ""
"This causes the system to invoke the breakpoint's hook-function until the\n"
"   next call to DEACTIVATE-BREAKPOINT or DELETE-BREAKPOINT.  The system "
"invokes\n"
"   breakpoint hook functions in the opposite order that you activate them."
msgstr ""
"Isthay ausescay ethay ystemsay otay invokeway ethay eakpointbray's ookhay-"
"unctionfay untilway ethay\n"
"   extnay allcay otay EACTIVATEDAY-EAKPOINTBRAY orway ELETEDAY-"
"EAKPOINTBRAY.  Ethay ystemsay invokesway\n"
"   eakpointbray ookhay unctionsfay inway ethay oppositeway orderway atthay "
"ouyay activateway emthay."

#: target:code/debug-int.lisp
msgid "Cannot activate a deleted breakpoint -- ~S."
msgstr "Annotcay activateway away eletedday eakpointbray -- ~S."

#: target:code/debug-int.lisp
msgid "I don't know how you made this, but they're unsupported -- ~S"
msgstr ""
"Iway onday't nowkay owhay ouyay ademay isthay, utbay eythay'eray "
"unsupportedway -- ~S"

#: target:code/debug-int.lisp
msgid "This stops the system from invoking the breakpoint's hook-function."
msgstr ""
"Isthay topssay ethay ystemsay omfray invokingway ethay eakpointbray's ookhay-"
"unctionfay."

#: target:code/debug-int.lisp
msgid ""
"This returns the user maintained info associated with breakpoint.  This\n"
"   is SETF'able."
msgstr ""
"Isthay eturnsray ethay userway aintainedmay infoway associatedway ithway "
"eakpointbray.  Isthay\n"
"   isway ETFSAY'ableway."

#: target:code/debug-int.lisp
msgid "This returns whether breakpoint is currently active."
msgstr "Isthay eturnsray etherwhay eakpointbray isway urrentlycay activeway."

#: target:code/debug-int.lisp
msgid ""
"This frees system storage and removes computational overhead associated "
"with\n"
"   breakpoint.  After calling this, breakpoint is completely impotent and "
"can\n"
"   never become active again."
msgstr ""
"Isthay eesfray ystemsay toragesay andway emovesray omputationalcay "
"overheadway associatedway ithway\n"
"   eakpointbray.  Afterway allingcay isthay, eakpointbray isway ompletelycay "
"impotentway andway ancay\n"
"   evernay ecomebay activeway againway."

#: target:code/debug-int.lisp
msgid "Unknown breakpoint in ~S at offset ~S."
msgstr "Unknownway eakpointbray inway ~S atway offsetway ~S."

#: target:code/debug-int.lisp
msgid "Breakpoint that nobody wants?"
msgstr "Eakpointbray atthay obodynay antsway?"

#: target:code/debug-int.lisp
msgid "BREAKPOINT-DO-DISPLACED-INST returned?"
msgstr "EAKPOINTBRAY-ODAY-ISPLACEDDAY-INSTWAY eturnedray?"

#: target:code/debug-int.lisp
msgid ""
"Make a bogus LRA object that signals a breakpoint trap when returned to.  "
"If\n"
"   the breakpoint trap handler returns, REAL-LRA is returned to.  Three "
"values\n"
"   are returned: the bogus LRA object, the code component it is part of, "
"and\n"
"   the PC offset for the trap instruction."
msgstr ""
"Akemay away ogusbay RALAY objectway atthay ignalssay away eakpointbray "
"aptray enwhay eturnedray otay.  Ifway\n"
"   ethay eakpointbray aptray andlerhay eturnsray, EALRAY-RALAY isway "
"eturnedray otay.  Reethay aluesvay\n"
"   areway eturnedray: ethay ogusbay RALAY objectway, ethay odecay "
"omponentcay itway isway artpay ofway, andway\n"
"   ethay CPAY offsetway orfay ethay aptray instructionway."

#: target:code/debug-int.lisp
msgid ""
"The editor calls this remotely in the slave to set breakpoints.  Package is\n"
"   the string name of a package or nil, and name-str is a string "
"representing a\n"
"   function name (for example, \"foo\" or \"(setf foo)\").  After finding\n"
"   package, this READs name-str with *package* bound appropriately.  Path "
"is\n"
"   either a modified source-path or a symbol (:function-start or\n"
"   :function-end).  If it is a modified source-path, it has no top-level-"
"form\n"
"   offset or form-number component, and it is in descent order from the root "
"of\n"
"   the top-level form."
msgstr ""
"Ethay editorway allscay isthay emotelyray inway ethay aveslay otay etsay "
"eakpointsbray.  Ackagepay isway\n"
"   ethay ingstray amenay ofway away ackagepay orway ilnay, andway amenay-"
"trsay isway away ingstray epresentinrayg away\n"
"   unctionfay amenay (orfay exampleway, \"oofay\" orway \"(etfsay oofay)"
"\").  Afterway indingfay\n"
"   ackagepay, isthay Eadsray amenay-trsay ithway *ackagepay* oundbay "
"appropriatelyway.  Athpay isway\n"
"   eitherway away odifiedmay ourcesay-athpay orway away ymbolsay (:"
"unctionfay-tartsay orway\n"
"   :unctionfay-endway).  Ifway itway isway away odifiedmay ourcesay-athpay, "
"itway ashay onay optay-evellay-orfaym\n"
"   offsetway orway ormfay-umbernay omponentcay, andway itway isway inway "
"escentday orderway omfray ethay ootray ofway\n"
"   ethay optay-evellay ormfay."

#: target:code/debug-int.lisp
msgid "Editor installed breakpoint."
msgstr "Editorway installedway eakpointbray."

#: target:code/debug-int.lisp
msgid "We don't currently support breakpoints in interpreted code."
msgstr ""
"Eway onday't urrentlycay upportsay eakpointsbray inway interpretedway odecay."

#: target:code/debug-int.lisp
msgid ""
"~%Cannot set breakpoints for editor when source file no ~\n"
"\t\t    longer exists:~%  ~A."
msgstr ""
"~%Annotcay etsay eakpointsbray orfay editorway enwhay ourcesay ilefay onay "
"~\n"
"\t\t    ongerlay existsway:~%  ~Away."

#: target:code/debug-int.lisp
msgid ""
"Cannot set breakpoints for editor when ~\n"
"\t\t\t\t   there is no start positions map."
msgstr ""
"Annotcay etsay eakpointsbray orfay editorway enwhay ~\n"
"\t\t\t\t   erethay isway onay tartsay ositionspay apmay."

#: target:code/debug-int.lisp
msgid ""
"~%While setting a breakpoint for the editor, noticed ~\n"
"\t\t\tsource file has been modified since compilation:~%  ~A~@\n"
"\t\t\tUsing form offset instead of character position.~%"
msgstr ""
"~%Ilewhay ettingsay away eakpointbray orfay ethay editorway, oticednay ~\n"
"\t\t\tourcesay ilefay ashay eenbay odifiedmay incesay ompilationcay:~%  "
"~Away~@\n"
"\t\t\tUsingway ormfay offsetway insteadway ofway aracterchay ositionpay.~%"

#: target:code/debug-int.lisp
msgid ""
"The editor calls this in the slave with a remote-object representing a\n"
"   code-location to set a breakpoint."
msgstr ""
"Ethay editorway allscay isthay inway ethay aveslay ithway away emoteray-"
"objectway epresentingray away\n"
"   odecay-ocationlay otay etsay away eakpointbray."

#: target:code/debug-int.lisp
msgid "The editor calls this remotely in the slave to delete a breakpoint."
msgstr ""
"Ethay editorway allscay isthay emotelyray inway ethay aveslay otay eleteday "
"away eakpointbray."

#: target:code/debug-int.lisp
msgid ""
"This returns a code-location before the body of a function and after all\n"
"   the arguments are in place.  If this cannot determine that location due "
"to\n"
"   a lack of debug information, it returns nil."
msgstr ""
"Isthay eturnsray away odecay-ocationlay eforebay ethay odybay ofway away "
"unctionfay andway afterway allway\n"
"   ethay argumentsway areway inway aceplay.  Ifway isthay annotcay "
"etermineday atthay ocationlay ueday otay\n"
"   away acklay ofway ebugday informationway, itway eturnsray ilnay."

#: target:code/debug-int.lisp
msgid "~S code location at ~D"
msgstr "~S odecay ocationlay atway ~D"

#: target:code/debug.lisp
msgid ""
"*PRINT-LEVEL* is bound to this value when debug prints a function call.  If\n"
"  null, use *PRINT-LEVEL*"
msgstr ""
"*INTPRAY-EVELLAY* isway oundbay otay isthay aluevay enwhay ebugday intspray "
"away unctionfay allcay.  Ifway\n"
"  ullnay, useway *INTPRAY-EVELLAY*"

#: target:code/debug.lisp
msgid ""
"*PRINT-LENGTH* is bound to this value when debug prints a function call.  "
"If\n"
"  null, use *PRINT-LENGTH*."
msgstr ""
"*INTPRAY-ENGTHLAY* isway oundbay otay isthay aluevay enwhay ebugday intspray "
"away unctionfay allcay.  Ifway\n"
"  ullnay, useway *INTPRAY-ENGTHLAY*."

#: target:code/debug.lisp
msgid ""
"default value for the verbose argument to print-frame-call.  If set to >= 2, "
"source will be printed for all frames"
msgstr ""
"efaultday aluevay orfay ethay erbosevay argumentway otay intpray-amefray-"
"allcay.  Ifway etsay otay >= 2, ourcesay illway ebay intedpray orfay allway "
"amesfray"

#: target:code/debug.lisp
msgid "This is T while in the debugger."
msgstr "Isthay isway T ilewhay inway ethay ebuggerday."

#: target:code/debug.lisp
msgid "Pushes and pops/exits inside the debugger change this."
msgstr ""
"Ushespay andway opspay/exitsway insideway ethay ebuggerday angechay isthay."

#: target:code/debug.lisp
msgid ""
"If this is bound before the debugger is invoked, it is used as the stack\n"
"   top by the debugger."
msgstr ""
"Ifway isthay isway oundbay eforebay ethay ebuggerday isway invokedway, itway "
"isway usedway asway ethay tacksay\n"
"   optay ybay ethay ebuggerday."

#: target:code/debug.lisp
msgid ""
"This is a function of no arguments that prints the debugger prompt\n"
"   on *debug-io*."
msgstr ""
"Isthay isway away unctionfay ofway onay argumentsway atthay intspray ethay "
"ebuggerday omptpray\n"
"   onway *ebugday-ioway*."

#: target:code/debug.lisp
msgid ""
"\n"
"The prompt is right square brackets, the number indicating how many\n"
"  recursive command loops you are in.\n"
"Debug commands do not affect * and friends, but evaluation in the debug "
"loop\n"
"  do affect these variables.\n"
"Any command may be uniquely abbreviated.\n"
"\n"
"Getting in and out of DEBUG:\n"
"  Q        throws to top level.\n"
"  GO       calls CONTINUE which tries to proceed with the restart "
"'continue.\n"
"  RESTART  invokes restart numbered as shown (prompt if not given).\n"
"  ERROR    prints the error condition and restart cases.\n"
"  FLUSH    toggles *flush-debug-errors*, which is initially t.\n"
" \n"
"  The name of any restart, or its number, is a valid command, and is the "
"same\n"
"    as using RESTART to invoke that restart.\n"
"\n"
"Changing frames:\n"
"  U  up frame        D  down frame       T  top frame       B  bottom frame\n"
"\n"
"  F n   goes to frame n.\n"
"\n"
"Inspecting frames:\n"
"  BACKTRACE [n]  shows n frames going down the stack.\n"
"  L              lists locals in current function.\n"
"  P, PP          displays current function call.\n"
"  SOURCE [n]     displays frame's source form with n levels of enclosing "
"forms.\n"
"  VSOURCE [n]    displays frame's source form without any ellipsis.\n"
"\n"
"Breakpoints and steps:\n"
"  LIST-LOCATIONS [{function | :c}]  list the locations for breakpoints.\n"
"    Specify :c for the current frame.  Abbreviation: LL\n"
"  LIST-BREAKPOINTS                  list the active breakpoints.\n"
"    Abbreviations: LB, LBP\n"
"  DELETE-BREAKPOINT [n]             remove breakpoint n or all breakpoints.\n"
"    Abbreviations: DEL, DBP    \n"
"  BREAKPOINT {n | :end | :start} [:break form] [:function function]\n"
"    [{:print form}*] [:condition form]    set a breakpoint.\n"
"    Abbreviations: BR, BP\n"
"  STEP [n]                          step to the next location or step n "
"times.\n"
"\n"
"Actions on frames:\n"
"  DEBUG-RETURN expression\n"
"    returns expression's values from the current frame, exiting the "
"debugger.\n"
"    Abbreviations: R\n"
"\n"
"Variables:\n"
"  (DEBUG:VAR name [id])   Returns variable's value if possible.  If "
"multiple\n"
"                          variables with the same name exist, use id to "
"select\n"
"                          one\n"
"  (DEBUG:ARG n)           Returns the n'th argument's value if possible.\n"
"                          Argument zero is the first argument.\n"
"\n"
"See the CMU Common Lisp User's Manual for more information.\n"
msgstr ""
"\n"
"Ethay omptpray isway ightray quaresay acketsbray, ethay umbernay "
"indicatingway owhay anymay\n"
"  ecursiveray ommandcay oopslay ouyay areway inway.\n"
"Ebugday ommandscay oday otnay affectway * andway iendsfray, utbay "
"evaluationway inway ethay ebugday ooplay\n"
"  oday affectway esethay ariablesvay.\n"
"Anyway ommandcay aymay ebay uniquelyway abbreviatedway.\n"
"\n"
"Ettinggay inway andway outway ofway EBUGDAY:\n"
"  Q        rowsthay otay optay evellay.\n"
"  OGAY       allscay ONTINUECAY ichwhay iestray otay oceedpray ithway ethay "
"estartray 'ontinuecay.\n"
"  ESTARTRAY  invokesway estartray umberednay asway ownshay (omptpray ifway "
"otnay ivengay).\n"
"  ERRORWAY    intspray ethay errorway onditioncay andway estartray asescay.\n"
"  USHFLAY    ogglestay *ushflay-ebugday-errorsway*, ichwhay isway "
"initiallyway t.\n"
" \n"
"  Ethay amenay ofway anyway estartray, orway itsway umbernay, isway away "
"alidvay ommandcay, andway isway ethay amesay\n"
"    asway usingway ESTARTRAY otay invokeway atthay estartray.\n"
"\n"
"Angingchay amesfray:\n"
"  U  upway amefray        D  ownday amefray       T  optay amefray       B  "
"ottombay amefray\n"
"\n"
"  F n   oesgay otay amefray n.\n"
"\n"
"Inspectingway amesfray:\n"
"  ACKTRACEBAY [n]  owsshay n amesfray oinggay ownday ethay tacksay.\n"
"  L              istslay ocalslay inway urrentcay unctionfay.\n"
"  P, PPAY          isplaysday urrentcay unctionfay allcay.\n"
"  OURCESAY [n]     isplaysday amefray's ourcesay ormfay ithway n evelslay "
"ofway enclosingway ormsfay.\n"
"  SOURCEVAY [n]    isplaysday amefray's ourcesay ormfay ithoutway anyway "
"ellipsisway.\n"
"\n"
"Eakpointsbray andway tepssay:\n"
"  ISTLAY-OCATIONSLAY [{unctionfay | :c}]  istlay ethay ocationslay orfay "
"eakpointsbray.\n"
"    Ecifyspay :c orfay ethay urrentcay amefray.  Abbreviationway: LLAY\n"
"  ISTLAY-EAKPOINTSBRAY                  istlay ethay activeway "
"eakpointsbray.\n"
"    Abbreviationsway: BLAY, BPLAY\n"
"  ELETEDAY-EAKPOINTBRAY [n]             emoveray eakpointbray n orway allway "
"eakpointsbray.\n"
"    Abbreviationsway: ELDAY, BPDAY    \n"
"  EAKPOINTBRAY {n | :endway | :tartsay} [:eakbray ormfay] [:unctionfay "
"unctionfay]\n"
"    [{:intpray ormfay}*] [:onditioncay ormfay]    etsay away eakpointbray.\n"
"    Abbreviationsway: BRAY, PBAY\n"
"  TEPSAY [n]                          tepsay otay ethay extnay ocationlay "
"orway tepsay n imestay.\n"
"\n"
"Actionsway onway amesfray:\n"
"  EBUGDAY-ETURNRAY expressionway\n"
"    eturnsray expressionway's aluesvay omfray ethay urrentcay amefray, "
"exitingway ethay ebuggerday.\n"
"    Abbreviationsway: R\n"
"\n"
"Ariablesvay:\n"
"  (EBUGDAY:ARVAY amenay [idway])   Eturnsray ariablevay's aluevay ifway "
"ossiblepay.  Ifway ultiplemay\n"
"                          ariablesvay ithway ethay amesay amenay existway, "
"useway idway otay electsay\n"
"                          oneway\n"
"  (EBUGDAY:ARGWAY n)           Eturnsray ethay n'thay argumentway's aluevay "
"ifway ossiblepay.\n"
"                          Argumentway erozay isway ethay irstfay "
"argumentway.\n"
"\n"
"Eesay ethay MUCAY Ommoncay Isplay Userway's Anualmay orfay oremay "
"informationway.\n"

#: target:code/debug.lisp
msgid ""
"When true, the LIST-LOCATIONS command only displays block start locations.\n"
"   Otherwise, all locations are displayed."
msgstr ""
"Enwhay uetray, ethay ISTLAY-OCATIONSLAY ommandcay onlyway isplaysday ockblay "
"tartsay ocationslay.\n"
"   Otherwiseway, allway ocationslay areway isplayedday."

#: target:code/debug.lisp
msgid "If true, list the code location type in the LIST-LOCATIONS command."
msgstr ""
"Ifway uetray, istlay ethay odecay ocationlay ypetay inway ethay ISTLAY-"
"OCATIONSLAY ommandcay."

#: target:code/debug.lisp
msgid "~%Unknown location: using block start.~%"
msgstr "~%Unknownway ocationlay: usingway ockblay tartsay.~%"

#: target:code/debug.lisp
msgid "~&~S: ~S in ~S"
msgstr "~&~S: ~S inway ~S"

#: target:code/debug.lisp
msgid "~&~S: FUNCTION-START in ~S"
msgstr "~&~S: UNCTIONFAY-TARTSAY inway ~S"

#: target:code/debug.lisp
msgid "~&~S: FUNCTION-END in ~S"
msgstr "~&~S: UNCTIONFAY-ENDWAY inway ~S"

#: target:code/debug.lisp
msgid "~%Return values: ~S"
msgstr "~%Eturnray aluesvay: ~S"

#: target:code/debug.lisp
msgid "~&*Step (to a breakpoint)*"
msgstr "~&*Tepsay (otay away eakpointbray)*"

#: target:code/debug.lisp
msgid "*Step*"
msgstr "*Tepsay*"

#: target:code/debug.lisp
msgid "~&*Breakpoint hit*"
msgstr "~&*Eakpointbray ithay*"

#: target:code/debug.lisp
msgid "Error in main-hook-function: unknown breakpoint"
msgstr "Errorway inway ainmay-ookhay-unctionfay: unknownway eakpointbray"

#: target:code/debug.lisp
msgid "Cannot step, in elsewhere code~%"
msgstr "Annotcay tepsay, inway elsewhereway odecay~%"

#: target:code/debug.lisp
msgid ""
"Currently only compiled code can be stepped.~%~\n"
"                Trying to compile the passed form resulted in ~\n"
"                the following error:~%  ~A"
msgstr ""
"Urrentlycay onlyway ompiledcay odecay ancay ebay teppedsay.~%~\n"
"                Yingtray otay ompilecay ethay assedpay ormfay esultedray "
"inway ~\n"
"                ethay ollowingfay errorway:~%  ~Away"

#: target:code/debug.lisp
msgid "~2&Stepping the form~%  ~S~%"
msgstr "~2&Teppingsay ethay ormfay~%  ~S~%"

#: target:code/debug.lisp
msgid "~&using the debugger.  Type HELP for help.~2%"
msgstr "~&usingway ethay ebuggerday.  Ypetay ELPHAY orfay elphay.~2%"

#: target:code/debug.lisp
msgid ""
"STEP implements a debugging paradigm wherein the programmer is allowed\n"
"   to step through the evaluation of a form.  We use the debugger's "
"stepping\n"
"   facility to step through an anonymous function containing only form.\n"
"\n"
"   Currently the stepping facility only supports stepping compiled code,\n"
"   so step will try to compile the resultant anonymous function.  If this\n"
"   fails, e.g. because it closes over a non-null lexical environment, an\n"
"   error is signalled."
msgstr ""
"TEPSAY implementsway away ebuggingday aradigmpay ereinwhay ethay "
"ogrammerpray isway allowedway\n"
"   otay tepsay roughthay ethay evaluationway ofway away ormfay.  Eway useway "
"ethay ebuggerday's teppingsay\n"
"   acilityfay otay tepsay roughthay anway anonymousway unctionfay "
"ontainingcay onlyway ormfay.\n"
"\n"
"   Urrentlycay ethay teppingsay acilityfay onlyway upportssay teppingsay "
"ompiledcay odecay,\n"
"   osay tepsay illway ytray otay ompilecay ethay esultantray anonymousway "
"unctionfay.  Ifway isthay\n"
"   ailsfay, e.g. ecausebay itway osesclay overway away onnay-ullnay "
"exicallay environmentway, anway\n"
"   errorway isway ignalledsay."

#: target:code/debug.lisp
msgid ""
"Show a listing of the call stack going down from the current frame.  In the\n"
"   debugger, the current frame is indicated by the prompt.  Count is how "
"many\n"
"   frames to show."
msgstr ""
"Owshay away istinglay ofway ethay allcay tacksay oinggay ownday omfray ethay "
"urrentcay amefray.  Inway ethay\n"
"   ebuggerday, ethay urrentcay amefray isway indicatedway ybay ethay "
"omptpray.  Ountcay isway owhay anymay\n"
"   amesfray otay owshay."

#: target:code/debug.lisp
msgid "unavaliable-rest-arg"
msgstr "unavaliableway-estray-argway"

#: target:code/debug.lisp
msgid "lambda-list-unavailable"
msgstr "ambdalay-istlay-unavailableway"

#: target:code/debug.lisp
msgid "error printing object {~X}"
msgstr "errorway intingpray objectway {~X}"

#: target:code/debug.lisp
msgid "unused-arg"
msgstr "unusedway-argway"

#: target:code/debug.lisp
msgid "unavailable-arg"
msgstr "unavailableway-argway"

#: target:code/debug.lisp
msgid "~%Source: "
msgstr "~%Ourcesay: "

#: target:code/debug.lisp
msgid "Error finding source: ~A"
msgstr "Errorway indingfay ourcesay: ~Away"

#: target:code/debug.lisp
msgid "Unable to display error condition~@[: ~A~]"
msgstr "Unableway otay isplayday errorway onditioncay~@[: ~Away~]"

#: target:code/debug.lisp
msgid ""
"This is either nil or a function of two arguments, a condition and the "
"value\n"
"   of *debugger-hook*.  This function can either handle the condition or "
"return\n"
"   which causes the standard debugger to execute.  The system passes the "
"value\n"
"   of this variable to the function because it binds *debugger-hook* to nil\n"
"   around the invocation."
msgstr ""
"Isthay isway eitherway ilnay orway away unctionfay ofway wotay argumentsway, "
"away onditioncay andway ethay aluevay\n"
"   ofway *ebuggerday-ookhay*.  Isthay unctionfay ancay eitherway andlehay "
"ethay onditioncay orway eturnray\n"
"   ichwhay ausescay ethay tandardsay ebuggerday otay executeway.  Ethay "
"ystemsay assespay ethay aluevay\n"
"   ofway isthay ariablevay otay ethay unctionfay ecausebay itway indsbay "
"*ebuggerday-ookhay* otay ilnay\n"
"   aroundway ethay invocationway."

#: target:code/debug.lisp
msgid "~2&~A~%   [Condition of type ~S]~2&"
msgstr "~2&~Away~%   [Onditioncay ofway ypetay ~S]~2&"

#: target:code/debug.lisp
msgid "The CMU Common Lisp debugger.  Type h for help."
msgstr "Ethay MUCAY Ommoncay Isplay ebuggerday.  Ypetay h orfay elphay."

#: target:code/debug.lisp
msgid "~&Restarts:~%"
msgstr "~&Estartsray:~%"

#: target:code/debug.lisp
msgid "~2&Debug  (type H for help)~2%"
msgstr "~2&Ebugday  (ypetay H orfay elphay)~2%"

#: target:code/debug.lisp
msgid ""
"When set, avoid calling INVOKE-DEBUGGER recursively when errors occur while\n"
"   executing in the debugger.  The 'flush' command toggles this."
msgstr ""
"Enwhay etsay, avoidway allingcay INVOKEWAY-EBUGGERDAY ecursivelyray enwhay "
"errorsway occurway ilewhay\n"
"   executingway inway ethay ebuggerday.  Ethay 'ushflay' ommandcay ogglestay "
"isthay."

#: target:code/debug.lisp
msgid ""
"When non-NIL, becomes the system *READTABLE* in the debugger\n"
"   read-eval-print loop"
msgstr ""
"Enwhay onnay-ILNAY, ecomesbay ethay ystemsay *EADTABLERAY* inway ethay "
"ebuggerday\n"
"   eadray-evalway-intpray ooplay"

#: target:code/debug.lisp
msgid "When non-NIL, print the current frame when entering the debugger."
msgstr ""
"Enwhay onnay-ILNAY, intpray ethay urrentcay amefray enwhay enteringway ethay "
"ebuggerday."

#: target:code/debug.lisp
msgid "~&Error flushed ..."
msgstr "~&Errorway ushedflay ..."

#: target:code/debug.lisp
msgid "Return to debug level ~D."
msgstr "Eturnray otay ebugday evellay ~D."

#: target:code/debug.lisp
msgid "Unknown stream-command -- ~S."
msgstr "Unknownway eamstray-ommandcay -- ~S."

#: target:code/debug.lisp
msgid "Ambiguous debugger command: ~S."
msgstr "Ambiguousway ebuggerday ommandcay: ~S."

#: target:code/debug.lisp
msgid "~&Your command, ~S, is ambiguous:~%"
msgstr "~&Ouryay ommandcay, ~S, isway ambiguousway:~%"

#: target:code/debug.lisp
msgid ""
"When set (the default), evaluations in the debugger's command loop occur\n"
"   relative to the current frame's environment without the need of debugger\n"
"   forms that explicitly control this kind of evaluation."
msgstr ""
"Enwhay etsay (ethay efaultday), evaluationsway inway ethay ebuggerday's "
"ommandcay ooplay occurway\n"
"   elativeray otay ethay urrentcay amefray's environmentway ithoutway ethay "
"eednay ofway ebuggerday\n"
"   ormsfay atthay explicitlyway ontrolcay isthay indkay ofway evaluationway."

#: target:code/debug.lisp
msgid "Setting * to NIL -- was unbound marker."
msgstr "Ettingsay * otay ILNAY -- asway unboundway arkermay."

#: target:code/debug.lisp
msgid "No known valid variables match ~S."
msgstr "Onay nownkay alidvay ariablesvay atchmay ~S."

#: target:code/debug.lisp
msgid "Specification ambiguous:~%~{   ~A~%~}"
msgstr "Ecificationspay ambiguousway:~%~{   ~Away~%~}"

#: target:code/debug.lisp
msgid "Invalid variable ID, ~D, should have been one of ~S."
msgstr ""
"Invalidway ariablevay IDWAY, ~D, ouldshay avehay eenbay oneway ofway ~S."

#: target:code/debug.lisp
msgid "Specify variable ID to disambiguate ~S.  Use one of ~S."
msgstr ""
"Ecifyspay ariablevay IDWAY otay isambiguateday ~S.  Useway oneway ofway ~S."

#: target:code/debug.lisp
msgid ""
"Returns a variable's value if possible.  Name is a simple-string or symbol.\n"
"   If it is a simple-string, it is an initial substring of the variable's "
"name.\n"
"   If name is a symbol, it has the same name and package as the variable "
"whose\n"
"   value this function returns.  If the symbol is uninterned, then the "
"variable\n"
"   has the same name as the symbol, but it has no package.\n"
"\n"
"   If name is the initial substring of variables with different names, then\n"
"   this return no values after displaying the ambiguous names.  If name\n"
"   determines multiple variables with the same name, then you must use the\n"
"   optional id argument to specify which one you want.  If you left id\n"
"   unspecified, then this returns no values after displaying the "
"distinguishing\n"
"   id values.\n"
"\n"
"   The result of this function is limited to the availability of variable\n"
"   information.  This is SETF'able."
msgstr ""
"Eturnsray away ariablevay's aluevay ifway ossiblepay.  Amenay isway away "
"implesay-ingstray orway ymbolsay.\n"
"   Ifway itway isway away implesay-ingstray, itway isway anway initialway "
"ubstringsay ofway ethay ariablevay's amenay.\n"
"   Ifway amenay isway away ymbolsay, itway ashay ethay amesay amenay andway "
"ackagepay asway ethay ariablevay osewhay\n"
"   aluevay isthay unctionfay eturnsray.  Ifway ethay ymbolsay isway "
"uninternedway, enthay ethay ariablevay\n"
"   ashay ethay amesay amenay asway ethay ymbolsay, utbay itway ashay onay "
"ackagepay.\n"
"\n"
"   Ifway amenay isway ethay initialway ubstringsay ofway ariablesvay ithway "
"ifferentday amesnay, enthay\n"
"   isthay eturnray onay aluesvay afterway isplayingday ethay ambiguousway "
"amesnay.  Ifway amenay\n"
"   eterminesday ultiplemay ariablesvay ithway ethay amesay amenay, enthay "
"ouyay ustmay useway ethay\n"
"   optionalway idway argumentway otay ecifyspay ichwhay oneway ouyay "
"antway.  Ifway ouyay eftlay idway\n"
"   unspecifiedway, enthay isthay eturnsray onay aluesvay afterway "
"isplayingday ethay istinguishdayingway\n"
"   idway aluesvay.\n"
"\n"
"   Ethay esultray ofway isthay unctionfay isway imitedlay otay ethay "
"availabilityway ofway ariablevay\n"
"   informationway.  Isthay isway ETFSAY'ableway."

#: target:code/debug.lisp
msgid ""
"Returns the n'th argument's value if possible.  Argument zero is the first\n"
"   argument in a frame's default printed representation.  Count keyword/"
"value\n"
"   pairs as separate arguments."
msgstr ""
"Eturnsray ethay n'thay argumentway's aluevay ifway ossiblepay.  Argumentway "
"erozay isway ethay irstfay\n"
"   argumentway inway away amefray's efaultday intedpray epresentationray.  "
"Ountcay eywordkay/aluvaye\n"
"   airspay asway eparatesay argumentsway."

#: target:code/debug.lisp
msgid "No argument values are available."
msgstr "Onay argumentway aluesvay areway availableway."

#: target:code/debug.lisp
msgid "Unused arguments have no values."
msgstr "Unusedway argumentsway avehay onay aluesvay."

#: target:code/debug.lisp
msgid "Invalid argument value."
msgstr "Invalidway argumentway aluevay."

#: target:code/debug.lisp
msgid "Argument specification out of range -- ~S."
msgstr "Argumentway ecificationspay outway ofway angeray -- ~S."

#: target:code/debug.lisp
msgid "Unused rest-arg before n'th argument."
msgstr "Unusedway estray-argway eforebay n'thay argumentway."

#: target:code/debug.lisp
msgid "Invalid rest-arg before n'th argument."
msgstr "Invalidway estray-argway eforebay n'thay argumentway."

#: target:code/debug.lisp
msgid "Invoking debugger command while outside the debugger."
msgstr "Invokingway ebuggerday ommandcay ilewhay outsideway ethay ebuggerday."

#: target:code/debug.lisp
msgid "Unknown debug command name -- ~S"
msgstr "Unknownway ebugday ommandcay amenay -- ~S"

#: target:code/debug.lisp
msgid "~&Top of stack."
msgstr "~&Optay ofway tacksay."

#: target:code/debug.lisp
msgid "~&Bottom of stack."
msgstr "~&Ottombay ofway tacksay."

#: target:code/debug.lisp
msgid "Frame number: "
msgstr "Amefray umbernay: "

#: target:code/debug.lisp
msgid "You are here."
msgstr "Ouyay areway erehay."

#: target:code/debug.lisp
msgid "Bottom of stack encountered."
msgstr "Ottombay ofway tacksay encounteredway."

#: target:code/debug.lisp
msgid "Top of stack encountered."
msgstr "Optay ofway tacksay encounteredway."

#: target:code/debug.lisp
msgid "debug-return: "
msgstr "ebugday-eturnray: "

#: target:code/debug.lisp
msgid ""
"~@<can't find a tag for this frame ~\n"
"                   ~2I~_(hint: try increasing the DEBUG optimization quality "
"~\n"
"                   and recompiling)~:@>"
msgstr ""
"~@<ancay't indfay away agtay orfay isthay amefray ~\n"
"                   ~2Iway~_(inthay: ytray increasingway ethay EBUGDAY "
"optimizationway alityquay ~\n"
"                   andway ecompilingray)~:@>"

#: target:code/debug.lisp
msgid "No restart named continue."
msgstr "Onay estartray amednay ontinuecay."

#: target:code/debug.lisp
msgid "Restart: "
msgstr "Estartray: "

#: target:code/debug.lisp
msgid "~S is invalid as a restart name.~%"
msgstr "~S isway invalidway asway away estartray amenay.~%"

#: target:code/debug.lisp
msgid "No such restart."
msgstr "Onay uchsay estartray."

#: target:code/debug.lisp
msgid ""
"This controls how many lines the debugger's help command prints before\n"
"   printing a prompting line to continue with output."
msgstr ""
"Isthay ontrolscay owhay anymay ineslay ethay ebuggerday's elphay ommandcay "
"intspray eforebay\n"
"   intingpray away omptingpray inelay otay ontinuecay ithway outputway."

#: target:code/debug.lisp
msgid "~%[RETURN FOR MORE, Q TO QUIT HELP TEXT]: "
msgstr "~%[ETURNRAY ORFAY OREMAY, Q OTAY ITQUAY ELPHAY EXTTAY]: "

#: target:code/debug.lisp
msgid ""
"No local variables ~@[starting with ~A ~]~\n"
"\t               in function."
msgstr ""
"Onay ocallay ariablesvay ~@[tartingsay ithway ~Away ~]~\n"
"\t               inway unctionfay."

#: target:code/debug.lisp
msgid ""
"All variables ~@[starting with ~A ~]currently ~\n"
"\t               have invalid values."
msgstr ""
"Allway ariablesvay ~@[tartingsay ithway ~Away ~]urrentlycay ~\n"
"\t               avehay invalidway aluesvay."

#: target:code/debug.lisp
msgid "No variable information available."
msgstr "Onay ariablevay informationway availableway."

#: target:code/debug.lisp
msgid "No start positions map."
msgstr "Onay tartsay ositionspay apmay."

#: target:code/debug.lisp
msgid "Source file no longer exists:~%  ~A."
msgstr "Ourcesay ilefay onay ongerlay existsway:~%  ~Away."

#: target:code/debug.lisp
msgid "~%; File: ~A~%"
msgstr "~%; Ilefay: ~Away~%"

#: target:code/debug.lisp
msgid ""
"~%; File has been modified since compilation:~%;   ~A~@\n"
"\t\t ; Using form offset instead of character position.~%"
msgstr ""
"~%; Ilefay ashay eenbay odifiedmay incesay ompilationcay:~%;   ~Away~@\n"
"\t\t ; Usingway ormfay offsetway insteadway ofway aracterchay ositionpay.~%"

#: target:code/debug.lisp
msgid "Source path no longer exists."
msgstr "Ourcesay athpay onay ongerlay existsway."

#: target:code/debug.lisp
msgid "Couldn't continue."
msgstr "Ouldncay't ontinuecay."

#: target:code/debug.lisp
msgid "::FUNCTION-START "
msgstr "::UNCTIONFAY-TARTSAY "

#: target:code/debug.lisp
msgid " *Active*"
msgstr " *Activeway*"

#: target:code/debug.lisp
msgid " *Continue here*"
msgstr " *Ontinuecay erehay*"

#: target:code/debug.lisp
msgid "~&::FUNCTION-END *Active* "
msgstr "~&::UNCTIONFAY-ENDWAY *Activeway* "

#: target:code/debug.lisp
msgid "Location number, :start, or :end: "
msgstr "Ocationlay umbernay, :tartsay, orway :endway: "

#: target:code/debug.lisp
msgid "Note: previous breakpoint removed.~%"
msgstr "Otenay: eviouspray eakpointbray emovedray.~%"

#: target:code/debug.lisp
msgid "~&Added."
msgstr "~&Addedway."

#: target:code/debug.lisp
msgid "Breakpoint ~S removed.~%"
msgstr "Eakpointbray ~S emovedray.~%"

#: target:code/debug.lisp
msgid "Breakpoint doesn't exist."
msgstr "Eakpointbray oesnday't existway."

#: target:code/debug.lisp
msgid "All breakpoints deleted.~%"
msgstr "Allway eakpointsbray eletedday.~%"

#: target:code/debug.lisp
msgid "Errors now flushed."
msgstr "Errorsway ownay ushedflay."

#: target:code/debug.lisp
msgid "Errors now create nested debug levels."
msgstr "Errorsway ownay eatecray estednay ebugday evelslay."

#: target:code/debug.lisp
msgid "Can't figure out the function for this frame."
msgstr "Ancay't igurefay outway ethay unctionfay orfay isthay amefray."

#: target:code/debug.lisp
msgid ""
"The debugger's EDIT-SOURCE command only works in slave Lisps ~\n"
"\t    connected to a Hemlock editor."
msgstr ""
"Ethay ebuggerday's EDITWAY-OURCESAY ommandcay onlyway orksway inway aveslay "
"Ispslay ~\n"
"\t    onnectedcay otay away Emlockhay editorway."

#: target:code/query.lisp
msgid ""
"Y-OR-N-P prints the message, if any, and reads characters from *QUERY-IO*\n"
"   until the user enters y or Y as an affirmative, or either n or N as a\n"
"   negative answer.  It ignores preceding whitespace and asks again if you\n"
"   enter any other characters."
msgstr ""
"Y-ORWAY-N-P intspray ethay essagemay, ifway anyway, andway eadsray "
"aracterschay omfray *ERYQUAY-IOWAY*\n"
"   untilway ethay userway entersway y orway Y asway anway affirmativeway, "
"orway eitherway n orway N asway away\n"
"   egativenay answerway.  Itway ignoresway ecedingpray itespacewhay andway "
"asksway againway ifway ouyay\n"
"   enterway anyway otherway aracterschay."

#: target:code/query.lisp
msgid "Type \"y\" for yes or \"n\" for no. "
msgstr "Ypetay \"y\" orfay esyay orway \"n\" orfay onay. "

#: target:code/query.lisp
msgid ""
"YES-OR-NO-P is similar to Y-OR-N-P, except that it clears the \n"
"   input buffer, beeps, and uses READ-LINE to get the strings \n"
"   YES or NO."
msgstr ""
"ESYAY-ORWAY-ONAY-P isway imilarsay otay Y-ORWAY-N-P, exceptway atthay itway "
"earsclay ethay \n"
"   inputway ufferbay, eepsbay, andway usesway EADRAY-INELAY otay etgay ethay "
"ingsstray \n"
"   ESYAY orway ONAY."

#: target:code/query.lisp
msgid "Type \"yes\" for yes or \"no\" for no. "
msgstr "Ypetay \"esyay\" orfay esyay orway \"onay\" orfay onay. "

#: target:code/rand-mt19937.lisp
msgid ""
"Generate an random state vector from the given SEED.  The seed can be\n"
"  either an integer or a vector of (unsigned-byte 32)"
msgstr ""
"Enerategay anway andomray tatesay ectorvay omfray ethay ivengay EEDSAY.  "
"Ethay eedsay ancay ebay\n"
"  eitherway anway integerway orway away ectorvay ofway (unsignedway-ytebay "
"32)"

#: target:code/rand-mt19937.lisp
msgid ""
"Make a random state object.  If STATE is not supplied, return a copy\n"
"  of the default random state.  If STATE is a random state, then return a\n"
"  copy of it.  If STATE is T then return a random state generated from\n"
"  the universal time or /dev/urandom if available."
msgstr ""
"Akemay away andomray tatesay objectway.  Ifway TATESAY isway otnay "
"uppliedsay, eturnray away opycay\n"
"  ofway ethay efaultday andomray tatesay.  Ifway TATESAY isway away andomray "
"tatesay, enthay eturnray away\n"
"  opycay ofway itway.  Ifway TATESAY isway T enthay eturnray away andomray "
"tatesay eneratedgay omfray\n"
"  ethay universalway imetay orway /evday/urandomway ifway availableway."

#: target:code/rand-mt19937.lisp
msgid "Argument is not a RANDOM-STATE, T or NIL: ~S"
msgstr "Argumentway isway otnay away ANDOMRAY-TATESAY, T orway ILNAY: ~S"

#: target:code/rand-mt19937.lisp
msgid ""
"Generate a uniformly distributed pseudo-random number between zero\n"
"  and Arg.  State, if supplied, is the random state to use."
msgstr ""
"Enerategay away uniformlyway istributedday seudopay-andomray umbernay "
"etweenbay erozay\n"
"  andway Argway.  Tatesay, ifway uppliedsay, isway ethay andomray tatesay "
"otay useway."

#: target:code/rand-mt19937.lisp
msgid "Argument is not a positive integer or a positive float: ~S"
msgstr ""
"Argumentway isway otnay away ositivepay integerway orway away ositivepay "
"oatflay: ~S"

#: target:code/ntrace.lisp
msgid ""
"This is bound to the returned values when evaluating :BREAK-AFTER and\n"
"   :PRINT-AFTER forms."
msgstr ""
"Isthay isway oundbay otay ethay eturnedray aluesvay enwhay evaluatingway :"
"EAKBRAY-AFTERWAY andway\n"
"   :INTPRAY-AFTERWAY ormsfay."

#: target:code/ntrace.lisp
msgid ""
"If the trace indentation exceeds this value, then indentation restarts at\n"
"   0."
msgstr ""
"Ifway ethay acetray indentationway exceedsway isthay aluevay, enthay "
"indentationway estartsray atway\n"
"   0."

#: target:code/ntrace.lisp
msgid "The default value for the :ENCAPSULATE option to trace."
msgstr ""
"Ethay efaultday aluevay orfay ethay :ENCAPSULATEWAY optionway otay acetray."

#: target:code/ntrace.lisp
msgid ""
"List of package names.  Encapsulate functions from these packages\n"
"   by default.  This should at least include the packages of functions\n"
"   used by TRACE, directly or indirectly."
msgstr ""
"Istlay ofway ackagepay amesnay.  Encapsulateway unctionsfay omfray esethay "
"ackagespay\n"
"   ybay efaultday.  Isthay ouldshay atway eastlay includeway ethay "
"ackagespay ofway unctionsfay\n"
"   usedway ybay ACETRAY, irectlyday orway indirectlyway."

#: target:code/ntrace.lisp
msgid "Can't trace special form ~S."
msgstr "Ancay't acetray ecialspay ormfay ~S."

#: target:code/ntrace.lisp
msgid "Breaking ~A traced call to ~S:"
msgstr "Eakingbray ~Away acedtray allcay otay ~S:"

#: target:code/ntrace.lisp
msgid "~S returned"
msgstr "~S eturnedray"

#: target:code/ntrace.lisp
msgid "Function ~S already TRACE'd, retracing it."
msgstr "Unctionfay ~S alreadyway ACETRAY'd, etracingray itway."

#: target:code/ntrace.lisp
msgid "Tracing shared code for ~S:~%  ~S"
msgstr "Acingtray aredshay odecay orfay ~S:~%  ~S"

#: target:code/ntrace.lisp
msgid "~S name is not a defined global function: ~S"
msgstr "~S amenay isway otnay away efinedday obalglay unctionfay: ~S"

#: target:code/ntrace.lisp
msgid "Can't use encapsulation to trace anonymous function ~S."
msgstr ""
"Ancay't useway encapsulationway otay acetray anonymousway unctionfay ~S."

#: target:code/ntrace.lisp
msgid "Can't use encapsulation to trace local flet/labels function ~S."
msgstr ""
"Ancay't useway encapsulationway otay acetray ocallay etflay/abelslay "
"unctionfay ~S."

#: target:code/ntrace.lisp
msgid "Missing argument to ~S TRACE option."
msgstr "Issingmay argumentway otay ~S ACETRAY optionway."

#: target:code/ntrace.lisp
msgid "Unknown TRACE option: ~S"
msgstr "Unknownway ACETRAY optionway: ~S"

#: target:code/ntrace.lisp
msgid ""
"TRACE {Option Global-Value}* {Name {Option Value}*}*\n"
"   TRACE is a debugging tool that prints information when specified "
"functions\n"
"   are called.  In its simplest form:\n"
"       (trace Name-1 Name-2 ...)\n"
"\n"
"   CLOS methods can be traced by specifying a name of the form\n"
"   (METHOD {Qualifier}* ({Specializer}*)).\n"
"\n"
"   Labels and Flet functions can be traced by specifying a name of the form\n"
"   (LABELS <lfun> <fun>) or (FLET <lfun> <fun>) where <lfun> is the Labels/"
"Flet\n"
"   function in <fun>.\n"
"\n"
"   TRACE causes a printout on *TRACE-OUTPUT* each time that one of the "
"named\n"
"   functions is entered or returns (the Names are not evaluated.)  The "
"output\n"
"   is indented according to the number of pending traced calls, and this "
"trace\n"
"   depth is printed at the beginning of each line of output.\n"
"\n"
"   Options allow modification of the default behavior.  Each option is a "
"pair\n"
"   of an option keyword and a value form.  Options may be interspersed with\n"
"   function names.  Options only affect tracing of the function whose name "
"they\n"
"   appear immediately after.  Global options are specified before the first\n"
"   name, and affect all functions traced by a given use of TRACE.\n"
"\n"
"   The following options are defined:\n"
"\n"
"   :CONDITION Form\n"
"   :CONDITION-AFTER Form\n"
"   :CONDITION-ALL Form\n"
"       If :CONDITION is specified, then TRACE does nothing unless Form\n"
"       evaluates to true at the time of the call.  :CONDITION-AFTER is\n"
"       similar, but suppresses the initial printout, and is tested when the\n"
"       function returns.  :CONDITION-ALL tries both before and after.\n"
"\n"
"   :WHEREIN Names\n"
"       If specified, Names is a function name or list of names.  TRACE does\n"
"       nothing unless a call to one of those functions encloses the call to\n"
"       this function (i.e. it would appear in a backtrace.)  Anonymous\n"
"       functions have string names like \"DEFUN FOO\".\n"
"   :WHEREIN-ONLY Names\n"
"       Like :WHEREIN, but only if the immediate caller is one of Names,\n"
"       instead of being any where in a backtrace.\n"
"\n"
"   :BREAK Form\n"
"   :BREAK-AFTER Form\n"
"   :BREAK-ALL Form\n"
"       If specified, and Form evaluates to true, then the debugger is "
"invoked\n"
"       at the start of the function, at the end of the function, or both,\n"
"       according to the respective option.\n"
"\n"
"   :PRINT Form\n"
"   :PRINT-AFTER Form\n"
"   :PRINT-ALL Form\n"
"       In addition to the usual printout, the result of evaluating FORM is\n"
"       printed at the start of the function, at the end of the function, or\n"
"       both, according to the respective option.  Multiple print options "
"cause\n"
"       multiple values to be printed.\n"
"\n"
"   :FUNCTION Function-Form\n"
"       This is a not really an option, but rather another way of specifying\n"
"       what function to trace.  The Function-Form is evaluated immediately,\n"
"       and the resulting function is traced.\n"
"\n"
"   :METHODS Function-Form\n"
"       This is a not really an option, but rather a way of specifying\n"
"       that all methods of a generic functions should be traced.  The\n"
"       Function-Form is evaluated immediately, and the methods of the "
"resulting\n"
"       generic function are traced.\n"
"\n"
"   :ENCAPSULATE {:DEFAULT | T | NIL}\n"
"       If T, the tracing is done via encapsulation (redefining the function\n"
"       name) rather than by modifying the function.  :DEFAULT is the "
"default,\n"
"       and means to use encapsulation for interpreted functions and "
"funcallable\n"
"       instances, breakpoints otherwise.  When encapsulation is used, forms "
"are\n"
"       *not* evaluated in the function's lexical environment, but DEBUG:ARG "
"can\n"
"       still be used.\n"
"\n"
"   :CONDITION, :BREAK and :PRINT forms are evaluated in the lexical "
"environment\n"
"   of the called function; DEBUG:VAR and DEBUG:ARG can be used.  The -AFTER "
"and\n"
"   -ALL forms are evaluated in the null environment."
msgstr ""
"ACETRAY {Optionway Obalglay-Aluevay}* {Amenay {Optionway Aluevay}*}*\n"
"   ACETRAY isway away ebuggingday ooltay atthay intspray informationway "
"enwhay ecifiedspay unctionfays\n"
"   areway alledcay.  Inway itsway implestsay ormfay:\n"
"       (acetray Amenay-1 Amenay-2 ...)\n"
"\n"
"   OSCLAY ethodsmay ancay ebay acedtray ybay ecifyingspay away amenay ofway "
"ethay ormfay\n"
"   (ETHODMAY {Alifierquay}* ({Ecializerspay}*)).\n"
"\n"
"   Abelslay andway Etflay unctionsfay ancay ebay acedtray ybay ecifyingspay "
"away amenay ofway ethay ormfay\n"
"   (ABELSLAY <funlay> <unfay>) orway (ETFLAY <funlay> <unfay>) erewhay "
"<funlay> isway ethay Abelslay/Fetlay\n"
"   unctionfay inway <unfay>.\n"
"\n"
"   ACETRAY ausescay away intoutpray onway *ACETRAY-OUTPUTWAY* eachway imetay "
"atthay oneway ofway ethay amednay\n"
"   unctionsfay isway enteredway orway eturnsray (ethay Amesnay areway otnay "
"evaluatedway.)  Ethay outputway\n"
"   isway indentedway accordingway otay ethay umbernay ofway endingpay "
"acedtray allscay, andway isthay acetray\n"
"   epthday isway intedpray atway ethay eginningbay ofway eachway inelay "
"ofway outputway.\n"
"\n"
"   Optionsway allowway odificationmay ofway ethay efaultday ehaviorbay.  "
"Eachway optionway isway away airpay\n"
"   ofway anway optionway eywordkay andway away aluevay ormfay.  Optionsway "
"aymay ebay interspersedway ithway\n"
"   unctionfay amesnay.  Optionsway onlyway affectway acingtray ofway ethay "
"unctionfay osewhay amenay eythay\n"
"   appearway immediatelyway afterway.  Obalglay optionsway areway "
"ecifiedspay eforebay ethay irstfay\n"
"   amenay, andway affectway allway unctionsfay acedtray ybay away ivengay "
"useway ofway ACETRAY.\n"
"\n"
"   Ethay ollowingfay optionsway areway efinedday:\n"
"\n"
"   :ONDITIONCAY Ormfay\n"
"   :ONDITIONCAY-AFTERWAY Ormfay\n"
"   :ONDITIONCAY-ALLWAY Ormfay\n"
"       Ifway :ONDITIONCAY isway ecifiedspay, enthay ACETRAY oesday othingnay "
"unlessway Ormfay\n"
"       evaluatesway otay uetray atway ethay imetay ofway ethay allcay.  :"
"ONDITIONCAY-AFTERWAY isway\n"
"       imilarsay, utbay uppressessay ethay initialway intoutpray, andway "
"isway estedtay enwhay ethay\n"
"       unctionfay eturnsray.  :ONDITIONCAY-ALLWAY iestray othbay eforebay "
"andway afterway.\n"
"\n"
"   :EREINWHAY Amesnay\n"
"       Ifway ecifiedspay, Amesnay isway away unctionfay amenay orway istlay "
"ofway amesnay.  ACETRAY oesday\n"
"       othingnay unlessway away allcay otay oneway ofway osethay unctionsfay "
"enclosesway ethay allcay otay\n"
"       isthay unctionfay (i.e. itway ouldway appearway inway away "
"acktracebay.)  Anonymousway\n"
"       unctionsfay avehay ingstray amesnay ikelay \"EFUNDAY OOFAY\".\n"
"   :EREINWHAY-ONLYWAY Amesnay\n"
"       Ikelay :EREINWHAY, utbay onlyway ifway ethay immediateway allercay "
"isway oneway ofway Amesnay,\n"
"       insteadway ofway eingbay anyway erewhay inway away acktracebay.\n"
"\n"
"   :EAKBRAY Ormfay\n"
"   :EAKBRAY-AFTERWAY Ormfay\n"
"   :EAKBRAY-ALLWAY Ormfay\n"
"       Ifway ecifiedspay, andway Ormfay evaluatesway otay uetray, enthay "
"ethay ebuggerday isway invokedway\n"
"       atway ethay tartsay ofway ethay unctionfay, atway ethay endway ofway "
"ethay unctionfay, orway othbay,\n"
"       accordingway otay ethay espectiveray optionway.\n"
"\n"
"   :INTPRAY Ormfay\n"
"   :INTPRAY-AFTERWAY Ormfay\n"
"   :INTPRAY-ALLWAY Ormfay\n"
"       Inway additionway otay ethay usualway intoutpray, ethay esultray "
"ofway evaluatingway ORMFAY isway\n"
"       intedpray atway ethay tartsay ofway ethay unctionfay, atway ethay "
"endway ofway ethay unctionfay, orway\n"
"       othbay, accordingway otay ethay espectiveray optionway.  Ultiplemay "
"intpray optionsway ausecay\n"
"       ultiplemay aluesvay otay ebay intedpray.\n"
"\n"
"   :UNCTIONFAY Unctionfay-Ormfay\n"
"       Isthay isway away otnay eallyray anway optionway, utbay atherray "
"anotherway ayway ofway ecifyingspay\n"
"       atwhay unctionfay otay acetray.  Ethay Unctionfay-Ormfay isway "
"evaluatedway immediatelyway,\n"
"       andway ethay esultingray unctionfay isway acedtray.\n"
"\n"
"   :ETHODSMAY Unctionfay-Ormfay\n"
"       Isthay isway away otnay eallyray anway optionway, utbay atherray away "
"ayway ofway ecifyingspay\n"
"       atthay allway ethodsmay ofway away enericgay unctionsfay ouldshay "
"ebay acedtray.  Ethay\n"
"       Unctionfay-Ormfay isway evaluatedway immediatelyway, andway ethay "
"ethodsmay ofway ethay esultingray\n"
"       enericgay unctionfay areway acedtray.\n"
"\n"
"   :ENCAPSULATEWAY {:EFAULTDAY | T | ILNAY}\n"
"       Ifway T, ethay acingtray isway oneday iavay encapsulationway "
"(edefiningray ethay unctionfay\n"
"       amenay) atherray anthay ybay odifyingmay ethay unctionfay.  :"
"EFAULTDAY isway ethay efaultday,\n"
"       andway eansmay otay useway encapsulationway orfay interpretedway "
"unctionsfay andway uncallafayeblay\n"
"       instancesway, eakpointsbray otherwiseway.  Enwhay encapsulationway "
"isway usedway, ormsfay areway\n"
"       *otnay* evaluatedway inway ethay unctionfay's exicallay "
"environmentway, utbay EBUGDAY:ARGWAY ancay\n"
"       tillsay ebay usedway.\n"
"\n"
"   :ONDITIONCAY, :EAKBRAY andway :INTPRAY ormsfay areway evaluatedway inway "
"ethay exicallay environmwayentway\n"
"   ofway ethay alledcay unctionfay; EBUGDAY:ARVAY andway EBUGDAY:ARGWAY "
"ancay ebay usedway.  Ethay -AFTERWAY andway\n"
"   -ALLWAY ormsfay areway evaluatedway inway ethay ullnay environmentway."

#: target:code/ntrace.lisp
msgid "Function is not TRACE'd -- ~S."
msgstr "Unctionfay isway otnay ACETRAY'd -- ~S."

#: target:code/ntrace.lisp
msgid ""
"Removes tracing from the specified functions.  With no args, untraces all\n"
"   functions."
msgstr ""
"Emovesray acingtray omfray ethay ecifiedspay unctionsfay.  Ithway onay "
"argsway, untracesway allway\n"
"   unctionsfay."

#: target:code/sort.lisp
msgid ""
"Destructively sorts sequence.  Predicate should returns non-Nil if\n"
"   Arg1 is to precede Arg2."
msgstr ""
"Estructivelyday ortssay equencesay.  Edicatepray ouldshay eturnsray onnay-"
"Ilnay ifway\n"
"   Argway1 isway otay ecedepray Argway2."

#: target:code/sort.lisp
msgid "~S is not a sequence."
msgstr "~S isway otnay away equencesay."

#: target:code/sort.lisp
msgid ""
"The sequences Sequence1 and Sequence2 are destructively merged into\n"
"   a sequence of type Result-Type using the Predicate to order the elements."
msgstr ""
"Ethay equencessay Equencesay1 andway Equencesay2 areway estructivelyday "
"ergedmay intoway\n"
"   away equencesay ofway ypetay Esultray-Ypetay usingway ethay Edicatepray "
"otay orderway ethay elementsway."

#: target:code/time.lisp
msgid ""
"The number of internal time units that fit into a second.  See\n"
"  Get-Internal-Real-Time and Get-Internal-Run-Time."
msgstr ""
"Ethay umbernay ofway internalway imetay unitsway atthay itfay intoway away "
"econdsay.  Eesay\n"
"  Etgay-Internalway-Ealray-Imetay andway Etgay-Internalway-Unray-Imetay."

#: target:code/time.lisp
msgid ""
"Return the real time in the internal time format.  This is useful for\n"
"  finding elapsed time.  See Internal-Time-Units-Per-Second."
msgstr ""
"Eturnray ethay ealray imetay inway ethay internalway imetay ormatfay.  "
"Isthay isway usefulway orfay\n"
"  indingfay elapsedway imetay.  Eesay Internalway-Imetay-Unitsway-Erpay-"
"Econdsay."

#: target:code/time.lisp
msgid ""
"Return the run time in the internal time format.  This is useful for\n"
"  finding CPU usage."
msgstr ""
"Eturnray ethay unray imetay inway ethay internalway imetay ormatfay.  Isthay "
"isway usefulway orfay\n"
"  indingfay PUCAY usageway."

#: target:code/time.lisp
msgid ""
"Returns a single integer for the current time of\n"
"   day in universal time format."
msgstr ""
"Eturnsray away inglesay integerway orfay ethay urrentcay imetay ofway\n"
"   ayday inway universalway imetay ormatfay."

#: target:code/time.lisp
msgid ""
"Returns nine values specifying the current time as follows:\n"
"   second, minute, hour, date, month, year, day of week (0 = Monday), T\n"
"   (daylight savings times) or NIL (standard time), and timezone."
msgstr ""
"Eturnsray inenay aluesvay ecifyingspay ethay urrentcay imetay asway "
"ollowsfay:\n"
"   econdsay, inutemay, ourhay, ateday, onthmay, earyay, ayday ofway eekway "
"(0 = Ondaymay), T\n"
"   (aylightday avingssay imestay) orway ILNAY (tandardsay imetay), andway "
"imezonetay."

#: target:code/time.lisp
msgid ""
"Converts a universal-time to decoded time format returning the following\n"
"   nine values: second, minute, hour, date, month, year, day of week (0 =\n"
"   Monday), T (daylight savings time) or NIL (standard time), and timezone.\n"
"   Completely ignores daylight-savings-time when time-zone is supplied."
msgstr ""
"Onvertscay away universalway-imetay otay ecodedday imetay ormatfay "
"eturningray ethay ollowingfay\n"
"   inenay aluesvay: econdsay, inutemay, ourhay, ateday, onthmay, earyay, "
"ayday ofway eekway (0 =\n"
"   Ondaymay), T (aylightday avingssay imetay) orway ILNAY (tandardsay "
"imetay), andway imezonetay.\n"
"   Ompletelycay ignoresway aylightday-avingssay-imetay enwhay imetay-onezay "
"isway uppliedsay."

#: target:code/time.lisp
msgid ""
"The time values specified in decoded format are converted to \n"
"   universal time, which is returned."
msgstr ""
"Ethay imetay aluesvay ecifiedspay inway ecodedday ormatfay areway "
"onvertedcay otay \n"
"   universalway imetay, ichwhay isway eturnedray."

#: target:code/time.lisp
msgid "Evaluates the Form and prints timing information on *Trace-Output*."
msgstr ""
"Evaluatesway ethay Ormfay andway intspray imingtay informationway onway "
"*Acetray-Outputway*."

#: target:code/weak.lisp
msgid "Allocates and returns a weak pointer which points to OBJECT."
msgstr ""
"Allocatesway andway eturnsray away eakway ointerpay ichwhay ointspay otay "
"OBJECTWAY."

#: target:code/weak.lisp
msgid ""
"If WEAK-POINTER is valid, returns the value of WEAK-POINTER and T.\n"
"   If the referent of WEAK-POINTER has been garbage collected, returns\n"
"   the values NIL and NIL."
msgstr ""
"Ifway EAKWAY-OINTERPAY isway alidvay, eturnsray ethay aluevay ofway EAKWAY-"
"OINTERPAY andway T.\n"
"   Ifway ethay eferentray ofway EAKWAY-OINTERPAY ashay eenbay arbagegay "
"ollectedcay, eturnsray\n"
"   ethay aluesvay ILNAY andway ILNAY."

#: target:code/weak.lisp
msgid "Updates WEAK-POINTER to point to a new object."
msgstr "Updatesway EAKWAY-OINTERPAY otay ointpay otay away ewnay objectway."

#: target:code/final.lisp
msgid ""
"Arrange for FUNCTION to be called when there are no more references to\n"
"   OBJECT.  FUNCTION takes no arguments."
msgstr ""
"Arrangeway orfay UNCTIONFAY otay ebay alledcay enwhay erethay areway onay "
"oremay eferencesray otay\n"
"   OBJECTWAY.  UNCTIONFAY akestay onay argumentsway."

#: target:code/final.lisp
msgid "Cancel any finalization registers for OBJECT."
msgstr "Ancelcay anyway inalizationfay egistersray orfay OBJECTWAY."

#: target:code/describe.lisp
msgid "Depth of recursive descriptions allowed."
msgstr "Epthday ofway ecursiveray escriptionsday allowedway."

#: target:code/describe.lisp
msgid ""
"If non-nil, descriptions may provide interpretations of information and\n"
"  pointers to additional information.  Normally nil."
msgstr ""
"Ifway onnay-ilnay, escriptionsday aymay ovidepray interpretationsway ofway "
"informationway andway\n"
"  ointerspay otay additionalway informationway.  Ormallynay ilnay."

#: target:code/describe.lisp
msgid ""
"*print-level* gets bound to this inside describe.  If null, use\n"
"  *print-level*"
msgstr ""
"*intpray-evellay* etsgay oundbay otay isthay insideway escribeday.  Ifway "
"ullnay, useway\n"
"  *intpray-evellay*"

#: target:code/describe.lisp
msgid ""
"*print-length* gets bound to this inside describe.  If null, use\n"
"  *print-length*."
msgstr ""
"*intpray-engthlay* etsgay oundbay otay isthay insideway escribeday.  Ifway "
"ullnay, useway\n"
"  *intpray-engthlay*."

#: target:code/describe.lisp
msgid "Number of spaces that sets off each line of a recursive description."
msgstr ""
"Umbernay ofway acesspay atthay etssay offway eachway inelay ofway away "
"ecursiveray escriptionday."

#: target:code/describe.lisp
msgid "Used to tell whether we are doing a recursive describe."
msgstr ""
"Usedway otay elltay etherwhay eway areway oingday away ecursiveray "
"escribeday."

#: target:code/describe.lisp
msgid "Used to implement recursive description cutoff.  Don't touch."
msgstr ""
"Usedway otay implementway ecursiveray escriptionday utoffcay.  Onday't "
"ouchtay."

#: target:code/describe.lisp
msgid "An output stream used by Describe for indenting and stuff."
msgstr ""
"Anway outputway eamstray usedway ybay Escribeday orfay indentingway andway "
"tuffsay."

#: target:code/describe.lisp
msgid ""
"List of all objects describe within the current top-level call to describe."
msgstr ""
"Istlay ofway allway objectsway escribeday ithinway ethay urrentcay optay-"
"evellay allcay otay escribeday."

#: target:code/describe.lisp
msgid "The last object passed to describe."
msgstr "Ethay astlay objectway assedpay otay escribeday."

#: target:code/describe.lisp
msgid "Prints a description of the object X."
msgstr "Intspray away escriptionday ofway ethay objectway X."

#: target:code/describe.lisp
msgid "*describe-level* should be a nonnegative integer - ~A."
msgstr ""
"*escribeday-evellay* ouldshay ebay away onnegativenay integerway - ~Away."

#: target:code/describe.lisp
msgid "~&~S is a ~S."
msgstr "~&~S isway away ~S."

#: target:code/describe.lisp
msgid "~&Its code is #x~4,'0x."
msgstr "~&Itsway odecay isway #x~4,'0x."

#: target:code/describe.lisp
msgid "~&Its name is ~A."
msgstr "~&Itsway amenay isway ~Away."

#: target:code/describe.lisp
msgid "~&It is a ~:[high (leading)~;low (trailing)~] surrogate character."
msgstr ""
"~&Itway isway away ~:[ighhay (eadinglay)~;owlay (ailingtray)~] urrogatesay "
"aracterchay."

#: target:code/describe.lisp
msgid "~&~S is a ~(~A~) of type ~A."
msgstr "~&~S isway away ~(~Away~) ofway ypetay ~Away."

#: target:code/describe.lisp
msgid "~&~S is a ~:[~;displaced ~]vector of length ~D."
msgstr "~&~S isway away ~:[~;isplacedday ~]ectorvay ofway engthlay ~D."

#: target:code/describe.lisp
msgid "~&It has a fill pointer, currently ~d"
msgstr "~&Itway ashay away illfay ointerpay, urrentlycay ~d"

#: target:code/describe.lisp
msgid "~&It has no fill pointer."
msgstr "~&Itway ashay onay illfay ointerpay."

#: target:code/describe.lisp
msgid "~&~S is ~:[an~;a displaced~] array of rank ~A"
msgstr "~&~S isway ~:[anway~;away isplacedday~] arrayway ofway ankray ~Away"

#: target:code/describe.lisp
msgid "~%Its dimensions are ~S."
msgstr "~%Itsway imensionsday areway ~S."

#: target:code/describe.lisp
msgid "~&Its element type is specialized to ~S."
msgstr "~&Itsway elementway ypetay isway ecializedspay otay ~S."

#: target:code/describe.lisp
msgid "~&It is adjustable."
msgstr "~&Itway isway adjustableway."

#: target:code/describe.lisp
msgid "~&It is static."
msgstr "~&Itway isway taticsay."

#: target:code/describe.lisp
msgid "~&It is a prime number."
msgstr "~&Itway isway away imepray umbernay."

#: target:code/describe.lisp
msgid "~&It is a composite number."
msgstr "~&Itway isway away ompositecay umbernay."

#: target:code/describe.lisp
msgid "~&Its components are ~S and ~S."
msgstr "~&Itsway omponentscay areway ~S andway ~S."

#: target:code/describe.lisp
msgid "~&~S is an ~A hash table."
msgstr "~&~S isway anway ~Away ashhay abletay."

#: target:code/describe.lisp
msgid "~&Its size is ~D buckets."
msgstr "~&Itsway izesay isway ~D ucketsbay."

#: target:code/describe.lisp
msgid "~&Its rehash-size is ~S."
msgstr "~&Itsway ehashray-izesay isway ~S."

#: target:code/describe.lisp
msgid "~&Its rehash-threshold is ~S."
msgstr "~&Itsway ehashray-resholdthay isway ~S."

#: target:pcl/env.lisp target:code/describe.lisp
msgid "~&It currently holds ~d entries."
msgstr "~&Itway urrentlycay oldshay ~d entriesway."

#: target:code/describe.lisp
msgid "~&It is weak ~A table."
msgstr "~&Itway isway eakway ~Away abletay."

#: target:code/describe.lisp
msgid "~&~d symbols total: ~d internal and ~d external."
msgstr "~&~d ymbolssay otaltay: ~d internalway andway ~d externalway."

#: target:code/describe.lisp
msgid "~&~@(~A documentation:~)~&  ~A"
msgstr "~&~@(~Away ocumentationday:~)~&  ~Away"

#: target:code/describe.lisp
msgid "~&Its ~(~A~) argument types are:~%  ~S"
msgstr "~&Itsway ~(~Away~) argumentway ypestay areway:~%  ~S"

#: target:code/describe.lisp
msgid "~&Its result type is:~%  ~S"
msgstr "~&Itsway esultray ypetay isway:~%  ~S"

#: target:code/describe.lisp
msgid ""
"~&It is currently declared ~(~A~);~\n"
"\t\t ~:[no~;~] expansion is available."
msgstr ""
"~&Itway isway urrentlycay eclaredday ~(~Away~);~\n"
"\t\t ~:[onay~;~] expansionway isway availableway."

#: target:code/describe.lisp
msgid "~&~@(~@[~A ~]arguments:~%~)"
msgstr "~&~@(~@[~Away ~]argumentsway:~%~)"

#: target:code/describe.lisp
msgid "  There are no arguments."
msgstr "  Erethay areway onay argumentsway."

#: target:code/describe.lisp
msgid "~&Its closure environment is:"
msgstr "~&Itsway osureclay environmentway isway:"

#: target:code/describe.lisp
msgid "~&Its definition is:~%  ~S"
msgstr "~&Itsway efinitionday isway:~%  ~S"

#: target:code/describe.lisp
msgid "~&On ~A it was compiled from:"
msgstr "~&Onway ~Away itway asway ompiledcay omfray:"

#: target:code/describe.lisp
msgid "~&~A~%  Created: "
msgstr "~&~Away~%  Eatedcray: "

#: target:code/describe.lisp
msgid "~&  Comment: ~A"
msgstr "~&  Ommentcay: ~Away"

#: target:code/describe.lisp
msgid "  There is no argument information available."
msgstr "  Erethay isway onay argumentway informationway availableway."

#: target:code/describe.lisp
msgid "Macro-function: ~S"
msgstr "Acromay-unctionfay: ~S"

#: target:code/describe.lisp
msgid "Function: ~S"
msgstr "Unctionfay: ~S"

#: target:code/describe.lisp
msgid "~S is a function."
msgstr "~S isway away unctionfay."

#: target:code/describe.lisp
msgid "~&It is an unknown type of function."
msgstr "~&Itway isway anway unknownway ypetay ofway unctionfay."

#: target:code/describe.lisp
msgid "~&~A is an ~A symbol in the ~A package."
msgstr "~&~Away isway anway ~Away ymbolsay inway ethay ~Away ackagepay."

#: target:code/describe.lisp
msgid "~&~A is an uninterned symbol."
msgstr "~&~Away isway anway uninternedway ymbolsay."

#: target:code/describe.lisp
msgid "~&~@<It is an alien at #x~8,'0X of type ~3I~:_~S.~:>~%"
msgstr ""
"~&~@<Itway isway anway alienway atway #x~8,'0X ofway ypetay ~3Iway~:_~S.~:>~%"

#: target:code/describe.lisp
msgid "~@<Its current value is ~3I~:_~S.~:>"
msgstr "~@<Itsway urrentcay aluevay isway ~3Iway~:_~S.~:>"

#: target:code/describe.lisp
msgid "~&It is a ~A with expansion: ~S."
msgstr "~&Itway isway away ~Away ithway expansionway: ~S."

#: target:code/describe.lisp
msgid "~&It is a ~A; its value is ~S."
msgstr "~&Itway isway away ~Away; itsway aluevay isway ~S."

#: target:code/describe.lisp
msgid "~&It is a ~A; no current value."
msgstr "~&Itway isway away ~Away; onay urrentcay aluevay."

#: target:code/describe.lisp
msgid "~&Its declared type is ~S."
msgstr "~&Itsway eclaredday ypetay isway ~S."

#: target:code/describe.lisp
msgid "Special form"
msgstr "Ecialspay ormfay"

#: target:code/describe.lisp
msgid "Structure"
msgstr "Ucturestray"

#: target:code/describe.lisp
msgid "Type"
msgstr "Ypetay"

#: target:code/describe.lisp
msgid "Setf macro"
msgstr "Etfsay acromay"

#: target:code/describe.lisp
msgid "~&Documentation on the ~(~A~):~%~A"
msgstr "~&Ocumentationday onway ethay ~(~Away~):~%~Away"

#: target:code/describe.lisp
msgid "~&It names a class ~A."
msgstr "~&Itway amesnay away assclay ~Away."

#: target:code/describe.lisp
msgid "~&It names a PCL class ~A."
msgstr "~&Itway amesnay away CLPAY assclay ~Away."

#: target:code/describe.lisp
msgid "~&It names a type specifier."
msgstr "~&Itway amesnay away ypetay ecifierspay."

#: target:code/describe.lisp
msgid "~&Its ~S property is ~S."
msgstr "~&Itsway ~S opertypray isway ~S."

#: target:code/describe.lisp
msgid "~&It is defined in:~&~A"
msgstr "~&Itway isway efinedday inway:~&~Away"

#: target:code/tty-inspect.lisp
msgid "~%That slot is unbound.~%"
msgstr "~%Atthay otslay isway unboundway.~%"

#: target:code/tty-inspect.lisp
msgid "~%This object contains nothing to inspect.~%~%"
msgstr "~%Isthay objectway ontainscay othingnay otay inspectway.~%~%"

#: target:code/tty-inspect.lisp
msgid "~%Enter a VALID number (~:[0-~D~;0~]).~%~%"
msgstr "~%Enterway away ALIDVAY umbernay (~:[0-~D~;0~]).~%~%"

#: target:code/tty-inspect.lisp
msgid "~%Bottom of Stack.~%"
msgstr "~%Ottombay ofway Tacksay.~%"

#: target:code/tty-inspect.lisp
msgid "~%Returning to INSPECTOR.~%"
msgstr "~%Eturningray otay INSPECTORWAY.~%"

#: target:code/tty-inspect.lisp
msgid "TTY-Inspector Help:"
msgstr "TYTAY-Inspectorway Elphay:"

#: target:code/tty-inspect.lisp
msgid "  R           -  recompute current object."
msgstr "  R           -  ecomputeray urrentcay objectway."

#: target:code/tty-inspect.lisp
msgid "  D           -  redisplay current object."
msgstr "  D           -  edisplayray urrentcay objectway."

#: target:code/tty-inspect.lisp
msgid "  U           -  Move upward through the object stack."
msgstr "  U           -  Ovemay upwardway roughthay ethay objectway tacksay."

#: target:code/tty-inspect.lisp
msgid "  <number>    -  Inspect this slot."
msgstr "  <umbernay>    -  Inspectway isthay otslay."

#: target:code/tty-inspect.lisp
msgid "  Q, E        -  Quit TTY-INSPECTOR."
msgstr "  Q, E        -  Itquay TYTAY-INSPECTORWAY."

#: target:code/tty-inspect.lisp
msgid "  ?, H, Help  -  Show this help."
msgstr "  ?, H, Elphay  -  Owshay isthay elphay."

#: target:code/tty-inspect.lisp
msgid "Unbound"
msgstr "Unboundway"

#: target:code/tty-inspect.lisp
msgid "~s is a symbol.~%"
msgstr "~s isway away ymbolsay.~%"

#: target:code/tty-inspect.lisp
msgid "Value"
msgstr "Aluevay"

#: target:code/tty-inspect.lisp
msgid "Function"
msgstr "Unctionfay"

#: target:code/tty-inspect.lisp
msgid "Plist"
msgstr "Istplay"

#: target:code/tty-inspect.lisp
msgid "Package"
msgstr "Ackagepay"

#: target:code/tty-inspect.lisp
msgid "~s is an instance of ~s.~%"
msgstr "~s isway anway instanceway ofway ~s.~%"

#: target:code/tty-inspect.lisp
msgid "- (slot is unbound)"
msgstr "- (otslay isway unboundway)"

#: target:code/tty-inspect.lisp
msgid "~s is a ~(~A~).~%"
msgstr "~s isway away ~(~Away~).~%"

#: target:code/tty-inspect.lisp
msgid "Function ~s.~@[~%Argument List: ~a~]."
msgstr "Unctionfay ~s.~@[~%Argumentway Istlay: ~away~]."

#: target:code/tty-inspect.lisp
msgid "Object is a ~:[~;displaced ~]vector of length ~d.~%"
msgstr "Objectway isway away ~:[~;isplacedday ~]ectorvay ofway engthlay ~d.~%"

#: target:code/tty-inspect.lisp
msgid "Object is a LIST of length ~d.~%"
msgstr "Objectway isway away ISTLAY ofway engthlay ~d.~%"

#: target:code/tty-inspect.lisp
msgid "Object is a CONS.~%"
msgstr "Objectway isway away ONSCAY.~%"

#: target:code/tty-inspect.lisp
msgid ""
"Object is ~:[a displaced~;an~] array of ~a.~%~\n"
"                       Its dimensions are ~s.~%"
msgstr ""
"Objectway isway ~:[away isplacedday~;anway~] arrayway ofway ~away.~%~\n"
"                       Itsway imensionsday areway ~s.~%"

#: target:code/tty-inspect.lisp
msgid "Object is an atom.~%"
msgstr "Objectway isway anway atomway.~%"

#: target:code/format-time.lisp
msgid ""
"Format-Universal-Time formats a string containing the time and date\n"
"   given by universal-time in a common manner.  The destination is any\n"
"   destination which can be accepted by the Format function.  The\n"
"   timezone keyword is an integer specifying hours west of Greenwich.\n"
"   The style keyword can be :short (numeric date), :long (months and\n"
"   weekdays expressed as words), :abbreviated (like :long but words\n"
"   are abbreviated), :rfc1123 (conforming to RFC 1123), :government\n"
"   (of the form \"XX Mon XX XX:XX:XX\"), or :iso8601 (conforming to\n"
"   ISO 8601), which is the recommended way of printing date and time.\n"
"   The keyword date-first, if nil, will print the time first instead of\n"
"   the date (the default).  The print- keywords, if nil, inhibit the\n"
"   printing of the obvious part of the time/date."
msgstr ""
"Ormatfay-Universalway-Imetay ormatsfay away ingstray ontainingcay ethay "
"imetay andway ateday\n"
"   ivengay ybay universalway-imetay inway away ommoncay annermay.  Ethay "
"estinationday isway anyway\n"
"   estinationday ichwhay ancay ebay acceptedway ybay ethay Ormatfay "
"unctionfay.  Ethay\n"
"   imezonetay eywordkay isway anway integerway ecifyingspay ourshay estway "
"ofway Eenwichgray.\n"
"   Ethay tylesay eywordkay ancay ebay :ortshay (umericnay ateday), :onglay "
"(onthsmay andway\n"
"   eekdaysway expressedway asway ordsway), :abbreviatedway (ikelay :onglay "
"utbay ordsway\n"
"   areway abbreviatedway), :fcray1123 (onformingcay otay FCRAY 1123), :"
"overnmentgay\n"
"   (ofway ethay ormfay \"XXAY Onmay XXAY XXAY:XXAY:XXAY\"), orway :"
"isoway8601 (onformingcay otay\n"
"   ISOWAY 8601), ichwhay isway ethay ecommendedray ayway ofway intingpray "
"ateday andway imetay.\n"
"   Ethay eywordkay ateday-irstfay, ifway ilnay, illway intpray ethay imetay "
"irstfay insteadway ofway\n"
"   ethay ateday (ethay efaultday).  Ethay intpray- eywordskay, ifway ilnay, "
"inhibitway ethay\n"
"   intingpray ofway ethay obviousway artpay ofway ethay imetay/ateday."

#: target:code/format-time.lisp
msgid "~A: Not a valid format destination."
msgstr "~Away: Otnay away alidvay ormatfay estinationday."

#: target:code/format-time.lisp
msgid "~A: Universal-Time should be an integer."
msgstr "~Away: Universalway-Imetay ouldshay ebay anway integerway."

#: target:code/format-time.lisp
msgid "~A: Timezone should be a rational between -24 and 24."
msgstr ""
"~Away: Imezonetay ouldshay ebay away ationalray etweenbay -24 andway 24."

#: target:code/format-time.lisp
msgid "~A: Timezone is not a second (1/3600) multiple."
msgstr "~Away: Imezonetay isway otnay away econdsay (1/3600) ultiplemay."

#: target:code/format-time.lisp
msgid "~A: Unrecognized :style keyword value."
msgstr "~Away: Unrecognizedway :tylesay eywordkay aluevay."

#: target:code/format-time.lisp
msgid ""
"Format-Decoded-Time formats a string containing decoded-time\n"
"   expressed in a humanly-readable manner.  The destination is any\n"
"   destination which can be accepted by the Format function.  The\n"
"   timezone keyword is an integer specifying hours west of Greenwich.\n"
"   The style keyword can be :short (numeric date), :long (months and\n"
"   weekdays expressed as words), or :abbreviated (like :long but words are\n"
"   abbreviated).  The keyword date-first, if nil, will cause the time\n"
"   to be printed first instead of the date (the default).  The print-\n"
"   keywords, if nil, inhibit the printing of certain semi-obvious\n"
"   parts of the string."
msgstr ""
"Ormatfay-Ecodedday-Imetay ormatsfay away ingstray ontainingcay ecodedday-"
"imetay\n"
"   expressedway inway away umanlyhay-eadableray annermay.  Ethay "
"estinationday isway anyway\n"
"   estinationday ichwhay ancay ebay acceptedway ybay ethay Ormatfay "
"unctionfay.  Ethay\n"
"   imezonetay eywordkay isway anway integerway ecifyingspay ourshay estway "
"ofway Eenwichgray.\n"
"   Ethay tylesay eywordkay ancay ebay :ortshay (umericnay ateday), :onglay "
"(onthsmay andway\n"
"   eekdaysway expressedway asway ordsway), orway :abbreviatedway (ikelay :"
"onglay utbay ordsway areway\n"
"   abbreviatedway).  Ethay eywordkay ateday-irstfay, ifway ilnay, illway "
"ausecay ethay imetay\n"
"   otay ebay intedpray irstfay insteadway ofway ethay ateday (ethay "
"efaultday).  Ethay intpray-\n"
"   eywordskay, ifway ilnay, inhibitway ethay intingpray ofway ertaincay "
"emisay-obviousway\n"
"   artspay ofway ethay ingstray."

#: target:code/format-time.lisp
msgid "~A: Seconds should be an integer between 0 and 59."
msgstr "~Away: Econdssay ouldshay ebay anway integerway etweenbay 0 andway 59."

#: target:code/format-time.lisp
msgid "~A: Minutes should be an integer between 0 and 59."
msgstr "~Away: Inutesmay ouldshay ebay anway integerway etweenbay 0 andway 59."

#: target:code/format-time.lisp
msgid "~A: Hours should be an integer between 0 and 23."
msgstr "~Away: Ourshay ouldshay ebay anway integerway etweenbay 0 andway 23."

#: target:code/format-time.lisp
msgid "~A: Day should be an integer between 1 and 31."
msgstr "~Away: Ayday ouldshay ebay anway integerway etweenbay 1 andway 31."

#: target:code/format-time.lisp
msgid "~A: Month should be an integer between 1 and 12."
msgstr "~Away: Onthmay ouldshay ebay anway integerway etweenbay 1 andway 12."

#: target:code/format-time.lisp
msgid "~A: Hours should be an non-negative integer."
msgstr "~Away: Ourshay ouldshay ebay anway onnay-egativenay integerway."

#: target:code/format-time.lisp
msgid "~A: Timezone should be an integer between 0 and 32."
msgstr ""
"~Away: Imezonetay ouldshay ebay anway integerway etweenbay 0 andway 32."

#: target:code/parse-time.lisp
msgid ""
"If t, an error will be signalled if parse-time is unable\n"
"   to determine the time/date format of the string."
msgstr ""
"Ifway t, anway errorway illway ebay ignalledsay ifway arsepay-imetay isway "
"unableway\n"
"   otay etermineday ethay imetay/ateday ormatfay ofway ethay ingstray."

#: target:code/parse-time.lisp
msgid "\"~A\" is not a recognized word or abbreviation."
msgstr "\"~Away\" isway otnay away ecognizedray ordway orway abbreviationway."

#: target:code/parse-time.lisp
msgid ""
"Can't parse time/date string.~%>>> ~A~\n"
"\t\t\t\t   ~%~VT^-- Bogus character encountered here."
msgstr ""
"Ancay't arsepay imetay/ateday ingstray.~%>>> ~Away~\n"
"\t\t\t\t   ~%~TVAY^-- Ogusbay aracterchay encounteredway erehay."

#: target:code/parse-time.lisp
msgid "Unrecognized symbol: ~A"
msgstr "Unrecognizedway ymbolsay: ~Away"

#: target:code/parse-time.lisp
msgid "~D is not an AM hour, dummy."
msgstr "~D isway otnay anway AMWAY ourhay, ummyday."

#: target:code/parse-time.lisp
msgid "~A isn't AM/PM - this shouldn't happen."
msgstr "~Away isnway't AMWAY/MPAY - isthay ouldnshay't appenhay."

#: target:code/parse-time.lisp
msgid "Invalid number of days (~D) for month ~D in ~D"
msgstr "Invalidway umbernay ofway aysday (~D) orfay onthmay ~D inway ~D"

#: target:code/parse-time.lisp
msgid "Ignore."
msgstr "Ignoreway."

#: target:code/parse-time.lisp
msgid "Specified day (~@(~A~)) doesn't match actual day (~@(~A~))"
msgstr ""
"Ecifiedspay ayday (~@(~Away~)) oesnday't atchmay actualway ayday (~@(~Away~))"

#: target:code/parse-time.lisp
msgid "Unrecognized symbol in form list: ~A."
msgstr "Unrecognizedway ymbolsay inway ormfay istlay: ~Away."

#: target:code/parse-time.lisp
msgid ""
"Tries very hard to make sense out of the argument time-string and\n"
"   returns a single integer representing the universal time if\n"
"   successful.  If not, it returns nil.  If the :error-on-mismatch\n"
"   keyword is true, parse-time will signal an error instead of\n"
"   returning nil.  Default values for each part of the time/date\n"
"   can be specified by the appropriate :default- keyword.  These\n"
"   keywords can be given a numeric value or the keyword :current\n"
"   to set them to the current value.  The default-default values\n"
"   are 00:00:00 on the current date, current time-zone."
msgstr ""
"Iestray eryvay ardhay otay akemay ensesay outway ofway ethay argumentway "
"imetay-ingstray andway\n"
"   eturnsray away inglesay integerway epresentingray ethay universalway "
"imetay ifway\n"
"   uccessfulsay.  Ifway otnay, itway eturnsray ilnay.  Ifway ethay :errorway-"
"onway-ismatchmay\n"
"   eywordkay isway uetray, arsepay-imetay illway ignalsay anway errorway "
"insteadway ofway\n"
"   eturningray ilnay.  Efaultday aluesvay orfay eachway artpay ofway ethay "
"imetay/ateday\n"
"   ancay ebay ecifiedspay ybay ethay appropriateway :efaultday- eywordkay.  "
"Esethay\n"
"   eywordskay ancay ebay ivengay away umericnay aluevay orway ethay "
"eywordkay :urrentcay\n"
"   otay etsay emthay otay ethay urrentcay aluevay.  Ethay efaultday-"
"efaultday aluesvay\n"
"   areway 00:00:00 onway ethay urrentcay ateday, urrentcay imetay-onezay."

#: target:code/parse-time.lisp
msgid "\"~A\" is not a recognized time/date format."
msgstr "\"~Away\" isway otnay away ecognizedray imetay/ateday ormatfay."

#: target:code/run-program.lisp
msgid "Return any available status information on child processed. "
msgstr ""
"Eturnray anyway availableway tatussay informationway onway ildchay "
"ocessedpray. "

#: target:code/run-program.lisp
msgid "List of process structures for all active processes."
msgstr ""
"Istlay ofway ocesspray ucturesstray orfay allway activeway ocessespray."

#: target:code/run-program.lisp
msgid ""
"Return the current status of process.  The result is one of :running,\n"
"   :stopped, :exited, :signaled."
msgstr ""
"Eturnray ethay urrentcay tatussay ofway ocesspray.  Ethay esultray isway "
"oneway ofway :unningray,\n"
"   :toppedsay, :exitedway, :ignaledsay."

#: target:code/run-program.lisp
msgid "Wait for PROC to quit running for some reason.  Returns PROC."
msgstr ""
"Aitway orfay OCPRAY otay itquay unningray orfay omesay easonray.  Eturnsray "
"OCPRAY."

#: target:code/run-program.lisp
msgid "TIOCPGRP ioctl failed: ~S"
msgstr "IOCPGRPTAY ioctlway ailedfay: ~S"

#: target:code/run-program.lisp
msgid ""
"Hand SIGNAL to PROC.  If whom is :pid, use the kill Unix system call.  If\n"
"   whom is :process-group, use the killpg Unix system call.  If whom is\n"
"   :pty-process-group deliver the signal to whichever process group is "
"currently\n"
"   in the foreground."
msgstr ""
"Andhay IGNALSAY otay OCPRAY.  Ifway omwhay isway :idpay, useway ethay illkay "
"Unixway ystemsay allcay.  Ifway\n"
"   omwhay isway :ocesspray-oupgray, useway ethay illpgkay Unixway ystemsay "
"allcay.  Ifway omwhay isway\n"
"   :typay-ocesspray-oupgray eliverday ethay ignalsay otay icheverwhay "
"ocesspray oupgray isway urrentlycay\n"
"   inway ethay oregroundfay."

#: target:code/run-program.lisp
msgid "Returns T if the process is still alive, NIL otherwise."
msgstr ""
"Eturnsray T ifway ethay ocesspray isway tillsay aliveway, ILNAY otherwiseway."

#: target:code/run-program.lisp
msgid ""
"Close all streams connected to PROC and stop maintaining the status slot."
msgstr ""
"Oseclay allway eamsstray onnectedcay otay OCPRAY andway topsay aintainingmay "
"ethay tatussay otslay."

#: target:code/run-program.lisp
msgid ""
"List of file descriptors to close when RUN-PROGRAM exits due to an error."
msgstr ""
"Istlay ofway ilefay escriptorsday otay oseclay enwhay UNRAY-OGRAMPRAY "
"exitsway ueday otay anway errorway."

#: target:code/run-program.lisp
msgid ""
"List of file descriptors to close when RUN-PROGRAM returns in the parent."
msgstr ""
"Istlay ofway ilefay escriptorsday otay oseclay enwhay UNRAY-OGRAMPRAY "
"eturnsray inway ethay arentpay."

#: target:code/run-program.lisp
msgid "List of handlers installed by RUN-PROGRAM."
msgstr "Istlay ofway andlershay installedway ybay UNRAY-OGRAMPRAY."

#: target:code/run-program.lisp
msgid "Returns the master fd, the slave fd, and the name of the tty"
msgstr ""
"Eturnsray ethay astermay dfay, ethay aveslay dfay, andway ethay amenay ofway "
"ethay tytay"

#: target:code/run-program.lisp
msgid "Could not find a pty."
msgstr "Ouldcay otnay indfay away typay."

#: target:code/run-program.lisp
msgid "Could not UNIX:UNIX-DUP ~D: ~A"
msgstr "Ouldcay otnay UNIXWAY:UNIXWAY-UPDAY ~D: ~Away"

#: target:code/run-program.lisp
msgid ""
"RUN-PROGRAM creates a new process and runs the unix program in the\n"
"   file specified by the simple-string PROGRAM.  ARGS are the standard\n"
"   arguments that can be passed to a Unix program, for no arguments\n"
"   use NIL (which means just the name of the program is passed as arg 0).\n"
"\n"
"   RUN-PROGRAM will either return NIL or a PROCESS structure.  See the CMU\n"
"   Common Lisp Users Manual for details about the PROCESS structure.\n"
"\n"
"   The keyword arguments have the following meanings:\n"
"     :env -\n"
"        An A-LIST mapping keyword environment variables to simple-string\n"
"\tvalues.\n"
"     :wait -\n"
"        If non-NIL (default), wait until the created process finishes.  If\n"
"        NIL, continue running Lisp until the program finishes.\n"
"     :pty -\n"
"        Either T, NIL, or a stream.  Unless NIL, the subprocess is "
"established\n"
"\tunder a PTY.  If :pty is a stream, all output to this pty is sent to\n"
"\tthis stream, otherwise the PROCESS-PTY slot is filled in with a stream\n"
"\tconnected to pty that can read output and write input.\n"
"     :input -\n"
"        Either T, NIL, a pathname, a stream, or :STREAM.  If T, the "
"standard\n"
"\tinput for the current process is inherited.  If NIL, /dev/null\n"
"\tis used.  If a pathname, the file so specified is used.  If a stream,\n"
"\tall the input is read from that stream and send to the subprocess.  If\n"
"\t:STREAM, the PROCESS-INPUT slot is filled in with a stream that sends \n"
"\tits output to the process. Defaults to NIL.\n"
"     :if-input-does-not-exist (when :input is the name of a file) -\n"
"        can be one of:\n"
"           :error - generate an error.\n"
"           :create - create an empty file.\n"
"           nil (default) - return nil from run-program.\n"
"     :output -\n"
"        Either T, NIL, a pathname, a stream, or :STREAM.  If T, the "
"standard\n"
"\toutput for the current process is inherited.  If NIL, /dev/null\n"
"\tis used.  If a pathname, the file so specified is used.  If a stream,\n"
"\tall the output from the process is written to this stream. If\n"
"\t:STREAM, the PROCESS-OUTPUT slot is filled in with a stream that can\n"
"\tbe read to get the output. Defaults to NIL.\n"
"     :if-output-exists (when :output is the name of a file) -\n"
"        can be one of:\n"
"           :error (default) - generates an error if the file already "
"exists.\n"
"           :supersede - output from the program supersedes the file.\n"
"           :append - output from the program is appended to the file.\n"
"           nil - run-program returns nil without doing anything.\n"
"     :error and :if-error-exists - \n"
"        Same as :output and :if-output-exists, except that :error can also "
"be\n"
"\tspecified as :output in which case all error output is routed to the\n"
"\tsame place as normal output.\n"
"     :status-hook -\n"
"        This is a function the system calls whenever the status of the\n"
"        process changes.  The function takes the process as an argument."
msgstr ""
"UNRAY-OGRAMPRAY eatescray away ewnay ocesspray andway unsray ethay unixway "
"ogrampray inway ethay\n"
"   ilefay ecifiedspay ybay ethay implesay-ingstray OGRAMPRAY.  ARGSWAY "
"areway ethay tandardsay\n"
"   argumentsway atthay ancay ebay assedpay otay away Unixway ogrampray, "
"orfay onay argumentsway\n"
"   useway ILNAY (ichwhay eansmay ustjay ethay amenay ofway ethay ogrampray "
"isway assedpay asway argway 0).\n"
"\n"
"   UNRAY-OGRAMPRAY illway eitherway eturnray ILNAY orway away OCESSPRAY "
"ucturestray.  Eesay ethay MUCAY\n"
"   Ommoncay Isplay Usersway Anualmay orfay etailsday aboutway ethay "
"OCESSPRAY ucturestray.\n"
"\n"
"   Ethay eywordkay argumentsway avehay ethay ollowingfay eaningsmay:\n"
"     :envway -\n"
"        Anway Away-ISTLAY appingmay eywordkay environmentway ariablesvay "
"otay implesay-ingstray\n"
"\taluesvay.\n"
"     :aitway -\n"
"        Ifway onnay-ILNAY (efaultday), aitway untilway ethay eatedcray "
"ocesspray inishesfay.  Ifway\n"
"        ILNAY, ontinuecay unningray Isplay untilway ethay ogrampray "
"inishesfay.\n"
"     :typay -\n"
"        Eitherway T, ILNAY, orway away eamstray.  Unlessway ILNAY, ethay "
"ubprocesssay isway establishwayedway\n"
"\tunderway away TYPAY.  Ifway :typay isway away eamstray, allway outputway "
"otay isthay typay isway entsay otay\n"
"\tisthay eamstray, otherwiseway ethay OCESSPRAY-TYPAY otslay isway illedfay "
"inway ithway away eamstray\n"
"\tonnectedcay otay typay atthay ancay eadray outputway andway itewray "
"inputway.\n"
"     :inputway -\n"
"        Eitherway T, ILNAY, away athnamepay, away eamstray, orway :"
"EAMSTRAY.  Ifway T, ethay tandardsay\n"
"\tinputway orfay ethay urrentcay ocesspray isway inheritedway.  Ifway "
"ILNAY, /evday/ullnay\n"
"\tisway usedway.  Ifway away athnamepay, ethay ilefay osay ecifiedspay isway "
"usedway.  Ifway away eamstray,\n"
"\tallway ethay inputway isway eadray omfray atthay eamstray andway endsay "
"otay ethay ubprocesssay.  Ifway\n"
"\t:EAMSTRAY, ethay OCESSPRAY-INPUTWAY otslay isway illedfay inway ithway "
"away eamstray atthay endssay \n"
"\titsway outputway otay ethay ocesspray. Efaultsday otay ILNAY.\n"
"     :ifway-inputway-oesday-otnay-existway (enwhay :inputway isway ethay "
"amenay ofway away ilefay) -\n"
"        ancay ebay oneway ofway:\n"
"           :errorway - enerategay anway errorway.\n"
"           :eatecray - eatecray anway emptyway ilefay.\n"
"           ilnay (efaultday) - eturnray ilnay omfray unray-ogrampray.\n"
"     :outputway -\n"
"        Eitherway T, ILNAY, away athnamepay, away eamstray, orway :"
"EAMSTRAY.  Ifway T, ethay tandardsay\n"
"\toutputway orfay ethay urrentcay ocesspray isway inheritedway.  Ifway "
"ILNAY, /evday/ullnay\n"
"\tisway usedway.  Ifway away athnamepay, ethay ilefay osay ecifiedspay isway "
"usedway.  Ifway away eamstray,\n"
"\tallway ethay outputway omfray ethay ocesspray isway ittenwray otay isthay "
"eamstray. Ifway\n"
"\t:EAMSTRAY, ethay OCESSPRAY-OUTPUTWAY otslay isway illedfay inway ithway "
"away eamstray atthay ancay\n"
"\tebay eadray otay etgay ethay outputway. Efaultsday otay ILNAY.\n"
"     :ifway-outputway-existsway (enwhay :outputway isway ethay amenay ofway "
"away ilefay) -\n"
"        ancay ebay oneway ofway:\n"
"           :errorway (efaultday) - eneratesgay anway errorway ifway ethay "
"ilefay alreadyway existsway.\n"
"           :upersedesay - outputway omfray ethay ogrampray upersedessay "
"ethay ilefay.\n"
"           :appendway - outputway omfray ethay ogrampray isway appendedway "
"otay ethay ilefay.\n"
"           ilnay - unray-ogrampray eturnsray ilnay ithoutway oingday "
"anythingway.\n"
"     :errorway andway :ifway-errorway-existsway - \n"
"        Amesay asway :outputway andway :ifway-outputway-existsway, exceptway "
"atthay :errorway ancay alsoway ebay\n"
"\tecifiedspay asway :outputway inway ichwhay asecay allway errorway "
"outputway isway outedray otay ethay\n"
"\tamesay aceplay asway ormalnay outputway.\n"
"     :tatussay-ookhay -\n"
"        Isthay isway away unctionfay ethay ystemsay allscay eneverwhay ethay "
"tatussay ofway ethay\n"
"        ocesspray angeschay.  Ethay unctionfay akestay ethay ocesspray asway "
"anway argumentway."

#: target:code/run-program.lisp
msgid "All args to program must be simple strings -- ~S."
msgstr "Allway argsway otay ogrampray ustmay ebay implesay ingsstray -- ~S."

#: target:code/run-program.lisp
msgid "No such program: ~S"
msgstr "Onay uchsay ogrampray: ~S"

#: target:code/run-program.lisp
msgid "Could not fork child process: ~A"
msgstr "Ouldcay otnay orkfay ildchay ocesspray: ~Away"

#: target:code/run-program.lisp
msgid "Could not select on sub-process: ~A"
msgstr "Ouldcay otnay electsay onway ubsay-ocesspray: ~Away"

#: target:code/run-program.lisp
msgid "Could not read input from sub-process: ~A"
msgstr "Ouldcay otnay eadray inputway omfray ubsay-ocesspray: ~Away"

#: target:code/run-program.lisp
msgid "Could not open \"/dev/null\": ~A"
msgstr "Ouldcay otnay openway \"/evday/ullnay\": ~Away"

#: target:code/run-program.lisp
msgid "Could not create pipe: ~A"
msgstr "Ouldcay otnay eatecray ipepay: ~Away"

#: target:code/run-program.lisp
msgid "Direction must be either :INPUT or :OUTPUT, not ~S"
msgstr "Irectionday ustmay ebay eitherway :INPUTWAY orway :OUTPUTWAY, otnay ~S"

#: target:code/run-program.lisp
msgid "Could not duplicate file descriptor: ~A"
msgstr "Ouldcay otnay uplicateday ilefay escriptorday: ~Away"

#: target:code/run-program.lisp
msgid "Could not open a temporary file in /tmp"
msgstr "Ouldcay otnay openway away emporarytay ilefay inway /mptay"

#: target:code/run-program.lisp
msgid "Cound not create pipe: ~A"
msgstr "Oundcay otnay eatecray ipepay: ~Away"

#: target:code/run-program.lisp
msgid "Invalid option to run-program: ~S"
msgstr "Invalidway optionway otay unray-ogrampray: ~S"

#: target:code/stream-vector-io.lisp
msgid "endian-swap ~a is illegal for element-type of vector ~a"
msgstr ""
"endianway-wapsay ~away isway illegalway orfay elementway-ypetay ofway "
"ectorvay ~away"

#: target:code/stream-vector-io.lisp
msgid ""
"Read from Stream into Vector.  The Start and End indices of Vector\n"
"  is in octets, and must be an multiple of the octets per element of\n"
"  the vector element.  The keyword argument :Endian-Swap specifies any\n"
"  endian swapping to be done. "
msgstr ""
"Eadray omfray Eamstray intoway Ectorvay.  Ethay Tartsay andway Endway "
"indicesway ofway Ectorvay\n"
"  isway inway octetsway, andway ustmay ebay anway ultiplemay ofway ethay "
"octetsway erpay elementway ofway\n"
"  ethay ectorvay elementway.  Ethay eywordkay argumentway :Endianway-Wapsay "
"ecifiesspay anyway\n"
"  endianway wappingsay otay ebay oneday. "

#: target:code/stream-vector-io.lisp
msgid "Wrong vector type ~a for read-vector on stream ~a."
msgstr ""
"Ongwray ectorvay ypetay ~away orfay eadray-ectorvay onway eamstray ~away."

#: target:code/stream-vector-io.lisp
msgid ""
"Write Vector to Stream.  The Start and End indices of Vector is in\n"
"  octets, and must be an multiple of the octets per element of the\n"
"  vector element.  The keyword argument :Endian-Swap specifies any\n"
"  endian swapping to be done. "
msgstr ""
"Itewray Ectorvay otay Eamstray.  Ethay Tartsay andway Endway indicesway "
"ofway Ectorvay isway inway\n"
"  octetsway, andway ustmay ebay anway ultiplemay ofway ethay octetsway erpay "
"elementway ofway ethay\n"
"  ectorvay elementway.  Ethay eywordkay argumentway :Endianway-Wapsay "
"ecifiesspay anyway\n"
"  endianway wappingsay otay ebay oneday. "

#: target:code/foreign.lisp
msgid "Could not create temporary file ~S: ~A"
msgstr "Ouldcay otnay eatecray emporarytay ilefay ~S: ~Away"

#: target:code/foreign.lisp
msgid "Not enough memory left."
msgstr "Otnay enoughway emorymay eftlay."

#: target:code/foreign.lisp
msgid "Make sure the header starts with the ELF magic value."
msgstr ""
"Akemay uresay ethay eaderhay tartssay ithway ethay ELFWAY agicmay aluevay."

#: target:code/foreign.lisp
msgid "Return the `osabi' field in the padding of the ELF file."
msgstr ""
"Eturnray ethay `osabiway' ieldfay inway ethay addingpay ofway ethay ELFWAY "
"ilefay."

#: target:code/foreign.lisp
msgid "Given a file type number, determine whether the file is executable."
msgstr ""
"Ivengay away ilefay ypetay umbernay, etermineday etherwhay ethay ilefay "
"isway executableway."

#: target:code/foreign.lisp
msgid "Make sure the header starts with the mach-o magic value."
msgstr ""
"Akemay uresay ethay eaderhay tartssay ithway ethay achmay-o agicmay aluevay."

#: target:code/foreign.lisp
msgid ";;; Loading object file...~%"
msgstr ";;; Oadinglay objectway ilefay...~%"

#: target:code/foreign.lisp
msgid "Could not open ~S: ~A"
msgstr "Ouldcay otnay openway ~S: ~Away"

#: target:code/foreign.lisp
msgid "~A is not an ELF file."
msgstr "~Away isway otnay anway ELFWAY ilefay."

#: target:code/foreign.lisp
msgid "~A is not a ~A executable, it's a ~A executable."
msgstr ""
"~Away isway otnay away ~Away executableway, itway's away ~Away executableway."

#: target:code/foreign.lisp
msgid "~A is not executable."
msgstr "~Away isway otnay executableway."

#: target:code/foreign.lisp
msgid ""
"Parse symbol table file created by load-foreign script.  Modified\n"
"to skip undefined symbols which don't have an address."
msgstr ""
"Arsepay ymbolsay abletay ilefay eatedcray ybay oadlay-oreignfay riptscay.  "
"Odifiedmay\n"
"otay kipsay undefinedway ymbolssay ichwhay onday't avehay anway addressway."

#: target:code/foreign.lisp
msgid ";;; Parsing symbol table...~%"
msgstr ";;; Arsingpay ymbolsay abletay...~%"

#: target:code/foreign.lisp
msgid ""
"Load-foreign loads a list of C object files into a running Lisp.  The files\n"
"  argument should be a single file or a list of files.  The files may be\n"
"  specified as namestrings or as pathnames.  The libraries argument should "
"be a\n"
"  list of library files as would be specified to ld.  They will be searched "
"in\n"
"  the order given.  The default is just \"-lc\", i.e., the C library.  The\n"
"  base-file argument is used to specify a file to use as the starting place "
"for\n"
"  defined symbols.  The default is the C start up code for Lisp.  The env\n"
"  argument is the Unix environment variable definitions for the invocation "
"of\n"
"  the linker.  The default is the environment passed to Lisp."
msgstr ""
"Oadlay-oreignfay oadslay away istlay ofway C objectway ilesfay intoway away "
"unningray Isplay.  Ethay ilesfay\n"
"  argumentway ouldshay ebay away inglesay ilefay orway away istlay ofway "
"ilesfay.  Ethay ilesfay aymay ebay\n"
"  ecifiedspay asway amestringsnay orway asway athnamespay.  Ethay "
"ibrarieslay argumentway ouldshay ebay away\n"
"  istlay ofway ibrarylay ilesfay asway ouldway ebay ecifiedspay otay dlay.  "
"Eythay illway ebay earchedsay inway\n"
"  ethay orderway ivengay.  Ethay efaultday isway ustjay \"-clay\", i.e., "
"ethay C ibrarylay.  Ethay\n"
"  asebay-ilefay argumentway isway usedway otay ecifyspay away ilefay otay "
"useway asway ethay tartingsay aceplay orfay\n"
"  efinedday ymbolssay.  Ethay efaultday isway ethay C tartsay upway odecay "
"orfay Isplay.  Ethay envway\n"
"  argumentway isway ethay Unixway environmentway ariablevay efinitionsday "
"orfay ethay invocationway ofway\n"
"  ethay inkerlay.  Ethay efaultday isway ethay environmentway assedpay otay "
"Isplay."

#: target:code/foreign.lisp
msgid ";;; Running library:load-foreign.csh...~%"
msgstr ";;; Unningray ibrarylay:oadlay-oreignfay.shcay...~%"

#: target:code/foreign.lisp
msgid ""
"Object file is wrong format, so can't load-foreign:~\n"
"\t\t  ~%  ~S"
msgstr ""
"Objectway ilefay isway ongwray ormatfay, osay ancay't oadlay-oreignfay:~\n"
"\t\t  ~%  ~S"

#: target:code/foreign.lisp
msgid ""
"Object file is not relocatable, so can't load-foreign:~\n"
"\t\t  ~%  ~S"
msgstr ""
"Objectway ilefay isway otnay elocatableray, osay ancay't oadlay-oreignfay:~\n"
"\t\t  ~%  ~S"

#: target:code/foreign.lisp
msgid "Could not run library:load-foreign.csh"
msgstr "Ouldcay otnay unray ibrarylay:oadlay-oreignfay.shcay"

#: target:code/foreign.lisp
msgid "library:load-foreign.csh failed:~%~A"
msgstr "ibrarylay:oadlay-oreignfay.shcay ailedfay:~%~Away"

#: target:code/foreign.lisp
msgid ";;; Done.~%"
msgstr ";;; Oneday.~%"

#: target:code/foreign.lisp
msgid "Lazy function call binding"
msgstr "Azylay unctionfay allcay indingbay"

#: target:code/foreign.lisp
msgid "Immediate function call binding"
msgstr "Immediateway unctionfay allcay indingbay"

#: target:code/foreign.lisp
msgid "Mask of binding time value"
msgstr "Askmay ofway indingbay imetay aluevay"

#: target:code/foreign.lisp
msgid ""
"If set the symbols of the loaded object and its dependencies are\n"
"   made visible as if the object were linked directly into the program"
msgstr ""
"Ifway etsay ethay ymbolssay ofway ethay oadedlay objectway andway itsway "
"ependenciesday areway\n"
"   ademay isiblevay asway ifway ethay objectway ereway inkedlay irectlyday "
"intoway ethay ogrampray"

#: target:code/foreign.lisp
msgid "Can't open global symbol table: ~S"
msgstr "Ancay't openway obalglay ymbolsay abletay: ~S"

#: target:code/foreign.lisp
msgid "Can't open object ~S: ~S"
msgstr "Ancay't openway objectway ~S: ~S"

#: target:code/foreign.lisp
msgid "LOAD-OBJECT-FILE: Unresolved symbols in file ~S: ~S"
msgstr "OADLAY-OBJECTWAY-ILEFAY: Unresolvedway ymbolssay inway ilefay ~S: ~S"

#: target:code/foreign.lisp
msgid "Couldn't open library ~S: ~S"
msgstr "Ouldncay't openway ibrarylay ~S: ~S"

#: target:code/foreign.lisp
msgid "Reloaded library ~S~%"
msgstr "Eloadedray ibrarylay ~S~%"

#: target:code/foreign.lisp
msgid "Ignore library and continue"
msgstr "Ignoreway ibrarylay andway ontinuecay"

#: target:code/foreign.lisp
msgid "Try reloading again"
msgstr "Ytray eloadingray againway"

#: target:code/foreign.lisp
msgid "Choose new library path"
msgstr "Oosechay ewnay ibrarylay athpay"

#: target:code/foreign.lisp
msgid "Enter new library path: "
msgstr "Enterway ewnay ibrarylay athpay: "

#: target:code/foreign.lisp
msgid ""
"Load C object files into the running Lisp. The FILES argument\n"
"should be a single file or a list of files. The files may be specified\n"
"as namestrings or as pathnames. The LIBRARIES argument should be a\n"
"list of library files as would be specified to ld. They will be\n"
"searched in the order given. The default is just \"-lc\", i.e., the C\n"
"library. The BASE-FILE argument is used to specify a file to use as\n"
"the starting place for defined symbols. The default is the C start up\n"
"code for Lisp. The ENV argument is the Unix environment variable\n"
"definitions for the invocation of the linker. The default is the\n"
"environment passed to Lisp."
msgstr ""
"Oadlay C objectway ilesfay intoway ethay unningray Isplay. Ethay ILESFAY "
"argumentway\n"
"ouldshay ebay away inglesay ilefay orway away istlay ofway ilesfay. Ethay "
"ilesfay aymay ebay ecifiedspay\n"
"asway amestringsnay orway asway athnamespay. Ethay IBRARIESLAY argumentway "
"ouldshay ebay away\n"
"istlay ofway ibrarylay ilesfay asway ouldway ebay ecifiedspay otay dlay. "
"Eythay illway ebay\n"
"earchedsay inway ethay orderway ivengay. Ethay efaultday isway ustjay \"-clay"
"\", i.e., ethay C\n"
"ibrarylay. Ethay ASEBAY-ILEFAY argumentway isway usedway otay ecifyspay away "
"ilefay otay useway asway\n"
"ethay tartingsay aceplay orfay efinedday ymbolssay. Ethay efaultday isway "
"ethay C tartsay upway\n"
"odecay orfay Isplay. Ethay ENVWAY argumentway isway ethay Unixway "
"environmentway ariablevay\n"
"efinitionsday orfay ethay invocationway ofway ethay inkerlay. Ethay "
"efaultday isway ethay\n"
"environmentway assedpay otay Isplay."

#: target:code/foreign.lisp
msgid ";;; Opening as shared library ~A ...~%"
msgstr ";;; Openingway asway aredshay ibrarylay ~Away ...~%"

#: target:code/foreign.lisp
msgid ";;; Trying as object file ~A...~%"
msgstr ";;; Yingtray asway objectway ilefay ~Away...~%"

#: target:code/foreign.lisp
msgid ";;; Running ~A...~%"
msgstr ";;; Unningray ~Away...~%"

#: target:code/foreign.lisp
msgid "File does not exist: ~A."
msgstr "Ilefay oesday otnay existway: ~Away."

#: target:code/foreign.lisp
msgid "Could not run ~A"
msgstr "Ouldcay otnay unray ~Away"

#: target:code/foreign.lisp
msgid "~A failed:~%~A"
msgstr "~Away ailedfay:~%~Away"

#: target:code/internet.lisp
msgid "AList of socket kinds and protocol values."
msgstr "Alistway ofway ocketsay indskay andway otocolpray aluesvay."

#: target:code/internet.lisp
msgid "Internet protocol :DATA-GRAM is deprecated. Using :DATAGRAM"
msgstr ""
"Internetway otocolpray :ATADAY-AMGRAY isway eprecatedday. Usingway :"
"ATAGRAMDAY"

#: target:code/internet.lisp
msgid "Invalid kind (~S) for internet domain sockets."
msgstr "Invalidway indkay (~S) orfay internetway omainday ocketssay."

#: target:code/internet.lisp
msgid ""
"Return a host-entry for the given host. The host may be an address\n"
"  string or an IP address in host order."
msgstr ""
"Eturnray away osthay-entryway orfay ethay ivengay osthay. Ethay osthay aymay "
"ebay anway addressway\n"
"  ingstray orway anway IPWAY addressway inway osthay orderway."

#: target:code/internet.lisp
msgid "Error creating socket: ~A"
msgstr "Errorway eatingcray ocketsay: ~Away"

#: target:code/internet.lisp
msgid "Error connecting socket to [~A]: ~A"
msgstr "Errorway onnectingcay ocketsay otay [~Away]: ~Away"

#: target:code/internet.lisp
msgid "Error binding socket to path ~a: ~a"
msgstr "Errorway indingbay ocketsay otay athpay ~away: ~away"

#: target:code/internet.lisp
msgid "Error listening to socket: ~A"
msgstr "Errorway isteninglay otay ocketsay: ~Away"

#: target:code/internet.lisp
msgid "Error accepting a connection: ~A"
msgstr "Errorway acceptingway away onnectioncay: ~Away"

#: target:code/internet.lisp
msgid "bind Socket to (local) Host and Port"
msgstr "indbay Ocketsay otay (ocallay) Osthay andway Ortpay"

#: target:code/internet.lisp
msgid "Unknown host: ~S."
msgstr "Unknownway osthay: ~S."

#: target:code/internet.lisp
msgid "Error binding socket to port ~A: ~A"
msgstr "Errorway indingbay ocketsay otay ortpay ~Away: ~Away"

#: target:code/internet.lisp
msgid "The host may be an address string or an IP address in host order."
msgstr ""
"Ethay osthay aymay ebay anway addressway ingstray orway anway IPWAY "
"addressway inway osthay orderway."

#: target:code/internet.lisp
msgid "Error connecting socket to [~A:~A]: ~A"
msgstr "Errorway onnectingcay ocketsay otay [~Away:~Away]: ~Away"

#: target:code/internet.lisp
msgid "Get an integer value socket option."
msgstr "Etgay anway integerway aluevay ocketsay optionway."

#: target:code/internet.lisp
msgid "Set an integer value socket option."
msgstr "Etsay anway integerway aluevay ocketsay optionway."

#: target:code/internet.lisp
msgid "Error ~S setting socket option on socket ~D."
msgstr "Errorway ~S ettingsay ocketsay optionway onway ocketsay ~D."

#: target:code/internet.lisp
msgid "Error closing socket: ~A"
msgstr "Errorway osingclay ocketsay: ~Away"

#: target:code/internet.lisp
msgid "Return the peer host address and port in host order."
msgstr ""
"Eturnray ethay eerpay osthay addressway andway ortpay inway osthay orderway."

#: target:code/internet.lisp
msgid "Error ~s getting peer host and port on FD ~d."
msgstr "Errorway ~s ettinggay eerpay osthay andway ortpay onway DFAY ~d."

#: target:code/internet.lisp
msgid "Error ~s getting socket host and port on FD ~d."
msgstr "Errorway ~s ettinggay ocketsay osthay andway ortpay onway DFAY ~d."

#: target:code/internet.lisp
msgid "Ignore it"
msgstr "Ignoreway itway"

#: target:code/internet.lisp
msgid "Error recving oob data on ~A: ~A"
msgstr "Errorway ecvingray oobway ataday onway ~Away: ~Away"

#: target:code/internet.lisp
msgid "No oob handler defined for ~S on ~A"
msgstr "Onay oobway andlerhay efinedday orfay ~S onway ~Away"

#: target:code/internet.lisp
msgid "Got a SIGURG, but couldn't find any out-of-band data."
msgstr ""
"Otgay away IGURGSAY, utbay ouldncay't indfay anyway outway-ofway-andbay "
"ataday."

#: target:code/internet.lisp
msgid "Arrange to funcall HANDLER when CHAR shows up out-of-band on FD."
msgstr ""
"Arrangeway otay uncallfay ANDLERHAY enwhay ARCHAY owsshay upway outway-ofway-"
"andbay onway DFAY."

#: target:code/internet.lisp
msgid "Remove any handlers for CHAR on FD."
msgstr "Emoveray anyway andlershay orfay ARCHAY onway DFAY."

#: target:code/internet.lisp
msgid "Remove all handlers for FD."
msgstr "Emoveray allway andlershay orfay DFAY."

#: target:code/internet.lisp
msgid "Error sending ~S OOB to across ~A: ~A"
msgstr "Errorway endingsay ~S OOBWAY otay acrossway ~Away: ~Away"

#: target:code/internet.lisp
msgid ""
"A packaging of the unix recvfrom call.  Returns three values:\n"
"bytecount, source address as integer, and source port.  bytecount\n"
"can of course be negative, to indicate faults."
msgstr ""
"Away ackagingpay ofway ethay unixway ecvfromray allcay.  Eturnsray reethay "
"aluesvay:\n"
"ytecountbay, ourcesay addressway asway integerway, andway ourcesay ortpay.  "
"ytecountbay\n"
"ancay ofway oursecay ebay egativenay, otay indicateway aultsfay."

#: target:code/internet.lisp
msgid "A packaging of the unix sendto call.  Return value like sendto"
msgstr ""
"Away ackagingpay ofway ethay unixway endtosay allcay.  Eturnray aluevay "
"ikelay endtosay"

#: target:code/internet.lisp
msgid ""
"A packaging of the unix shutdown call.  An error is signaled if shutdown "
"fails."
msgstr ""
"Away ackagingpay ofway ethay unixway utdownshay allcay.  Anway errorway "
"isway ignaledsay ifway utdownshay ailsfay."

#: target:code/internet.lisp
msgid "Error on shutdown of socket: ~A"
msgstr "Errorway onway utdownshay ofway ocketsay: ~Away"

#: target:code/internet.lisp
msgid ""
"Return a network stream.  HOST may be an address string or an integer\n"
"IP address."
msgstr ""
"Eturnray away etworknay eamstray.  OSTHAY aymay ebay anway addressway "
"ingstray orway anway integerway\n"
"IPWAY addressway."

#: target:code/internet.lisp
msgid "Unknown host format: ~S."
msgstr "Unknownway osthay ormatfay: ~S."

#: target:code/internet.lisp
msgid "network connection to ~A"
msgstr "etworknay onnectioncay otay ~Away"

#: target:code/internet.lisp
msgid "network connection from ~D.~D.~D.~D:~D"
msgstr "etworknay onnectioncay omfray ~D.~D.~D.~D:~D"

#: target:code/wire.lisp
msgid "The wire the form we are currently evaluating came across."
msgstr ""
"Ethay ireway ethay ormfay eway areway urrentlycay evaluatingway amecay "
"acrossway."

#: target:code/wire.lisp
msgid "Unique identifier for this host."
msgstr "Uniqueway identifierway orfay isthay osthay."

#: target:code/wire.lisp
msgid "Unique identifier for this process."
msgstr "Uniqueway identifierway orfay isthay ocesspray."

#: target:code/wire.lisp
msgid "Hash table mapping local objects to the corresponding remote id."
msgstr ""
"Ashhay abletay appingmay ocallay objectsway otay ethay orrespondingcay "
"emoteray idway."

#: target:code/wire.lisp
msgid "Hash table mapping remote id's to the curresponding local object."
msgstr ""
"Ashhay abletay appingmay emoteray idway's otay ethay urrespondingcay ocallay "
"objectway."

#: target:code/wire.lisp
msgid "Next available id for remote objects."
msgstr "Extnay availableway idway orfay emoteray objectsway."

#: target:code/wire.lisp
msgid "There is a problem with ~A."
msgstr "Erethay isway away oblempray ithway ~Away."

#: target:code/wire.lisp
msgid "Received EOF on ~A."
msgstr "Eceivedray EOFWAY onway ~Away."

#: target:code/wire.lisp
msgid "Error ~A ~A: ~A."
msgstr "Errorway ~Away ~Away: ~Away."

#: target:code/wire.lisp
msgid "Returns T iff the given remote object is defined locally."
msgstr ""
"Eturnsray T iffway ethay ivengay emoteray objectway isway efinedday "
"ocallylay."

#: target:code/wire.lisp
msgid ""
"Returns T iff the two objects refer to the same (eq) object in the same\n"
"  process."
msgstr ""
"Eturnsray T iffway ethay wotay objectsway eferray otay ethay amesay (eqway) "
"objectway inway ethay amesay\n"
"  ocesspray."

#: target:code/wire.lisp
msgid ""
"Return the associated value for the given remote object. It is an error if\n"
"  the remote object was not created in this process or if\n"
"  FORGET-REMOTE-TRANSLATION has been called on this remote object."
msgstr ""
"Eturnray ethay associatedway aluevay orfay ethay ivengay emoteray objectway. "
"Itway isway anway errorway ifway\n"
"  ethay emoteray objectway asway otnay eatedcray inway isthay ocesspray "
"orway ifway\n"
"  ORGETFAY-EMOTERAY-ANSLATIONTRAY ashay eenbay alledcay onway isthay "
"emoteray objectway."

#: target:code/wire.lisp
msgid "~S is defined is a different process."
msgstr "~S isway efinedday isway away ifferentday ocesspray."

#: target:code/wire.lisp
msgid "Use the value of NIL"
msgstr "Useway ethay aluevay ofway ILNAY"

#: target:code/wire.lisp
msgid "No value for ~S -- FORGET-REMOTE-TRANSLATION was called to early."
msgstr ""
"Onay aluevay orfay ~S -- ORGETFAY-EMOTERAY-ANSLATIONTRAY asway alledcay otay "
"earlyway."

#: target:code/wire.lisp
msgid "Convert the given local object to a remote object."
msgstr ""
"Onvertcay ethay ivengay ocallay objectway otay away emoteray objectway."

#: target:code/wire.lisp
msgid ""
"Forget the translation from the given local to the corresponding remote\n"
"object. Passing that remote object to remote-object-value will new return "
"NIL."
msgstr ""
"Orgetfay ethay anslationtray omfray ethay ivengay ocallay otay ethay "
"orrespondingcay emoteray\n"
"objectway. Assingpay atthay emoteray objectway otay emoteray-objectway-"
"aluevay illway ewnay eturnray ILNAY."

#: target:code/wire.lisp
msgid ""
"Return T iff anything is in the input buffer or available on the socket."
msgstr ""
"Eturnray T iffway anythingway isway inway ethay inputway ufferbay orway "
"availableway onway ethay ocketsay."

#: target:code/wire.lisp
msgid "listening to"
msgstr "isteninglay otay"

#: target:code/wire.lisp
msgid ""
"Read data off the socket, filling the input buffer. The buffer is cleared\n"
"first. If fill-input-buffer returns, it is guarenteed that there will be at\n"
"least one byte in the input buffer. If EOF was reached, as wire-eof error\n"
"is signaled."
msgstr ""
"Eadray ataday offway ethay ocketsay, illingfay ethay inputway ufferbay. "
"Ethay ufferbay isway earedclay\n"
"irstfay. Ifway illfay-inputway-ufferbay eturnsray, itway isway uarenteedgay "
"atthay erethay illway ebay atway\n"
"eastlay oneway ytebay inway ethay inputway ufferbay. Ifway EOFWAY asway "
"eachedray, asway ireway-eofway errorway\n"
"isway ignaledsay."

#: target:code/wire.lisp
msgid "reading"
msgstr "eadingray"

#: target:code/wire.lisp
msgid "Return the next byte from the wire."
msgstr "Eturnray ethay extnay ytebay omfray ethay ireway."

#: target:code/wire.lisp
msgid ""
"Read a number off the wire. Numbers are 4 bytes in network order.\n"
"The optional argument controls weather or not the number should be "
"considered\n"
"signed (defaults to T)."
msgstr ""
"Eadray away umbernay offway ethay ireway. Umbersnay areway 4 ytesbay inway "
"etworknay orderway.\n"
"Ethay optionalway argumentway ontrolscay eatherway orway otnay ethay "
"umbernay ouldshay ebay onsiderecayd\n"
"ignedsay (efaultsday otay T)."

#: target:code/wire.lisp
msgid ""
"Reads an arbitrary integer sent by WIRE-OUTPUT-BIGNUM from the wire and\n"
"   return it."
msgstr ""
"Eadsray anway arbitraryway integerway entsay ybay IREWAY-OUTPUTWAY-IGNUMBAY "
"omfray ethay ireway andway\n"
"   eturnray itway."

#: target:code/wire.lisp
msgid "Reads a string from the wire. The first four bytes spec the size."
msgstr ""
"Eadsray away ingstray omfray ethay ireway. Ethay irstfay ourfay ytesbay "
"ecspay ethay izesay."

#: target:code/wire.lisp
msgid "Reads the next object from the wire and returns it."
msgstr ""
"Eadsray ethay extnay objectway omfray ethay ireway andway eturnsray itway."

#: target:code/wire.lisp
msgid ""
"Attempt to read symbol, ~A, of wire into non-existent ~\n"
"\t\t       package, ~A."
msgstr ""
"Attemptway otay eadray ymbolsay, ~Away, ofway ireway intoway onnay-"
"existentway ~\n"
"\t\t       ackagepay, ~Away."

#: target:code/wire.lisp
msgid "writing"
msgstr "itingwray"

#: target:code/wire.lisp
msgid "Not everything wrote."
msgstr "Otnay everythingway otewray."

#: target:code/wire.lisp
msgid ""
"Send any info still in the output buffer down the wire and clear it. "
"Nothing\n"
"harmfull will happen if called when the output buffer is empty."
msgstr ""
"Endsay anyway infoway tillsay inway ethay outputway ufferbay ownday ethay "
"ireway andway earclay itway. Othingnay\n"
"armfullhay illway appenhay ifway alledcay enwhay ethay outputway ufferbay "
"isway emptyway."

#: target:code/wire.lisp
msgid "Output the given (8-bit) byte on the wire."
msgstr "Outputway ethay ivengay (8-itbay) ytebay onway ethay ireway."

#: target:code/wire.lisp
msgid "Output the given (32-bit) number on the wire."
msgstr "Outputway ethay ivengay (32-itbay) umbernay onway ethay ireway."

#: target:code/wire.lisp
msgid ""
"Outputs an arbitrary integer, but less effeciently than WIRE-OUTPUT-NUMBER."
msgstr ""
"Outputsway anway arbitraryway integerway, utbay esslay effecientlyway anthay "
"IREWAY-OUTPUTWAY-UMBERNAY."

#: target:code/wire.lisp
msgid ""
"Output the given string. First output the length using WIRE-OUTPUT-NUMBER,\n"
"then output the bytes."
msgstr ""
"Outputway ethay ivengay ingstray. Irstfay outputway ethay engthlay usingway "
"IREWAY-OUTPUTWAY-UMBERNAY,\n"
"enthay outputway ethay ytesbay."

#: target:code/wire.lisp
msgid ""
"Output the given object on the given wire. If cache-it is T, enter this\n"
"object in the cache for future reference."
msgstr ""
"Outputway ethay ivengay objectway onway ethay ivengay ireway. Ifway achecay-"
"itway isway T, enterway isthay\n"
"objectway inway ethay achecay orfay uturefay eferenceray."

#: target:code/wire.lisp
msgid "Error: Cannot output objects of type ~s across a wire."
msgstr ""
"Errorway: Annotcay outputway objectsway ofway ypetay ~s acrossway away "
"ireway."

#: target:code/wire.lisp
msgid "Send the function and args down the wire as a funcall."
msgstr ""
"Endsay ethay unctionfay andway argsway ownday ethay ireway asway away "
"uncallfay."

#: target:code/remote.lisp
msgid "AList of wire . remote-wait structs"
msgstr "Alistway ofway ireway . emoteray-aitway uctsstray"

#: target:code/remote.lisp
msgid ""
"Evaluates the given forms remotly. No values are returned, as the remote\n"
"evaluation is asyncronus."
msgstr ""
"Evaluatesway ethay ivengay ormsfay emotlyray. Onay aluesvay areway "
"eturnedray, asway ethay emoteray\n"
"evaluationway isway asyncronusway."

#: target:code/remote.lisp
msgid ""
"Bind VARS to the multiple values of FORM (which is executed remotely). The\n"
"forms in BODY are only executed if the remote function returned (as apposed\n"
"to aborting due to a throw)."
msgstr ""
"Indbay ARSVAY otay ethay ultiplemay aluesvay ofway ORMFAY (ichwhay isway "
"executedway emotelyray). Ethay\n"
"ormsfay inway ODYBAY areway onlyway executedway ifway ethay emoteray "
"unctionfay eturnedray (asway apposedway\n"
"otay abortingway ueday otay away rowthay)."

#: target:code/remote.lisp
msgid "Remote server unwound"
msgstr "Emoteray erversay unwoundway"

#: target:code/remote.lisp
msgid ""
"Execute the single form remotly. The value of the form is returned.\n"
"  The optional form on-server-unwind is only evaluated if the server "
"unwinds\n"
"  instead of returning."
msgstr ""
"Executeway ethay inglesay ormfay emotlyray. Ethay aluevay ofway ethay ormfay "
"isway eturnedray.\n"
"  Ethay optionalway ormfay onway-erversay-unwindway isway onlyway "
"evaluatedway ifway ethay erversay unwindsway\n"
"  insteadway ofway eturningray."

#: target:code/remote.lisp
msgid ""
"Create a request server on the given port.  Whenever anyone connects to it,\n"
"   call the given function with the newly created wire and the address of "
"the\n"
"   connector.  If the function returns NIL, the connection is destroyed;\n"
"   otherwise, it is accepted.  This returns a manifestation of the server "
"that\n"
"   DESTROY-REQUEST-SERVER accepts to kill the request server."
msgstr ""
"Eatecray away equestray erversay onway ethay ivengay ortpay.  Eneverwhay "
"anyoneway onnectscay otay itway,\n"
"   allcay ethay ivengay unctionfay ithway ethay ewlynay eatedcray ireway "
"andway ethay addressway ofway ethay\n"
"   onnectorcay.  Ifway ethay unctionfay eturnsray ILNAY, ethay onnectioncay "
"isway estroyedday;\n"
"   otherwiseway, itway isway acceptedway.  Isthay eturnsray away "
"anifestationmay ofway ethay erversay atthay\n"
"   ESTROYDAY-EQUESTRAY-ERVERSAY acceptsway otay illkay ethay equestray "
"erversay."

#: target:code/remote.lisp
msgid "Quit accepting connections to the given request server."
msgstr ""
"Itquay acceptingway onnectionscay otay ethay ivengay equestray erversay."

#: target:code/remote.lisp
msgid ""
"Connect to a remote request server addressed with the given host and port\n"
"   pair.  This returns the created wire."
msgstr ""
"Onnectcay otay away emoteray equestray erversay addressedway ithway ethay "
"ivengay osthay andway ortpay\n"
"   airpay.  Isthay eturnsray ethay eatedcray ireway."

#: target:code/multi-proc.lisp
msgid "Return the real time in seconds."
msgstr "Eturnray ethay ealray imetay inway econdssay."

#: target:code/multi-proc.lisp
msgid "Return the run time in seconds"
msgstr "Eturnray ethay unray imetay inway econdssay"

#: target:code/multi-proc.lisp
msgid "Return the process state which is either Run, Killed, or a wait reason."
msgstr ""
"Eturnray ethay ocesspray tatesay ichwhay isway eitherway Unray, Illedkay, "
"orway away aitway easonray."

#: target:code/multi-proc.lisp
msgid "Returns the current process."
msgstr "Eturnsray ethay urrentcay ocesspray."

#: target:code/multi-proc.lisp
msgid "A list of all alive processes."
msgstr "Away istlay ofway allway aliveway ocessespray."

#: target:code/multi-proc.lisp
msgid "Return a list of all the live processes."
msgstr "Eturnray away istlay ofway allway ethay ivelay ocessespray."

#: target:code/multi-proc.lisp
msgid "Execute the body the scheduling disabled."
msgstr "Executeway ethay odybay ethay edulingschay isabledday."

#: target:code/multi-proc.lisp
msgid "Increaments the reference by delta in a single atomic operation"
msgstr ""
"Increamentsway ethay eferenceray ybay eltaday inway away inglesay atomicway "
"operationway"

#: target:code/multi-proc.lisp
msgid "Decrements the reference by delta in a single atomic operation"
msgstr ""
"Ecrementsday ethay eferenceray ybay eltaday inway away inglesay atomicway "
"operationway"

#: target:code/multi-proc.lisp
msgid "Atomically push object onto place."
msgstr "Atomicallyway ushpay objectway ontoway aceplay."

#: target:code/multi-proc.lisp
msgid "Atomically pop place."
msgstr "Atomicallyway oppay aceplay."

#: target:code/multi-proc.lisp
msgid ""
"Make a process which will run FUNCTION when it starts up.  By\n"
"  default the process is created in a runnable (active) state.\n"
"  If FUNCTION is NIL, the process is started in a killed state; it may\n"
"  be restarted later with process-preset.\n"
"\n"
"  :NAME\n"
"\tA name for the process displayed in process listings.\n"
"\n"
"  :RUN-REASONS\n"
"\tInitial value for process-run-reasons; defaults to (:ENABLE).  A\n"
"\tprocess needs a at least one run reason to be runnable.  Together with\n"
"\tarrest reasons, run reasons provide an alternative to process-wait for\n"
"\tcontroling whether or not a process is runnable.  To get the default\n"
"\tbehavior of MAKE-PROCESS in Allegro Common Lisp, which is to create a\n"
"\tprocess which is active but not runnable, initialize RUN-REASONS to\n"
"\tNIL.\n"
"\n"
"  :ARREST-REASONS\n"
"\tInitial value for process-arrest-reasons; defaults to NIL.  A\n"
"\tprocess must have no arrest reasons in order to be runnable.\n"
"\n"
"  :INITIAL-BINDINGS\n"
"\tAn alist of initial special bindings for the process.  At\n"
"\tstartup the new process has a fresh set of special bindings\n"
"\twith a default binding of *package* setup to the CL-USER\n"
"\tpackage.  INITIAL-BINDINGS specifies additional bindings for\n"
"\tthe process.  The cdr of each alist element is evaluated in\n"
"\tthe fresh dynamic environment and then bound to the car of the\n"
"\telement."
msgstr ""
"Akemay away ocesspray ichwhay illway unray UNCTIONFAY enwhay itway tartssay "
"upway.  Ybay\n"
"  efaultday ethay ocesspray isway eatedcray inway away unnableray "
"(activeway) tatesay.\n"
"  Ifway UNCTIONFAY isway ILNAY, ethay ocesspray isway tartedsay inway away "
"illedkay tatesay; itway aymay\n"
"  ebay estartedray aterlay ithway ocesspray-esetpray.\n"
"\n"
"  :AMENAY\n"
"\tAway amenay orfay ethay ocesspray isplayedday inway ocesspray istingslay.\n"
"\n"
"  :UNRAY-EASONSRAY\n"
"\tInitialway aluevay orfay ocesspray-unray-easonsray; efaultsday otay (:"
"ENABLEWAY).  Away\n"
"\tocesspray eedsnay away atway eastlay oneway unray easonray otay ebay "
"unnableray.  Ogethertay ithway\n"
"\tarrestway easonsray, unray easonsray ovidepray anway alternativeway otay "
"ocesspray-aitway orfay\n"
"\tontrolingcay etherwhay orway otnay away ocesspray isway unnableray.  Otay "
"etgay ethay efaultday\n"
"\tehaviorbay ofway AKEMAY-OCESSPRAY inway Allegroway Ommoncay Isplay, "
"ichwhay isway otay eatecray away\n"
"\tocesspray ichwhay isway activeway utbay otnay unnableray, initializeway "
"UNRAY-EASONSRAY otay\n"
"\tILNAY.\n"
"\n"
"  :ARRESTWAY-EASONSRAY\n"
"\tInitialway aluevay orfay ocesspray-arrestway-easonsray; efaultsday otay "
"ILNAY.  Away\n"
"\tocesspray ustmay avehay onay arrestway easonsray inway orderway otay ebay "
"unnableray.\n"
"\n"
"  :INITIALWAY-INDINGSBAY\n"
"\tAnway alistway ofway initialway ecialspay indingsbay orfay ethay "
"ocesspray.  Atway\n"
"\ttartupsay ethay ewnay ocesspray ashay away eshfray etsay ofway ecialspay "
"indingsbay\n"
"\tithway away efaultday indingbay ofway *ackagepay* etupsay otay ethay CLAY-"
"USERWAY\n"
"\tackagepay.  INITIALWAY-INDINGSBAY ecifiesspay additionalway indingsbay "
"orfay\n"
"\tethay ocesspray.  Ethay drcay ofway eachway alistway elementway isway "
"evaluatedway inway\n"
"\tethay eshfray ynamicday environmentway andway enthay oundbay otay ethay "
"arcay ofway ethay\n"
"\telementway."

#: target:code/multi-proc.lisp
msgid "Interrupt process and cause it to evaluate function."
msgstr ""
"Interruptway ocesspray andway ausecay itway otay evaluateway unctionfay."

#: target:code/multi-proc.lisp
msgid ""
"Destroy a process. The process is sent a interrupt which throws to\n"
"  the end of the process allowing it to unwind gracefully."
msgstr ""
"Estroyday away ocesspray. Ethay ocesspray isway entsay away interruptway "
"ichwhay rowsthay otay\n"
"  ethay endway ofway ethay ocesspray allowingway itway otay unwindway "
"acefullygray."

#: target:code/multi-proc.lisp
msgid ""
"Restart process by unwinding it to its initial state and calling its\n"
"  initial function."
msgstr ""
"Estartray ocesspray ybay unwindingway itway otay itsway initialway tatesay "
"andway allingcay itsway\n"
"  initialway unctionfay."

#: target:code/multi-proc.lisp
msgid ""
"Restart process, unwinding it to its initial state and calls\n"
"  function with args."
msgstr ""
"Estartray ocesspray, unwindingway itway otay itsway initialway tatesay "
"andway allscay\n"
"  unctionfay ithway argsway."

#: target:code/multi-proc.lisp
msgid "Disable process from being runnable until enabled."
msgstr "Isableday ocesspray omfray eingbay unnableray untilway enabledway."

#: target:code/multi-proc.lisp
msgid "Allow process to become runnable again after it has been disabled."
msgstr ""
"Allowway ocesspray otay ecomebay unnableray againway afterway itway ashay "
"eenbay isabledday."

#: target:code/multi-proc.lisp
msgid ""
"Causes the process to wait until predicate returns True. Processes\n"
"  can only call process-wait when scheduling is enabled, and the predicate\n"
"  can not call process-wait. Since the predicate may be evaluated may\n"
"  times by the scheduler it should be relative fast native compiled code.\n"
"  The single True predicate value is returned."
msgstr ""
"Ausescay ethay ocesspray otay aitway untilway edicatepray eturnsray Uetray. "
"Ocessespray\n"
"  ancay onlyway allcay ocesspray-aitway enwhay edulingschay isway "
"enabledway, andway ethay edicatepray\n"
"  ancay otnay allcay ocesspray-aitway. Incesay ethay edicatepray aymay ebay "
"evaluatedway aymay\n"
"  imestay ybay ethay edulerschay itway ouldshay ebay elativeray astfay "
"ativenay ompiledcay odecay.\n"
"  Ethay inglesay Uetray edicatepray aluevay isway eturnedray."

#: target:code/multi-proc.lisp
msgid ""
"Causes the process to wait until predicate returns True, or the\n"
"  number of seconds specified by timeout has elapsed. The timeout may\n"
"  be a fixnum or a float in seconds.  The single True predicate value is\n"
"  returned, or NIL if the timeout was reached."
msgstr ""
"Ausescay ethay ocesspray otay aitway untilway edicatepray eturnsray Uetray, "
"orway ethay\n"
"  umbernay ofway econdssay ecifiedspay ybay imeouttay ashay elapsedway. "
"Ethay imeouttay aymay\n"
"  ebay away ixnumfay orway away oatflay inway econdssay.  Ethay inglesay "
"Uetray edicatepray aluevay isway\n"
"  eturnedray, orway ILNAY ifway ethay imeouttay asway eachedray."

#: target:code/multi-proc.lisp
msgid ""
"Try to gracefully destroy all the processes giving them some\n"
"  chance to unwinding, before shutting down multi-processing. This is\n"
"  currently necessary before a purify and is performed before a save-lisp.\n"
"  Multi-processing can be restarted by calling init-multi-processing."
msgstr ""
"Ytray otay acefullygray estroyday allway ethay ocessespray ivinggay emthay "
"omesay\n"
"  ancechay otay unwindingway, eforebay uttingshay ownday ultimay-"
"ocessingpray. Isthay isway\n"
"  urrentlycay ecessarynay eforebay away urifypay andway isway erformedpay "
"eforebay away avesay-isplay.\n"
"  Ultimay-ocessingpray ancay ebay estartedray ybay allingcay initway-ultimay-"
"ocessingpray."

#: target:code/multi-proc.lisp
msgid ""
"An idle loop to be run by the initial process. The select based event\n"
"  server is called with a timeout calculated from the minimum of the\n"
"  *idle-loop-timeout* and the time to the next process wait timeout.\n"
"  To avoid this delay when there are runnable processes the *idle-process*\n"
"  should be setup to the *initial-process*. If one of the processes quits\n"
"  by throwing to %end-of-the-world then *quitting-lisp* will have been\n"
"  set to the exit value which is noted by the idle loop which tries to\n"
"  exit gracefully destroying all the processes and giving them a chance\n"
"  to unwind."
msgstr ""
"Anway idleway ooplay otay ebay unray ybay ethay initialway ocesspray. Ethay "
"electsay asedbay eventway\n"
"  erversay isway alledcay ithway away imeouttay alculatedcay omfray ethay "
"inimummay ofway ethay\n"
"  *idleway-ooplay-imeouttay* andway ethay imetay otay ethay extnay ocesspray "
"aitway imeouttay.\n"
"  Otay avoidway isthay elayday enwhay erethay areway unnableray ocessespray "
"ethay *idleway-ocesspray*\n"
"  ouldshay ebay etupsay otay ethay *initialway-ocesspray*. Ifway oneway "
"ofway ethay ocessespray itsquay\n"
"  ybay rowingthay otay %endway-ofway-ethay-orldway enthay *ittingquay-"
"isplay* illway avehay eenbay\n"
"  etsay otay ethay exitway aluevay ichwhay isway otednay ybay ethay idleway "
"ooplay ichwhay iestray otay\n"
"  exitway acefullygray estroyingday allway ethay ocessespray andway ivinggay "
"emthay away ancechay\n"
"  otay unwindway."

#: target:code/multi-proc.lisp
msgid "Allow other processes to run."
msgstr "Allowway otherway ocessespray otay unray."

#: target:code/multi-proc.lisp
msgid ""
"Return the accrued real time elapsed while the given process was\n"
"  scheduled. The returned time is a double-float in seconds."
msgstr ""
"Eturnray ethay accruedway ealray imetay elapsedway ilewhay ethay ivengay "
"ocesspray asway\n"
"  eduledschay. Ethay eturnedray imetay isway away oubleday-oatflay inway "
"econdssay."

#: target:code/multi-proc.lisp
msgid ""
"Return the accrued run time elapsed for the given process. The returned\n"
"  time is a double-float in seconds."
msgstr ""
"Eturnray ethay accruedway unray imetay elapsedway orfay ethay ivengay "
"ocesspray. Ethay eturnedray\n"
"  imetay isway away oubleday-oatflay inway econdssay."

#: target:code/multi-proc.lisp
msgid ""
"Return the real time elapsed since the given process was last\n"
"  descheduled. The returned time is a double-float in seconds."
msgstr ""
"Eturnray ethay ealray imetay elapsedway incesay ethay ivengay ocesspray "
"asway astlay\n"
"  escheduledday. Ethay eturnedray imetay isway away oubleday-oatflay inway "
"econdssay."

#: target:code/multi-proc.lisp
msgid ""
"Start a regular SIGALRM interrupt which calls process-yield. An optional\n"
"  time in seconds and micro seconds may be provided. Note that CMUCL code\n"
"  base is not too interrupt safe so this may cause problems."
msgstr ""
"Tartsay away egularray IGALRMSAY interruptway ichwhay allscay ocesspray-"
"ieldyay. Anway optionalway\n"
"  imetay inway econdssay andway icromay econdssay aymay ebay ovidedpray. "
"Otenay atthay MUCLCAY odecay\n"
"  asebay isway otnay ootay interruptway afesay osay isthay aymay ausecay "
"oblemspray."

#: target:code/multi-proc.lisp
msgid ""
"Wait until FD is usable for DIRECTION and return True. DIRECTION should be\n"
"  either :INPUT or :OUTPUT. TIMEOUT, if supplied, is the number of seconds "
"to\n"
"  wait before giving up and returing NIL."
msgstr ""
"Aitway untilway DFAY isway usableway orfay IRECTIONDAY andway eturnray "
"Uetray. IRECTIONDAY ouldshay ebay\n"
"  eitherway :INPUTWAY orway :OUTPUTWAY. IMEOUTTAY, ifway uppliedsay, isway "
"ethay umbernay ofway econdssay otay\n"
"  aitway eforebay ivinggay upway andway eturingray ILNAY."

#: target:code/multi-proc.lisp
msgid ""
"Executes body and returns the values of the last form in body. However, if\n"
"  the execution takes longer than timeout seconds, abort it and evaluate\n"
"  timeout-forms, returning the values of last form."
msgstr ""
"Executesway odybay andway eturnsray ethay aluesvay ofway ethay astlay ormfay "
"inway odybay. Oweverhay, ifway\n"
"  ethay executionway akestay ongerlay anthay imeouttay econdssay, abortway "
"itway andway evaluateway\n"
"  imeouttay-ormsfay, eturningray ethay aluesvay ofway astlay ormfay."

#: target:code/multi-proc.lisp
msgid ""
"Show the all the processes, their whostate, and state. If the optional\n"
"  verbose argument is true then the run, real, and idle times are also\n"
"  shown."
msgstr ""
"Owshay ethay allway ethay ocessespray, eirthay ostatewhay, andway tatesay. "
"Ifway ethay optionalway\n"
"  erbosevay argumentway isway uetray enthay ethay unray, ealray, andway "
"idleway imestay areway alsoway\n"
"  ownshay."

#: target:code/multi-proc.lisp
msgid "Top-level READ-EVAL-PRINT loop for processes."
msgstr "Optay-evellay EADRAY-EVALWAY-INTPRAY ooplay orfay ocessespray."

#: target:code/multi-proc.lisp
msgid ""
"Enter the idle loop, starting a new process to run the top level loop.\n"
"  The awaking of sleeping processes is timed better with the idle loop "
"process\n"
"  running, and starting a new process for the top level loop supports a\n"
"  simultaneous interactive session. Such an initialisation will likely be "
"the\n"
"  default when there is better MP debug support etc."
msgstr ""
"Enterway ethay idleway ooplay, tartingsay away ewnay ocesspray otay unray "
"ethay optay evellay ooplay.\n"
"  Ethay awakingway ofway eepingslay ocessespray isway imedtay etterbay "
"ithway ethay idleway ooplay ocesspray\n"
"  unningray, andway tartingsay away ewnay ocesspray orfay ethay optay "
"evellay ooplay upportssay away\n"
"  imultaneoussay interactiveway essionsay. Uchsay anway initialisationway "
"illway ikelylay ebay ethay\n"
"  efaultday enwhay erethay isway etterbay PMAY ebugday upportsay etcway."

#: target:code/multi-proc.lisp
msgid ""
"Create a Lisp connection listener, listening on a TCP port for new\n"
"  connections and starting a new top-level loop for each. If a password\n"
"  is not given then one will be generated and reported.  A search is\n"
"  performed for the first free port starting at the given port which\n"
"  defaults to 1025."
msgstr ""
"Eatecray away Isplay onnectioncay istenerlay, isteninglay onway away CPTAY "
"ortpay orfay ewnay\n"
"  onnectionscay andway tartingsay away ewnay optay-evellay ooplay orfay "
"eachway. Ifway away asswordpay\n"
"  isway otnay ivengay enthay oneway illway ebay eneratedgay andway "
"eportedray.  Away earchsay isway\n"
"  erformedpay orfay ethay irstfay eefray ortpay tartingsay atway ethay "
"ivengay ortpay ichwhay\n"
"  efaultsday otay 1025."

#: target:code/multi-proc.lisp
msgid ""
"Execute the body with the lock held. If the lock is held by another\n"
"  process then the current process waits until the lock is released or\n"
"  an optional timeout is reached. The optional wait timeout is a time in\n"
"  seconds acceptable to process-wait-with-timeout.  The results of the\n"
"  body are return upon success and NIL is return if the timeout is\n"
"  reached. When the wait key is NIL and the lock is held by another\n"
"  process then NIL is return immediately without processing the body."
msgstr ""
"Executeway ethay odybay ithway ethay ocklay eldhay. Ifway ethay ocklay isway "
"eldhay ybay anotherway\n"
"  ocesspray enthay ethay urrentcay ocesspray aitsway untilway ethay ocklay "
"isway eleasedray orway\n"
"  anway optionalway imeouttay isway eachedray. Ethay optionalway aitway "
"imeouttay isway away imetay inway\n"
"  econdssay acceptableway otay ocesspray-aitway-ithway-imeouttay.  Ethay "
"esultsray ofway ethay\n"
"  odybay areway eturnray uponway uccesssay andway ILNAY isway eturnray ifway "
"ethay imeouttay isway\n"
"  eachedray. Enwhay ethay aitway eykay isway ILNAY andway ethay ocklay isway "
"eldhay ybay anotherway\n"
"  ocesspray enthay ILNAY isway eturnray immediatelyway ithoutway "
"ocessingpray ethay odybay."

#: target:code/setf-funs.lisp
msgid "Hairy setf expander for function ~S."
msgstr "Airyhay etfsay expanderway orfay unctionfay ~S."

#: target:code/defstruct.lisp
msgid ""
"Controls compiling DEFSTRUCT :print-function and :print-method\n"
"   options according to ANSI spec. MUST be NIL to compile CMUCL & PCL"
msgstr ""
"Ontrolscay ompilingcay EFSTRUCTDAY :intpray-unctionfay andway :intpray-"
"ethodmay\n"
"   optionsway accordingway otay ANSIWAY ecspay. USTMAY ebay ILNAY otay "
"ompilecay MUCLCAY & CLPAY"

#: target:code/defstruct.lisp
msgid "Allocate a new instance with LENGTH data slots."
msgstr "Allocateway away ewnay instanceway ithway ENGTHLAY ataday otsslay."

#: target:code/defstruct.lisp
msgid "Given an instance, return its length."
msgstr "Ivengay anway instanceway, eturnray itsway engthlay."

#: target:code/defstruct.lisp
msgid "Return the value from the INDEXth slot of INSTANCE.  This is SETFable."
msgstr ""
"Eturnray ethay aluevay omfray ethay Indexthway otslay ofway INSTANCEWAY.  "
"Isthay isway Etfablesay."

#: target:code/defstruct.lisp
msgid "Set the INDEXth slot of INSTANCE to NEW-VALUE."
msgstr "Etsay ethay Indexthway otslay ofway INSTANCEWAY otay EWNAY-ALUEVAY."

#: target:code/defstruct.lisp
msgid "Class not yet defined or was undefined: ~S"
msgstr "Assclay otnay etyay efinedday orway asway undefinedway: ~S"

#: target:code/defstruct.lisp
msgid "Class is not a structure class: ~S"
msgstr "Assclay isway otnay away ucturestray assclay: ~S"

#: target:code/defstruct.lisp
msgid ""
"DEFSTRUCT {Name | (Name Option*)} {Slot | (Slot [Default] {Key Value}*)}\n"
"   Define the structure type Name.  Instances are created by MAKE-<name>, "
"which\n"
"   takes keyword arguments allowing initial slot values to the specified.\n"
"   A SETF'able function <name>-<slot> is defined for each slot to "
"read&write\n"
"   slot values.  <name>-p is a type predicate.\n"
"\n"
"   Popular DEFSTRUCT options (see manual for others):\n"
"\n"
"   (:CONSTRUCTOR Name)\n"
"   (:PREDICATE Name)\n"
"       Specify an alternate name for the constructor or predicate.\n"
"\n"
"   (:CONSTRUCTOR Name Lambda-List)\n"
"       Explicitly specify the name and arguments to create a BOA "
"constructor\n"
"       (which is more efficient when keyword syntax isn't necessary.)\n"
"\n"
"   (:INCLUDE Supertype Slot-Spec*)\n"
"       Make this type a subtype of the structure type Supertype.  The "
"optional\n"
"       Slot-Specs override inherited slot options.\n"
"\n"
"   Slot options:\n"
"\n"
"   :TYPE Type-Spec\n"
"       Asserts that the value of this slot is always of the specified type.\n"
"\n"
"   :READ-ONLY {T | NIL}\n"
"       If true, no setter function is defined for this slot."
msgstr ""
"EFSTRUCTDAY {Amenay | (Amenay Optionway*)} {Otslay | (Otslay [Efaultday] "
"{Eykay Aluevay}*)}\n"
"   Efineday ethay ucturestray ypetay Amenay.  Instancesway areway eatedcray "
"ybay AKEMAY-<amenay>, ichwhay\n"
"   akestay eywordkay argumentsway allowingway initialway otslay aluesvay "
"otay ethay ecifiedspay.\n"
"   Away ETFSAY'ableway unctionfay <amenay>-<otslay> isway efinedday orfay "
"eachway otslay otay eadray&itewray\n"
"   otslay aluesvay.  <amenay>-p isway away ypetay edicatepray.\n"
"\n"
"   Opularpay EFSTRUCTDAY optionsway (eesay anualmay orfay othersway):\n"
"\n"
"   (:ONSTRUCTORCAY Amenay)\n"
"   (:EDICATEPRAY Amenay)\n"
"       Ecifyspay anway alternateway amenay orfay ethay onstructorcay orway "
"edicatepray.\n"
"\n"
"   (:ONSTRUCTORCAY Amenay Ambdalay-Istlay)\n"
"       Explicitlyway ecifyspay ethay amenay andway argumentsway otay "
"eatecray away OABAY onstructorcay\n"
"       (ichwhay isway oremay efficientway enwhay eywordkay yntaxsay isnway't "
"ecessarynay.)\n"
"\n"
"   (:INCLUDEWAY Upertypesay Otslay-Ecspay*)\n"
"       Akemay isthay ypetay away ubtypesay ofway ethay ucturestray ypetay "
"Upertypesay.  Ethay optionalway\n"
"       Otslay-Ecsspay overrideway inheritedway otslay optionsway.\n"
"\n"
"   Otslay optionsway:\n"
"\n"
"   :YPETAY Ypetay-Ecspay\n"
"       Assertsway atthay ethay aluevay ofway isthay otslay isway alwaysway "
"ofway ethay ecifiedspay ypetay.\n"
"\n"
"   :EADRAY-ONLYWAY {T | ILNAY}\n"
"       Ifway uetray, onay ettersay unctionfay isway efinedday orfay isthay "
"otslay."

#: target:code/defstruct.lisp
msgid "defining structure ~A"
msgstr "efiningday ucturestray ~Away"

#: target:code/defstruct.lisp
msgid "Disable package's definition lock then continue"
msgstr "Isableday ackagepay's efinitionday ocklay enthay ontinuecay"

#: target:code/defstruct.lisp
msgid "Defstruct already names a declaration: ~S."
msgstr "Efstructday alreadyway amesnay away eclarationday: ~S."

#: target:code/defstruct.lisp
msgid "Can't have more than one :INCLUDE option."
msgstr "Ancay't avehay oremay anthay oneway :INCLUDEWAY optionway."

#: target:code/defstruct.lisp
msgid "~S is a bad :TYPE for Defstruct."
msgstr "~S isway away adbay :YPETAY orfay Efstructday."

#: target:code/defstruct.lisp
msgid "The Defstruct option :NAMED takes no arguments."
msgstr "Ethay Efstructday optionway :AMEDNAY akestay onay argumentsway."

#: target:code/defstruct.lisp
msgid "Unknown DEFSTRUCT option~%  ~S"
msgstr "Unknownway EFSTRUCTDAY optionway~%  ~S"

#: target:code/defstruct.lisp
msgid "Unrecognized DEFSTRUCT option: ~S"
msgstr "Unrecognizedway EFSTRUCTDAY optionway: ~S"

#: target:code/defstruct.lisp
msgid "Can't specify :OFFSET unless :TYPE is specified."
msgstr "Ancay't ecifyspay :OFFSETWAY unlessway :YPETAY isway ecifiedspay."

#: target:code/defstruct.lisp
msgid "Silly to specify :PRINT-FUNCTION with :TYPE."
msgstr "Illysay otay ecifyspay :INTPRAY-UNCTIONFAY ithway :YPETAY."

#: target:code/defstruct.lisp
msgid "Silly to specify :MAKE-LOAD-FORM-FUN with :TYPE."
msgstr "Illysay otay ecifyspay :AKEMAY-OADLAY-ORMFAY-UNFAY ithway :YPETAY."

#: target:code/defstruct.lisp
msgid ""
"Keyword slot name indicates probable syntax ~\n"
"\t\t      error in DEFSTRUCT -- ~S."
msgstr ""
"Eywordkay otslay amenay indicatesway obablepray yntaxsay ~\n"
"\t\t      errorway inway EFSTRUCTDAY -- ~S."

#: target:code/defstruct.lisp
msgid "Duplicate slot name ~S."
msgstr "Uplicateday otslay amenay ~S."

#: target:code/defstruct.lisp
msgid "Slot ~S must be read-only in subtype ~S."
msgstr "Otslay ~S ustmay ebay eadray-onlyway inway ubtypesay ~S."

#: target:code/defstruct.lisp
msgid ":TYPE option mismatch between structures ~S and ~S."
msgstr ":YPETAY optionway ismatchmay etweenbay ucturesstray ~S andway ~S."

#: target:code/defstruct.lisp
msgid ":TYPE'd defstruct ~S not found for inclusion."
msgstr ":YPETAY'd efstructday ~S otnay oundfay orfay inclusionway."

#: target:code/defstruct.lisp
msgid "(:CONSTRUCTOR NIL) combined with other :CONSTRUCTORs."
msgstr "(:ONSTRUCTORCAY ILNAY) ombinedcay ithway otherway :Onstructorscay."

#: target:code/defstruct.lisp
msgid ""
"~@<Non-overwritten accessor ~S does not access ~\n"
"                        slot with name ~S (accessing an inherited slot ~\n"
"                        instead).~:@>"
msgstr ""
"~@<Onnay-overwrittenway accessorway ~S oesday otnay accessway ~\n"
"                        otslay ithway amenay ~S (accessingway anway "
"inheritedway otslay ~\n"
"                        insteadway).~:@>"

#: target:code/defstruct.lisp
msgid "Obsolete structure accessor function called."
msgstr "Obsoleteway ucturestray accessorway unctionfay alledcay."

#: target:code/defstruct.lisp
msgid "Structure for accessor ~S is not a ~S:~% ~S"
msgstr "Ucturestray orfay accessorway ~S isway otnay away ~S:~% ~S"

#: target:code/defstruct.lisp
msgid "Structure for setter ~S is not a ~S:~% ~S"
msgstr "Ucturestray orfay ettersay ~S isway otnay away ~S:~% ~S"

#: target:code/defstruct.lisp
msgid "New-Value for setter ~S is not a ~S:~% ~S."
msgstr "Ewnay-Aluevay orfay ettersay ~S isway otnay away ~S:~% ~S."

#: target:code/defstruct.lisp
msgid "Structure for copier is not a ~S:~% ~S"
msgstr "Ucturestray orfay opiercay isway otnay away ~S:~% ~S"

#: target:code/defstruct.lisp
msgid ""
"Shouldn't happen!  Some strange thing in LAYOUT-INFO:~\n"
"\t\t    ~%  ~S"
msgstr ""
"Ouldnshay't appenhay!  Omesay angestray ingthay inway AYOUTLAY-INFOWAY:~\n"
"\t\t    ~%  ~S"

#: target:code/defstruct.lisp
msgid ""
"Incompatibly redefining slots of structure class ~S~@\n"
"\t  Make sure any uses of affected accessors are recompiled:~@\n"
"\t  ~@[  These slots were moved to new positions:~%    ~S~%~]~\n"
"\t  ~@[  These slots have new incompatible types:~%    ~S~%~]~\n"
"\t  ~@[  These slots were deleted:~%    ~S~%~]"
msgstr ""
"Incompatiblyway edefiningray otsslay ofway ucturestray assclay ~S~@\n"
"\t  Akemay uresay anyway usesway ofway affectedway accessorsway areway "
"ecompiledray:~@\n"
"\t  ~@[  Esethay otsslay ereway ovedmay otay ewnay ositionspay:~%    ~S~%~]"
"~\n"
"\t  ~@[  Esethay otsslay avehay ewnay incompatibleway ypestay:~%    ~S~%~]~\n"
"\t  ~@[  Esethay otsslay ereway eletedday:~%    ~S~%~]"

#: target:code/defstruct.lisp
msgid ""
"Redefining class ~S incompatibly with the current ~\n"
"\t\tdefinition."
msgstr ""
"Edefiningray assclay ~S incompatiblyway ithway ethay urrentcay ~\n"
"\t\tefinitionday."

#: target:code/defstruct.lisp
msgid "Invalidate already loaded code and instances, use new definition."
msgstr ""
"Invalidateway alreadyway oadedlay odecay andway instancesway, useway ewnay "
"efinitionday."

#: target:code/defstruct.lisp
msgid "Previously loaded ~S accessors will no longer work."
msgstr "Eviouslypray oadedlay ~S accessorsway illway onay ongerlay orkway."

#: target:code/defstruct.lisp
msgid ""
"Any old ~S instances will be in a bad way.~@\n"
"\t       I hope you know what you're doing..."
msgstr ""
"Anyway oldway ~S instancesway illway ebay inway away adbay ayway.~@\n"
"\t       Iway opehay ouyay nowkay atwhay ouyay'eray oingday..."

#: target:code/defstruct.lisp
msgid "Removing old subclasses of ~S:~%  ~S"
msgstr "Emovingray oldway ubclassessay ofway ~S:~%  ~S"

#: target:code/defstruct.lisp
msgid "Return a copy of Structure with the same (EQL) slot values."
msgstr ""
"Eturnray away opycay ofway Ucturestray ithway ethay amesay (EQLWAY) otslay "
"aluesvay."

#: target:code/defstruct.lisp
msgid "Copying an obsolete structure:~%  ~S"
msgstr "Opyingcay anway obsoleteway ucturestray:~%  ~S"

#: target:code/defstruct.lisp
msgid "Structures of type ~S cannot be dumped as constants."
msgstr "Ucturesstray ofway ypetay ~S annotcay ebay umpedday asway onstantscay."

#: target:code/defmacro.lisp
msgid "A list of tests that do argument counting at expansion time."
msgstr ""
"Away istlay ofway eststay atthay oday argumentway ountingcay atway "
"expansionway imetay."

#: target:code/defmacro.lisp
msgid "Let bindings that are done to make lambda-list parsing possible."
msgstr ""
"Etlay indingsbay atthay areway oneday otay akemay ambdalay-istlay arsingpay "
"ossiblepay."

#: target:code/defmacro.lisp
msgid "Let bindings that the user has explicitly supplied."
msgstr "Etlay indingsbay atthay ethay userway ashay explicitlyway uppliedsay."

#: target:code/defmacro.lisp
msgid "Unsupplied optional and keyword arguments get this value defaultly."
msgstr ""
"Unsuppliedway optionalway andway eywordkay argumentsway etgay isthay aluevay "
"efaultlyday."

#: target:code/defmacro.lisp
msgid ""
"Returns as multiple-values a parsed body, any local-declarations that\n"
"   should be made where this body is inserted, and a doc-string if there is\n"
"   one."
msgstr ""
"Eturnsray asway ultiplemay-aluesvay away arsedpay odybay, anyway ocallay-"
"eclarationsday atthay\n"
"   ouldshay ebay ademay erewhay isthay odybay isway insertedway, andway away "
"ocday-ingstray ifway erethay isway\n"
"   oneway."

#: target:code/defmacro.lisp
msgid "&Whole must appear first in ~S lambda-list."
msgstr "&Olewhay ustmay appearway irstfay inway ~S ambdalay-istlay."

#: target:code/defmacro.lisp
msgid "&environment not valid with ~S."
msgstr "&environmentway otnay alidvay ithway ~S."

#: target:code/defmacro.lisp
msgid "&environment only valid at top level of lambda-list."
msgstr ""
"&environmentway onlyway alidvay atway optay evellay ofway ambdalay-istlay."

#: target:code/defmacro.lisp
msgid "Invalid ~a"
msgstr "Invalidway ~away"

#: target:code/defmacro.lisp
msgid "Ignore extra noise."
msgstr "Ignoreway extraway oisenay."

#: target:code/defmacro.lisp
msgid ""
"More than variable, initform, and suppliedp ~\n"
"\t\t\t    in &optional binding - ~S"
msgstr ""
"Oremay anthay ariablevay, initformway, andway uppliedpsay ~\n"
"\t\t\t    inway &optionalway indingbay - ~S"

#: target:code/defmacro.lisp
msgid "Non-symbol in lambda-list - ~S."
msgstr "Onnay-ymbolsay inway ambdalay-istlay - ~S."

#: target:code/defmacro.lisp
msgid "Illegal optional variable name: ~S"
msgstr "Illegalway optionalway ariablevay amenay: ~S"

#: target:code/defmacro.lisp
msgid ""
"Takes a non-keyword symbol, symbol, and returns the corresponding keyword."
msgstr ""
"Akestay away onnay-eywordkay ymbolsay, ymbolsay, andway eturnsray ethay "
"orrespondingcay eywordkay."

#: target:code/defmacro.lisp
msgid "Illegal or ill-formed ~A argument in ~A~@[ ~S~]."
msgstr ""
"Illegalway orway illway-ormedfay ~Away argumentway inway ~Away~@[ ~S~]."

#: target:code/defmacro.lisp
msgid "Error while parsing arguments to ~A in ~S:~%"
msgstr "Errorway ilewhay arsingpay argumentsway otay ~Away inway ~S:~%"

#: target:code/defmacro.lisp
msgid "Error while parsing arguments to ~A ~S:~%"
msgstr "Errorway ilewhay arsingpay argumentsway otay ~Away ~S:~%"

#: target:code/defmacro.lisp
msgid "Bogus sublist:~%  ~S~%to satisfy lambda-list:~%  ~:S~%"
msgstr "Ogusbay ublistsay:~%  ~S~%otay atisfysay ambdalay-istlay:~%  ~:S~%"

#: target:code/defmacro.lisp
msgid ""
"Invalid number of elements in:~%  ~:S~%~\n"
"\t     to satisfy lambda-list:~%  ~:S~%"
msgstr ""
"Invalidway umbernay ofway elementsway inway:~%  ~:S~%~\n"
"\t     otay atisfysay ambdalay-istlay:~%  ~:S~%"

#: target:code/defmacro.lisp
msgid "Expected at least ~D"
msgstr "Expectedway atway eastlay ~D"

#: target:code/defmacro.lisp
msgid "Expected exactly ~D"
msgstr "Expectedway exactlyway ~D"

#: target:code/defmacro.lisp
msgid "Expected between ~D and ~D"
msgstr "Expectedway etweenbay ~D andway ~D"

#: target:code/defmacro.lisp
msgid ", but got ~D."
msgstr ", utbay otgay ~D."

#: target:compiler/globaldb.lisp
msgid "Type not defined yet."
msgstr "Ypetay otnay efinedday etyay."

#: target:compiler/globaldb.lisp
msgid "~S is not a defined info class."
msgstr "~S isway otnay away efinedday infoway assclay."

#: target:compiler/globaldb.lisp
msgid "~S is not a defined info type."
msgstr "~S isway otnay away efinedday infoway ypetay."

#: target:compiler/globaldb.lisp
msgid ""
"Define-Info-Class Class\n"
"  Define a new class of global information."
msgstr ""
"Efineday-Infoway-Assclay Assclay\n"
"  Efineday away ewnay assclay ofway obalglay informationway."

#: target:compiler/globaldb.lisp
msgid "Out of INFO type numbers!"
msgstr "Outway ofway INFOWAY ypetay umbersnay!"

#: target:compiler/globaldb.lisp
msgid ""
"Define-Info-Type Class Type default Type-Spec\n"
"  Define a new type of global information for Class.  Type is the symbol "
"name\n"
"  of the type, Default is the value for that type when it hasn't been set, "
"and\n"
"  Type-Spec is a type-specifier which values of the type must satisfy.  The\n"
"  default expression is evaluated each time the information is needed, with\n"
"  Name bound to the name for which the information is being looked up.  If "
"the\n"
"  default evaluates to something with the second value true, then the "
"second\n"
"  value of Info will also be true."
msgstr ""
"Efineday-Infoway-Ypetay Assclay Ypetay efaultday Ypetay-Ecspay\n"
"  Efineday away ewnay ypetay ofway obalglay informationway orfay Assclay.  "
"Ypetay isway ethay ymbolsay amenay\n"
"  ofway ethay ypetay, Efaultday isway ethay aluevay orfay atthay ypetay "
"enwhay itway asnhay't eenbay etsay, andway\n"
"  Ypetay-Ecspay isway away ypetay-ecifierspay ichwhay aluesvay ofway ethay "
"ypetay ustmay atisfysay.  Ethay\n"
"  efaultday expressionway isway evaluatedway eachway imetay ethay "
"informationway isway eedednay, ithway\n"
"  Amenay oundbay otay ethay amenay orfay ichwhay ethay informationway isway "
"eingbay ookedlay upway.  Ifway ethay\n"
"  efaultday evaluatesway otay omethingsay ithway ethay econdsay aluevay "
"uetray, enthay ethay econdsay\n"
"  aluevay ofway Infoway illway alsoway ebay uetray."

#: target:compiler/globaldb.lisp
msgid "Redefine it."
msgstr "Edefineray itway."

#: target:compiler/globaldb.lisp
msgid "Changing type number for ~A ~A."
msgstr "Angingchay ypetay umbernay orfay ~Away ~Away."

#: target:compiler/globaldb.lisp
msgid "Go for it."
msgstr "Ogay orfay itway."

#: target:compiler/globaldb.lisp
msgid "Reusing type number for ~A ~A."
msgstr "Eusingray ypetay umbernay orfay ~Away ~Away."

#: target:compiler/globaldb.lisp
msgid ""
"Return the information of the specified Type and Class for Name.\n"
"   The second value is true if there is any such information recorded.  If\n"
"   there is no information, the first value is the default and the second "
"value\n"
"   is NIL."
msgstr ""
"Eturnray ethay informationway ofway ethay ecifiedspay Ypetay andway Assclay "
"orfay Amenay.\n"
"   Ethay econdsay aluevay isway uetray ifway erethay isway anyway uchsay "
"informationway ecordedray.  Ifway\n"
"   erethay isway onay informationway, ethay irstfay aluevay isway ethay "
"efaultday andway ethay econdsay aluevay\n"
"   isway ILNAY."

#: target:compiler/globaldb.lisp
msgid "Set the global information for Name."
msgstr "Etsay ethay obalglay informationway orfay Amenay."

#: target:compiler/globaldb.lisp
msgid ""
"DO-INFO (Env &Key Name Class Type Value) Form*\n"
"  Iterate over all the values stored in the Info-Env Env.  Name is bound to\n"
"  the entry's name, Class and Type are bound to the class and type\n"
"  (represented as strings), and Value is bound to the entry's value."
msgstr ""
"ODAY-INFOWAY (Envway &Eykay Amenay Assclay Ypetay Aluevay) Ormfay*\n"
"  Iterateway overway allway ethay aluesvay toredsay inway ethay Infoway-"
"Envway Envway.  Amenay isway oundbay otay\n"
"  ethay entryway's amenay, Assclay andway Ypetay areway oundbay otay ethay "
"assclay andway ypetay\n"
"  (epresentedray asway ingsstray), andway Aluevay isway oundbay otay ethay "
"entryway's aluevay."

#: target:compiler/globaldb.lisp
msgid ""
"Return a new compact info environment that holds the same information as\n"
"  Env."
msgstr ""
"Eturnray away ewnay ompactcay infoway environmentway atthay oldshay ethay "
"amesay informationway asway\n"
"  Envway."

#: target:compiler/knownfun.lisp target:compiler/globaldb.lisp
msgid "No info environment?"
msgstr "Onay infoway environmentway?"

#: target:compiler/knownfun.lisp target:compiler/globaldb.lisp
msgid "Cannot modify this environment: ~S."
msgstr "Annotcay odifymay isthay environmentway: ~S."

#: target:compiler/globaldb.lisp
msgid "0 is not a legal INFO name."
msgstr "0 isway otnay away egallay INFOWAY amenay."

#: target:compiler/globaldb.lisp
msgid ""
"Clear the information of the specified Type and Class for Name in the\n"
"  current environment, allowing any inherited info to become visible.  We\n"
"  return true if there was any info."
msgstr ""
"Earclay ethay informationway ofway ethay ecifiedspay Ypetay andway Assclay "
"orfay Amenay inway ethay\n"
"  urrentcay environmentway, allowingway anyway inheritedway infoway otay "
"ecomebay isiblevay.  Eway\n"
"  eturnray uetray ifway erethay asway anyway infoway."

#: target:code/macros.lisp
msgid ""
"This function is to parse the declarations and doc-string out of the body "
"of\n"
"  a defun-like form.  Body is the list of stuff which is to be parsed.\n"
"  Environment is ignored.  If Doc-String-Allowed is true, then a doc string\n"
"  will be parsed out of the body and returned.  If it is false then a "
"string\n"
"  will terminate the search for declarations.  Three values are returned: "
"the\n"
"  tail of Body after the declarations and doc strings, a list of declare "
"forms,\n"
"  and the doc-string, or NIL if none."
msgstr ""
"Isthay unctionfay isway otay arsepay ethay eclarationsday andway ocday-"
"ingstray outway ofway ethay odybay ofway\n"
"  away efunday-ikelay ormfay.  Odybay isway ethay istlay ofway tuffsay "
"ichwhay isway otay ebay arsedpay.\n"
"  Environmentway isway ignoredway.  Ifway Ocday-Ingstray-Allowedway isway "
"uetray, enthay away ocday ingstray\n"
"  illway ebay arsedpay outway ofway ethay odybay andway eturnedray.  Ifway "
"itway isway alsefay enthay away ingstray\n"
"  illway erminatetay ethay earchsay orfay eclarationsday.  Reethay aluesvay "
"areway eturnedray: ethay\n"
"  ailtay ofway Odybay afterway ethay eclarationsday andway ocday ingsstray, "
"away istlay ofway eclareday ormsfay,\n"
"  andway ethay ocday-ingstray, orway ILNAY ifway onenay."

#: target:code/macros.lisp
msgid "defining macro ~A"
msgstr "efiningday acromay ~Away"

#: target:code/macros.lisp
msgid "Disable the package's definition-lock then continue"
msgstr "Isableday ethay ackagepay's efinitionday-ocklay enthay ontinuecay"

#: target:code/macros.lisp
msgid "Define a compiler-macro for NAME."
msgstr "Efineday away ompilercay-acromay orfay AMENAY."

#: target:compiler/ir1tran.lisp target:code/macros.lisp
msgid "Symbol macro name is not a symbol: ~S."
msgstr "Ymbolsay acromay amenay isway otnay away ymbolsay: ~S."

#: target:code/macros.lisp
msgid "Symbol macro name already declared special: ~S."
msgstr "Ymbolsay acromay amenay alreadyway eclaredday ecialspay: ~S."

#: target:code/macros.lisp
msgid "Symbol macro name already declared constant: ~S."
msgstr "Ymbolsay acromay amenay alreadyway eclaredday onstantcay: ~S."

#: target:code/macros.lisp
msgid "Syntax like DEFMACRO, but defines a new type."
msgstr "Yntaxsay ikelay EFMACRODAY, utbay efinesday away ewnay ypetay."

#: target:code/macros.lisp
msgid "~S -- Type name not a symbol."
msgstr "~S -- Ypetay amenay otnay away ymbolsay."

#: target:code/macros.lisp
msgid "defining type ~A"
msgstr "efiningday ypetay ~Away"

#: target:code/macros.lisp
msgid "Disable package's definition-lock then continue"
msgstr "Isableday ackagepay's efinitionday-ocklay enthay ontinuecay"

#: target:code/macros.lisp
msgid "Deftype already names a declaration: ~S."
msgstr "Eftypeday alreadyway amesnay away eclarationday: ~S."

#: target:code/macros.lisp
msgid "Illegal to redefine standard type: ~S."
msgstr "Illegalway otay edefineray tandardsay ypetay: ~S."

#: target:code/macros.lisp
msgid "Redefining class ~S to be a DEFTYPE."
msgstr "Edefiningray assclay ~S otay ebay away EFTYPEDAY."

#: target:code/macros.lisp
msgid "Setf expander for ~S cannot be called with ~S args."
msgstr "Etfsay expanderway orfay ~S annotcay ebay alledcay ithway ~S argsway."

#: target:code/macros.lisp
msgid ""
"Syntax like DEFMACRO, but creates a Setf-Expansion generator.  The body\n"
"  must be a form that returns the five magical values."
msgstr ""
"Yntaxsay ikelay EFMACRODAY, utbay eatescray away Etfsay-Expansionway "
"eneratorgay.  Ethay odybay\n"
"  ustmay ebay away ormfay atthay eturnsray ethay ivefay agicalmay aluesvay."

#: target:code/macros.lisp
msgid "~S -- Access-function name not a symbol in DEFINE-SETF-EXPANDER."
msgstr ""
"~S -- Accessway-unctionfay amenay otnay away ymbolsay inway EFINEDAY-ETFSAY-"
"EXPANDERWAY."

#: target:code/macros.lisp
msgid "Obsolete, use define-setf-expander."
msgstr "Obsoleteway, useway efineday-etfsay-expanderway."

#: target:code/macros.lisp
msgid ""
"Defining setf macro for destruct slot accessor; redefining as ~\n"
"\t        a normal function:~%  ~S"
msgstr ""
"Efiningday etfsay acromay orfay estructday otslay accessorway; edefiningray "
"asway ~\n"
"\t        away ormalnay unctionfay:~%  ~S"

#: target:code/macros.lisp
msgid "Defining setf macro for ~S, but ~S is fbound."
msgstr "Efiningday etfsay acromay orfay ~S, utbay ~S isway boundfay."

#: target:code/macros.lisp
msgid "Bind the variables in LAMBDA-LIST to the contents of ARG-LIST."
msgstr ""
"Indbay ethay ariablesvay inway AMBDALAY-ISTLAY otay ethay ontentscay ofway "
"ARGWAY-ISTLAY."

#: target:code/macros.lisp
msgid ""
"For defining global constants at top level.  The DEFCONSTANT says that the\n"
"  value is constant and may be compiled into code.  If the variable already "
"has\n"
"  a value, and this is not equal to the init, an error is signalled.  The "
"third\n"
"  argument is an optional documentation string for the variable."
msgstr ""
"Orfay efiningday obalglay onstantscay atway optay evellay.  Ethay "
"EFCONSTANTDAY ayssay atthay ethay\n"
"  aluevay isway onstantcay andway aymay ebay ompiledcay intoway odecay.  "
"Ifway ethay ariablevay alreadyway ashay\n"
"  away aluevay, andway isthay isway otnay equalway otay ethay initway, anway "
"errorway isway ignalledsay.  Ethay irdthay\n"
"  argumentway isway anway optionalway ocumentationday ingstray orfay ethay "
"ariablevay."

#: target:code/macros.lisp
msgid "Go ahead and change the value."
msgstr "Ogay aheadway andway angechay ethay aluevay."

#: target:code/macros.lisp
msgid "Constant ~S being redefined."
msgstr "Onstantcay ~S eingbay edefinedray."

#: target:code/macros.lisp
msgid ""
"For defining global variables at top level.  Declares the variable\n"
"  SPECIAL and, optionally, initializes it.  If the variable already has a\n"
"  value, the old value is not clobbered.  The third argument is an optional\n"
"  documentation string for the variable."
msgstr ""
"Orfay efiningday obalglay ariablesvay atway optay evellay.  Eclaresday ethay "
"ariablevay\n"
"  ECIALSPAY andway, optionallyway, initializesway itway.  Ifway ethay "
"ariablevay alreadyway ashay away\n"
"  aluevay, ethay oldway aluevay isway otnay obberedclay.  Ethay irdthay "
"argumentway isway anway optionalway\n"
"  ocumentationday ingstray orfay ethay ariablevay."

#: target:code/macros.lisp
msgid ""
"Defines a parameter that is not normally changed by the program,\n"
"  but that may be changed without causing an error.  Declares the\n"
"  variable special and sets its value to VAL.  The third argument is\n"
"  an optional documentation string for the parameter."
msgstr ""
"Efinesday away arameterpay atthay isway otnay ormallynay angedchay ybay "
"ethay ogrampray,\n"
"  utbay atthay aymay ebay angedchay ithoutway ausingcay anway errorway.  "
"Eclaresday ethay\n"
"  ariablevay ecialspay andway etssay itsway aluevay otay ALVAY.  Ethay "
"irdthay argumentway isway\n"
"  anway optionalway ocumentationday ingstray orfay ethay arameterpay."

#: target:code/macros.lisp
msgid ""
"First arg is a predicate.  If it is non-null, the rest of the forms are\n"
"  evaluated as a PROGN."
msgstr ""
"Irstfay argway isway away edicatepray.  Ifway itway isway onnay-ullnay, "
"ethay estray ofway ethay ormsfay areway\n"
"  evaluatedway asway away OGNPRAY."

#: target:code/macros.lisp
msgid ""
"First arg is a predicate.  If it is null, the rest of the forms are\n"
"  evaluated as a PROGN."
msgstr ""
"Irstfay argway isway away edicatepray.  Ifway itway isway ullnay, ethay "
"estray ofway ethay ormsfay areway\n"
"  evaluatedway asway away OGNPRAY."

#: target:code/macros.lisp
msgid "Cond clause is not a list: ~S."
msgstr "Ondcay auseclay isway otnay away istlay: ~S."

#: target:code/macros.lisp
msgid "Varlist is not a list of symbols: ~S."
msgstr "Arlistvay isway otnay away istlay ofway ymbolssay: ~S."

#: target:code/macros.lisp
msgid ""
"Evaluates FORM and returns the Nth value (zero based).  This involves no\n"
"  consing when N is a trivial constant integer."
msgstr ""
"Evaluatesway ORMFAY andway eturnsray ethay Thnay aluevay (erozay asedbay).  "
"Isthay involvesway onay\n"
"  onsingcay enwhay N isway away ivialtray onstantcay integerway."

#: target:code/macros.lisp
msgid ""
"Returns five values needed by the SETF machinery: a list of temporary\n"
"   variables, a list of values with which to fill them, a list of "
"temporaries\n"
"   for the new values, the setting function, and the accessing function."
msgstr ""
"Eturnsray ivefay aluesvay eedednay ybay ethay ETFSAY achinerymay: away "
"istlay ofway emporarytay\n"
"   ariablesvay, away istlay ofway aluesvay ithway ichwhay otay illfay "
"emthay, away istlay ofway emporarietays\n"
"   orfay ethay ewnay aluesvay, ethay ettingsay unctionfay, andway ethay "
"accessingway unctionfay."

#: target:code/macros.lisp
msgid "Obsolete: use GET-SETF-EXPANSION."
msgstr "Obsoleteway: useway ETGAY-ETFSAY-EXPANSIONWAY."

#: target:code/macros.lisp
msgid "Obsolete: use GET-SETF-EXPANSION and handle multiple store values."
msgstr ""
"Obsoleteway: useway ETGAY-ETFSAY-EXPANSIONWAY andway andlehay ultiplemay "
"toresay aluesvay."

#: target:code/macros.lisp
msgid ""
"GET-SETF-METHOD used for a form with multiple store ~\n"
"\t      variables:~%  ~S"
msgstr ""
"ETGAY-ETFSAY-ETHODMAY usedway orfay away ormfay ithway ultiplemay toresay ~\n"
"\t      ariablesvay:~%  ~S"

#: target:code/macros.lisp
msgid ""
"Associates a SETF update function or macro with the specified access\n"
"  function or macro.  The format is complex.  See the manual for\n"
"  details."
msgstr ""
"Associatesway away ETFSAY updateway unctionfay orway acromay ithway ethay "
"ecifiedspay accessway\n"
"  unctionfay orway acromay.  Ethay ormatfay isway omplexcay.  Eesay ethay "
"anualmay orfay\n"
"  etailsday."

#: target:code/macros.lisp
msgid "Ill-formed DEFSETF for ~S."
msgstr "Illway-ormedfay EFSETFDAY orfay ~S."

#: target:code/macros.lisp
msgid ""
"Takes pairs of arguments like SETQ.  The first is a place and the second\n"
"  is the value that is supposed to go into that place.  Returns the last\n"
"  value.  The place argument may be any of the access forms for which SETF\n"
"  knows a corresponding setting form."
msgstr ""
"Akestay airspay ofway argumentsway ikelay ETQSAY.  Ethay irstfay isway away "
"aceplay andway ethay econdsay\n"
"  isway ethay aluevay atthay isway upposedsay otay ogay intoway atthay "
"aceplay.  Eturnsray ethay astlay\n"
"  aluevay.  Ethay aceplay argumentway aymay ebay anyway ofway ethay "
"accessway ormsfay orfay ichwhay ETFSAY\n"
"  nowskay away orrespondingcay ettingsay ormfay."

#: target:code/macros.lisp
msgid "Odd number of args to SETF."
msgstr "Oddway umbernay ofway argsway otay ETFSAY."

#: target:code/macros.lisp
msgid ""
"This is to SETF as PSETQ is to SETQ.  Args are alternating place\n"
"  expressions and values to go into those places.  All of the subforms and\n"
"  values are determined, left to right, and only then are the locations\n"
"  updated.  Returns NIL."
msgstr ""
"Isthay isway otay ETFSAY asway SETQPAY isway otay ETQSAY.  Argsway areway "
"alternatingway aceplay\n"
"  expressionsway andway aluesvay otay ogay intoway osethay acesplay.  Allway "
"ofway ethay ubformssay andway\n"
"  aluesvay areway eterminedday, eftlay otay ightray, andway onlyway enthay "
"areway ethay ocationslay\n"
"  updatedway.  Eturnsray ILNAY."

#: target:code/macros.lisp
msgid "Odd number of args to PSETF."
msgstr "Oddway umbernay ofway argsway otay SETFPAY."

#: target:code/macros.lisp
msgid ""
"One or more SETF-style place expressions, followed by a single\n"
"   value expression.  Evaluates all of the expressions in turn, then\n"
"   assigns the value of each expression to the place on its left,\n"
"   returning the value of the leftmost."
msgstr ""
"Oneway orway oremay ETFSAY-tylesay aceplay expressionsway, ollowedfay ybay "
"away inglesay\n"
"   aluevay expressionway.  Evaluatesway allway ofway ethay expressionsway "
"inway urntay, enthay\n"
"   assignsway ethay aluevay ofway eachway expressionway otay ethay aceplay "
"onway itsway eftlay,\n"
"   eturningray ethay aluevay ofway ethay eftmostlay."

#: target:code/macros.lisp
msgid ""
"Takes any number of SETF-style place expressions.  Evaluates all of the\n"
"   expressions in turn, then assigns to each place the value of the form to\n"
"   its right.  The rightmost form gets the value of the leftmost.\n"
"   Returns NIL."
msgstr ""
"Akestay anyway umbernay ofway ETFSAY-tylesay aceplay expressionsway.  "
"Evaluatesway allway ofway ethay\n"
"   expressionsway inway urntay, enthay assignsway otay eachway aceplay ethay "
"aluevay ofway ethay ormfay otay\n"
"   itsway ightray.  Ethay ightmostray ormfay etsgay ethay aluevay ofway "
"ethay eftmostlay.\n"
"   Eturnsray ILNAY."

#: target:code/macros.lisp
msgid "Creates a new read-modify-write macro like PUSH or INCF."
msgstr ""
"Eatescray away ewnay eadray-odifymay-itewray acromay ikelay USHPAY orway "
"INCFWAY."

#: target:code/macros.lisp
msgid "Non-symbol &rest arg in definition of ~S."
msgstr "Onnay-ymbolsay &estray argway inway efinitionday ofway ~S."

#: target:code/macros.lisp
msgid "Illegal stuff after &rest arg in Define-Modify-Macro."
msgstr ""
"Illegalway tuffsay afterway &estray argway inway Efineday-Odifymay-Acromay."

#: target:code/macros.lisp
msgid "~S not allowed in Define-Modify-Macro lambda list."
msgstr "~S otnay allowedway inway Efineday-Odifymay-Acromay ambdalay istlay."

#: target:code/macros.lisp
msgid "Illegal stuff in lambda list of Define-Modify-Macro."
msgstr ""
"Illegalway tuffsay inway ambdalay istlay ofway Efineday-Odifymay-Acromay."

#: target:code/macros.lisp
msgid ""
"Takes an object and a location holding a list.  Conses the object onto\n"
"  the list, returning the modified list.  OBJ is evaluated before PLACE."
msgstr ""
"Akestay anway objectway andway away ocationlay oldinghay away istlay.  "
"Onsescay ethay objectway ontoway\n"
"  ethay istlay, eturningray ethay odifiedmay istlay.  OBJWAY isway "
"evaluatedway eforebay ACEPLAY."

#: target:code/macros.lisp
msgid ""
"Takes an object and a location holding a list.  If the object is already\n"
"  in the list, does nothing.  Else, conses the object onto the list.  "
"Returns\n"
"  NIL.  If there is a :TEST keyword, this is used for the comparison."
msgstr ""
"Akestay anway objectway andway away ocationlay oldinghay away istlay.  Ifway "
"ethay objectway isway alreadyway\n"
"  inway ethay istlay, oesday othingnay.  Elseway, onsescay ethay objectway "
"ontoway ethay istlay.  Eturnsray\n"
"  ILNAY.  Ifway erethay isway away :ESTTAY eywordkay, isthay isway usedway "
"orfay ethay omparisoncay."

#: target:code/macros.lisp
msgid ""
"The argument is a location holding a list.  Pops one item off the front\n"
"  of the list and returns it."
msgstr ""
"Ethay argumentway isway away ocationlay oldinghay away istlay.  Opspay "
"oneway itemway offway ethay ontfray\n"
"  ofway ethay istlay andway eturnsray itway."

#: target:code/macros.lisp
msgid ""
"The first argument is some location holding a number. This number is\n"
"  incremented by the second argument, DELTA, which defaults to 1."
msgstr ""
"Ethay irstfay argumentway isway omesay ocationlay oldinghay away umbernay. "
"Isthay umbernay isway\n"
"  incrementedway ybay ethay econdsay argumentway, ELTADAY, ichwhay "
"efaultsday otay 1."

#: target:code/macros.lisp
msgid ""
"The first argument is some location holding a number. This number is\n"
"  decremented by the second argument, DELTA, which defaults to 1."
msgstr ""
"Ethay irstfay argumentway isway omesay ocationlay oldinghay away umbernay. "
"Isthay umbernay isway\n"
"  ecrementedday ybay ethay econdsay argumentway, ELTADAY, ichwhay efaultsday "
"otay 1."

#: target:code/macros.lisp
msgid ""
"Place may be any place expression acceptable to SETF, and is expected\n"
"  to hold a property list or ().  This list is destructively altered to\n"
"  remove the property specified by the indicator.  Returns T if such a\n"
"  property was present, NIL if not."
msgstr ""
"Aceplay aymay ebay anyway aceplay expressionway acceptableway otay ETFSAY, "
"andway isway expectedway\n"
"  otay oldhay away opertypray istlay orway ().  Isthay istlay isway "
"estructivelyday alteredway otay\n"
"  emoveray ethay opertypray ecifiedspay ybay ethay indicatorway.  Eturnsray "
"T ifway uchsay away\n"
"  opertypray asway esentpray, ILNAY ifway otnay."

#: target:code/macros.lisp
msgid "Setf of Apply is only defined for function args like #'symbol."
msgstr ""
"Etfsay ofway Applyway isway onlyway efinedday orfay unctionfay argsway "
"ikelay #'ymbolsay."

#: target:code/macros.lisp
msgid ""
"The first argument is a byte specifier.  The second is any place form\n"
"  acceptable to SETF.  Replaces the specified byte of the number in this\n"
"  place with bits from the low-order end of the new value."
msgstr ""
"Ethay irstfay argumentway isway away ytebay ecifierspay.  Ethay econdsay "
"isway anyway aceplay ormfay\n"
"  acceptableway otay ETFSAY.  Eplacesray ethay ecifiedspay ytebay ofway "
"ethay umbernay inway isthay\n"
"  aceplay ithway itsbay omfray ethay owlay-orderway endway ofway ethay ewnay "
"aluevay."

#: target:code/macros.lisp
msgid ""
"The first argument is a byte specifier.  The second is any place form\n"
"  acceptable to SETF.  Replaces the specified byte of the number in this "
"place\n"
"  with bits from the corresponding position in the new value."
msgstr ""
"Ethay irstfay argumentway isway away ytebay ecifierspay.  Ethay econdsay "
"isway anyway aceplay ormfay\n"
"  acceptableway otay ETFSAY.  Eplacesray ethay ecifiedspay ytebay ofway "
"ethay umbernay inway isthay aceplay\n"
"  ithway itsbay omfray ethay orrespondingcay ositionpay inway ethay ewnay "
"aluevay."

#: target:code/macros.lisp
msgid "~S -- Bad clause in ~S."
msgstr "~S -- Adbay auseclay inway ~S."

#: target:code/macros.lisp
msgid "No default clause allowed in ~S: ~S"
msgstr "Onay efaultday auseclay allowedway inway ~S: ~S"

#: target:code/macros.lisp
msgid "T and OTHERWISE may not be used as key designators for ~A"
msgstr ""
"T andway OTHERWISEWAY aymay otnay ebay usedway asway eykay esignatorsday "
"orfay ~Away"

#: target:code/macros.lisp
msgid "Bad style to use T or OTHERWISE in ECASE or CCASE"
msgstr ""
"Adbay tylesay otay useway T orway OTHERWISEWAY inway ECASEWAY orway CASECAY"

#: target:code/macros.lisp
msgid "Supply a new value for ~S."
msgstr "Upplysay away ewnay aluevay orfay ~S."

#: target:code/macros.lisp
msgid ""
"CASE Keyform {({(Key*) | Key} Form*)}*\n"
"  Evaluates the Forms in the first clause with a Key EQL to the value\n"
"  of Keyform.  If a singleton key is T or Otherwise then the clause is\n"
"  a default clause."
msgstr ""
"ASECAY Eyformkay {({(Eykay*) | Eykay} Ormfay*)}*\n"
"  Evaluatesway ethay Ormsfay inway ethay irstfay auseclay ithway away Eykay "
"EQLWAY otay ethay aluevay\n"
"  ofway Eyformkay.  Ifway away ingletonsay eykay isway T orway Otherwiseway "
"enthay ethay auseclay isway\n"
"  away efaultday auseclay."

#: target:code/macros.lisp
msgid ""
"CCASE Keyform {({(Key*) | Key} Form*)}*\n"
"  Evaluates the Forms in the first clause with a Key EQL to the value of\n"
"  Keyform.  If none of the keys matches then a correctable error is\n"
"  signalled."
msgstr ""
"CASECAY Eyformkay {({(Eykay*) | Eykay} Ormfay*)}*\n"
"  Evaluatesway ethay Ormsfay inway ethay irstfay auseclay ithway away Eykay "
"EQLWAY otay ethay aluevay ofway\n"
"  Eyformkay.  Ifway onenay ofway ethay eyskay atchesmay enthay away "
"orrectablecay errorway isway\n"
"  ignalledsay."

#: target:code/macros.lisp
msgid ""
"ECASE Keyform {({(Key*) | Key} Form*)}*\n"
"  Evaluates the Forms in the first clause with a Key EQL to the value of\n"
"  Keyform.  If none of the keys matches then an error is signalled."
msgstr ""
"ECASEWAY Eyformkay {({(Eykay*) | Eykay} Ormfay*)}*\n"
"  Evaluatesway ethay Ormsfay inway ethay irstfay auseclay ithway away Eykay "
"EQLWAY otay ethay aluevay ofway\n"
"  Eyformkay.  Ifway onenay ofway ethay eyskay atchesmay enthay anway "
"errorway isway ignalledsay."

#: target:code/macros.lisp
msgid ""
"TYPECASE Keyform {(Type Form*)}*\n"
"  Evaluates the Forms in the first clause for which TYPEP of Keyform\n"
"  and Type is true.  If a singleton key is T or Otherwise then the\n"
"  clause is a default clause."
msgstr ""
"YPECASETAY Eyformkay {(Ypetay Ormfay*)}*\n"
"  Evaluatesway ethay Ormsfay inway ethay irstfay auseclay orfay ichwhay "
"YPEPTAY ofway Eyformkay\n"
"  andway Ypetay isway uetray.  Ifway away ingletonsay eykay isway T orway "
"Otherwiseway enthay ethay\n"
"  auseclay isway away efaultday auseclay."

#: target:code/macros.lisp
msgid ""
"CTYPECASE Keyform {(Type Form*)}*\n"
"  Evaluates the Forms in the first clause for which TYPEP of Keyform and "
"Type\n"
"  is true.  If no form is satisfied then a correctable error is signalled."
msgstr ""
"TYPECASECAY Eyformkay {(Ypetay Ormfay*)}*\n"
"  Evaluatesway ethay Ormsfay inway ethay irstfay auseclay orfay ichwhay "
"YPEPTAY ofway Eyformkay andway Ypetay\n"
"  isway uetray.  Ifway onay ormfay isway atisfiedsay enthay away "
"orrectablecay errorway isway ignalledsay."

#: target:code/macros.lisp
msgid ""
"ETYPECASE Keyform {(Type Form*)}*\n"
"  Evaluates the Forms in the first clause for which TYPEP of Keyform and "
"Type\n"
"  is true.  If no form is satisfied then an error is signalled."
msgstr ""
"ETYPECASEWAY Eyformkay {(Ypetay Ormfay*)}*\n"
"  Evaluatesway ethay Ormsfay inway ethay irstfay auseclay orfay ichwhay "
"YPEPTAY ofway Eyformkay andway Ypetay\n"
"  isway uetray.  Ifway onay ormfay isway atisfiedsay enthay anway errorway "
"isway ignalledsay."

#: target:code/macros.lisp
msgid ""
"Signals an error if the value of test-form is nil.  Continuing from this\n"
"   error using the CONTINUE restart will allow the user to alter the value "
"of\n"
"   some locations known to SETF, starting over with test-form.  Returns nil."
msgstr ""
"Ignalssay anway errorway ifway ethay aluevay ofway esttay-ormfay isway "
"ilnay.  Ontinuingcay omfray isthay\n"
"   errorway usingway ethay ONTINUECAY estartray illway allowway ethay "
"userway otay alterway ethay aluevay ofway\n"
"   omesay ocationslay nownkay otay ETFSAY, tartingsay overway ithway esttay-"
"ormfay.  Eturnsray ilnay."

#: target:code/macros.lisp
msgid "The assertion ~S failed."
msgstr "Ethay assertionway ~S ailedfay."

#: target:code/macros.lisp
msgid "Retry assertion"
msgstr "Etryray assertionway"

#: target:code/macros.lisp
msgid " with new value~P for ~{~S~^, ~}."
msgstr " ithway ewnay aluevay~P orfay ~{~S~^, ~}."

#: target:code/macros.lisp
msgid ""
"The old value of ~S is ~S.~\n"
"\t\t  ~%Do you want to supply a new value? "
msgstr ""
"Ethay oldway aluevay ofway ~S isway ~S.~\n"
"\t\t  ~%Oday ouyay antway otay upplysay away ewnay aluevay? "

#: target:code/macros.lisp
msgid "~&Type a form to be evaluated:~%"
msgstr "~&Ypetay away ormfay otay ebay evaluatedway:~%"

#: target:code/macros.lisp
msgid ""
"Signals an error of type type-error if the contents of place are not of the\n"
"   specified type.  If an error is signaled, this can only return if\n"
"   STORE-VALUE is invoked.  It will store into place and start over."
msgstr ""
"Ignalssay anway errorway ofway ypetay ypetay-errorway ifway ethay ontentscay "
"ofway aceplay areway otnay ofway ethay\n"
"   ecifiedspay ypetay.  Ifway anway errorway isway ignaledsay, isthay ancay "
"onlyway eturnray ifway\n"
"   TORESAY-ALUEVAY isway invokedway.  Itway illway toresay intoway aceplay "
"andway tartsay overway."

#: target:code/macros.lisp
msgid "The value of ~S is ~S, which is not ~A."
msgstr "Ethay aluevay ofway ~S isway ~S, ichwhay isway otnay ~Away."

#: target:code/macros.lisp
msgid "The value of ~S is ~S, which is not of type ~S."
msgstr "Ethay aluevay ofway ~S isway ~S, ichwhay isway otnay ofway ypetay ~S."

#: target:code/macros.lisp
msgid "Supply a new value of ~S."
msgstr "Upplysay away ewnay aluevay ofway ~S."

#: target:code/macros.lisp
msgid ""
"The file whose name is Filespec is opened using the Open-args and\n"
"  bound to the variable Var. If the call to open is unsuccessful, the\n"
"  forms are not evaluated.  The Forms are executed, and when they\n"
"  terminate, normally or otherwise, the file is closed."
msgstr ""
"Ethay ilefay osewhay amenay isway Ilespecfay isway openedway usingway ethay "
"Openway-argsway andway\n"
"  oundbay otay ethay ariablevay Arvay. Ifway ethay allcay otay openway isway "
"unsuccessfulway, ethay\n"
"  ormsfay areway otnay evaluatedway.  Ethay Ormsfay areway executedway, "
"andway enwhay eythay\n"
"  erminatetay, ormallynay orway otherwiseway, ethay ilefay isway osedclay."

#: target:code/macros.lisp
msgid ""
"The form stream should evaluate to a stream.  VAR is bound\n"
"   to the stream and the forms are evaluated as an implicit\n"
"   progn.  The stream is closed upon exit."
msgstr ""
"Ethay ormfay eamstray ouldshay evaluateway otay away eamstray.  ARVAY isway "
"oundbay\n"
"   otay ethay eamstray andway ethay ormsfay areway evaluatedway asway anway "
"implicitway\n"
"   ognpray.  Ethay eamstray isway osedclay uponway exitway."

#: target:code/macros.lisp
msgid ""
"Binds the Var to an input stream that returns characters from String and\n"
"  executes the body.  See manual for details."
msgstr ""
"Indsbay ethay Arvay otay anway inputway eamstray atthay eturnsray "
"aracterschay omfray Ingstray andway\n"
"  executesway ethay odybay.  Eesay anualmay orfay etailsday."

#: target:code/macros.lisp
msgid ""
"If STRING is specified, it must be a string with a fill pointer;\n"
"   the output is incrementally appended to the string (as if by use of\n"
"   VECTOR-PUSH-EXTEND)."
msgstr ""
"Ifway INGSTRAY isway ecifiedspay, itway ustmay ebay away ingstray ithway "
"away illfay ointerpay;\n"
"   ethay outputway isway incrementallyway appendedway otay ethay ingstray "
"(asway ifway ybay useway ofway\n"
"   ECTORVAY-USHPAY-EXTENDWAY)."

#: target:code/macros.lisp
msgid ""
"DO ({(Var [Init] [Step])}*) (Test Exit-Form*) Declaration* Form*\n"
"  Iteration construct.  Each Var is initialized in parallel to the value of "
"the\n"
"  specified Init form.  On subsequent iterations, the Vars are assigned the\n"
"  value of the Step form (if any) in paralell.  The Test is evaluated "
"before\n"
"  each evaluation of the body Forms.  When the Test is true, the Exit-Forms\n"
"  are evaluated as a PROGN, with the result being the value of the DO.  A "
"block\n"
"  named NIL is established around the entire expansion, allowing RETURN to "
"be\n"
"  used as an laternate exit mechanism."
msgstr ""
"ODAY ({(Arvay [Initway] [Tepsay])}*) (Esttay Exitway-Ormfay*) Eclarationday* "
"Ormfay*\n"
"  Iterationway onstructcay.  Eachway Arvay isway initializedway inway "
"arallelpay otay ethay aluevay ofway ethay\n"
"  ecifiedspay Initway ormfay.  Onway ubsequentsay iterationsway, ethay "
"Arsvay areway assignedway ethay\n"
"  aluevay ofway ethay Tepsay ormfay (ifway anyway) inway aralellpay.  Ethay "
"Esttay isway evaluatedway eforebay\n"
"  eachway evaluationway ofway ethay odybay Ormsfay.  Enwhay ethay Esttay "
"isway uetray, ethay Exitway-Ormsfay\n"
"  areway evaluatedway asway away OGNPRAY, ithway ethay esultray eingbay "
"ethay aluevay ofway ethay ODAY.  Away ockblay\n"
"  amednay ILNAY isway establishedway aroundway ethay entireway expansionway, "
"allowingway ETURNRAY otay ebay\n"
"  usedway asway anway aternatelay exitway echanismmay."

#: target:code/macros.lisp
msgid ""
"DO* ({(Var [Init] [Step])}*) (Test Exit-Form*) Declaration* Form*\n"
"  Iteration construct.  Each Var is initialized sequentially (like LET*) to "
"the\n"
"  value of the specified Init form.  On subsequent iterations, the Vars are\n"
"  sequentially assigned the value of the Step form (if any).  The Test is\n"
"  evaluated before each evaluation of the body Forms.  When the Test is "
"true,\n"
"  the Exit-Forms are evaluated as a PROGN, with the result being the value\n"
"  of the DO.  A block named NIL is established around the entire expansion,\n"
"  allowing RETURN to be used as an laternate exit mechanism."
msgstr ""
"ODAY* ({(Arvay [Initway] [Tepsay])}*) (Esttay Exitway-Ormfay*) "
"Eclarationday* Ormfay*\n"
"  Iterationway onstructcay.  Eachway Arvay isway initializedway "
"equentiallysay (ikelay ETLAY*) otay ethay\n"
"  aluevay ofway ethay ecifiedspay Initway ormfay.  Onway ubsequentsay "
"iterationsway, ethay Arsvay areway\n"
"  equentiallysay assignedway ethay aluevay ofway ethay Tepsay ormfay (ifway "
"anyway).  Ethay Esttay isway\n"
"  evaluatedway eforebay eachway evaluationway ofway ethay odybay Ormsfay.  "
"Enwhay ethay Esttay isway uetray,\n"
"  ethay Exitway-Ormsfay areway evaluatedway asway away OGNPRAY, ithway ethay "
"esultray eingbay ethay aluevay\n"
"  ofway ethay ODAY.  Away ockblay amednay ILNAY isway establishedway "
"aroundway ethay entireway expansionway,\n"
"  allowingway ETURNRAY otay ebay usedway asway anway aternatelay exitway "
"echanismmay."

#: target:code/macros.lisp
msgid ""
"PSETQ {var value}*\n"
"   Set the variables to the values, like SETQ, except that assignments\n"
"   happen in parallel, i.e. no assignments take place until all the\n"
"   forms have been evaluated."
msgstr ""
"SETQPAY {arvay aluevay}*\n"
"   Etsay ethay ariablesvay otay ethay aluesvay, ikelay ETQSAY, exceptway "
"atthay assignmentsway\n"
"   appenhay inway arallelpay, i.e. onay assignmentsway aketay aceplay "
"untilway allway ethay\n"
"   ormsfay avehay eenbay evaluatedway."

#: target:code/macros.lisp
msgid "variable ~S in PSETQ is not a SYMBOL"
msgstr "ariablevay ~S inway SETQPAY isway otnay away YMBOLSAY"

#: target:code/macros.lisp
msgid "Unknown declaration context: ~S."
msgstr "Unknownway eclarationday ontextcay: ~S."

#: target:code/macros.lisp
msgid ""
"Context declaration spec should have context and at ~\n"
"\t  least one DECLARE form:~%  ~S"
msgstr ""
"Ontextcay eclarationday ecspay ouldshay avehay ontextcay andway atway ~\n"
"\t  eastlay oneway ECLAREDAY ormfay:~%  ~S"

#: target:code/macros.lisp
msgid ""
"WITH-COMPILATION-UNIT ({Key Value}*) Form*\n"
"  This form affects compilations that take place within its dynamic extent.  "
"It\n"
"  is intended to be wrapped around the compilation of all files in the same\n"
"  system.  These keywords are defined:\n"
"    :OVERRIDE Boolean-Form\n"
"        One of the effects of this form is to delay undefined warnings \n"
"        until the end of the form, instead of giving them at the end of "
"each\n"
"        compilation.  If OVERRIDE is NIL (the default), then the outermost\n"
"        WITH-COMPILATION-UNIT form grabs the undefined warnings.  "
"Specifying\n"
"        OVERRIDE true causes that form to grab any enclosed warnings, even "
"if\n"
"        it is enclosed by another WITH-COMPILATION-UNIT.\n"
"    :OPTIMIZE Decl-Form\n"
"        Decl-Form should evaluate to an OPTIMIZE declaration specifier.  "
"This\n"
"        declaration changes the `global' policy for compilations within the\n"
"        body.\n"
"    :OPTIMIZE-INTERFACE Decl-Form\n"
"        Like OPTIMIZE, except that it specifies the value of the CMU "
"extension\n"
"        OPTIMIZE-INTERFACE policy (which controls argument type and syntax\n"
"        checking.)\n"
"    :CONTEXT-DECLARATIONS List-of-Context-Decls-Form\n"
"        This is a CMU extension which allows compilation to be controlled\n"
"        by pattern matching on the context in which a definition appears.  "
"The\n"
"        argument should evaluate to a list of lists of the form:\n"
"            (Context-Spec Declare-Form+)\n"
"        In the indicated context, the specified declare forms are inserted "
"at\n"
"        the head of each definition.  The declare forms for all contexts "
"that\n"
"\tmatch are appended together, with earlier declarations getting\n"
"\tpredecence over later ones.  A simple example:\n"
"            :context-declarations\n"
"            '((:external (declare (optimize (safety 2)))))\n"
"        This will cause all functions that are named by external symbols to "
"be\n"
"        compiled with SAFETY 2.  The full syntax of context specs is:\n"
"\t:INTERNAL, :EXTERNAL\n"
"\t    True if the symbols is internal (external) in its home package.\n"
"\t:UNINTERNED\n"
"\t    True if the symbol has no home package.\n"
"\t:ANONYMOUS\n"
"\t    True if the function doesn't have any interesting name (not\n"
"\t    DEFMACRO, DEFUN, LABELS or FLET).\n"
"\t:MACRO, :FUNCTION\n"
"\t    :MACRO is a global (DEFMACRO) macro.  :FUNCTION is anything else.\n"
"\t:LOCAL, :GLOBAL\n"
"\t    :LOCAL is a LABELS or FLET.  :GLOBAL is anything else.\n"
"\t(:OR Context-Spec*)\n"
"\t    True in any specified context.\n"
"\t(:AND Context-Spec*)\n"
"\t    True only when all specs are true.\n"
"\t(:NOT Context-Spec)\n"
"\t    True when the spec is false.\n"
"        (:MEMBER Name*)\n"
"\t    True when the name is one of these names (EQUAL test.)\n"
"\t(:MATCH Pattern*)\n"
"\t    True when any of the patterns is a substring of the name.  The name\n"
"\t    is wrapped with $'s, so $FOO matches names beginning with FOO,\n"
"\t    etc."
msgstr ""
"ITHWAY-OMPILATIONCAY-UNITWAY ({Eykay Aluevay}*) Ormfay*\n"
"  Isthay ormfay affectsway ompilationscay atthay aketay aceplay ithinway "
"itsway ynamicday extentway.  Itway\n"
"  isway intendedway otay ebay appedwray aroundway ethay ompilationcay ofway "
"allway ilesfay inway ethay amesay\n"
"  ystemsay.  Esethay eywordskay areway efinedday:\n"
"    :OVERRIDEWAY Ooleanbay-Ormfay\n"
"        Oneway ofway ethay effectsway ofway isthay ormfay isway otay elayday "
"undefinedway arningsway \n"
"        untilway ethay endway ofway ethay ormfay, insteadway ofway ivinggay "
"emthay atway ethay endway ofway eachway\n"
"        ompilationcay.  Ifway OVERRIDEWAY isway ILNAY (ethay efaultday), "
"enthay ethay outermostway\n"
"        ITHWAY-OMPILATIONCAY-UNITWAY ormfay absgray ethay undefinedway "
"arningsway.  Ecifyingspay\n"
"        OVERRIDEWAY uetray ausescay atthay ormfay otay abgray anyway "
"enclosedway arningsway, evenway ifway\n"
"        itway isway enclosedway ybay anotherway ITHWAY-OMPILATIONCAY-"
"UNITWAY.\n"
"    :OPTIMIZEWAY Eclday-Ormfay\n"
"        Eclday-Ormfay ouldshay evaluateway otay anway OPTIMIZEWAY "
"eclarationday ecifierspay.  Isthay\n"
"        eclarationday angeschay ethay `obalglay' olicypay orfay "
"ompilationscay ithinway ethay\n"
"        odybay.\n"
"    :OPTIMIZEWAY-INTERFACEWAY Eclday-Ormfay\n"
"        Ikelay OPTIMIZEWAY, exceptway atthay itway ecifiesspay ethay aluevay "
"ofway ethay MUCAY extensionway\n"
"        OPTIMIZEWAY-INTERFACEWAY olicypay (ichwhay ontrolscay argumentway "
"ypetay andway yntaxsay\n"
"        eckingchay.)\n"
"    :ONTEXTCAY-ECLARATIONSDAY Istlay-ofway-Ontextcay-Eclsday-Ormfay\n"
"        Isthay isway away MUCAY extensionway ichwhay allowsway ompilationcay "
"otay ebay ontrolledcay\n"
"        ybay atternpay atchingmay onway ethay ontextcay inway ichwhay away "
"efinitionday appearsway.  Ethay\n"
"        argumentway ouldshay evaluateway otay away istlay ofway istslay "
"ofway ethay ormfay:\n"
"            (Ontextcay-Ecspay Eclareday-Ormfay+)\n"
"        Inway ethay indicatedway ontextcay, ethay ecifiedspay eclareday "
"ormsfay areway insertedway atway\n"
"        ethay eadhay ofway eachway efinitionday.  Ethay eclareday ormsfay "
"orfay allway ontextscay atthay\n"
"\tatchmay areway appendedway ogethertay, ithway earlierway eclarationsday "
"ettinggay\n"
"\tedecencepray overway aterlay onesway.  Away implesay exampleway:\n"
"            :ontextcay-eclarationsday\n"
"            '((:externalway (eclareday (optimizeway (afetysay 2)))))\n"
"        Isthay illway ausecay allway unctionsfay atthay areway amednay ybay "
"externalway ymbolssay otay ebay\n"
"        ompiledcay ithway AFETYSAY 2.  Ethay ullfay yntaxsay ofway ontextcay "
"ecsspay isway:\n"
"\t:INTERNALWAY, :EXTERNALWAY\n"
"\t    Uetray ifway ethay ymbolssay isway internalway (externalway) inway "
"itsway omehay ackagepay.\n"
"\t:UNINTERNEDWAY\n"
"\t    Uetray ifway ethay ymbolsay ashay onay omehay ackagepay.\n"
"\t:ANONYMOUSWAY\n"
"\t    Uetray ifway ethay unctionfay oesnday't avehay anyway interestingway "
"amenay (otnay\n"
"\t    EFMACRODAY, EFUNDAY, ABELSLAY orway ETFLAY).\n"
"\t:ACROMAY, :UNCTIONFAY\n"
"\t    :ACROMAY isway away obalglay (EFMACRODAY) acromay.  :UNCTIONFAY isway "
"anythingway elseway.\n"
"\t:OCALLAY, :OBALGLAY\n"
"\t    :OCALLAY isway away ABELSLAY orway ETFLAY.  :OBALGLAY isway "
"anythingway elseway.\n"
"\t(:ORWAY Ontextcay-Ecspay*)\n"
"\t    Uetray inway anyway ecifiedspay ontextcay.\n"
"\t(:ANDWAY Ontextcay-Ecspay*)\n"
"\t    Uetray onlyway enwhay allway ecsspay areway uetray.\n"
"\t(:OTNAY Ontextcay-Ecspay)\n"
"\t    Uetray enwhay ethay ecspay isway alsefay.\n"
"        (:EMBERMAY Amenay*)\n"
"\t    Uetray enwhay ethay amenay isway oneway ofway esethay amesnay "
"(EQUALWAY esttay.)\n"
"\t(:ATCHMAY Atternpay*)\n"
"\t    Uetray enwhay anyway ofway ethay atternspay isway away ubstringsay "
"ofway ethay amenay.  Ethay amenay\n"
"\t    isway appedwray ithway $'s, osay $OOFAY atchesmay amesnay eginningbay "
"ithway OOFAY,\n"
"\t    etcway."

#: target:code/macros.lisp
msgid "Odd number of key/value pairs: ~S."
msgstr "Oddway umbernay ofway eykay/aluevay airspay: ~S."

#: target:code/macros.lisp
msgid "Ignoring unknown option: ~S."
msgstr "Ignoringway unknownway optionway: ~S."

#: target:compiler/macros.lisp
msgid ""
"Policy Node Condition*\n"
"  Test whether some conditions apply to the current compiler policy for "
"Node.\n"
"  Each condition is a predicate form which accesses the policy values by\n"
"  referring to them as the variables SPEED, SPACE, SAFETY, CSPEED, BREVITY "
"and\n"
"  DEBUG.  The results of all the conditions are combined with AND and "
"returned\n"
"  as the result.\n"
"\n"
"  Node is a form which is evaluated to obtain the node which the policy is "
"for.\n"
"  If Node is NIL, then we use the current policy as defined by *default-"
"cookie*\n"
"  and *current-cookie*.  This option is only well defined during IR1\n"
"  conversion."
msgstr ""
"Olicypay Odenay Onditioncay*\n"
"  Esttay etherwhay omesay onditionscay applyway otay ethay urrentcay "
"ompilercay olicypay orfay Odenay.\n"
"  Eachway onditioncay isway away edicatepray ormfay ichwhay accessesway "
"ethay olicypay aluesvay ybay\n"
"  eferringray otay emthay asway ethay ariablesvay EEDSPAY, ACESPAY, "
"AFETYSAY, SPEEDCAY, EVITYBRAY andway\n"
"  EBUGDAY.  Ethay esultsray ofway allway ethay onditionscay areway "
"ombinedcay ithway ANDWAY andway eturnedray\n"
"  asway ethay esultray.\n"
"\n"
"  Odenay isway away ormfay ichwhay isway evaluatedway otay obtainway ethay "
"odenay ichwhay ethay olicypay isway orfay.\n"
"  Ifway Odenay isway ILNAY, enthay eway useway ethay urrentcay olicypay "
"asway efinedday ybay *efaultday-ookcayieway*\n"
"  andway *urrentcay-ookiecay*.  Isthay optionway isway onlyway ellway "
"efinedday uringday IRWAY1\n"
"  onversioncay."

#: target:compiler/macros.lisp
msgid "Can't funcall the SYMBOL-FUNCTION of special forms."
msgstr "Ancay't uncallfay ethay YMBOLSAY-UNCTIONFAY ofway ecialspay ormsfay."

#: target:compiler/macros.lisp
msgid ""
"Def-IR1-Translator Name (Lambda-List Start-Var Cont-Var {Key Value}*)\n"
"                      [Doc-String] Form*\n"
"  Define a function that converts a Special-Form or other magical thing "
"into\n"
"  IR1.  Lambda-List is a defmacro style lambda list.  Start-Var and Cont-"
"Var\n"
"  are bound to the start and result continuations for the resulting IR1.\n"
"  This keyword is defined:\n"
"      Kind\n"
"          The function kind to associate with Name (default :special-form)."
msgstr ""
"Efday-IRWAY1-Anslatortray Amenay (Ambdalay-Istlay Tartsay-Arvay Ontcay-Arvay "
"{Eykay Aluevay}*)\n"
"                      [Ocday-Ingstray] Ormfay*\n"
"  Efineday away unctionfay atthay onvertscay away Ecialspay-Ormfay orway "
"otherway agicalmay ingthay intoway\n"
"  IRWAY1.  Ambdalay-Istlay isway away efmacroday tylesay ambdalay istlay.  "
"Tartsay-Arvay andway Ontcay-Arvay\n"
"  areway oundbay otay ethay tartsay andway esultray ontinuationscay orfay "
"ethay esultingray IRWAY1.\n"
"  Isthay eywordkay isway efinedday:\n"
"      Indkay\n"
"          Ethay unctionfay indkay otay associateway ithway Amenay "
"(efaultday :ecialspay-ormfay)."

#: target:compiler/ir2tran.lisp target:compiler/ltv.lisp
#: target:compiler/ir1tran.lisp target:compiler/macros.lisp
msgid "Can't funcall the SYMBOL-FUNCTION of the special form ~A."
msgstr ""
"Ancay't uncallfay ethay YMBOLSAY-UNCTIONFAY ofway ethay ecialspay ormfay "
"~Away."

#: target:compiler/macros.lisp
msgid ""
"Def-Source-Transform Name Lambda-List Form*\n"
"  Define a macro-like source-to-source transformation for the function "
"Name.\n"
"  A source transform may \"pass\" by returning a non-nil second value.  If "
"the\n"
"  transform passes, then the form is converted as a normal function call.  "
"If\n"
"  the supplied arguments are not compatible with the specified lambda-list,\n"
"  then the transform automatically passes.\n"
"  \n"
"  Source-Transforms may only be defined for functions.  Source "
"transformation\n"
"  is not attempted if the function is declared Notinline.  Source "
"transforms\n"
"  should not examine their arguments.  If it matters how the function is "
"used,\n"
"  then Deftransform should be used to define an IR1 transformation.\n"
"  \n"
"  If the desirability of the transformation depends on the current Optimize\n"
"  parameters, then the Policy macro should be used to determine when to pass."
msgstr ""
"Efday-Ourcesay-Ansformtray Amenay Ambdalay-Istlay Ormfay*\n"
"  Efineday away acromay-ikelay ourcesay-otay-ourcesay ansformationtray orfay "
"ethay unctionfay Amenay.\n"
"  Away ourcesay ansformtray aymay \"asspay\" ybay eturningray away onnay-"
"ilnay econdsay aluevay.  Ifway ethay\n"
"  ansformtray assespay, enthay ethay ormfay isway onvertedcay asway away "
"ormalnay unctionfay allcay.  Ifway\n"
"  ethay uppliedsay argumentsway areway otnay ompatiblecay ithway ethay "
"ecifiedspay ambdalay-istlay,\n"
"  enthay ethay ansformtray automaticallyway assespay.\n"
"  \n"
"  Ourcesay-Ansformstray aymay onlyway ebay efinedday orfay unctionsfay.  "
"Ourcesay ansformatiotrayn\n"
"  isway otnay attemptedway ifway ethay unctionfay isway eclaredday "
"Otinlinenay.  Ourcesay ansformstray\n"
"  ouldshay otnay examineway eirthay argumentsway.  Ifway itway attersmay "
"owhay ethay unctionfay isway usedway,\n"
"  enthay Eftransformday ouldshay ebay usedway otay efineday anway IRWAY1 "
"ansformationtray.\n"
"  \n"
"  Ifway ethay esirabilityday ofway ethay ansformationtray ependsday onway "
"ethay urrentcay Optimizeway\n"
"  arameterspay, enthay ethay Olicypay acromay ouldshay ebay usedway otay "
"etermineday enwhay otay asspay."

#: target:compiler/macros.lisp
msgid ""
"Def-Primitive-Translator Name Lambda-List Form*\n"
"  Define a function that converts a use of (%PRIMITIVE Name ...) into Lisp\n"
"  code.  Lambda-List is a defmacro style lambda list."
msgstr ""
"Efday-Imitivepray-Anslatortray Amenay Ambdalay-Istlay Ormfay*\n"
"  Efineday away unctionfay atthay onvertscay away useway ofway (%IMITIVEPRAY "
"Amenay ...) intoway Isplay\n"
"  odecay.  Ambdalay-Istlay isway away efmacroday tylesay ambdalay istlay."

#: target:compiler/macros.lisp
msgid ""
"Deftransform Name (Lambda-List [Arg-Types] [Result-Type] {Key Value}*)\n"
"               Declaration* [Doc-String] Form*\n"
"  Define an IR1 transformation for Name.  An IR1 transformation computes a\n"
"  lambda that replaces the function variable reference for the call.  A\n"
"  transform may pass (decide not to transform the call) by calling the Give-"
"Up\n"
"  function.  Lambda-List both determines how the current call is parsed and\n"
"  specifies the Lambda-List for the resulting lambda.\n"
"\n"
"  We parse the call and bind each of the lambda-list variables to the\n"
"  continuation which represents the value of the argument.  When parsing "
"the\n"
"  call, we ignore the defaults, and always bind the variables for "
"unsupplied\n"
"  arguments to NIL.  If a required argument is missing, an unknown keyword "
"is\n"
"  supplied, or an argument keyword is not a constant, then the transform\n"
"  automatically passes.  The Declarations apply to the bindings made by\n"
"  Deftransform at transformation time, rather than to the variables of the\n"
"  resulting lambda.  Bound-but-not-referenced warnings are suppressed for "
"the\n"
"  lambda-list variables.  The Doc-String is used when printing efficiency "
"notes\n"
"  about the defined transform.\n"
"\n"
"  Normally, the body evaluates to a form which becomes the body of an\n"
"  automatically constructed lambda.  We make Lambda-List the lambda-list "
"for\n"
"  the lambda, and automatically insert declarations of the argument and "
"result\n"
"  types.  If the second value of the body is non-null, then it is a list of\n"
"  declarations which are to be inserted at the head of the lambda.  "
"Automatic\n"
"  lambda generation may be inhibited by explicitly returning a lambda from "
"the\n"
"  body.\n"
"\n"
"  The Arg-Types and Result-Type are used to create a function type which "
"the\n"
"  call must satisfy before transformation is attempted.  The function type\n"
"  specifier is constructed by wrapping (FUNCTION ...) around these values, "
"so\n"
"  the lack of a restriction may be specified by omitting the argument or\n"
"  supplying *.  The argument syntax specified in the Arg-Types need not be "
"the\n"
"  same as that in the Lambda-List, but the transform will never happen if\n"
"  the syntaxes can't be satisfied simultaneously.  If there is an existing\n"
"  transform for the same function that has the same type, then it is "
"replaced\n"
"  with the new definition.\n"
"\n"
"  These are the legal keyword options:\n"
"    :Result - A variable which is bound to the result continuation.\n"
"    :Node   - A variable which is bound to the combination node for the "
"call.\n"
"    :Policy - A form which is supplied to the Policy macro to determine "
"whether\n"
"              this transformation is appropriate.  If the result is false, "
"then\n"
"              the transform automatically passes.\n"
"    :Eval-Name\n"
"    \t    - The name and argument/result types are actually forms to be\n"
"              evaluated.  Useful for getting closures that transform "
"similar\n"
"              functions.\n"
"    :Defun-Only\n"
"            - Don't actually instantiate a transform, instead just DEFUN\n"
"              Name with the specified transform definition function.  This "
"may\n"
"              be later instantiated with %Deftransform.\n"
"    :Important\n"
"            - If supplied and non-NIL, note this transform as "
"``important,''\n"
"              which means effeciency notes will be generated when this\n"
"              transform fails even if brevity=speed (but not if "
"brevity>speed)\n"
"    :When {:Native | :Byte | :Both}\n"
"            - Indicates whether this transform applies to native code,\n"
"              byte-code or both (default :native.)"
msgstr ""
"Eftransformday Amenay (Ambdalay-Istlay [Argway-Ypestay] [Esultray-Ypetay] "
"{Eykay Aluevay}*)\n"
"               Eclarationday* [Ocday-Ingstray] Ormfay*\n"
"  Efineday anway IRWAY1 ansformationtray orfay Amenay.  Anway IRWAY1 "
"ansformationtray omputescay away\n"
"  ambdalay atthay eplacesray ethay unctionfay ariablevay eferenceray orfay "
"ethay allcay.  Away\n"
"  ansformtray aymay asspay (ecideday otnay otay ansformtray ethay allcay) "
"ybay allingcay ethay Ivegay-Upway\n"
"  unctionfay.  Ambdalay-Istlay othbay eterminesday owhay ethay urrentcay "
"allcay isway arsedpay andway\n"
"  ecifiesspay ethay Ambdalay-Istlay orfay ethay esultingray ambdalay.\n"
"\n"
"  Eway arsepay ethay allcay andway indbay eachway ofway ethay ambdalay-"
"istlay ariablesvay otay ethay\n"
"  ontinuationcay ichwhay epresentsray ethay aluevay ofway ethay "
"argumentway.  Enwhay arsingpay ethay\n"
"  allcay, eway ignoreway ethay efaultsday, andway alwaysway indbay ethay "
"ariablesvay orfay unsuppliedway\n"
"  argumentsway otay ILNAY.  Ifway away equiredray argumentway isway "
"issingmay, anway unknownway eywordkay isway\n"
"  uppliedsay, orway anway argumentway eywordkay isway otnay away onstantcay, "
"enthay ethay ansformtray\n"
"  automaticallyway assespay.  Ethay Eclarationsday applyway otay ethay "
"indingsbay ademay ybay\n"
"  Eftransformday atway ansformationtray imetay, atherray anthay otay ethay "
"ariablesvay ofway ethay\n"
"  esultingray ambdalay.  Oundbay-utbay-otnay-eferencedray arningsway areway "
"uppressedsay orfay ethay\n"
"  ambdalay-istlay ariablesvay.  Ethay Ocday-Ingstray isway usedway enwhay "
"intingpray efficiencyway otesnay\n"
"  aboutway ethay efinedday ansformtray.\n"
"\n"
"  Ormallynay, ethay odybay evaluatesway otay away ormfay ichwhay ecomesbay "
"ethay odybay ofway anway\n"
"  automaticallyway onstructedcay ambdalay.  Eway akemay Ambdalay-Istlay "
"ethay ambdalay-istlay orfay\n"
"  ethay ambdalay, andway automaticallyway insertway eclarationsday ofway "
"ethay argumentway andway esultray\n"
"  ypestay.  Ifway ethay econdsay aluevay ofway ethay odybay isway onnay-"
"ullnay, enthay itway isway away istlay ofway\n"
"  eclarationsday ichwhay areway otay ebay insertedway atway ethay eadhay "
"ofway ethay ambdalay.  Automatiwayc\n"
"  ambdalay enerationgay aymay ebay inhibitedway ybay explicitlyway "
"eturningray away ambdalay omfray ethay\n"
"  odybay.\n"
"\n"
"  Ethay Argway-Ypestay andway Esultray-Ypetay areway usedway otay eatecray "
"away unctionfay ypetay ichwhay ethay\n"
"  allcay ustmay atisfysay eforebay ansformationtray isway attemptedway.  "
"Ethay unctionfay ypetay\n"
"  ecifierspay isway onstructedcay ybay appingwray (UNCTIONFAY ...) aroundway "
"esethay aluesvay, osay\n"
"  ethay acklay ofway away estrictionray aymay ebay ecifiedspay ybay "
"omittingway ethay argumentway orway\n"
"  upplyingsay *.  Ethay argumentway yntaxsay ecifiedspay inway ethay Argway-"
"Ypestay eednay otnay ebay ethay\n"
"  amesay asway atthay inway ethay Ambdalay-Istlay, utbay ethay ansformtray "
"illway evernay appenhay ifway\n"
"  ethay yntaxessay ancay't ebay atisfiedsay imultaneouslysay.  Ifway erethay "
"isway anway existingway\n"
"  ansformtray orfay ethay amesay unctionfay atthay ashay ethay amesay "
"ypetay, enthay itway isway eplacedray\n"
"  ithway ethay ewnay efinitionday.\n"
"\n"
"  Esethay areway ethay egallay eywordkay optionsway:\n"
"    :Esultray - Away ariablevay ichwhay isway oundbay otay ethay esultray "
"ontinuationcay.\n"
"    :Odenay   - Away ariablevay ichwhay isway oundbay otay ethay "
"ombinationcay odenay orfay ethay allcay.\n"
"    :Olicypay - Away ormfay ichwhay isway uppliedsay otay ethay Olicypay "
"acromay otay etermineday etherwhay\n"
"              isthay ansformationtray isway appropriateway.  Ifway ethay "
"esultray isway alsefay, enthay\n"
"              ethay ansformtray automaticallyway assespay.\n"
"    :Evalway-Amenay\n"
"    \t    - Ethay amenay andway argumentway/esultray ypestay areway "
"actuallyway ormsfay otay ebay\n"
"              evaluatedway.  Usefulway orfay ettinggay osuresclay atthay "
"ansformtray imilarsay\n"
"              unctionsfay.\n"
"    :Efunday-Onlyway\n"
"            - Onday't actuallyway instantiateway away ansformtray, "
"insteadway ustjay EFUNDAY\n"
"              Amenay ithway ethay ecifiedspay ansformtray efinitionday "
"unctionfay.  Isthay aymay\n"
"              ebay aterlay instantiatedway ithway %Eftransformday.\n"
"    :Importantway\n"
"            - Ifway uppliedsay andway onnay-ILNAY, otenay isthay ansformtray "
"asway ``importantway,''\n"
"              ichwhay eansmay effeciencyway otesnay illway ebay eneratedgay "
"enwhay isthay\n"
"              ansformtray ailsfay evenway ifway evitybray=eedspay (utbay "
"otnay ifway evitybray>eespayd)\n"
"    :Enwhay {:Ativenay | :Ytebay | :Othbay}\n"
"            - Indicatesway etherwhay isthay ansformtray appliesway otay "
"ativenay odecay,\n"
"              ytebay-odecay orway othbay (efaultday :ativenay.)"

#: target:compiler/macros.lisp
msgid "Can't specify both DEFUN-ONLY and EVAL-NAME."
msgstr "Ancay't ecifyspay othbay EFUNDAY-ONLYWAY andway EVALWAY-AMENAY."

#: target:compiler/macros.lisp
msgid ""
"Defknown Name Arg-Types Result-Type [Attributes] {Key Value}* \n"
"  Declare the function Name to be a known function.  We construct a type\n"
"  specifier for the function by wrapping (FUNCTION ...) around the Arg-"
"Types\n"
"  and Result-Type.  Attributes is a an unevaluated list of the boolean\n"
"  attributes that the function has.  These attributes are meaningful here:\n"
"      call\n"
"         May call functions that are passed as arguments.  In order to "
"determine\n"
"         what other effects are present, we must find the effects of all "
"arguments\n"
"         that may be functions.\n"
"        \n"
"      unsafe\n"
"         May incorporate arguments in the result or somehow pass them "
"upward.\n"
"        \n"
"      unwind\n"
"         May fail to return during correct execution.  Errors are O.K.\n"
"        \n"
"      any\n"
"         The (default) worst case.  Includes all the other bad things, plus "
"any\n"
"         other possible bad thing.\n"
"        \n"
"      foldable\n"
"         May be constant-folded.  The function has no side effects, but may "
"be\n"
"         affected by side effects on the arguments.  e.g. SVREF, MAPC.\n"
"        \n"
"      flushable\n"
"         May be eliminated if value is unused.  The function has no side "
"effects\n"
"         except possibly CONS.  If a function is defined to signal errors, "
"then\n"
"         it is not flushable even if it is movable or foldable.\n"
"        \n"
"      movable\n"
"         May be moved with impunity.  Has no side effects except possibly "
"CONS,\n"
"         and is affected only by its arguments.\n"
"\n"
"      predicate\n"
"          A true predicate likely to be open-coded.  This is a hint to IR1\n"
"\t  conversion that it should ensure calls always appear as an IF test.\n"
"\t  Not usually specified to Defknown, since this is implementation\n"
"\t  dependent, and is usually automatically set by the Define-VOP\n"
"\t  :Conditional option.\n"
"\n"
"  Name may also be a list of names, in which case the same information is "
"given\n"
"  to all the names.  The keywords specify the initial values for various\n"
"  optimizers that the function might have."
msgstr ""
"Efknownday Amenay Argway-Ypestay Esultray-Ypetay [Attributesway] {Eykay "
"Aluevay}* \n"
"  Eclareday ethay unctionfay Amenay otay ebay away nownkay unctionfay.  Eway "
"onstructcay away ypetay\n"
"  ecifierspay orfay ethay unctionfay ybay appingwray (UNCTIONFAY ...) "
"aroundway ethay Argway-Ypestay\n"
"  andway Esultray-Ypetay.  Attributesway isway away anway unevaluatedway "
"istlay ofway ethay ooleanbay\n"
"  attributesway atthay ethay unctionfay ashay.  Esethay attributesway areway "
"eaningfulmay erehay:\n"
"      allcay\n"
"         Aymay allcay unctionsfay atthay areway assedpay asway "
"argumentsway.  Inway orderway otay etermineday\n"
"         atwhay otherway effectsway areway esentpray, eway ustmay indfay "
"ethay effectsway ofway allway argumentsway\n"
"         atthay aymay ebay unctionsfay.\n"
"        \n"
"      unsafeway\n"
"         Aymay incorporateway argumentsway inway ethay esultray orway "
"omehowsay asspay emthay upwardway.\n"
"        \n"
"      unwindway\n"
"         Aymay ailfay otay eturnray uringday orrectcay executionway.  "
"Errorsway areway O.K.\n"
"        \n"
"      anyway\n"
"         Ethay (efaultday) orstway asecay.  Includesway allway ethay "
"otherway adbay ingsthay, usplay anyway\n"
"         otherway ossiblepay adbay ingthay.\n"
"        \n"
"      oldablefay\n"
"         Aymay ebay onstantcay-oldedfay.  Ethay unctionfay ashay onay idesay "
"effectsway, utbay aymay ebay\n"
"         affectedway ybay idesay effectsway onway ethay argumentsway.  e.g. "
"VREFSAY, APCMAY.\n"
"        \n"
"      ushableflay\n"
"         Aymay ebay eliminatedway ifway aluevay isway unusedway.  Ethay "
"unctionfay ashay onay idesay effectsway\n"
"         exceptway ossiblypay ONSCAY.  Ifway away unctionfay isway efinedday "
"otay ignalsay errorsway, enthay\n"
"         itway isway otnay ushableflay evenway ifway itway isway ovablemay "
"orway oldablefay.\n"
"        \n"
"      ovablemay\n"
"         Aymay ebay ovedmay ithway impunityway.  Ashay onay idesay "
"effectsway exceptway ossiblypay ONSCAY,\n"
"         andway isway affectedway onlyway ybay itsway argumentsway.\n"
"\n"
"      edicatepray\n"
"          Away uetray edicatepray ikelylay otay ebay openway-odedcay.  "
"Isthay isway away inthay otay IRWAY1\n"
"\t  onversioncay atthay itway ouldshay ensureway allscay alwaysway appearway "
"asway anway IFWAY esttay.\n"
"\t  Otnay usuallyway ecifiedspay otay Efknownday, incesay isthay isway "
"implementationway\n"
"\t  ependentday, andway isway usuallyway automaticallyway etsay ybay ethay "
"Efineday-OPVAY\n"
"\t  :Onditionalcay optionway.\n"
"\n"
"  Amenay aymay alsoway ebay away istlay ofway amesnay, inway ichwhay asecay "
"ethay amesay informationway isway ivengay\n"
"  otay allway ethay amesnay.  Ethay eywordskay ecifyspay ethay initialway "
"aluesvay orfay ariousvay\n"
"  optimizersway atthay ethay unctionfay ightmay avehay."

#: target:compiler/macros.lisp
msgid "Function cannot have both good and bad attributes: ~S"
msgstr ""
"Unctionfay annotcay avehay othbay oodgay andway adbay attributesway: ~S"

#: target:compiler/macros.lisp
msgid ""
"Defoptimizer (Function Kind) (Lambda-List [Node-Var] Var*)\n"
"                Declaration* Form*\n"
"  Define some Kind of optimizer for the named Function.  Function must be a\n"
"  known function.  Lambda-List is used to parse the arguments to the\n"
"  combination as in Deftransform.  If the argument syntax is invalid or "
"there\n"
"  are non-constant keys, then we simply return NIL.\n"
"\n"
"  The function is DEFUN'ed as Function-Kind-OPTIMIZER.  Possible kinds are\n"
"  DERIVE-TYPE, OPTIMIZER, LTN-ANNOTATE and IR2-CONVERT.  If a symbol is\n"
"  specified instead of a (Function Kind) list, then we just do a DEFUN with "
"the\n"
"  symbol as its name, and don't do anything with the definition.  This is\n"
"  useful for creating optimizers to be passed by name to DEFKNOWN.\n"
"\n"
"  If supplied, Node-Var is bound to the combination node being optimized.  "
"If\n"
"  additional Vars are supplied, then they are used as the rest of the "
"optimizer\n"
"  function's lambda-list.  LTN-ANNOTATE methods are passed an additional "
"POLICY\n"
"  argument, and IR2-CONVERT methods are passed an additional IR2-BLOCK\n"
"  argument."
msgstr ""
"Efoptimizerday (Unctionfay Indkay) (Ambdalay-Istlay [Odenay-Arvay] Arvay*)\n"
"                Eclarationday* Ormfay*\n"
"  Efineday omesay Indkay ofway optimizerway orfay ethay amednay Unctionfay.  "
"Unctionfay ustmay ebay away\n"
"  nownkay unctionfay.  Ambdalay-Istlay isway usedway otay arsepay ethay "
"argumentsway otay ethay\n"
"  ombinationcay asway inway Eftransformday.  Ifway ethay argumentway "
"yntaxsay isway invalidway orway erethay\n"
"  areway onnay-onstantcay eyskay, enthay eway implysay eturnray ILNAY.\n"
"\n"
"  Ethay unctionfay isway EFUNDAY'edway asway Unctionfay-Indkay-"
"OPTIMIZERWAY.  Ossiblepay indskay areway\n"
"  ERIVEDAY-YPETAY, OPTIMIZERWAY, TNLAY-ANNOTATEWAY andway IRWAY2-ONVERTCAY.  "
"Ifway away ymbolsay isway\n"
"  ecifiedspay insteadway ofway away (Unctionfay Indkay) istlay, enthay eway "
"ustjay oday away EFUNDAY ithway ethay\n"
"  ymbolsay asway itsway amenay, andway onday't oday anythingway ithway ethay "
"efinitionday.  Isthay isway\n"
"  usefulway orfay eatingcray optimizersway otay ebay assedpay ybay amenay "
"otay EFKNOWNDAY.\n"
"\n"
"  Ifway uppliedsay, Odenay-Arvay isway oundbay otay ethay ombinationcay "
"odenay eingbay optimizedway.  Ifway\n"
"  additionalway Arsvay areway uppliedsay, enthay eythay areway usedway asway "
"ethay estray ofway ethay optimizerway\n"
"  unctionfay's ambdalay-istlay.  TNLAY-ANNOTATEWAY ethodsmay areway assedpay "
"anway additionalway OLICYPAY\n"
"  argumentway, andway IRWAY2-ONVERTCAY ethodsmay areway assedpay anway "
"additionalway IRWAY2-OCKBLAY\n"
"  argumentway."

#: target:compiler/macros.lisp
msgid ""
"Do-Blocks (Block-Var Component [Ends] [Result-Form]) {Declaration}* {Form}*\n"
"  Iterate over the blocks in a component, binding Block-Var to each block "
"in\n"
"  turn.  The value of Ends determines whether to iterate over dummy head "
"and\n"
"  tail blocks:\n"
"    NIL   -- Skip Head and Tail (the default)\n"
"    :Head -- Do head but skip tail\n"
"    :Tail -- Do tail but skip head\n"
"    :Both -- Do both head and tail\n"
"\n"
"  If supplied, Result-Form is the value to return."
msgstr ""
"Oday-Ocksblay (Ockblay-Arvay Omponentcay [Endsway] [Esultray-Ormfay]) "
"{Eclarationday}* {Ormfay}*\n"
"  Iterateway overway ethay ocksblay inway away omponentcay, indingbay "
"Ockblay-Arvay otay eachway ockblay inway\n"
"  urntay.  Ethay aluevay ofway Endsway eterminesday etherwhay otay "
"iterateway overway ummyday eadhay andway\n"
"  ailtay ocksblay:\n"
"    ILNAY   -- Kipsay Eadhay andway Ailtay (ethay efaultday)\n"
"    :Eadhay -- Oday eadhay utbay kipsay ailtay\n"
"    :Ailtay -- Oday ailtay utbay kipsay eadhay\n"
"    :Othbay -- Oday othbay eadhay andway ailtay\n"
"\n"
"  Ifway uppliedsay, Esultray-Ormfay isway ethay aluevay otay eturnray."

#: target:compiler/macros.lisp
msgid "Losing Ends value: ~S."
msgstr "Osinglay Endsway aluevay: ~S."

#: target:compiler/macros.lisp
msgid ""
"Do-Blocks-Backwards (Block-Var Component [Ends] [Result-Form]) {Declaration}"
"* {Form}*\n"
"  Like Do-Blocks, only iterate over the blocks in reverse order."
msgstr ""
"Oday-Ocksblay-Ackwardsbay (Ockblay-Arvay Omponentcay [Endsway] [Esultray-"
"Ormfay]) {Eclarationday}* {Ormfay}*\n"
"  Ikelay Oday-Ocksblay, onlyway iterateway overway ethay ocksblay inway "
"everseray orderway."

#: target:compiler/macros.lisp
msgid ""
"Do-Uses (Node-Var Continuation [Result]) {Declaration}* {Form}*\n"
"  Iterate over the uses of Continuation, binding Node to each one "
"succesively."
msgstr ""
"Oday-Usesway (Odenay-Arvay Ontinuationcay [Esultray]) {Eclarationday}* "
"{Ormfay}*\n"
"  Iterateway overway ethay usesway ofway Ontinuationcay, indingbay Odenay "
"otay eachway oneway uccesivelsayy."

#: target:compiler/macros.lisp
msgid ""
"Do-Nodes (Node-Var Cont-Var Block {Key Value}*) {Declaration}* {Form}*\n"
"  Iterate over the nodes in Block, binding Node-Var to the each node and\n"
"  Cont-Var to the node's Cont.  The only keyword option is Restart-P, which\n"
"  causes iteration to be restarted when a node is deleted out from under us "
"(if\n"
"  not supplied, this is an error.)"
msgstr ""
"Oday-Odesnay (Odenay-Arvay Ontcay-Arvay Ockblay {Eykay Aluevay}*) "
"{Eclarationday}* {Ormfay}*\n"
"  Iterateway overway ethay odesnay inway Ockblay, indingbay Odenay-Arvay "
"otay ethay eachway odenay andway\n"
"  Ontcay-Arvay otay ethay odenay's Ontcay.  Ethay onlyway eywordkay "
"optionway isway Estartray-P, ichwhay\n"
"  ausescay iterationway otay ebay estartedray enwhay away odenay isway "
"eletedday outway omfray underway usway (ifway\n"
"  otnay uppliedsay, isthay isway anway errorway.)"

#: target:compiler/macros.lisp
msgid ""
"Do-Nodes-Backwards (Node-Var Cont-Var Block) {Declaration}* {Form}*\n"
"  Like Do-Nodes, only iterates in reverse order."
msgstr ""
"Oday-Odesnay-Ackwardsbay (Odenay-Arvay Ontcay-Arvay Ockblay) {Eclarationday}"
"* {Ormfay}*\n"
"  Ikelay Oday-Odesnay, onlyway iteratesway inway everseray orderway."

#: target:compiler/macros.lisp
msgid ""
"With-IR1-Environment Node Form*\n"
"  Bind the IR1 context variables so that IR1 conversion can be done after "
"the\n"
"  main conversion pass has finished."
msgstr ""
"Ithway-IRWAY1-Environmentway Odenay Ormfay*\n"
"  Indbay ethay IRWAY1 ontextcay ariablesvay osay atthay IRWAY1 onversioncay "
"ancay ebay oneday afterway ethay\n"
"  ainmay onversioncay asspay ashay inishedfay."

#: target:compiler/macros.lisp
msgid ""
"LEXENV-FIND Name Slot {Key Value}*\n"
"  Look up Name in the lexical environment namespace designated by Slot,\n"
"  returning the <value, T>, or <NIL, NIL> if no entry.  The :TEST keyword\n"
"  may be used to determine the name equality predicate."
msgstr ""
"EXENVLAY-INDFAY Amenay Otslay {Eykay Aluevay}*\n"
"  Ooklay upway Amenay inway ethay exicallay environmentway amespacenay "
"esignatedday ybay Otslay,\n"
"  eturningray ethay <aluevay, T>, orway <ILNAY, ILNAY> ifway onay entryway.  "
"Ethay :ESTTAY eywordkay\n"
"  aymay ebay usedway otay etermineday ethay amenay equalityway edicatepray."

#: target:compiler/macros.lisp
msgid "If true, defprinter print functions print each slot on a separate line."
msgstr ""
"Ifway uetray, efprinterday intpray unctionsfay intpray eachway otslay onway "
"away eparatesay inelay."

#: target:compiler/macros.lisp
msgid ""
"Defprinter Name Slot-Desc*\n"
"  Define some kind of reasonable defstruct structure-print function.  Name\n"
"  is the name of the structure.  We define a function %PRINT-name which\n"
"  prints the slots in the structure in the way described by the Slot-Descs.\n"
"  Each Slot-Desc can be a slot name, indicating that the slot should simply\n"
"  be printed.  A Slot-Desc may also be a list of a slot name and other "
"stuff.\n"
"  The other stuff is composed of keywords followed by expressions.  The\n"
"  expressions are evaluated with the variable which is the slot name bound\n"
"  to the value of the slot.  These keywords are defined:\n"
"  \n"
"  :PRIN1    Print the value of the expression instead of the slot value.\n"
"  :PRINC    Like :PRIN1, only princ the value\n"
"  :TEST     Only print something if the test is true.\n"
"  \n"
"  If no printing thing is specified then the slot value is printed as "
"PRIN1.\n"
"  \n"
"  The structure being printed is bound to Structure and the stream is bound "
"to\n"
"  Stream."
msgstr ""
"Efprinterday Amenay Otslay-Escday*\n"
"  Efineday omesay indkay ofway easonableray efstructday ucturestray-intpray "
"unctionfay.  Amenay\n"
"  isway ethay amenay ofway ethay ucturestray.  Eway efineday away unctionfay "
"%INTPRAY-amenay ichwhay\n"
"  intspray ethay otsslay inway ethay ucturestray inway ethay ayway "
"escribedday ybay ethay Otslay-Escsday.\n"
"  Eachway Otslay-Escday ancay ebay away otslay amenay, indicatingway atthay "
"ethay otslay ouldshay implysay\n"
"  ebay intedpray.  Away Otslay-Escday aymay alsoway ebay away istlay ofway "
"away otslay amenay andway otherway tuffsay.\n"
"  Ethay otherway tuffsay isway omposedcay ofway eywordskay ollowedfay ybay "
"expressionsway.  Ethay\n"
"  expressionsway areway evaluatedway ithway ethay ariablevay ichwhay isway "
"ethay otslay amenay oundbay\n"
"  otay ethay aluevay ofway ethay otslay.  Esethay eywordskay areway "
"efinedday:\n"
"  \n"
"  :INPRAY1    Intpray ethay aluevay ofway ethay expressionway insteadway "
"ofway ethay otslay aluevay.\n"
"  :INCPRAY    Ikelay :INPRAY1, onlyway incpray ethay aluevay\n"
"  :ESTTAY     Onlyway intpray omethingsay ifway ethay esttay isway uetray.\n"
"  \n"
"  Ifway onay intingpray ingthay isway ecifiedspay enthay ethay otslay "
"aluevay isway intedpray asway INPRAY1.\n"
"  \n"
"  Ethay ucturestray eingbay intedpray isway oundbay otay Ucturestray andway "
"ethay eamstray isway oundbay otay\n"
"  Eamstray."

#: target:compiler/macros.lisp
msgid "Losing Defprinter option: ~S."
msgstr "Osinglay Efprinterday optionway: ~S."

#: target:compiler/macros.lisp
msgid "Unknown attribute name: ~S."
msgstr "Unknownway attributeway amenay: ~S."

#: target:compiler/macros.lisp
msgid ""
"Def-Boolean-Attribute Name Attribute-Name*\n"
"  Define a new class of boolean attributes, with the attributes havin the\n"
"  specified Attribute-Names.  Name is the name of the class, which is used "
"to\n"
"  generate some macros to manipulate sets of the attributes: \n"
"\n"
"    NAME-attributep attributes attribute-name*\n"
"      Return true if one of the named attributes is present, false "
"otherwise.\n"
"      When set with SETF, updates the place Attributes setting or clearing "
"the\n"
"      specified attributes.\n"
"\n"
"    NAME-attributes attribute-name*\n"
"      Return a set of the named attributes."
msgstr ""
"Efday-Ooleanbay-Attributeway Amenay Attributeway-Amenay*\n"
"  Efineday away ewnay assclay ofway ooleanbay attributesway, ithway ethay "
"attributesway avinhay ethay\n"
"  ecifiedspay Attributeway-Amesnay.  Amenay isway ethay amenay ofway ethay "
"assclay, ichwhay isway usedway otay\n"
"  enerategay omesay acrosmay otay anipulatemay etssay ofway ethay "
"attributesway: \n"
"\n"
"    AMENAY-attributepway attributesway attributeway-amenay*\n"
"      Eturnray uetray ifway oneway ofway ethay amednay attributesway isway "
"esentpray, alsefay otherwiseway.\n"
"      Enwhay etsay ithway ETFSAY, updatesway ethay aceplay Attributesway "
"ettingsay orway earingclay ethay\n"
"      ecifiedspay attributesway.\n"
"\n"
"    AMENAY-attributesway attributeway-amenay*\n"
"      Eturnray away etsay ofway ethay amednay attributesway."

#: target:compiler/macros.lisp
msgid ""
"Automagically generated boolean attribute test function.  See\n"
"\t    Def-Boolean-Attribute."
msgstr ""
"Automagicallyway eneratedgay ooleanbay attributeway esttay unctionfay.  "
"Eesay\n"
"\t    Efday-Ooleanbay-Attributeway."

#: target:compiler/macros.lisp
msgid ""
"Automagically generated boolean attribute setter.  See\n"
"\t    Def-Boolean-Attribute."
msgstr ""
"Automagicallyway eneratedgay ooleanbay attributeway ettersay.  Eesay\n"
"\t    Efday-Ooleanbay-Attributeway."

#: target:compiler/macros.lisp
msgid ""
"Automagically generated boolean attribute creation function.  See\n"
"\t    Def-Boolean-Attribute."
msgstr ""
"Automagicallyway eneratedgay ooleanbay attributeway eationcray unctionfay.  "
"Eesay\n"
"\t    Efday-Ooleanbay-Attributeway."

#: target:compiler/macros.lisp
msgid ""
"Returns the union of all the sets of boolean attributes which are its\n"
"  arguments."
msgstr ""
"Eturnsray ethay unionway ofway allway ethay etssay ofway ooleanbay "
"attributesway ichwhay areway itsway\n"
"  argumentsway."

#: target:compiler/macros.lisp
msgid ""
"Returns the intersection of all the sets of boolean attributes which are "
"its\n"
"  arguments."
msgstr ""
"Eturnsray ethay intersectionway ofway allway ethay etssay ofway ooleanbay "
"attributesway ichwhay areway itsway\n"
"  argumentsway."

#: target:compiler/macros.lisp
msgid ""
"Returns true if the attributes present in Attr1 are indentical to those in\n"
"  Attr2."
msgstr ""
"Eturnsray uetray ifway ethay attributesway esentpray inway Attrway1 areway "
"indenticalway otay osethay inway\n"
"  Attrway2."

#: target:compiler/macros.lisp
msgid "~S is not the name of an event."
msgstr "~S isway otnay ethay amenay ofway anway eventway."

#: target:compiler/macros.lisp
msgid "Return the number of times that Event has happened."
msgstr ""
"Eturnray ethay umbernay ofway imestay atthay Eventway ashay appenedhay."

#: target:compiler/macros.lisp
msgid ""
"Return the function that is called when Event happens.  If this is null,\n"
"  there is no action.  The function is passed the node to which the event\n"
"  happened, or NIL if there is no relevant node.  This may be set with SETF."
msgstr ""
"Eturnray ethay unctionfay atthay isway alledcay enwhay Eventway appenshay.  "
"Ifway isthay isway ullnay,\n"
"  erethay isway onay actionway.  Ethay unctionfay isway assedpay ethay "
"odenay otay ichwhay ethay eventway\n"
"  appenedhay, orway ILNAY ifway erethay isway onay elevantray odenay.  "
"Isthay aymay ebay etsay ithway ETFSAY."

#: target:compiler/macros.lisp
msgid ""
"Return the non-negative integer which represents the level of significance\n"
"  of the event Name.  This is used to determine whether to print a message "
"when\n"
"  the event happens.  This may be set with SETF."
msgstr ""
"Eturnray ethay onnay-egativenay integerway ichwhay epresentsray ethay "
"evellay ofway ignificancesay\n"
"  ofway ethay eventway Amenay.  Isthay isway usedway otay etermineday "
"etherwhay otay intpray away essagemay enwhay\n"
"  ethay eventway appenshay.  Isthay aymay ebay etsay ithway ETFSAY."

#: target:compiler/macros.lisp
msgid ""
"Defevent Name Description\n"
"  Define a new kind of event.  Name is a symbol which names the event and\n"
"  Description is a string which describes the event.  Level (default 0) is "
"the\n"
"  level of significance associated with this event; it is used to determine\n"
"  whether to print a Note when the event happens."
msgstr ""
"Efeventday Amenay Escriptionday\n"
"  Efineday away ewnay indkay ofway eventway.  Amenay isway away ymbolsay "
"ichwhay amesnay ethay eventway andway\n"
"  Escriptionday isway away ingstray ichwhay escribesday ethay eventway.  "
"Evellay (efaultday 0) isway ethay\n"
"  evellay ofway ignificancesay associatedway ithway isthay eventway; itway "
"isway usedway otay etermineday\n"
"  etherwhay otay intpray away Otenay enwhay ethay eventway appenshay."

#: target:compiler/macros.lisp
msgid ""
"This variable is a non-negative integer specifying the lowest level of\n"
"  event that will print a Note when it occurs."
msgstr ""
"Isthay ariablevay isway away onnay-egativenay integerway ecifyingspay ethay "
"owestlay evellay ofway\n"
"  eventway atthay illway intpray away Otenay enwhay itway occursway."

#: target:compiler/macros.lisp
msgid ""
"Event Name Node\n"
"  Note that the event with the specified Name has happened.  Node is "
"evaluated\n"
"  to determine the node to which the event happened."
msgstr ""
"Eventway Amenay Odenay\n"
"  Otenay atthay ethay eventway ithway ethay ecifiedspay Amenay ashay "
"appenedhay.  Odenay isway evaluatedway\n"
"  otay etermineday ethay odenay otay ichwhay ethay eventway appenedhay."

#: target:compiler/macros.lisp
msgid ""
"Print a listing of events and their counts, sorted by the count.  Events\n"
"  that happened fewer than Min-Count times will not be printed.  Stream is "
"the\n"
"  stream to write to."
msgstr ""
"Intpray away istinglay ofway eventsway andway eirthay ountscay, ortedsay "
"ybay ethay ountcay.  Eventsway\n"
"  atthay appenedhay ewerfay anthay Inmay-Ountcay imestay illway otnay ebay "
"intedpray.  Eamstray isway ethay\n"
"  eamstray otay itewray otay."

#: target:compiler/macros.lisp
msgid ""
"Find Element in a null-terminated List linked by the accessor function\n"
"  Next.  Key, Test and Test-Not are the same as for generic sequence\n"
"  functions."
msgstr ""
"Indfay Elementway inway away ullnay-erminatedtay Istlay inkedlay ybay ethay "
"accessorway unctionfay\n"
"  Extnay.  Eykay, Esttay andway Esttay-Otnay areway ethay amesay asway orfay "
"enericgay equencesay\n"
"  unctionsfay."

#: target:compiler/debug.lisp target:compiler/pack.lisp
#: target:compiler/represent.lisp target:compiler/copyprop.lisp
#: target:compiler/life.lisp target:compiler/macros.lisp
msgid "Silly to supply both :Test and :Test-Not."
msgstr "Illysay otay upplysay othbay :Esttay andway :Esttay-Otnay."

#: target:compiler/macros.lisp
msgid ""
"Return the position of Element (or NIL if absent) in a null-terminated List\n"
"  linked by the accessor function Next.  Key, Test and Test-Not are the same "
"as\n"
"  for generic sequence functions."
msgstr ""
"Eturnray ethay ositionpay ofway Elementway (orway ILNAY ifway absentway) "
"inway away ullnay-erminatedtay Istlay\n"
"  inkedlay ybay ethay accessorway unctionfay Extnay.  Eykay, Esttay andway "
"Esttay-Otnay areway ethay amesay asway\n"
"  orfay enericgay equencesay unctionsfay."

#: target:compiler/macros.lisp
msgid ""
"Map Function over the elements in a null-terminated List linked by the\n"
"  accessor function Next, returning a list of the results."
msgstr ""
"Apmay Unctionfay overway ethay elementsway inway away ullnay-erminatedtay "
"Istlay inkedlay ybay ethay\n"
"  accessorway unctionfay Extnay, eturningray away istlay ofway ethay "
"esultsray."

#: target:compiler/macros.lisp
msgid ""
"Deletef-In Next Place Item\n"
"  Delete Item from a null-terminated list linked by the accessor function "
"Next\n"
"  that is stored in Place.  Item must appear exactly once in the list."
msgstr ""
"Eletefday-Inway Extnay Aceplay Itemway\n"
"  Eleteday Itemway omfray away ullnay-erminatedtay istlay inkedlay ybay "
"ethay accessorway unctionfay Extnay\n"
"  atthay isway toredsay inway Aceplay.  Itemway ustmay appearway exactlyway "
"onceway inway ethay istlay."

#: target:compiler/macros.lisp
msgid ""
"Push Item onto a list linked by the accessor function Next that is stored "
"in\n"
"  Place."
msgstr ""
"Ushpay Itemway ontoway away istlay inkedlay ybay ethay accessorway "
"unctionfay Extnay atthay isway toredsay inway\n"
"  Aceplay."

#: target:compiler/debug-dump.lisp target:compiler/checkgen.lisp
#: target:compiler/ir1util.lisp target:compiler/meta-vmdef.lisp
#: target:compiler/macros.lisp
msgid "Shouldn't happen?"
msgstr "Ouldnshay't appenhay?"

#: target:compiler/macros.lisp
msgid "Redefining modular version ~S of ~S for width ~S."
msgstr "Edefiningray odularmay ersionvay ~S ofway ~S orfay idthway ~S."

#: target:compiler/macros.lisp
msgid ""
"Lambda list keyword ~S is not supported for ~\n"
"              modular function lambda lists."
msgstr ""
"Ambdalay istlay eywordkay ~S isway otnay upportedsay orfay ~\n"
"              odularmay unctionfay ambdalay istslay."

#: target:compiler/generic/vm-macs.lisp
msgid "No more slots can follow a :rest-p slot."
msgstr "Onay oremay otsslay ancay ollowfay away :estray-p otslay."

#: target:compiler/generic/vm-macs.lisp
msgid ""
"Number of slots used by each ~S~\n"
"\t\t\t\t  ~@[~* including the header~]."
msgstr ""
"Umbernay ofway otsslay usedway ybay eachway ~S~\n"
"\t\t\t\t  ~@[~* includingway ethay eaderhay~]."

#: target:compiler/backend.lisp
msgid ""
"Machine specific support routine ~S ~\n"
"\t\t\t\t  undefined for ~S"
msgstr ""
"Achinemay ecificspay upportsay outineray ~S ~\n"
"\t\t\t\t  undefinedway orfay ~S"

#: target:compiler/backend.lisp
msgid "Unknown VM support routine: ~A"
msgstr "Unknownway MVAY upportsay outineray: ~Away"

#: target:compiler/backend.lisp
msgid "The backend for the machine we are running on. Do not change this."
msgstr ""
"Ethay ackendbay orfay ethay achinemay eway areway unningray onway. Oday "
"otnay angechay isthay."

#: target:compiler/backend.lisp
msgid "The backend we are attempting to compile."
msgstr "Ethay ackendbay eway areway attemptingway otay ompilecay."

#: target:compiler/backend.lisp
msgid "The backend we are using to compile with."
msgstr "Ethay ackendbay eway areway usingway otay ompilecay ithway."

#: target:compiler/backend.lisp
msgid "Compute the *FEATURES* list to use with BACKEND."
msgstr "Omputecay ethay *EATURESFAY* istlay otay useway ithway ACKENDBAY."

#: target:compiler/backend.lisp
msgid ""
"Same as EXT:FEATUREP, except use the features found in *TARGET-BACKEND*."
msgstr ""
"Amesay asway EXTWAY:EATUREPFAY, exceptway useway ethay eaturesfay oundfay "
"inway *ARGETTAY-ACKENDBAY*."

#: target:compiler/backend.lisp
msgid "Same as EXT:FEATUREP, except use the features found in *BACKEND*."
msgstr ""
"Amesay asway EXTWAY:EATUREPFAY, exceptway useway ethay eaturesfay oundfay "
"inway *ACKENDBAY*."

#: target:compiler/backend.lisp
msgid ""
"Same as EXT:FEATUREP, except use the features found in *NATIVE-BACKEND*."
msgstr ""
"Amesay asway EXTWAY:EATUREPFAY, exceptway useway ethay eaturesfay oundfay "
"inway *ATIVENAY-ACKENDBAY*."

#: target:compiler/generic/objdef.lisp
msgid "Number of bits at the low end of a pointer used for type information."
msgstr ""
"Umbernay ofway itsbay atway ethay owlay endway ofway away ointerpay usedway "
"orfay ypetay informationway."

#: target:compiler/generic/objdef.lisp
msgid "Mask to extract the low tag bits from a pointer."
msgstr "Askmay otay extractway ethay owlay agtay itsbay omfray away ointerpay."

#: target:compiler/generic/objdef.lisp
msgid ""
"Exclusive upper bound on the value of the low tag bits from a\n"
"  pointer."
msgstr ""
"Exclusiveway upperway oundbay onway ethay aluevay ofway ethay owlay agtay "
"itsbay omfray away\n"
"  ointerpay."

#: target:compiler/generic/objdef.lisp
msgid "Number of bits used in the header word of a data block for typeing."
msgstr ""
"Umbernay ofway itsbay usedway inway ethay eaderhay ordway ofway away ataday "
"ockblay orfay ypeingtay."

#: target:compiler/generic/objdef.lisp
msgid "Mask to extract the type from a header word."
msgstr "Askmay otay extractway ethay ypetay omfray away eaderhay ordway."

#: target:compiler/generic/objdef.lisp
msgid "most-positive-fixnum in the target architecture."
msgstr "ostmay-ositivepay-ixnumfay inway ethay argettay architectureway."

#: target:compiler/generic/objdef.lisp
msgid "most-negative-fixnum in the target architecture."
msgstr "ostmay-egativenay-ixnumfay inway ethay argettay architectureway."

#: target:compiler/generic/interr.lisp
msgid "Unknown internal error: ~S"
msgstr "Unknownway internalway errorway: ~S"

#: target:compiler/bit-util.lisp
msgid "local-tn-limit not a vm:word-bits multiple."
msgstr "ocallay-ntay-imitlay otnay away mvay:ordway-itsbay ultiplemay."

#: target:compiler/pack.lisp target:compiler/generic/vm-tran.lisp
#: target:compiler/life.lisp target:compiler/bit-util.lisp
msgid ""
"Argument and/or result bit arrays not the same length:~\n"
"\t\t\t ~%  ~S~%  ~S  ~%  ~S"
msgstr ""
"Argumentway andway/orway esultray itbay arraysway otnay ethay amesay "
"engthlay:~\n"
"\t\t\t ~%  ~S~%  ~S  ~%  ~S"

#: target:compiler/locall.lisp target:compiler/ctype.lisp
msgid "Function called with ~R argument~:P, but wants exactly ~R."
msgstr ""
"Unctionfay alledcay ithway ~R argumentway~:P, utbay antsway exactlyway ~R."

#: target:compiler/locall.lisp target:compiler/ctype.lisp
msgid "Function called with ~R argument~:P, but wants at least ~R."
msgstr ""
"Unctionfay alledcay ithway ~R argumentway~:P, utbay antsway atway eastlay ~R."

#: target:compiler/locall.lisp target:compiler/ctype.lisp
msgid "Function called with ~R argument~:P, but wants at most ~R."
msgstr ""
"Unctionfay alledcay ithway ~R argumentway~:P, utbay antsway atway ostmay ~R."

#: target:compiler/ctype.lisp
msgid "Function has an odd number of arguments in the keyword portion."
msgstr ""
"Unctionfay ashay anway oddway umbernay ofway argumentsway inway ethay "
"eywordkay ortionpay."

#: target:compiler/ctype.lisp
msgid "Can't tell whether the result is a ~S."
msgstr "Ancay't elltay etherwhay ethay esultray isway away ~S."

#: target:compiler/ctype.lisp
msgid "The result is a ~S, not a ~S."
msgstr "Ethay esultray isway away ~S, otnay away ~S."

#: target:compiler/ctype.lisp
msgid "Can't tell whether the ~:R argument is a ~S."
msgstr "Ancay't elltay etherwhay ethay ~:R argumentway isway away ~S."

#: target:compiler/ctype.lisp
msgid "The ~:R argument is a ~S, not a ~S."
msgstr "Ethay ~:R argumentway isway away ~S, otnay away ~S."

#: target:compiler/ctype.lisp
msgid "The ~:R argument never returns a value."
msgstr "Ethay ~:R argumentway evernay eturnsray away aluevay."

#: target:compiler/ctype.lisp
msgid "The ~:R argument is not a constant."
msgstr "Ethay ~:R argumentway isway otnay away onstantcay."

#: target:compiler/ctype.lisp
msgid ""
"Can't tell whether the ~:R argument is a ~\n"
"\t\t             constant ~S:~%  ~S"
msgstr ""
"Ancay't elltay etherwhay ethay ~:R argumentway isway away ~\n"
"\t\t             onstantcay ~S:~%  ~S"

#: target:compiler/ctype.lisp
msgid "The ~:R argument is not a constant ~S:~%  ~S"
msgstr "Ethay ~:R argumentway isway otnay away onstantcay ~S:~%  ~S"

#: target:compiler/ctype.lisp
msgid "The ~:R argument (in keyword position) is not a constant."
msgstr ""
"Ethay ~:R argumentway (inway eywordkay ositionpay) isway otnay away "
"onstantcay."

#: target:compiler/ctype.lisp
msgid "The value of ~S is not a constant"
msgstr "Ethay aluevay ofway ~S isway otnay away onstantcay"

#: target:compiler/ctype.lisp
msgid "~S is not a known argument keyword."
msgstr "~S isway otnay away nownkay argumentway eywordkay."

#: target:compiler/ctype.lisp
msgid "Function previously called with ~R argument~:P, but wants at least ~R."
msgstr ""
"Unctionfay eviouslypray alledcay ithway ~R argumentway~:P, utbay antsway "
"atway eastlay ~R."

#: target:compiler/ctype.lisp
msgid "Function previously called with ~R argument~:P, but wants at most ~R."
msgstr ""
"Unctionfay eviouslypray alledcay ithway ~R argumentway~:P, utbay antsway "
"atway ostmay ~R."

#: target:compiler/ctype.lisp
msgid ""
"Function previously called with an odd number of arguments in ~\n"
"\t      the keyword portion."
msgstr ""
"Unctionfay eviouslypray alledcay ithway anway oddway umbernay ofway "
"argumentsway inway ~\n"
"\t      ethay eywordkay ortionpay."

#: target:compiler/ctype.lisp
msgid "Can't tell whether previous ~? argument type ~S is a ~S."
msgstr ""
"Ancay't elltay etherwhay eviouspray ~? argumentway ypetay ~S isway away ~S."

#: target:compiler/ctype.lisp
msgid "~:(~?~) argument should be a ~S but was a ~S in a previous call."
msgstr ""
"~:(~?~) argumentway ouldshay ebay away ~S utbay asway away ~S inway away "
"eviouspray allcay."

#: target:compiler/ctype.lisp
msgid "Function previously called with unknown argument keyword ~S."
msgstr ""
"Unctionfay eviouslypray alledcay ithway unknownway argumentway eywordkay ~S."

#: target:compiler/ctype.lisp
msgid ""
"Definition's declared type for variable ~A:~%  ~S~@\n"
"\t\t   conflicts with this type from ~A:~%  ~S"
msgstr ""
"Efinitionday's eclaredday ypetay orfay ariablevay ~Away:~%  ~S~@\n"
"\t\t   onflictscay ithway isthay ypetay omfray ~Away:~%  ~S"

#: target:compiler/ctype.lisp
msgid "Definition has ~R ~A arg~P, but ~A has ~R."
msgstr "Efinitionday ashay ~R ~Away argway~P, utbay ~Away ashay ~R."

#.  Translate FIXED above appropriately.
#: target:compiler/ctype.lisp
msgid "fixed"
msgstr "ixedfay"

#.  Translate OPTIONAL above appropriately.
#: target:compiler/ctype.lisp
msgid "optional"
msgstr "optionalway"

#: target:compiler/ctype.lisp
msgid ""
"Definition ~:[doesn't have~;has~] ~A, but ~\n"
"\t\t~A ~:[doesn't~;does~]."
msgstr ""
"Efinitionday ~:[oesnday't avehay~;ashay~] ~Away, utbay ~\n"
"\t\t~Away ~:[oesnday't~;oesday~]."

#: target:compiler/ctype.lisp
msgid "keyword args"
msgstr "eywordkay argsway"

#: target:compiler/ctype.lisp
msgid "rest args"
msgstr "estray argsway"

#: target:compiler/ctype.lisp
msgid "Defining a ~S keyword not present in ~A."
msgstr "Efiningday away ~S eywordkay otnay esentpray inway ~Away."

#: target:compiler/ctype.lisp
msgid "Definition lacks the ~S keyword present in ~A."
msgstr "Efinitionday ackslay ethay ~S eywordkay esentpray inway ~Away."

#: target:compiler/ctype.lisp
msgid "Definition has no ~A, but the ~A did."
msgstr "Efinitionday ashay onay ~Away, utbay ethay ~Away idday."

#: target:compiler/ctype.lisp
msgid "optional args"
msgstr "optionalway argsway"

#: target:compiler/ctype.lisp
msgid "rest arg"
msgstr "estray argway"

#: target:compiler/ctype.lisp
msgid "Definition has ~R arg~:P, but the ~A has ~R."
msgstr "Efinitionday ashay ~R argway~:P, utbay ethay ~Away ashay ~R."

#: target:compiler/ctype.lisp
msgid "previous declaration"
msgstr "eviouspray eclarationday"

#: target:compiler/ctype.lisp
msgid ""
"The result type from ~A:~%  ~S~@\n"
"\t   conflicts with the definition's result type assertion:~%  ~S"
msgstr ""
"Ethay esultray ypetay omfray ~Away:~%  ~S~@\n"
"\t   onflictscay ithway ethay efinitionday's esultray ypetay assertionway:~"
"%  ~S"

#: target:compiler/ctype.lisp
msgid ""
"Assignment to argument: ~S~%  ~\n"
"\t\t\t       prevents use of assertion from function ~\n"
"\t\t\t       type ~A:~%  ~S~%"
msgstr ""
"Assignmentway otay argumentway: ~S~%  ~\n"
"\t\t\t       eventspray useway ofway assertionway omfray unctionfay ~\n"
"\t\t\t       ypetay ~Away:~%  ~S~%"

#: target:compiler/vmdef.lisp
msgid "~S is not a defined template."
msgstr "~S isway otnay away efinedday emplatetay."

#: target:compiler/vmdef.lisp
msgid "~S is not a defined storage class."
msgstr "~S isway otnay away efinedday toragesay assclay."

#: target:compiler/vmdef.lisp
msgid "~S is not a defined storage base."
msgstr "~S isway otnay away efinedday toragesay asebay."

#: target:compiler/meta-vmdef.lisp target:compiler/vmdef.lisp
msgid "~S is not a defined primitive type."
msgstr "~S isway otnay away efinedday imitivepray ypetay."

#: target:compiler/vmdef.lisp
msgid ""
"NOTE-THIS-LOCATION VOP Kind\n"
"  Note that the current code location is an interesting (to the debugger)\n"
"  location of the specified Kind.  VOP is the VOP responsible for this "
"code.\n"
"  This VOP must specify some non-null :SAVE-P value (perhaps :COMPUTE-ONLY) "
"so\n"
"  that the live set is computed."
msgstr ""
"OTENAY-ISTHAY-OCATIONLAY OPVAY Indkay\n"
"  Otenay atthay ethay urrentcay odecay ocationlay isway anway interestingway "
"(otay ethay ebuggerday)\n"
"  ocationlay ofway ethay ecifiedspay Indkay.  OPVAY isway ethay OPVAY "
"esponsibleray orfay isthay odecay.\n"
"  Isthay OPVAY ustmay ecifyspay omesay onnay-ullnay :AVESAY-P aluevay "
"(erhapspay :OMPUTECAY-ONLYWAY) osay\n"
"  atthay ethay ivelay etsay isway omputedcay."

#: target:compiler/vmdef.lisp
msgid ""
"NOTE-NEXT-INSTRUCTION VOP Kind\n"
"   Similar to NOTE-THIS-LOCATION, except the use the location of the next\n"
"   instruction for the code location, wherever the scheduler decided to put\n"
"   it."
msgstr ""
"OTENAY-EXTNAY-INSTRUCTIONWAY OPVAY Indkay\n"
"   Imilarsay otay OTENAY-ISTHAY-OCATIONLAY, exceptway ethay useway ethay "
"ocationlay ofway ethay extnay\n"
"   instructionway orfay ethay odecay ocationlay, ereverwhay ethay "
"edulerschay ecidedday otay utpay\n"
"   itway."

#: target:compiler/meta-vmdef.lisp
msgid ""
"Define-Storage-Base Name Kind {Key Value}*\n"
"  Define a storage base having the specified Name.  Kind may be :Finite,\n"
"  :Unbounded or :Non-Packed.  The following keywords are legal:\n"
"\n"
"  :Size <Size>\n"
"      Specify the number of locations in a :Finite SB or the initial size of "
"a\n"
"      :Unbounded SB."
msgstr ""
"Efineday-Toragesay-Asebay Amenay Indkay {Eykay Aluevay}*\n"
"  Efineday away toragesay asebay avinghay ethay ecifiedspay Amenay.  Indkay "
"aymay ebay :Initefay,\n"
"  :Unboundedway orway :Onnay-Ackedpay.  Ethay ollowingfay eywordskay areway "
"egallay:\n"
"\n"
"  :Izesay <Izesay>\n"
"      Ecifyspay ethay umbernay ofway ocationslay inway away :Initefay BSAY "
"orway ethay initialway izesay ofway away\n"
"      :Unboundedway BSAY."

#: target:compiler/meta-vmdef.lisp
msgid "Size specification meaningless in a ~S SB."
msgstr "Izesay ecificationspay eaninglessmay inway away ~S BSAY."

#: target:compiler/meta-vmdef.lisp
msgid "Size not specified in a ~S SB."
msgstr "Izesay otnay ecifiedspay inway away ~S BSAY."

#: target:compiler/meta-vmdef.lisp
msgid ""
"Define-Storage-Class Name Number Storage-Base {Key Value}*\n"
"  Define a storage class Name that uses the named Storage-Base.  Number is "
"a\n"
"  small, non-negative integer that is used as an alias.  The following\n"
"  keywords are defined:\n"
"\n"
"  :Element-Size Size\n"
"      The size of objects in this SC in whatever units the SB uses.  This\n"
"      defaults to 1.\n"
"\n"
"  :Alignment Size\n"
"      The alignment restrictions for this SC.  TNs will only be allocated "
"at\n"
"      offsets that are an even multiple of this number.  Defaults to 1.\n"
"\n"
"  :Locations (Location*)\n"
"      If the SB is :Finite, then this is a list of the offsets within the "
"SB\n"
"      that are in this SC.\n"
"\n"
"  :Reserve-Locations (Location*)\n"
"      A subset of the Locations that the register allocator should try to\n"
"      reserve for operand loading (instead of to hold variable values.)\n"
"\n"
"  :Save-P {T | NIL}\n"
"      If T, then values stored in this SC must be saved in one of the\n"
"      non-save-p :Alternate-SCs across calls.\n"
"\n"
"  :Alternate-SCs (SC*)\n"
"      Indicates other SCs that can be used to hold values from this SC "
"across\n"
"      calls or when storage in this SC is exhausted.  The SCs should be\n"
"      specified in order of decreasing \"goodness\".  There must be at "
"least\n"
"      one SC in an unbounded SB, unless this SC is only used for restricted "
"or\n"
"      wired TNs.\n"
"\n"
"  :Constant-SCs (SC*)\n"
"      A list of the names of all the constant SCs that can be loaded into "
"this\n"
"      SC by a move function."
msgstr ""
"Efineday-Toragesay-Assclay Amenay Umbernay Toragesay-Asebay {Eykay Aluevay}"
"*\n"
"  Efineday away toragesay assclay Amenay atthay usesway ethay amednay "
"Toragesay-Asebay.  Umbernay isway away\n"
"  mallsay, onnay-egativenay integerway atthay isway usedway asway anway "
"aliasway.  Ethay ollowingfay\n"
"  eywordskay areway efinedday:\n"
"\n"
"  :Elementway-Izesay Izesay\n"
"      Ethay izesay ofway objectsway inway isthay SCAY inway ateverwhay "
"unitsway ethay BSAY usesway.  Isthay\n"
"      efaultsday otay 1.\n"
"\n"
"  :Alignmentway Izesay\n"
"      Ethay alignmentway estrictionsray orfay isthay SCAY.  Nstay illway "
"onlyway ebay allocatedway atway\n"
"      offsetsway atthay areway anway evenway ultiplemay ofway isthay "
"umbernay.  Efaultsday otay 1.\n"
"\n"
"  :Ocationslay (Ocationlay*)\n"
"      Ifway ethay BSAY isway :Initefay, enthay isthay isway away istlay "
"ofway ethay offsetsway ithinway ethay BSAY\n"
"      atthay areway inway isthay SCAY.\n"
"\n"
"  :Eserveray-Ocationslay (Ocationlay*)\n"
"      Away ubsetsay ofway ethay Ocationslay atthay ethay egisterray "
"allocatorway ouldshay ytray otay\n"
"      eserveray orfay operandway oadinglay (insteadway ofway otay oldhay "
"ariablevay aluesvay.)\n"
"\n"
"  :Avesay-P {T | ILNAY}\n"
"      Ifway T, enthay aluesvay toredsay inway isthay SCAY ustmay ebay "
"avedsay inway oneway ofway ethay\n"
"      onnay-avesay-p :Alternateway-Sscay acrossway allscay.\n"
"\n"
"  :Alternateway-Sscay (SCAY*)\n"
"      Indicatesway otherway Sscay atthay ancay ebay usedway otay oldhay "
"aluesvay omfray isthay SCAY acrossway\n"
"      allscay orway enwhay toragesay inway isthay SCAY isway exhaustedway.  "
"Ethay Sscay ouldshay ebay\n"
"      ecifiedspay inway orderway ofway ecreasingday \"oodnessgay\".  Erethay "
"ustmay ebay atway eastlay\n"
"      oneway SCAY inway anway unboundedway BSAY, unlessway isthay SCAY isway "
"onlyway usedway orfay estrictedray orway\n"
"      iredway Nstay.\n"
"\n"
"  :Onstantcay-Sscay (SCAY*)\n"
"      Away istlay ofway ethay amesnay ofway allway ethay onstantcay Sscay "
"atthay ancay ebay oadedlay intoway isthay\n"
"      SCAY ybay away ovemay unctionfay."

#: target:compiler/meta-vmdef.lisp
msgid "Alignment is not a power of two: ~S"
msgstr "Alignmentway isway otnay away owerpay ofway wotay: ~S"

#: target:compiler/meta-vmdef.lisp
msgid "SC element ~D out of bounds for ~S."
msgstr "SCAY elementway ~D outway ofway oundsbay orfay ~S."

#: target:compiler/meta-vmdef.lisp
msgid ":Locations is meaningless in a ~S SB."
msgstr ":Ocationslay isway eaninglessmay inway away ~S BSAY."

#: target:compiler/meta-vmdef.lisp
msgid "Reserve-Locations not a subset of Locations."
msgstr "Eserveray-Ocationslay otnay away ubsetsay ofway Ocationslay."

#: target:compiler/meta-vmdef.lisp
msgid "Meaningless to specify alternate or constant SCs in a ~S SB."
msgstr ""
"Eaninglessmay otay ecifyspay alternateway orway onstantcay Sscay inway away "
"~S BSAY."

#: target:compiler/x86/vm.lisp target:compiler/meta-vmdef.lisp
msgid "Redefining SC number ~D from ~S to ~S."
msgstr "Edefiningray SCAY umbernay ~D omfray ~S otay ~S."

#: target:compiler/meta-vmdef.lisp
msgid ""
"Define-Move-Function (Name Cost) lambda-list ({(From-SC*) (To-SC*)}*) form*\n"
"  Define the function Name and note it as the function used for moving "
"operands\n"
"  from the From-SCs to the To-SCs.  Cost is the cost of this move "
"operation.\n"
"  The function is called with three arguments: the VOP (for context), and "
"the\n"
"  source and destination TNs.  An ASSEMBLE form is wrapped around the body.\n"
"  All uses of DEFINE-MOVE-FUNCTION should be compiled before any uses of\n"
"  DEFINE-VOP."
msgstr ""
"Efineday-Ovemay-Unctionfay (Amenay Ostcay) ambdalay-istlay ({(Omfray-SCAY*) "
"(Otay-SCAY*)}*) ormfay*\n"
"  Efineday ethay unctionfay Amenay andway otenay itway asway ethay "
"unctionfay usedway orfay ovingmay operandsway\n"
"  omfray ethay Omfray-Sscay otay ethay Otay-Sscay.  Ostcay isway ethay "
"ostcay ofway isthay ovemay operationway.\n"
"  Ethay unctionfay isway alledcay ithway reethay argumentsway: ethay OPVAY "
"(orfay ontextcay), andway ethay\n"
"  ourcesay andway estinationday Nstay.  Anway ASSEMBLEWAY ormfay isway "
"appedwray aroundway ethay odybay.\n"
"  Allway usesway ofway EFINEDAY-OVEMAY-UNCTIONFAY ouldshay ebay ompiledcay "
"eforebay anyway usesway ofway\n"
"  EFINEDAY-OPVAY."

#: target:compiler/meta-vmdef.lisp
msgid "Malformed SCs spec: ~S."
msgstr "Alformedmay Sscay ecspay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid ""
"Define-Move-VOP Name {:Move | :Move-Argument} {(From-SC*) (To-SC*)}*\n"
"  Make Name be the VOP used to move values in the specified From-SCs to the\n"
"  representation of the To-SCs.  If kind is :Move-Argument, then the VOP "
"takes\n"
"  an extra argument, which is the frame pointer of the frame to move into."
msgstr ""
"Efineday-Ovemay-OPVAY Amenay {:Ovemay | :Ovemay-Argumentway} {(Omfray-SCAY*) "
"(Otay-SCAY*)}*\n"
"  Akemay Amenay ebay ethay OPVAY usedway otay ovemay aluesvay inway ethay "
"ecifiedspay Omfray-Sscay otay ethay\n"
"  epresentationray ofway ethay Otay-Sscay.  Ifway indkay isway :Ovemay-"
"Argumentway, enthay ethay OPVAY akestay\n"
"  anway extraway argumentway, ichwhay isway ethay amefray ointerpay ofway "
"ethay amefray otay ovemay intoway."

#: target:compiler/meta-vmdef.lisp
msgid "Unknown kind ~S."
msgstr "Unknownway indkay ~S."

#: target:compiler/meta-vmdef.lisp
msgid ""
"Def-Primitive-Type Name (SC*) {Key Value}*\n"
"   Define a primitive type Name.  Each SC specifies a Storage Class that "
"values\n"
"   of this type may be allocated in.  The following keyword options are\n"
"   defined:\n"
"  \n"
"  :Type\n"
"      The type descriptor for the Lisp type that is equivalent to this type\n"
"      (defaults to Name.)"
msgstr ""
"Efday-Imitivepray-Ypetay Amenay (SCAY*) {Eykay Aluevay}*\n"
"   Efineday away imitivepray ypetay Amenay.  Eachway SCAY ecifiesspay away "
"Toragesay Assclay atthay aluesvay\n"
"   ofway isthay ypetay aymay ebay allocatedway inway.  Ethay ollowingfay "
"eywordkay optionsway areway\n"
"   efinedday:\n"
"  \n"
"  :Ypetay\n"
"      Ethay ypetay escriptorday orfay ethay Isplay ypetay atthay isway "
"equivalentway otay isthay ypetay\n"
"      (efaultsday otay Amenay.)"

#: target:compiler/meta-vmdef.lisp
msgid ""
"DEF-PRIMITIVE-TYPE-ALIAS Name Result\n"
"  Define name to be an alias for Result in VOP operand type restrictions."
msgstr ""
"EFDAY-IMITIVEPRAY-YPETAY-ALIASWAY Amenay Esultray\n"
"  Efineday amenay otay ebay anway aliasway orfay Esultray inway OPVAY "
"operandway ypetay estrictionsray."

#: target:compiler/meta-vmdef.lisp
msgid ""
"Primitive-Type-VOP Vop (Kind*) Type*\n"
"  Annotate all the specified primitive Types with the named VOP under each "
"of\n"
"  the specified kinds:\n"
"\n"
"  :Check\n"
"      A one argument one result VOP that moves the argument to the result,\n"
"      checking that the value is of this type in the process."
msgstr ""
"Imitivepray-Ypetay-OPVAY Opvay (Indkay*) Ypetay*\n"
"  Annotateway allway ethay ecifiedspay imitivepray Ypestay ithway ethay "
"amednay OPVAY underway eachway ofway\n"
"  ethay ecifiedspay indskay:\n"
"\n"
"  :Eckchay\n"
"      Away oneway argumentway oneway esultray OPVAY atthay ovesmay ethay "
"argumentway otay ethay esultray,\n"
"      eckingchay atthay ethay aluevay isway ofway isthay ypetay inway ethay "
"ocesspray."

#: target:compiler/meta-vmdef.lisp
msgid "Unknown kind: ~S."
msgstr "Unknownway indkay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Operand ~S isn't one of these kinds: ~S."
msgstr "Operandway ~S isnway't oneway ofway esethay indskay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "~S is not an operand to ~S."
msgstr "~S isway otnay anway operandway otay ~S."

#: target:compiler/meta-vmdef.lisp
msgid "~S is not the name of a defined VOP."
msgstr "~S isway otnay ethay amenay ofway away efinedday OPVAY."

#: target:compiler/meta-vmdef.lisp
msgid "~:R argument missing: ~S."
msgstr "~:R argumentway issingmay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Extra junk at end of ~S."
msgstr "Extraway unkjay atway endway ofway ~S."

#: target:compiler/meta-vmdef.lisp
msgid "~:R argument is not a ~S: ~S."
msgstr "~:R argumentway isway otnay away ~S: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Malformed time specifier: ~S."
msgstr "Alformedmay imetay ecifierspay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Unknown phase in time specifier: ~S."
msgstr "Unknownway asephay inway imetay ecifierspay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Cannot target a ~S operand: ~S."
msgstr "Annotcay argettay away ~S operandway: ~S."

#: target:compiler/meta-vmdef.lisp
msgid ""
"No move function defined to ~:[save~;load~] SC ~S~\n"
"\t\t\t  ~:[to~;from~] from SC ~S."
msgstr ""
"Onay ovemay unctionfay efinedday otay ~:[avesay~;oadlay~] SCAY ~S~\n"
"\t\t\t  ~:[otay~;omfray~] omfray SCAY ~S."

#: target:compiler/meta-vmdef.lisp
msgid ""
"Can't tell whether to ~:[save~;load~] with ~S~@\n"
"\t\t\t\t or ~S when operand is in SC ~S."
msgstr ""
"Ancay't elltay etherwhay otay ~:[avesay~;oadlay~] ithway ~S~@\n"
"\t\t\t\t orway ~S enwhay operandway isway inway SCAY ~S."

#: target:compiler/meta-vmdef.lisp
msgid ""
"SC ~S has no alternate~:[~; or constant~] SCs, yet it is~@\n"
"\t          mentioned in the restriction for operand ~S."
msgstr ""
"SCAY ~S ashay onay alternateway~:[~; orway onstantcay~] Sscay, etyay itway "
"isway~@\n"
"\t          entionedmay inway ethay estrictionray orfay operandway ~S."

#: target:compiler/x86/nlx.lisp target:compiler/x86/call.lisp
#: target:compiler/x86/debug.lisp target:compiler/x86/char.lisp
#: target:compiler/x86/float-sse2.lisp target:compiler/x86/move.lisp
#: target:compiler/meta-vmdef.lisp
msgid ""
"Load TN allocated, but no move function?~@\n"
"\t           VM definition inconsistent, recompile and try again."
msgstr ""
"Oadlay NTAY allocatedway, utbay onay ovemay unctionfay?~@\n"
"\t           MVAY efinitionday inconsistentway, ecompileray andway ytray "
"againway."

#: target:compiler/meta-vmdef.lisp
msgid "Malformed operand specifier: ~S."
msgstr "Alformedmay operandway ecifierspay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "More operand isn't last: ~S."
msgstr "Oremay operandway isnway't astlay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Can only specify :FROM in a result: ~S"
msgstr "Ancay onlyway ecifyspay :OMFRAY inway away esultray: ~S"

#: target:compiler/meta-vmdef.lisp
msgid "Can only specify :TO in an argument: ~S"
msgstr "Ancay onlyway ecifyspay :OTAY inway anway argumentway: ~S"

#: target:compiler/meta-vmdef.lisp
msgid "Unknown keyword in operand specifier: ~S."
msgstr "Unknownway eywordkay inway operandway ecifierspay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Cannot specify :TARGET in a :MORE operand."
msgstr "Annotcay ecifyspay :ARGETTAY inway away :OREMAY operandway."

#: target:compiler/meta-vmdef.lisp
msgid "Cannot specify :LOAD-IF in a :MORE operand."
msgstr "Annotcay ecifyspay :OADLAY-IFWAY inway away :OREMAY operandway."

#: target:compiler/meta-vmdef.lisp
msgid "Malformed temporary spec: ~S."
msgstr "Alformedmay emporarytay ecspay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Malformed options list: ~S."
msgstr "Alformedmay optionsway istlay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Odd number of arguments in keyword options: ~S."
msgstr "Oddway umbernay ofway argumentsway inway eywordkay optionsway: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Temporary spec allocates no temps:~%  ~S"
msgstr "Emporarytay ecspay allocatesway onay empstay:~%  ~S"

#: target:compiler/meta-vmdef.lisp
msgid "Bad temporary name: ~S."
msgstr "Adbay emporarytay amenay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Must specify exactly one SC for a temporary."
msgstr "Ustmay ecifyspay exactlyway oneway SCAY orfay away emporarytay."

#: target:compiler/meta-vmdef.lisp
msgid "Unknown temporary option: ~S."
msgstr "Unknownway emporarytay optionway: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Temporary lifetime doesn't begin before it ends: ~S."
msgstr "Emporarytay ifetimelay oesnday't eginbay eforebay itway endsway: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Must specifiy :SC for all temporaries: ~S"
msgstr "Ustmay ecifiyspay :SCAY orfay allway emporariestay: ~S"

#: target:compiler/meta-vmdef.lisp
msgid "Malformed option specification: ~S."
msgstr "Alformedmay optionway ecificationspay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Unknown option specifier: ~S."
msgstr "Unknownway optionway ecifierspay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid ""
"No move function defined to move ~:[from~;to~] SC ~\n"
"\t              ~S~%~:[to~;from~] alternate or constant SC ~S."
msgstr ""
"Onay ovemay unctionfay efinedday otay ovemay ~:[omfray~;otay~] SCAY ~\n"
"\t              ~S~%~:[otay~;omfray~] alternateway orway onstantcay SCAY ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Bad thing to be a operand type: ~S."
msgstr "Adbay ingthay otay ebay away operandway ypetay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Bad PRIMITIVE-TYPE name in ~S: ~S"
msgstr "Adbay IMITIVEPRAY-YPETAY amenay inway ~S: ~S"

#: target:compiler/meta-vmdef.lisp
msgid ""
"Can't include primitive-type ~\n"
"\t\t\t\t             alias ~S in a :OR restriction: ~S."
msgstr ""
"Ancay't includeway imitivepray-ypetay ~\n"
"\t\t\t\t             aliasway ~S inway away :ORWAY estrictionray: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Can't :CONSTANT for a result."
msgstr "Ancay't :ONSTANTCAY orfay away esultray."

#: target:compiler/meta-vmdef.lisp
msgid "Bad :CONSTANT argument type spec: ~S."
msgstr "Adbay :ONSTANTCAY argumentway ypetay ecspay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid ""
"In the ~A ~:[result~;argument~] to VOP ~S,~@\n"
"\t            none of the SCs allowed by the operand type ~S can ~\n"
"\t\t    directly be loaded~@\n"
"\t\t    into any of the restriction's SCs:~%  ~S~:[~;~@\n"
"\t\t    [* type operand must allow T's SCs.]~]"
msgstr ""
"Inway ethay ~Away ~:[esultray~;argumentway~] otay OPVAY ~S,~@\n"
"\t            onenay ofway ethay Sscay allowedway ybay ethay operandway "
"ypetay ~S ancay ~\n"
"\t\t    irectlyday ebay oadedlay~@\n"
"\t\t    intoway anyway ofway ethay estrictionray's Sscay:~%  ~S~:[~;~@\n"
"\t\t    [* ypetay operandway ustmay allowway T's Sscay.]~]"

#: target:compiler/meta-vmdef.lisp
msgid ""
"~:[Result~;Argument~] ~A to VOP ~S~@\n"
"\t         has SC restriction ~S which is ~\n"
"\t\t not allowed by the operand type:~%  ~S"
msgstr ""
"~:[Esultray~;Argumentway~] ~Away otay OPVAY ~S~@\n"
"\t         ashay SCAY estrictionray ~S ichwhay isway ~\n"
"\t\t otnay allowedway ybay ethay operandway ypetay:~%  ~S"

#: target:compiler/meta-vmdef.lisp
msgid "Expected ~D ~:[result~;argument~] type~P: ~S."
msgstr "Expectedway ~D ~:[esultray~;argumentway~] ypetay~P: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "Can't use :CONSTANT on VOP more args."
msgstr "Ancay't useway :ONSTANTCAY onway OPVAY oremay argsway."

#: target:compiler/meta-vmdef.lisp
msgid "Expected ~D variant values: ~S."
msgstr "Expectedway ~D ariantvay aluesvay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid ""
"Define-VOP (Name [Inherits]) Spec*\n"
"  Define the symbol Name to be a Virtual OPeration in the compiler.  If\n"
"  specified, Inherits is the name of a VOP that we default unspecified\n"
"  information from.  Each Spec is a list beginning with a keyword "
"indicating\n"
"  the interpretation of the other forms in the Spec:\n"
"  \n"
"  :Args {(Name {Key Value}*)}*\n"
"  :Results {(Name {Key Value}*)}*\n"
"      The Args and Results are specifications of the operand TNs passed to "
"the\n"
"      VOP.  If there is an inherited VOP, any unspecified options are "
"defaulted\n"
"      from the inherited argument (or result) of the same name.  The "
"following\n"
"      operand options are defined: \n"
"\n"
"      :SCs (SC*)\n"
"\t  :SCs specifies good SCs for this operand.  Other SCs will be\n"
"\t  penalized according to move costs.  A load TN will be allocated if\n"
"\t  necessary, guaranteeing that the operand is always one of the\n"
"\t  specified SCs.\n"
"\n"
"      :Load-TN Load-Name\n"
"          Load-Name is bound to the load TN allocated for this operand, or "
"to\n"
"\t  NIL if no load TN was allocated.\n"
"\n"
"      :Load-If Expression\n"
"          Controls whether automatic operand loading is done.  Expression "
"is\n"
"\t  evaluated with the fixed operand TNs bound.  If Expression is true,\n"
"\t  then loading is done and the variable is bound to the load TN in\n"
"\t  the generator body.  Otherwise, loading is not done, and the variable\n"
"\t  is bound to the actual operand.\n"
"\n"
"      :More T-or-NIL\n"
"\t  If specified, Name is bound to the TN-Ref for the first argument or\n"
"\t  result following the fixed arguments or results.  A more operand must\n"
"\t  appear last, and cannot be targeted or restricted.\n"
"\n"
"      :Target Operand\n"
"\t  This operand is targeted to the named operand, indicating a desire to\n"
"\t  pack in the same location.  Not legal for results.\n"
"\n"
"      :From Time-Spec\n"
"      :To Time-Spec\n"
"\t  Specify the beginning or end of the operand's lifetime.  :From can\n"
"\t  only be used with results, and :To only with arguments.  The default\n"
"\t  for the N'th argument/result is (:ARGUMENT N)/(:RESULT N).  These\n"
"\t  options are necessary primarily when operands are read or written out\n"
"\t  of order.\n"
"   \n"
"  :Conditional\n"
"      This is used in place of :RESULTS with conditional branch VOPs.  "
"There\n"
"      are no result values: the result is a transfer of control.  The "
"target\n"
"      label is passed as the first :INFO arg.  The second :INFO arg is true "
"if\n"
"      the sense of the test should be negated.  A side-effect is to set the\n"
"      PREDICATE attribute for functions in the :TRANSLATE option.\n"
"  \n"
"  :Temporary ({Key Value}*) Name*\n"
"      Allocate a temporary TN for each Name, binding that variable to the "
"TN\n"
"      within the body of the generators.  In addition to :Target (which is \n"
"      is the same as for operands), the following options are\n"
"      defined:\n"
"\n"
"      :SC SC-Name\n"
"      :Offset SB-Offset\n"
"\t  Force the temporary to be allocated in the specified SC with the\n"
"\t  specified offset.  Offset is evaluated at macroexpand time.  If\n"
"\t  Offset is emitted, the register allocator chooses a free location in\n"
"\t  SC.  If both SC and Offset are omitted, then the temporary is packed\n"
"\t  according to its primitive type.\n"
"\n"
"      :From Time-Spec\n"
"      :To Time-Spec\n"
"\t  Similar to the argument/result option, this specifies the start and\n"
"\t  end of the temporarys' lives.  The defaults are :Load and :Save, i.e.\n"
"\t  the duration of the VOP.  The other intervening phases are :Argument,\n"
"\t  :Eval and :Result.  Non-zero sub-phases can be specified by a list,\n"
"\t  e.g. by default the second argument's life ends at (:Argument 1).\n"
" \n"
"  :Generator Cost Form*\n"
"      Specifies the translation into assembly code. Cost is the estimated "
"cost\n"
"      of the code emitted by this generator. The body is arbitrary Lisp "
"code\n"
"      that emits the assembly language translation of the VOP.  An Assemble\n"
"      form is wrapped around the body, so code may be emitted by using the\n"
"      local Inst macro.  During the evaluation of the body, the names of "
"the\n"
"      operands and temporaries are bound to the actual TNs.\n"
"  \n"
"  :Effects Effect*\n"
"  :Affected Effect*\n"
"      Specifies the side effects that this VOP has and the side effects "
"that\n"
"      effect its execution.  If unspecified, these default to the worst "
"case.\n"
"  \n"
"  :Info Name*\n"
"      Define some magic arguments that are passed directly to the code\n"
"      generator.  The corresponding trailing arguments to VOP or %Primitive "
"are\n"
"      stored in the VOP structure.  Within the body of the generators, the\n"
"      named variables are bound to these values.  Except in the case of\n"
"      :Conditional VOPs, :Info arguments cannot be specified for VOPS that "
"are\n"
"      the direct translation for a function (specified by :Translate).\n"
"\n"
"  :Ignore Name*\n"
"      Causes the named variables to be declared IGNORE in the generator "
"body.\n"
"\n"
"  :Variant Thing*\n"
"  :Variant-Vars Name*\n"
"      These options provide a way to parameterize families of VOPs that "
"differ\n"
"      only trivially.  :Variant makes the specified evaluated Things be the\n"
"      \"variant\" associated with this VOP.  :Variant-Vars causes the named\n"
"      variables to be bound to the corresponding Things within the body of "
"the\n"
"      generator.\n"
"\n"
"  :Variant-Cost Cost\n"
"      Specifies the cost of this VOP, overriding the cost of any inherited\n"
"      generator.\n"
"\n"
"  :Note {String | NIL}\n"
"      A short noun-like phrase describing what this VOP \"does\", i.e. the\n"
"      implementation strategy.  If supplied, efficency notes will be "
"generated\n"
"      when type uncertainty prevents :TRANSLATE from working.  NIL inhibits "
"any\n"
"      efficency note.\n"
"\n"
"  :Arg-Types    {* | PType | (:OR PType*) | (:CONSTANT Type)}*\n"
"  :Result-Types {* | PType | (:OR PType*)}*\n"
"      Specify the template type restrictions used for automatic "
"translation.\n"
"      If there is a :More operand, the last type is the more type.  :"
"CONSTANT\n"
"      specifies that the argument must be a compile-time constant of the\n"
"      specified Lisp type.  The constant values of :CONSTANT arguments are\n"
"      passed as additional :INFO arguments rather than as :ARGS.\n"
"  \n"
"  :Translate Name*\n"
"      This option causes the VOP template to be entered as an IR2 "
"translation\n"
"      for the named functions.\n"
"\n"
"  :Policy {:Small | :Fast | :Safe | :Fast-Safe}\n"
"      Specifies the policy under which this VOP is the best translation.\n"
"\n"
"  :Guard Form\n"
"      Specifies a Form that is evaluated in the global environment.  If\n"
"      form returns NIL, then emission of this VOP is prohibited even when\n"
"      all other restrictions are met.\n"
"\n"
"  :VOP-Var Name\n"
"  :Node-Var Name\n"
"      In the generator, bind the specified variable to the VOP or the Node "
"that\n"
"      generated this VOP.\n"
"\n"
"  :Save-P {NIL | T | :Compute-Only | :Force-To-Stack}\n"
"      Indicates how a VOP wants live registers saved.\n"
"\n"
"  :Move-Args {NIL | :Full-Call | :Local-Call | :Known-Return}\n"
"      Indicates if and how the more args should be moved into a different\n"
"      frame."
msgstr ""
"Efineday-OPVAY (Amenay [Inheritsway]) Ecspay*\n"
"  Efineday ethay ymbolsay Amenay otay ebay away Irtualvay Operationway inway "
"ethay ompilercay.  Ifway\n"
"  ecifiedspay, Inheritsway isway ethay amenay ofway away OPVAY atthay eway "
"efaultday unspecifiedway\n"
"  informationway omfray.  Eachway Ecspay isway away istlay eginningbay "
"ithway away eywordkay indicatingway\n"
"  ethay interpretationway ofway ethay otherway ormsfay inway ethay Ecspay:\n"
"  \n"
"  :Argsway {(Amenay {Eykay Aluevay}*)}*\n"
"  :Esultsray {(Amenay {Eykay Aluevay}*)}*\n"
"      Ethay Argsway andway Esultsray areway ecificationsspay ofway ethay "
"operandway Nstay assedpay otay ethay\n"
"      OPVAY.  Ifway erethay isway anway inheritedway OPVAY, anyway "
"unspecifiedway optionsway areway efaultedday\n"
"      omfray ethay inheritedway argumentway (orway esultray) ofway ethay "
"amesay amenay.  Ethay ollowingfay\n"
"      operandway optionsway areway efinedday: \n"
"\n"
"      :Sscay (SCAY*)\n"
"\t  :Sscay ecifiesspay oodgay Sscay orfay isthay operandway.  Otherway Sscay "
"illway ebay\n"
"\t  enalizedpay accordingway otay ovemay ostscay.  Away oadlay NTAY illway "
"ebay allocatedway ifway\n"
"\t  ecessarynay, uaranteeinggay atthay ethay operandway isway alwaysway "
"oneway ofway ethay\n"
"\t  ecifiedspay Sscay.\n"
"\n"
"      :Oadlay-NTAY Oadlay-Amenay\n"
"          Oadlay-Amenay isway oundbay otay ethay oadlay NTAY allocatedway "
"orfay isthay operandway, orway otay\n"
"\t  ILNAY ifway onay oadlay NTAY asway allocatedway.\n"
"\n"
"      :Oadlay-Ifway Expressionway\n"
"          Ontrolscay etherwhay automaticway operandway oadinglay isway "
"oneday.  Expressionway isway\n"
"\t  evaluatedway ithway ethay ixedfay operandway Nstay oundbay.  Ifway "
"Expressionway isway uetray,\n"
"\t  enthay oadinglay isway oneday andway ethay ariablevay isway oundbay otay "
"ethay oadlay NTAY inway\n"
"\t  ethay eneratorgay odybay.  Otherwiseway, oadinglay isway otnay oneday, "
"andway ethay ariablevay\n"
"\t  isway oundbay otay ethay actualway operandway.\n"
"\n"
"      :Oremay T-orway-ILNAY\n"
"\t  Ifway ecifiedspay, Amenay isway oundbay otay ethay NTAY-Efray orfay "
"ethay irstfay argumentway orway\n"
"\t  esultray ollowingfay ethay ixedfay argumentsway orway esultsray.  Away "
"oremay operandway ustmay\n"
"\t  appearway astlay, andway annotcay ebay argetedtay orway estrictedray.\n"
"\n"
"      :Argettay Operandway\n"
"\t  Isthay operandway isway argetedtay otay ethay amednay operandway, "
"indicatingway away esireday otay\n"
"\t  ackpay inway ethay amesay ocationlay.  Otnay egallay orfay esultsray.\n"
"\n"
"      :Omfray Imetay-Ecspay\n"
"      :Otay Imetay-Ecspay\n"
"\t  Ecifyspay ethay eginningbay orway endway ofway ethay operandway's "
"ifetimelay.  :Omfray ancay\n"
"\t  onlyway ebay usedway ithway esultsray, andway :Otay onlyway ithway "
"argumentsway.  Ethay efaultday\n"
"\t  orfay ethay N'thay argumentway/esultray isway (:ARGUMENTWAY N)/(:"
"ESULTRAY N).  Esethay\n"
"\t  optionsway areway ecessarynay imarilypray enwhay operandsway areway "
"eadray orway ittenwray outway\n"
"\t  ofway orderway.\n"
"   \n"
"  :Onditionalcay\n"
"      Isthay isway usedway inway aceplay ofway :ESULTSRAY ithway "
"onditionalcay anchbray Opsvay.  Erethay\n"
"      areway onay esultray aluesvay: ethay esultray isway away ansfertray "
"ofway ontrolcay.  Ethay argettay\n"
"      abellay isway assedpay asway ethay irstfay :INFOWAY argway.  Ethay "
"econdsay :INFOWAY argway isway uetray ifway\n"
"      ethay ensesay ofway ethay esttay ouldshay ebay egatednay.  Away idesay-"
"effectway isway otay etsay ethay\n"
"      EDICATEPRAY attributeway orfay unctionsfay inway ethay :ANSLATETRAY "
"optionway.\n"
"  \n"
"  :Emporarytay ({Eykay Aluevay}*) Amenay*\n"
"      Allocateway away emporarytay NTAY orfay eachway Amenay, indingbay "
"atthay ariablevay otay ethay NTAY\n"
"      ithinway ethay odybay ofway ethay eneratorsgay.  Inway additionway "
"otay :Argettay (ichwhay isway \n"
"      isway ethay amesay asway orfay operandsway), ethay ollowingfay "
"optionsway areway\n"
"      efinedday:\n"
"\n"
"      :SCAY SCAY-Amenay\n"
"      :Offsetway BSAY-Offsetway\n"
"\t  Orcefay ethay emporarytay otay ebay allocatedway inway ethay ecifiedspay "
"SCAY ithway ethay\n"
"\t  ecifiedspay offsetway.  Offsetway isway evaluatedway atway acroexpandmay "
"imetay.  Ifway\n"
"\t  Offsetway isway emittedway, ethay egisterray allocatorway ooseschay away "
"eefray ocationlay inway\n"
"\t  SCAY.  Ifway othbay SCAY andway Offsetway areway omittedway, enthay "
"ethay emporarytay isway ackedpay\n"
"\t  accordingway otay itsway imitivepray ypetay.\n"
"\n"
"      :Omfray Imetay-Ecspay\n"
"      :Otay Imetay-Ecspay\n"
"\t  Imilarsay otay ethay argumentway/esultray optionway, isthay ecifiesspay "
"ethay tartsay andway\n"
"\t  endway ofway ethay emporarystay' iveslay.  Ethay efaultsday areway :"
"Oadlay andway :Avesay, i.e.\n"
"\t  ethay urationday ofway ethay OPVAY.  Ethay otherway interveningway "
"asesphay areway :Argumentway,\n"
"\t  :Evalway andway :Esultray.  Onnay-erozay ubsay-asesphay ancay ebay "
"ecifiedspay ybay away istlay,\n"
"\t  e.g. ybay efaultday ethay econdsay argumentway's ifelay endsway atway (:"
"Argumentway 1).\n"
" \n"
"  :Eneratorgay Ostcay Ormfay*\n"
"      Ecifiesspay ethay anslationtray intoway assemblyway odecay. Ostcay "
"isway ethay estimatedway ostcay\n"
"      ofway ethay odecay emittedway ybay isthay eneratorgay. Ethay odybay "
"isway arbitraryway Isplay odecay\n"
"      atthay emitsway ethay assemblyway anguagelay anslationtray ofway ethay "
"OPVAY.  Anway Assembleway\n"
"      ormfay isway appedwray aroundway ethay odybay, osay odecay aymay ebay "
"emittedway ybay usingway ethay\n"
"      ocallay Instway acromay.  Uringday ethay evaluationway ofway ethay "
"odybay, ethay amesnay ofway ethay\n"
"      operandsway andway emporariestay areway oundbay otay ethay actualway "
"Nstay.\n"
"  \n"
"  :Effectsway Effectway*\n"
"  :Affectedway Effectway*\n"
"      Ecifiesspay ethay idesay effectsway atthay isthay OPVAY ashay andway "
"ethay idesay effectsway atthay\n"
"      effectway itsway executionway.  Ifway unspecifiedway, esethay "
"efaultday otay ethay orstway asecay.\n"
"  \n"
"  :Infoway Amenay*\n"
"      Efineday omesay agicmay argumentsway atthay areway assedpay irectlyday "
"otay ethay odecay\n"
"      eneratorgay.  Ethay orrespondingcay ailingtray argumentsway otay OPVAY "
"orway %Imitivepray areway\n"
"      toredsay inway ethay OPVAY ucturestray.  Ithinway ethay odybay ofway "
"ethay eneratorsgay, ethay\n"
"      amednay ariablesvay areway oundbay otay esethay aluesvay.  Exceptway "
"inway ethay asecay ofway\n"
"      :Onditionalcay Opsvay, :Infoway argumentsway annotcay ebay ecifiedspay "
"orfay OPSVAY atthay areway\n"
"      ethay irectday anslationtray orfay away unctionfay (ecifiedspay ybay :"
"Anslatetray).\n"
"\n"
"  :Ignoreway Amenay*\n"
"      Ausescay ethay amednay ariablesvay otay ebay eclaredday IGNOREWAY "
"inway ethay eneratorgay odybay.\n"
"\n"
"  :Ariantvay Ingthay*\n"
"  :Ariantvay-Arsvay Amenay*\n"
"      Esethay optionsway ovidepray away ayway otay arameterizepay amiliesfay "
"ofway Opsvay atthay ifferday\n"
"      onlyway iviallytray.  :Ariantvay akesmay ethay ecifiedspay "
"evaluatedway Ingsthay ebay ethay\n"
"      \"ariantvay\" associatedway ithway isthay OPVAY.  :Ariantvay-Arsvay "
"ausescay ethay amednay\n"
"      ariablesvay otay ebay oundbay otay ethay orrespondingcay Ingsthay "
"ithinway ethay odybay ofway ethay\n"
"      eneratorgay.\n"
"\n"
"  :Ariantvay-Ostcay Ostcay\n"
"      Ecifiesspay ethay ostcay ofway isthay OPVAY, overridingway ethay "
"ostcay ofway anyway inheritedway\n"
"      eneratorgay.\n"
"\n"
"  :Otenay {Ingstray | ILNAY}\n"
"      Away ortshay ounnay-ikelay rasephay escribingday atwhay isthay OPVAY "
"\"oesday\", i.e. ethay\n"
"      implementationway ategystray.  Ifway uppliedsay, efficencyway otesnay "
"illway ebay eneratedgay\n"
"      enwhay ypetay uncertaintyway eventspray :ANSLATETRAY omfray "
"orkingway.  ILNAY inhibitsway anyway\n"
"      efficencyway otenay.\n"
"\n"
"  :Argway-Ypestay    {* | Typepay | (:ORWAY Typepay*) | (:ONSTANTCAY Ypetay)}"
"*\n"
"  :Esultray-Ypestay {* | Typepay | (:ORWAY Typepay*)}*\n"
"      Ecifyspay ethay emplatetay ypetay estrictionsray usedway orfay "
"automaticway anslationtray.\n"
"      Ifway erethay isway away :Oremay operandway, ethay astlay ypetay isway "
"ethay oremay ypetay.  :ONSTANCAYT\n"
"      ecifiesspay atthay ethay argumentway ustmay ebay away ompilecay-imetay "
"onstantcay ofway ethay\n"
"      ecifiedspay Isplay ypetay.  Ethay onstantcay aluesvay ofway :"
"ONSTANTCAY argumentsway areway\n"
"      assedpay asway additionalway :INFOWAY argumentsway atherray anthay "
"asway :ARGSWAY.\n"
"  \n"
"  :Anslatetray Amenay*\n"
"      Isthay optionway ausescay ethay OPVAY emplatetay otay ebay enteredway "
"asway anway IRWAY2 anslatiotrayn\n"
"      orfay ethay amednay unctionsfay.\n"
"\n"
"  :Olicypay {:Mallsay | :Astfay | :Afesay | :Astfay-Afesay}\n"
"      Ecifiesspay ethay olicypay underway ichwhay isthay OPVAY isway ethay "
"estbay anslationtray.\n"
"\n"
"  :Uardgay Ormfay\n"
"      Ecifiesspay away Ormfay atthay isway evaluatedway inway ethay obalglay "
"environmentway.  Ifway\n"
"      ormfay eturnsray ILNAY, enthay emissionway ofway isthay OPVAY isway "
"ohibitedpray evenway enwhay\n"
"      allway otherway estrictionsray areway etmay.\n"
"\n"
"  :OPVAY-Arvay Amenay\n"
"  :Odenay-Arvay Amenay\n"
"      Inway ethay eneratorgay, indbay ethay ecifiedspay ariablevay otay "
"ethay OPVAY orway ethay Odenay atthay\n"
"      eneratedgay isthay OPVAY.\n"
"\n"
"  :Avesay-P {ILNAY | T | :Omputecay-Onlyway | :Orcefay-Otay-Tacksay}\n"
"      Indicatesway owhay away OPVAY antsway ivelay egistersray avedsay.\n"
"\n"
"  :Ovemay-Argsway {ILNAY | :Ullfay-Allcay | :Ocallay-Allcay | :Nownkay-"
"Eturnray}\n"
"      Indicatesway ifway andway owhay ethay oremay argsway ouldshay ebay "
"ovedmay intoway away ifferentday\n"
"      amefray."

#: target:compiler/meta-vmdef.lisp
msgid ""
"Emit-Template Node Block Template Args Results [Info]\n"
"  Call the emit function for Template, linking the result in at the end of\n"
"  Block."
msgstr ""
"Emitway-Emplatetay Odenay Ockblay Emplatetay Argsway Esultsray [Infoway]\n"
"  Allcay ethay emitway unctionfay orfay Emplatetay, inkinglay ethay esultray "
"inway atway ethay endway ofway\n"
"  Ockblay."

#: target:compiler/meta-vmdef.lisp
msgid ""
"VOP Name Node Block Arg* Info* Result*\n"
"  Emit the VOP (or other template) Name at the end of the IR2-Block Block,\n"
"  using Node for the source context.  The interpretation of the remaining\n"
"  arguments depends on the number of operands of various kinds that are\n"
"  declared in the template definition.  VOP cannot be used for templates "
"that\n"
"  have more-args or more-results, since the number of arguments and results "
"is\n"
"  indeterminate for these templates.  Use VOP* instead.\n"
"  \n"
"  Args and Results are the TNs that are to be referenced by the template\n"
"  as arguments and results.  If the template has codegen-info arguments, "
"then\n"
"  the appropriate number of Info forms following the Arguments are used for\n"
"  codegen info."
msgstr ""
"OPVAY Amenay Odenay Ockblay Argway* Infoway* Esultray*\n"
"  Emitway ethay OPVAY (orway otherway emplatetay) Amenay atway ethay endway "
"ofway ethay IRWAY2-Ockblay Ockblay,\n"
"  usingway Odenay orfay ethay ourcesay ontextcay.  Ethay interpretationway "
"ofway ethay emainingray\n"
"  argumentsway ependsday onway ethay umbernay ofway operandsway ofway "
"ariousvay indskay atthay areway\n"
"  eclaredday inway ethay emplatetay efinitionday.  OPVAY annotcay ebay "
"usedway orfay emplatestay atthay\n"
"  avehay oremay-argsway orway oremay-esultsray, incesay ethay umbernay ofway "
"argumentsway andway esultsray isway\n"
"  indeterminateway orfay esethay emplatestay.  Useway OPVAY* insteadway.\n"
"  \n"
"  Argsway andway Esultsray areway ethay Nstay atthay areway otay ebay "
"eferencedray ybay ethay emplatetay\n"
"  asway argumentsway andway esultsray.  Ifway ethay emplatetay ashay "
"odegencay-infoway argumentsway, enthay\n"
"  ethay appropriateway umbernay ofway Infoway ormsfay ollowingfay ethay "
"Argumentsway areway usedway orfay\n"
"  odegencay infoway."

#: target:compiler/meta-vmdef.lisp
msgid "Cannot use VOP with variable operand count templates."
msgstr ""
"Annotcay useway OPVAY ithway ariablevay operandway ountcay emplatestay."

#: target:compiler/meta-vmdef.lisp
msgid "Called with ~D operands, but was expecting ~D."
msgstr "Alledcay ithway ~D operandsway, utbay asway expectingway ~D."

#: target:compiler/meta-vmdef.lisp
msgid ""
"VOP* Name Node Block (Arg* More-Args) (Result* More-Results) Info*\n"
"  Like VOP, but allows for emission of templates with arbitrary numbers of\n"
"  arguments, and for emission of templates using already-created TN-Ref "
"lists.\n"
"\n"
"  The Arguments and Results are TNs to be referenced as the first arguments\n"
"  and results to the template.  More-Args and More-Results are heads of TN-"
"Ref\n"
"  lists that are added onto the end of the TN-Refs for the explicitly "
"supplied\n"
"  operand TNs.  The TN-Refs for the more operands must have the TN and Write-"
"P\n"
"  slots correctly initialized.\n"
"\n"
"  As with VOP, the Info forms are evaluated and passed as codegen info\n"
"  arguments."
msgstr ""
"OPVAY* Amenay Odenay Ockblay (Argway* Oremay-Argsway) (Esultray* Oremay-"
"Esultsray) Infoway*\n"
"  Ikelay OPVAY, utbay allowsway orfay emissionway ofway emplatestay ithway "
"arbitraryway umbersnay ofway\n"
"  argumentsway, andway orfay emissionway ofway emplatestay usingway "
"alreadyway-eatedcray NTAY-Efray istslay.\n"
"\n"
"  Ethay Argumentsway andway Esultsray areway Nstay otay ebay eferencedray "
"asway ethay irstfay argumentsway\n"
"  andway esultsray otay ethay emplatetay.  Oremay-Argsway andway Oremay-"
"Esultsray areway eadshay ofway NTAY-Efray\n"
"  istslay atthay areway addedway ontoway ethay endway ofway ethay NTAY-"
"Efsray orfay ethay explicitlyway uppliedsay\n"
"  operandway Nstay.  Ethay NTAY-Efsray orfay ethay oremay operandsway ustmay "
"avehay ethay NTAY andway Itewray-P\n"
"  otsslay orrectlycay initializedway.\n"
"\n"
"  Asway ithway OPVAY, ethay Infoway ormsfay areway evaluatedway andway "
"assedpay asway odegencay infoway\n"
"  argumentsway."

#: target:compiler/meta-vmdef.lisp
msgid "Too many fixed arguments."
msgstr "Ootay anymay ixedfay argumentsway."

#: target:compiler/meta-vmdef.lisp
msgid "Too many fixed results."
msgstr "Ootay anymay ixedfay esultsray."

#: target:compiler/meta-vmdef.lisp
msgid "Expected ~D info args."
msgstr "Expectedway ~D infoway argsway."

#: target:compiler/meta-vmdef.lisp
msgid ""
"SC-Case TN {({(SC-Name*) | SC-Name | T} Form*)}*\n"
"  Case off of TN's SC.  The first clause containing TN's SC is evaulated,\n"
"  returning the values of the last form.  A clause beginning with T "
"specifies a\n"
"  default.  If it appears, it must be last.  If no default is specified, and "
"no\n"
"  clause matches, then an error is signalled."
msgstr ""
"SCAY-Asecay NTAY {({(SCAY-Amenay*) | SCAY-Amenay | T} Ormfay*)}*\n"
"  Asecay offway ofway NTAY's SCAY.  Ethay irstfay auseclay ontainingcay "
"NTAY's SCAY isway evaulatedway,\n"
"  eturningray ethay aluesvay ofway ethay astlay ormfay.  Away auseclay "
"eginningbay ithway T ecifiespays away\n"
"  efaultday.  Ifway itway appearsway, itway ustmay ebay astlay.  Ifway onay "
"efaultday isway ecifiedspay, andway onay\n"
"  auseclay atchesmay, enthay anway errorway isway ignalledsay."

#: target:assembly/x86/arith.lisp target:assembly/x86/array.lisp
#: target:assembly/x86/assem-rtns.lisp target:compiler/x86/type-vops.lisp
#: target:compiler/x86/pred.lisp target:compiler/x86/array.lisp
#: target:compiler/x86/sse2-array.lisp target:compiler/x86/print.lisp
#: target:compiler/x86/nlx.lisp target:compiler/x86/call.lisp
#: target:compiler/x86/alloc.lisp target:compiler/x86/values.lisp
#: target:compiler/x86/cell.lisp target:compiler/x86/sse2-c-call.lisp
#: target:compiler/x86/debug.lisp target:compiler/x86/subprim.lisp
#: target:compiler/x86/arith.lisp target:compiler/x86/static-fn.lisp
#: target:compiler/x86/memory.lisp target:compiler/x86/char.lisp
#: target:compiler/x86/system.lisp target:compiler/x86/sse2-sap.lisp
#: target:compiler/x86/sap.lisp target:compiler/x86/float-sse2.lisp
#: target:compiler/x86/move.lisp target:compiler/meta-vmdef.lisp
msgid "Unknown SC to SC-Case for ~S:~%  ~S"
msgstr "Unknownway SCAY otay SCAY-Asecay orfay ~S:~%  ~S"

#: target:compiler/meta-vmdef.lisp
msgid "Illegal SC-Case clause: ~S."
msgstr "Illegalway SCAY-Asecay auseclay: ~S."

#: target:compiler/meta-vmdef.lisp
msgid "T case is not last in SC-Case."
msgstr "T asecay isway otnay astlay inway SCAY-Asecay."

#: target:compiler/meta-vmdef.lisp
msgid ""
"SC-Is TN SC*\n"
"  Returns true if TNs SC is any of the named SCs, false otherwise."
msgstr ""
"SCAY-Isway NTAY SCAY*\n"
"  Eturnsray uetray ifway Nstay SCAY isway anyway ofway ethay amednay Sscay, "
"alsefay otherwiseway."

#: target:compiler/meta-vmdef.lisp
msgid ""
"Do-IR2-Blocks (Block-Var Component [Result]) Form*\n"
"  Iterate over the IR2 blocks in component, in emission order."
msgstr ""
"Oday-IRWAY2-Ocksblay (Ockblay-Arvay Omponentcay [Esultray]) Ormfay*\n"
"  Iterateway overway ethay IRWAY2 ocksblay inway omponentcay, inway "
"emissionway orderway."

#: target:compiler/meta-vmdef.lisp
msgid ""
"DO-LIVE-TNS (TN-Var Live Block [Result]) Form*\n"
"  Iterate over all the TNs live at some point, with the live set represented "
"by\n"
"  a local conflicts bit-vector and the IR2-Block containing the location."
msgstr ""
"ODAY-IVELAY-NSTAY (NTAY-Arvay Ivelay Ockblay [Esultray]) Ormfay*\n"
"  Iterateway overway allway ethay Nstay ivelay atway omesay ointpay, ithway "
"ethay ivelay etsay epresentedray ybay\n"
"  away ocallay onflictscay itbay-ectorvay andway ethay IRWAY2-Ockblay "
"ontainingcay ethay ocationlay."

#: target:compiler/meta-vmdef.lisp
msgid ""
"DO-ENVIRONMENT-IR2-BLOCKS (Block-Var Env [Result]) Form*\n"
"  Iterate over all the IR2 blocks in the environment Env, in emit order."
msgstr ""
"ODAY-ENVIRONMENTWAY-IRWAY2-OCKSBLAY (Ockblay-Arvay Envway [Esultray]) "
"Ormfay*\n"
"  Iterateway overway allway ethay IRWAY2 ocksblay inway ethay environmentway "
"Envway, inway emitway orderway."

#: target:compiler/disassem.lisp
msgid ""
"The width of the column in which instruction-names are printed.\n"
"  NIL means use the default.  A value of zero gives the effect of not\n"
"  aligning the arguments at all."
msgstr ""
"Ethay idthway ofway ethay olumncay inway ichwhay instructionway-amesnay "
"areway intedpray.\n"
"  ILNAY eansmay useway ethay efaultday.  Away aluevay ofway erozay ivesgay "
"ethay effectway ofway otnay\n"
"  aligningway ethay argumentsway atway allway."

#: target:compiler/disassem.lisp
msgid "The column in which end-of-line comments for notes are started."
msgstr ""
"Ethay olumncay inway ichwhay endway-ofway-inelay ommentscay orfay otesnay "
"areway tartedsay."

#: target:compiler/disassem.lisp
msgid ""
"Specify global disassembler params for C:*TARGET-BACKEND*.\n"
"  Keyword arguments include:\n"
"      \n"
"  :INSTRUCTION-ALIGNMENT number\n"
"      Minimum alignment of instructions, in bits.\n"
"      \n"
"  :ADDRESS-SIZE number\n"
"      Size of a machine address, in bits.\n"
"      \n"
"  :OPCODE-COLUMN-WIDTH\n"
"      Width of the column used for printing the opcode portion of the\n"
"      instruction, or NIL to use the default."
msgstr ""
"Ecifyspay obalglay isassemblerday aramspay orfay C:*ARGETTAY-ACKENDBAY*.\n"
"  Eywordkay argumentsway includeway:\n"
"      \n"
"  :INSTRUCTIONWAY-ALIGNMENTWAY umbernay\n"
"      Inimummay alignmentway ofway instructionsway, inway itsbay.\n"
"      \n"
"  :ADDRESSWAY-IZESAY umbernay\n"
"      Izesay ofway away achinemay addressway, inway itsbay.\n"
"      \n"
"  :OPCODEWAY-OLUMNCAY-IDTHWAY\n"
"      Idthway ofway ethay olumncay usedway orfay intingpray ethay opcodeway "
"ortionpay ofway ethay\n"
"      instructionway, orway ILNAY otay useway ethay efaultday."

#: target:compiler/disassem.lisp
msgid ""
"DEFINE-ARGUMENT-TYPE Name {Key Value}*\n"
"  Define a disassembler argument type NAME (which can then be referenced in\n"
"  another argument definition using the :TYPE keyword argument).  Keyword\n"
"  arguments are:\n"
"\n"
"  :SIGN-EXTEND boolean\n"
"      If non-NIL, the raw value of this argument is sign-extended.\n"
"\n"
"  :TYPE arg-type-name\n"
"      Inherit any properties of given argument-type.\n"
"\n"
"  :PREFILTER function\n"
"      A function which is called (along with all other prefilters, in the\n"
"      order that their arguments appear in the instruction- format) before\n"
"      any printing is done, to filter the raw value.  Any uses of READ-"
"SUFFIX\n"
"      must be done inside a prefilter.\n"
"      \n"
"  :PRINTER function-string-or-vector\n"
"      A function, string, or vector which is used to print an argument of\n"
"      this type.\n"
"      \n"
"  :USE-LABEL \n"
"      If non-NIL, the value of an argument of this type is used as an\n"
"      address, and if that address occurs inside the disassembled code, it "
"is\n"
"      replaced by a label.  If this is a function, it is called to filter "
"the\n"
"      value."
msgstr ""
"EFINEDAY-ARGUMENTWAY-YPETAY Amenay {Eykay Aluevay}*\n"
"  Efineday away isassemblerday argumentway ypetay AMENAY (ichwhay ancay "
"enthay ebay eferencedray inway\n"
"  anotherway argumentway efinitionday usingway ethay :YPETAY eywordkay "
"argumentway).  Eywordkay\n"
"  argumentsway areway:\n"
"\n"
"  :IGNSAY-EXTENDWAY ooleanbay\n"
"      Ifway onnay-ILNAY, ethay awray aluevay ofway isthay argumentway isway "
"ignsay-extendedway.\n"
"\n"
"  :YPETAY argway-ypetay-amenay\n"
"      Inheritway anyway opertiespray ofway ivengay argumentway-ypetay.\n"
"\n"
"  :EFILTERPRAY unctionfay\n"
"      Away unctionfay ichwhay isway alledcay (alongway ithway allway "
"otherway efilterspray, inway ethay\n"
"      orderway atthay eirthay argumentsway appearway inway ethay "
"instructionway- ormatfay) eforebay\n"
"      anyway intingpray isway oneday, otay ilterfay ethay awray aluevay.  "
"Anyway usesway ofway EADRAY-UFFISAYX\n"
"      ustmay ebay oneday insideway away efilterpray.\n"
"      \n"
"  :INTERPRAY unctionfay-ingstray-orway-ectorvay\n"
"      Away unctionfay, ingstray, orway ectorvay ichwhay isway usedway otay "
"intpray anway argumentway ofway\n"
"      isthay ypetay.\n"
"      \n"
"  :USEWAY-ABELLAY \n"
"      Ifway onnay-ILNAY, ethay aluevay ofway anway argumentway ofway isthay "
"ypetay isway usedway asway anway\n"
"      addressway, andway ifway atthay addressway occursway insideway ethay "
"isassembledday odecay, itway isway\n"
"      eplacedray ybay away abellay.  Ifway isthay isway away unctionfay, "
"itway isway alledcay otay ilterfay ethay\n"
"      aluevay."

#: target:compiler/disassem.lisp
msgid ""
"DEFINE-INSTRUCTION-FORMAT (Name Length {Format-Key Value}*) Arg-Def*\n"
"  Define an instruction format NAME for the disassembler's use.  LENGTH is\n"
"  the length of the format in bits.\n"
"  Possible FORMAT-KEYs:\n"
"\n"
"  :INCLUDE other-format-name\n"
"      Inherit all arguments and properties of the given format.  Any\n"
"      arguments defined in the current format definition will either modify\n"
"      the copy of an existing argument (keeping in the same order with\n"
"      respect to when pre-filter's are called), if it has the same name as\n"
"      one, or be added to the end.\n"
"  :DEFAULT-PRINTER printer-list\n"
"      Use the given PRINTER-LIST as a format to print any instructions of\n"
"      this format when they don't specify something else.\n"
"\n"
"  Each ARG-DEF defines one argument in the format, and is of the form\n"
"    (Arg-Name {Arg-Key Value}*)\n"
"\n"
"  Possible ARG-KEYs (the values are evaulated unless otherwise specified):\n"
"  \n"
"  :FIELDS byte-spec-list\n"
"      The argument takes values from these fields in the instruction.  If\n"
"      the list is of length one, then the corresponding value is supplied "
"by\n"
"      itself; otherwise it is a list of the values.  The list may be NIL.\n"
"  :FIELD byte-spec\n"
"      The same as :FIELDS (list byte-spec).\n"
"\n"
"  :VALUE value\n"
"      If the argument only has one field, this is the value it should have,\n"
"      otherwise it's a list of the values of the individual fields.  This "
"can\n"
"      be overridden in an instruction-definition or a format definition\n"
"      including this one by specifying another, or NIL to indicate that "
"it's\n"
"      variable.\n"
"\n"
"  :SIGN-EXTEND boolean\n"
"      If non-NIL, the raw value of this argument is sign-extended,\n"
"      immediately after being extracted from the instruction (before any\n"
"      prefilters are run, for instance).  If the argument has multiple\n"
"      fields, they are all sign-extended.\n"
"\n"
"  :TYPE arg-type-name\n"
"      Inherit any properties of the given argument-type.\n"
"\n"
"  :PREFILTER function\n"
"      A function which is called (along with all other prefilters, in the\n"
"      order that their arguments appear in the instruction-format) before\n"
"      any printing is done, to filter the raw value.  Any uses of READ-"
"SUFFIX\n"
"      must be done inside a prefilter.\n"
"\n"
"  :PRINTER function-string-or-vector\n"
"      A function, string, or vector which is used to print this argument.\n"
"      \n"
"  :USE-LABEL \n"
"      If non-NIL, the value of this argument is used as an address, and if\n"
"      that address occurs inside the disassembled code, it is replaced by a\n"
"      label.  If this is a function, it is called to filter the value."
msgstr ""
"EFINEDAY-INSTRUCTIONWAY-ORMATFAY (Amenay Engthlay {Ormatfay-Eykay Aluevay}*) "
"Argway-Efday*\n"
"  Efineday anway instructionway ormatfay AMENAY orfay ethay isassemblerday's "
"useway.  ENGTHLAY isway\n"
"  ethay engthlay ofway ethay ormatfay inway itsbay.\n"
"  Ossiblepay ORMATFAY-Eyskay:\n"
"\n"
"  :INCLUDEWAY otherway-ormatfay-amenay\n"
"      Inheritway allway argumentsway andway opertiespray ofway ethay ivengay "
"ormatfay.  Anyway\n"
"      argumentsway efinedday inway ethay urrentcay ormatfay efinitionday "
"illway eitherway odifymay\n"
"      ethay opycay ofway anway existingway argumentway (eepingkay inway "
"ethay amesay orderway ithway\n"
"      espectray otay enwhay epray-ilterfay's areway alledcay), ifway itway "
"ashay ethay amesay amenay asway\n"
"      oneway, orway ebay addedway otay ethay endway.\n"
"  :EFAULTDAY-INTERPRAY interpray-istlay\n"
"      Useway ethay ivengay INTERPRAY-ISTLAY asway away ormatfay otay intpray "
"anyway instructionsway ofway\n"
"      isthay ormatfay enwhay eythay onday't ecifyspay omethingsay elseway.\n"
"\n"
"  Eachway ARGWAY-EFDAY efinesday oneway argumentway inway ethay ormatfay, "
"andway isway ofway ethay ormfay\n"
"    (Argway-Amenay {Argway-Eykay Aluevay}*)\n"
"\n"
"  Ossiblepay ARGWAY-Eyskay (ethay aluesvay areway evaulatedway unlessway "
"otherwiseway ecifiedspay):\n"
"  \n"
"  :IELDSFAY ytebay-ecspay-istlay\n"
"      Ethay argumentway akestay aluesvay omfray esethay ieldsfay inway ethay "
"instructionway.  Ifway\n"
"      ethay istlay isway ofway engthlay oneway, enthay ethay orrespondingcay "
"aluevay isway uppliedsay ybay\n"
"      itselfway; otherwiseway itway isway away istlay ofway ethay aluesvay.  "
"Ethay istlay aymay ebay ILNAY.\n"
"  :IELDFAY ytebay-ecspay\n"
"      Ethay amesay asway :IELDSFAY (istlay ytebay-ecspay).\n"
"\n"
"  :ALUEVAY aluevay\n"
"      Ifway ethay argumentway onlyway ashay oneway ieldfay, isthay isway "
"ethay aluevay itway ouldshay avehay,\n"
"      otherwiseway itway's away istlay ofway ethay aluesvay ofway ethay "
"individualway ieldsfay.  Isthay ancay\n"
"      ebay overriddenway inway anway instructionway-efinitionday orway away "
"ormatfay efinitionday\n"
"      includingway isthay oneway ybay ecifyingspay anotherway, orway ILNAY "
"otay indicateway atthay itway's\n"
"      ariablevay.\n"
"\n"
"  :IGNSAY-EXTENDWAY ooleanbay\n"
"      Ifway onnay-ILNAY, ethay awray aluevay ofway isthay argumentway isway "
"ignsay-extendedway,\n"
"      immediatelyway afterway eingbay extractedway omfray ethay "
"instructionway (eforebay anyway\n"
"      efilterspray areway unray, orfay instanceway).  Ifway ethay "
"argumentway ashay ultiplemay\n"
"      ieldsfay, eythay areway allway ignsay-extendedway.\n"
"\n"
"  :YPETAY argway-ypetay-amenay\n"
"      Inheritway anyway opertiespray ofway ethay ivengay argumentway-"
"ypetay.\n"
"\n"
"  :EFILTERPRAY unctionfay\n"
"      Away unctionfay ichwhay isway alledcay (alongway ithway allway "
"otherway efilterspray, inway ethay\n"
"      orderway atthay eirthay argumentsway appearway inway ethay "
"instructionway-ormatfay) eforebay\n"
"      anyway intingpray isway oneday, otay ilterfay ethay awray aluevay.  "
"Anyway usesway ofway EADRAY-UFFISAYX\n"
"      ustmay ebay oneday insideway away efilterpray.\n"
"\n"
"  :INTERPRAY unctionfay-ingstray-orway-ectorvay\n"
"      Away unctionfay, ingstray, orway ectorvay ichwhay isway usedway otay "
"intpray isthay argumentway.\n"
"      \n"
"  :USEWAY-ABELLAY \n"
"      Ifway onnay-ILNAY, ethay aluevay ofway isthay argumentway isway "
"usedway asway anway addressway, andway ifway\n"
"      atthay addressway occursway insideway ethay isassembledday odecay, "
"itway isway eplacedray ybay away\n"
"      abellay.  Ifway isthay isway away unctionfay, itway isway alledcay "
"otay ilterfay ethay aluevay."

#: target:compiler/disassem.lisp
msgid "~d bits is not a byte-multiple"
msgstr "~d itsbay isway otnay away ytebay-ultiplemay"

#: target:compiler/disassem.lisp
msgid "Returns non-NIL if ADDRESS is aligned on a SIZE byte boundary."
msgstr ""
"Eturnsray onnay-ILNAY ifway ADDRESSWAY isway alignedway onway away IZESAY "
"ytebay oundarybay."

#: target:compiler/disassem.lisp
msgid "Return ADDRESS aligned *upward* to a SIZE byte boundary."
msgstr ""
"Eturnray ADDRESSWAY alignedway *upwardway* otay away IZESAY ytebay "
"oundarybay."

#: target:compiler/disassem.lisp
msgid ""
"If CAR is eq to the car of OLD-CONS and CDR is eq to the CDR, return\n"
"  OLD-CONS, otherwise return (cons CAR CDR)."
msgstr ""
"Ifway ARCAY isway eqway otay ethay arcay ofway OLDWAY-ONSCAY andway DRCAY "
"isway eqway otay ethay DRCAY, eturnray\n"
"  OLDWAY-ONSCAY, otherwiseway eturnray (onscay ARCAY DRCAY)."

#: target:compiler/disassem.lisp
msgid ""
"A simple (one list arg) mapcar that avoids consing up a new list\n"
"  as long as the results of calling FUN on the elements of LIST are\n"
"  eq to the original."
msgstr ""
"Away implesay (oneway istlay argway) apcarmay atthay avoidsway onsingcay "
"upway away ewnay istlay\n"
"  asway onglay asway ethay esultsray ofway allingcay UNFAY onway ethay "
"elementsway ofway ISTLAY areway\n"
"  eqway otay ethay originalway."

#: target:compiler/disassem.lisp
msgid "Can't dump functions, so function ref form must be quoted: ~s"
msgstr ""
"Ancay't umpday unctionsfay, osay unctionfay efray ormfay ustmay ebay "
"otedquay: ~s"

#: target:compiler/disassem.lisp
msgid "Unknown argument ~s"
msgstr "Unknownway argumentway ~s"

#: target:compiler/disassem.lisp
msgid "~s must not have multiple values"
msgstr "~s ustmay otnay avehay ultiplemay aluesvay"

#: target:compiler/disassem.lisp
msgid "Unknown arg-form kind ~s"
msgstr "Unknownway argway-ormfay indkay ~s"

#: target:compiler/disassem.lisp
msgid ""
"Cannot label a multiple-field argument ~\n"
"\t\t\t      unless using a function: ~s"
msgstr ""
"Annotcay abellay away ultiplemay-ieldfay argumentway ~\n"
"\t\t\t      unlessway usingway away unctionfay: ~s"

#: target:compiler/disassem.lisp
msgid "Bogus!  Can't use the :printed value of an arg!"
msgstr "Ogusbay!  Ancay't useway ethay :intedpray aluevay ofway anway argway!"

#: target:compiler/disassem.lisp
msgid ""
"number of constants doesn't match number of fields ~\n"
"\t\t\t  in: (~s :constant~{ ~s~})"
msgstr ""
"umbernay ofway onstantscay oesnday't atchmay umbernay ofway ieldsfay ~\n"
"\t\t\t  inway: (~s :onstantcay~{ ~s~})"

#: target:compiler/disassem.lisp
msgid ""
"Can't compare differently sized fields: ~\n"
"\t\t          (~s :same-as ~s)"
msgstr ""
"Ancay't omparecay ifferentlyday izedsay ieldsfay: ~\n"
"\t\t          (~s :amesay-asway ~s)"

#: target:compiler/disassem.lisp
msgid "Bogus test-form: ~s"
msgstr "Ogusbay esttay-ormfay: ~s"

#: target:compiler/disassem.lisp
msgid "Returns the first non-keyword symbol in a depth-first search of TREE."
msgstr ""
"Eturnsray ethay irstfay onnay-eywordkay ymbolsay inway away epthday-irstfay "
"earchsay ofway EETRAY."

#: target:compiler/disassem.lisp
msgid "Illegal printer: ~s"
msgstr "Illegalway interpray: ~s"

#: target:compiler/disassem.lisp
msgid "Unknown printer element: ~s"
msgstr "Unknownway interpray elementway: ~s"

#: target:compiler/disassem.lisp
msgid "First arg to :USING must be a string or #'function"
msgstr ""
"Irstfay argway otay :USINGWAY ustmay ebay away ingstray orway #'unctionfay"

#: target:compiler/disassem.lisp
msgid "No suitable choice found in ~s"
msgstr "Onay uitablesay oicechay oundfay inway ~s"

#: target:compiler/disassem.lisp
msgid ""
"Returns a version of the disassembly-template PRINTER with compile-time\n"
"  tests (e.g. :constant without a value), and any :CHOOSE operators "
"resolved\n"
"  properly for the args ARGS.  (:CHOOSE Sub*) simply returns the first Sub "
"in\n"
"  which every field reference refers to a valid arg."
msgstr ""
"Eturnsray away ersionvay ofway ethay isassemblyday-emplatetay INTERPRAY "
"ithway ompilecay-imetay\n"
"  eststay (e.g. :onstantcay ithoutway away aluevay), andway anyway :OOSECHAY "
"operatorsway esolvedray\n"
"  operlypray orfay ethay argsway ARGSWAY.  (:OOSECHAY Ubsay*) implysay "
"eturnsray ethay irstfay Ubsay inway\n"
"  ichwhay everyway ieldfay eferenceray efersray otay away alidvay argway."

#: target:compiler/disassem.lisp
msgid "~&; Using cached function ~s~%"
msgstr "~&; Usingway achedcay unctionfay ~s~%"

#: target:compiler/disassem.lisp
msgid "~&; Making new function ~s~%"
msgstr "~&; Akingmay ewnay unctionfay ~s~%"

#: target:compiler/disassem.lisp
msgid "Unknown argument type: ~s"
msgstr "Unknownway argumentway ypetay: ~s"

#: target:compiler/disassem.lisp
msgid ""
"~@<In arg ~s:  ~3i~:_~\n"
"          Can't specify fields except using DEFINE-INSTRUCTION-FORMAT.~:>"
msgstr ""
"~@<Inway argway ~s:  ~3i~:_~\n"
"          Ancay't ecifyspay ieldsfay exceptway usingway EFINEDAY-"
"INSTRUCTIONWAY-ORMATFAY.~:>"

#: target:compiler/disassem.lisp
msgid ""
"~@<In arg ~s:  ~3i~:_~\n"
"\t\t\t\t     Field ~s doesn't fit in an ~\n"
"\t\t\t\t     instruction-format ~d bits wide.~:>"
msgstr ""
"~@<Inway argway ~s:  ~3i~:_~\n"
"\t\t\t\t     Ieldfay ~s oesnday't itfay inway anway ~\n"
"\t\t\t\t     instructionway-ormatfay ~d itsbay ideway.~:>"

#: target:compiler/disassem.lisp
msgid ""
"Generate a form to specify global disassembler params.  See the\n"
"  documentation for SET-DISASSEM-PARAMS for more info."
msgstr ""
"Enerategay away ormfay otay ecifyspay obalglay isassemblerday aramspay.  "
"Eesay ethay\n"
"  ocumentationday orfay ETSAY-ISASSEMDAY-ARAMSPAY orfay oremay infoway."

#: target:compiler/disassem.lisp
msgid ""
"Generate a form to define a disassembler argument type.  See\n"
"  DEFINE-ARGUMENT-TYPE for more info."
msgstr ""
"Enerategay away ormfay otay efineday away isassemblerday argumentway "
"ypetay.  Eesay\n"
"  EFINEDAY-ARGUMENTWAY-YPETAY orfay oremay infoway."

#: target:compiler/disassem.lisp
msgid ""
"Generate a form to define an instruction format.  See\n"
"  DEFINE-INSTRUCTION-FORMAT for more info."
msgstr ""
"Enerategay away ormfay otay efineday anway instructionway ormatfay.  Eesay\n"
"  EFINEDAY-INSTRUCTIONWAY-ORMATFAY orfay oremay infoway."

#: target:compiler/disassem.lisp
msgid "Field ~s in arg ~s overlaps some other field"
msgstr "Ieldfay ~s inway argway ~s overlapsway omesay otherway ieldfay"

#: target:compiler/disassem.lisp
msgid "Unknown instruction format ~s"
msgstr "Unknownway instructionway ormatfay ~s"

#: target:compiler/disassem.lisp
msgid ""
"Returns non-NIL if the instruction SPECIAL is a more specific version of\n"
"  GENERAL (i.e., the same instruction, but with more constraints)."
msgstr ""
"Eturnsray onnay-ILNAY ifway ethay instructionway ECIALSPAY isway away oremay "
"ecificspay ersionvay ofway\n"
"  ENERALGAY (i.e., ethay amesay instructionway, utbay ithway oremay "
"onstraintscay)."

#: target:compiler/disassem.lisp
msgid ""
"Returns an integer corresponding to the specifivity of the instruction INST."
msgstr ""
"Eturnsray anway integerway orrespondingcay otay ethay ecifivityspay ofway "
"ethay instructionway INSTWAY."

#: target:compiler/disassem.lisp
msgid ""
"Order the list of instructions INSTS with more specific (more constant\n"
"  bits, or same-as argument constains) ones first.  Returns the ordered list."
msgstr ""
"Orderway ethay istlay ofway instructionsway INSTSWAY ithway oremay "
"ecificspay (oremay onstantcay\n"
"  itsbay, orway amesay-asway argumentway onstainscay) onesway irstfay.  "
"Eturnsray ethay orderedway istlay."

#: target:compiler/disassem.lisp
msgid "Instructions either aren't related or conflict in some way:~% ~s"
msgstr ""
"Instructionsway eitherway arenway't elatedray orway onflictcay inway omesay "
"ayway:~% ~s"

#: target:compiler/disassem.lisp
msgid ""
"Given a list of instructions INSTS, Sees if one of these instructions is a\n"
"  more general form of all the others, in which case they are put into its\n"
"  specializers list, and it is returned.  Otherwise an error is signaled."
msgstr ""
"Ivengay away istlay ofway instructionsway INSTSWAY, Eessay ifway oneway "
"ofway esethay instructionsway isway away\n"
"  oremay eneralgay ormfay ofway allway ethay othersway, inway ichwhay asecay "
"eythay areway utpay intoway itsway\n"
"  ecializersspay istlay, andway itway isway eturnedray.  Otherwiseway anway "
"errorway isway ignaledsay."

#: target:compiler/disassem.lisp
msgid "Multiple specializing masters: ~s"
msgstr "Ultiplemay ecializingspay astersmay: ~s"

#: target:compiler/disassem.lisp
msgid "Returns non-NIL if all constant-bits in INST match CHUNK."
msgstr ""
"Eturnsray onnay-ILNAY ifway allway onstantcay-itsbay inway INSTWAY atchmay "
"UNKCHAY."

#: target:compiler/disassem.lisp
msgid ""
"Given an instruction object, INST, and a bit-pattern, CHUNK, picks the\n"
"  most specific instruction on INST's specializer list who's constraints "
"are\n"
"  met by CHUNK.  If none do, then INST is returned."
msgstr ""
"Ivengay anway instructionway objectway, INSTWAY, andway away itbay-"
"atternpay, UNKCHAY, ickspay ethay\n"
"  ostmay ecificspay instructionway onway INSTWAY's ecializerspay istlay "
"owhay's onstraintscay areway\n"
"  etmay ybay UNKCHAY.  Ifway onenay oday, enthay INSTWAY isway eturnedray."

#: target:compiler/disassem.lisp
msgid ""
"Returns the instruction object within INST-SPACE corresponding to the\n"
"  bit-pattern CHUNK, or NIL if there isn't one."
msgstr ""
"Eturnsray ethay instructionway objectway ithinway INSTWAY-ACESPAY "
"orrespondingcay otay ethay\n"
"  itbay-atternpay UNKCHAY, orway ILNAY ifway erethay isnway't oneway."

#: target:compiler/disassem.lisp
msgid ""
"Returns an instruction-space object corresponding to the list of\n"
"  instructions INSTS.  If the optional parameter INITIAL-MASK is supplied, "
"only\n"
"  bits it has set are used."
msgstr ""
"Eturnsray anway instructionway-acespay objectway orrespondingcay otay ethay "
"istlay ofway\n"
"  instructionsway INSTSWAY.  Ifway ethay optionalway arameterpay INITIALWAY-"
"ASKMAY isway uppliedsay, onlyway\n"
"  itsbay itway ashay etsay areway usedway."

#: target:compiler/disassem.lisp
msgid "Prints a nicely formatted version of INST-SPACE."
msgstr "Intspray away icelynay ormattedfay ersionvay ofway INSTWAY-ACESPAY."

#: target:compiler/disassem.lisp
msgid "Print the inst space for the specified backend"
msgstr "Intpray ethay instway acespay orfay ethay ecifiedspay ackendbay"

#: target:compiler/disassem.lisp
msgid "Converts a word-offset NUM to a byte-offset."
msgstr "Onvertscay away ordway-offsetway UMNAY otay away ytebay-offsetway."

#: target:compiler/disassem.lisp
msgid "Converts a byte-offset NUM to a word-offset."
msgstr "Onvertscay away ytebay-offsetway UMNAY otay away ordway-offsetway."

#: target:compiler/disassem.lisp
msgid "Get the value of the property called NAME in DSTATE.  Also setf'able."
msgstr ""
"Etgay ethay aluevay ofway ethay opertypray alledcay AMENAY inway STATEDAY.  "
"Alsoway etfsay'ableway."

#: target:compiler/disassem.lisp
msgid "Returns the absolute address of the current instruction in DSTATE."
msgstr ""
"Eturnsray ethay absoluteway addressway ofway ethay urrentcay instructionway "
"inway STATEDAY."

#: target:compiler/disassem.lisp
msgid "Returns the absolute address of the next instruction in DSTATE."
msgstr ""
"Eturnsray ethay absoluteway addressway ofway ethay extnay instructionway "
"inway STATEDAY."

#: target:compiler/disassem.lisp
msgid ""
"Offset of FUNCTION from the start of its code-component's instruction area."
msgstr ""
"Offsetway ofway UNCTIONFAY omfray ethay tartsay ofway itsway odecay-"
"omponentcay's instructionway areaway."

#: target:compiler/disassem.lisp
msgid "Offset of FUNCTION from the start of its code-component."
msgstr ""
"Offsetway ofway UNCTIONFAY omfray ethay tartsay ofway itsway odecay-"
"omponentcay."

#: target:compiler/disassem.lisp
msgid "Returns the length of the instruction area in CODE-COMPONENT."
msgstr ""
"Eturnsray ethay engthlay ofway ethay instructionway areaway inway ODECAY-"
"OMPONENTCAY."

#: target:compiler/disassem.lisp
msgid "Returns the address of the instruction area in CODE-COMPONENT."
msgstr ""
"Eturnsray ethay addressway ofway ethay instructionway areaway inway ODECAY-"
"OMPONENTCAY."

#: target:compiler/disassem.lisp
msgid "Returns the first function in CODE-COMPONENT."
msgstr "Eturnsray ethay irstfay unctionfay inway ODECAY-OMPONENTCAY."

#: target:compiler/disassem.lisp
msgid "Possible ~A header word"
msgstr "Ossiblepay ~Away eaderhay ordway"

#: target:compiler/disassem.lisp
msgid ""
"Print the function-header (entry-point) pseudo-instruction at the current\n"
"  location in DSTATE to STREAM."
msgstr ""
"Intpray ethay unctionfay-eaderhay (entryway-ointpay) seudopay-instructionway "
"atway ethay urrentcay\n"
"  ocationlay inway STATEDAY otay EAMSTRAY."

#: target:compiler/disassem.lisp
msgid ""
"Iterate through the instructions in SEGMENT, calling FUNCTION\n"
"  for each instruction, with arguments of CHUNK, STREAM, and DSTATE."
msgstr ""
"Iterateway roughthay ethay instructionsway inway EGMENTSAY, allingcay "
"UNCTIONFAY\n"
"  orfay eachway instructionway, ithway argumentsway ofway UNKCHAY, EAMSTRAY, "
"andway STATEDAY."

#: target:compiler/disassem.lisp
msgid ""
"Make an initial non-printing disassembly pass through DSTATE, noting any\n"
"  addresses that are referenced by instructions in this segment."
msgstr ""
"Akemay anway initialway onnay-intingpray isassemblyday asspay roughthay "
"STATEDAY, otingnay anyway\n"
"  addressesway atthay areway eferencedray ybay instructionsway inway isthay "
"egmentsay."

#: target:compiler/disassem.lisp
msgid ""
"If any labels in DSTATE have been added since the last call to this\n"
"  function, give them label-numbers, enter them in the hash-table, and make\n"
"  sure the label list is in sorted order."
msgstr ""
"Ifway anyway abelslay inway STATEDAY avehay eenbay addedway incesay ethay "
"astlay allcay otay isthay\n"
"  unctionfay, ivegay emthay abellay-umbersnay, enterway emthay inway ethay "
"ashhay-abletay, andway akemay\n"
"  uresay ethay abellay istlay isway inway ortedsay orderway."

#: target:compiler/disassem.lisp
msgid "Get the instruction-space from PARAMS, creating it if necessary."
msgstr ""
"Etgay ethay instructionway-acespay omfray ARAMSPAY, eatingcray itway ifway "
"ecessarynay."

#: target:compiler/disassem.lisp
msgid ""
"Print the current address in DSTATE to STREAM, plus any labels that\n"
"  correspond to it, and leave the cursor in the instruction column."
msgstr ""
"Intpray ethay urrentcay addressway inway STATEDAY otay EAMSTRAY, usplay "
"anyway abelslay atthay\n"
"  orrespondcay otay itway, andway eavelay ethay ursorcay inway ethay "
"instructionway olumncay."

#: target:compiler/disassem.lisp
msgid ""
"Print a newline to STREAM, inserting any pending notes in DSTATE as\n"
"  end-of-line comments.  If there is more than one note, a separate line\n"
"  will be used for each one."
msgstr ""
"Intpray away ewlinenay otay EAMSTRAY, insertingway anyway endingpay otesnay "
"inway STATEDAY asway\n"
"  endway-ofway-inelay ommentscay.  Ifway erethay isway oremay anthay oneway "
"otenay, away eparatesay inelay\n"
"  illway ebay usedway orfay eachway oneway."

#: target:compiler/disassem.lisp
msgid "Disassemble NUM bytes to STREAM as simple `BYTE' instructions"
msgstr ""
"Isassembleday UMNAY ytesbay otay EAMSTRAY asway implesay `YTEBAY' "
"instructionsway"

#: target:compiler/disassem.lisp
msgid "Disassemble NUM machine-words to STREAM as simple `WORD' instructions"
msgstr ""
"Isassembleday UMNAY achinemay-ordsway otay EAMSTRAY asway implesay `ORDWAY' "
"instructionsway"

#: target:compiler/disassem.lisp
msgid "Make a disassembler-state object."
msgstr "Akemay away isassemblerday-tatesay objectway."

#: target:compiler/disassem.lisp
msgid ""
"Return a memory segment located at the system-area-pointer returned by\n"
"  SAP-MAKER and LENGTH bytes long in the disassem-state object DSTATE.\n"
"  Optional keyword arguments include :VIRTUAL-LOCATION (by default the same "
"as\n"
"  the address), :DEBUG-FUNCTION, :SOURCE-FORM-CACHE (a source-form-cache\n"
"  object), and :HOOKS (a list of offs-hook objects)."
msgstr ""
"Eturnray away emorymay egmentsay ocatedlay atway ethay ystemsay-areaway-"
"ointerpay eturnedray ybay\n"
"  APSAY-AKERMAY andway ENGTHLAY ytesbay onglay inway ethay isassemday-"
"tatesay objectway STATEDAY.\n"
"  Optionalway eywordkay argumentsway includeway :IRTUALVAY-OCATIONLAY (ybay "
"efaultday ethay amesay asway\n"
"  ethay addressway), :EBUGDAY-UNCTIONFAY, :OURCESAY-ORMFAY-ACHECAY (away "
"ourcesay-ormfay-achecay\n"
"  objectway), andway :OOKSHAY (away istlay ofway offsway-ookhay objectsway)."

#: target:compiler/disassem.lisp
msgid "Code-header ~s: size: ~s, trace-table-offset: ~s~%"
msgstr "Odecay-eaderhay ~s: izesay: ~s, acetray-abletay-offsetway: ~s~%"

#: target:compiler/disassem.lisp
msgid "Fun-header ~s at offset ~d (words): ~s~a => ~s~%"
msgstr "Unfay-eaderhay ~s atway offsetway ~d (ordsway): ~s~away => ~s~%"

#: target:compiler/disassem.lisp
msgid "The source file ~s no longer seems to exist"
msgstr "Ethay ourcesay ilefay ~s onay ongerlay eemssay otay existway"

#: target:compiler/disassem.lisp
msgid "No start positions map"
msgstr "Onay tartsay ositionspay apmay"

#: target:compiler/disassem.lisp
msgid ""
"Source file ~s has been modified; ~@\n"
"\t\t\t\t\t Using form offset instead of file index"
msgstr ""
"Ourcesay ilefay ~s ashay eenbay odifiedmay; ~@\n"
"\t\t\t\t\t Usingway ormfay offsetway insteadway ofway ilefay indexway"

#: target:compiler/disassem.lisp
msgid ""
"Bogus form-number in form!  The source file has probably ~@\n"
"\t\t  been changed too much to cope with"
msgstr ""
"Ogusbay ormfay-umbernay inway ormfay!  Ethay ourcesay ilefay ashay "
"obablypray ~@\n"
"\t\t  eenbay angedchay ootay uchmay otay opecay ithway"

#: target:compiler/disassem.lisp
msgid "Return the vector of debug-variables currently associated with DSTATE."
msgstr ""
"Eturnray ethay ectorvay ofway ebugday-ariablesvay urrentlycay associatedway "
"ithway STATEDAY."

#: target:compiler/disassem.lisp
msgid ""
"Given the OFFSET of a location within the location-group called LG-NAME,\n"
"  see if there's a current mapping to a source variable in DSTATE, and if "
"so,\n"
"  return the offset of that variable in the current debug-variable vector."
msgstr ""
"Ivengay ethay OFFSETWAY ofway away ocationlay ithinway ethay ocationlay-"
"oupgray alledcay GLAY-AMENAY,\n"
"  eesay ifway erethay's away urrentcay appingmay otay away ourcesay "
"ariablevay inway STATEDAY, andway ifway osay,\n"
"  eturnray ethay offsetway ofway atthay ariablevay inway ethay urrentcay "
"ebugday-ariablevay ectorvay."

#: target:compiler/disassem.lisp
msgid ""
"Return a new vector which has the same contents as the old one VEC, plus\n"
"  new cells (for a total size of NEW-LEN).  The additional elements are\n"
"  initailized to INITIAL-ELEMENT."
msgstr ""
"Eturnray away ewnay ectorvay ichwhay ashay ethay amesay ontentscay asway "
"ethay oldway oneway ECVAY, usplay\n"
"  ewnay ellscay (orfay away otaltay izesay ofway EWNAY-ENLAY).  Ethay "
"additionalway elementsway areway\n"
"  initailizedway otay INITIALWAY-ELEMENTWAY."

#: target:compiler/disassem.lisp
msgid ""
"Returns a STORAGE-INFO struction describing the object-to-source\n"
"  variable mappings from DEBUG-FUNCTION."
msgstr ""
"Eturnsray away TORAGESAY-INFOWAY uctionstray escribingday ethay objectway-"
"otay-ourcesay\n"
"  ariablevay appingsmay omfray EBUGDAY-UNCTIONFAY."

#: target:compiler/disassem.lisp
msgid ";;; At offset ~d: ~s~%"
msgstr ";;; Atway offsetway ~d: ~s~%"

#: target:compiler/disassem.lisp
msgid ";;; SET: ~s[~d]~%"
msgstr ";;; ETSAY: ~s[~d]~%"

#: target:compiler/disassem.lisp
msgid ""
"Add hooks to track to track the source code in SEGMENT during\n"
"  disassembly.  SFCACHE can be either NIL or it can be a SOURCE-FORM-CACHE\n"
"  structure, in which case it is used to cache forms from files."
msgstr ""
"Addway ookshay otay acktray otay acktray ethay ourcesay odecay inway "
"EGMENTSAY uringday\n"
"  isassemblyday.  FCACHESAY ancay ebay eitherway ILNAY orway itway ancay "
"ebay away OURCESAY-ORMFAY-ACHECAY\n"
"  ucturestray, inway ichwhay asecay itway isway usedway otay achecay ormsfay "
"omfray ilesfay."

#: target:compiler/disassem.lisp
msgid "No-arg-parsing entry point"
msgstr "Onay-argway-arsingpay entryway ointpay"

#: target:compiler/disassem.lisp
msgid "~s entry point"
msgstr "~s entryway ointpay"

#: target:compiler/disassem.lisp
msgid "Return the PC of FUNCTION's header."
msgstr "Eturnray ethay CPAY ofway UNCTIONFAY's eaderhay."

#: target:compiler/disassem.lisp
msgid "If non-NIL, disassemble flets/labels too"
msgstr "Ifway onnay-ILNAY, isassembleday etsflay/abelslay ootay"

#: target:compiler/disassem.lisp
msgid ""
"Returns a list of the segments of memory containing machine code\n"
"  instructions for FUNCTION."
msgstr ""
"Eturnsray away istlay ofway ethay egmentssay ofway emorymay ontainingcay "
"achinemay odecay\n"
"  instructionsway orfay UNCTIONFAY."

#: target:compiler/disassem.lisp
msgid ""
"Returns a list of the segments of memory containing machine code\n"
"  instructions for the code-component CODE.  If START-OFFS and/or LENGTH is\n"
"  supplied, only that part of the code-segment is used (but these are\n"
"  constrained to lie within the code-segment)."
msgstr ""
"Eturnsray away istlay ofway ethay egmentssay ofway emorymay ontainingcay "
"achinemay odecay\n"
"  instructionsway orfay ethay odecay-omponentcay ODECAY.  Ifway TARTSAY-"
"OFFSWAY andway/orway ENGTHLAY isway\n"
"  uppliedsay, onlyway atthay artpay ofway ethay odecay-egmentsay isway "
"usedway (utbay esethay areway\n"
"  onstrainedcay otay ielay ithinway ethay odecay-egmentsay)."

#: target:compiler/disassem.lisp
msgid ""
"Return the address of the instructions for function and its length.\n"
"  The length is computed using a heuristic, and so may not be accurate."
msgstr ""
"Eturnray ethay addressway ofway ethay instructionsway orfay unctionfay "
"andway itsway engthlay.\n"
"  Ethay engthlay isway omputedcay usingway away euristichay, andway osay "
"aymay otnay ebay accurateway."

#: target:compiler/disassem.lisp
msgid ""
"Returns two values:  the amount by which the last instruction in the\n"
"  segment goes past the end of the segment, and the offset of the end of "
"the\n"
"  segment from the beginning of that instruction.  If all instructions fit\n"
"  perfectly, this will return 0 and 0."
msgstr ""
"Eturnsray wotay aluesvay:  ethay amountway ybay ichwhay ethay astlay "
"instructionway inway ethay\n"
"  egmentsay oesgay astpay ethay endway ofway ethay egmentsay, andway ethay "
"offsetway ofway ethay endway ofway ethay\n"
"  egmentsay omfray ethay eginningbay ofway atthay instructionway.  Ifway "
"allway instructionsway itfay\n"
"  erfectlypay, isthay illway eturnray 0 andway 0."

#: target:compiler/disassem.lisp
msgid ""
"Computes labels for all the memory segments in SEGLIST and adds them to\n"
"  DSTATE.  It's important to call this function with all the segments "
"you're\n"
"  interested in, so it can find references from one to another."
msgstr ""
"Omputescay abelslay orfay allway ethay emorymay egmentssay inway EGLISTSAY "
"andway addsway emthay otay\n"
"  STATEDAY.  Itway's importantway otay allcay isthay unctionfay ithway "
"allway ethay egmentssay ouyay'eray\n"
"  interestedway inway, osay itway ancay indfay eferencesray omfray oneway "
"otay anotherway."

#: target:compiler/disassem.lisp
msgid "Disassemble the machine code instructions in SEGMENT to STREAM."
msgstr ""
"Isassembleday ethay achinemay odecay instructionsway inway EGMENTSAY otay "
"EAMSTRAY."

#: target:compiler/disassem.lisp
msgid ""
"Disassemble the machine code instructions in each memory segment in\n"
"  SEGMENTS in turn to STREAM."
msgstr ""
"Isassembleday ethay achinemay odecay instructionsway inway eachway emorymay "
"egmentsay inway\n"
"  EGMENTSSAY inway urntay otay EAMSTRAY."

#: target:compiler/disassem.lisp
msgid "Disassemble the machine code instructions for FUNCTION."
msgstr "Isassembleday ethay achinemay odecay instructionsway orfay UNCTIONFAY."

#: target:compiler/disassem.lisp
msgid "Cannot compile a lexical closure"
msgstr "Annotcay ompilecay away exicallay osureclay"

#: target:compiler/disassem.lisp
msgid "Can't make a compiled function from ~S"
msgstr "Ancay't akemay away ompiledcay unctionfay omfray ~S"

#: target:compiler/disassem.lisp
msgid ""
"Disassemble the machine code associated with OBJECT, which can be a\n"
"  function, a lambda expression, or a symbol with a function definition.  "
"If\n"
"  it is not already compiled, the compiler is called to produce something "
"to\n"
"  disassemble."
msgstr ""
"Isassembleday ethay achinemay odecay associatedway ithway OBJECTWAY, ichwhay "
"ancay ebay away\n"
"  unctionfay, away ambdalay expressionway, orway away ymbolsay ithway away "
"unctionfay efinitionday.  Ifway\n"
"  itway isway otnay alreadyway ompiledcay, ethay ompilercay isway alledcay "
"otay oducepray omethingsay otay\n"
"  isassembleday."

#: target:compiler/disassem.lisp
msgid ""
"Disassembles the given area of memory starting at ADDRESS and LENGTH long.\n"
"  Note that if CODE-COMPONENT is NIL and this memory could move during a "
"GC,\n"
"  you'd better disable it around the call to this function."
msgstr ""
"Isassemblesday ethay ivengay areaway ofway emorymay tartingsay atway "
"ADDRESSWAY andway ENGTHLAY onglay.\n"
"  Otenay atthay ifway ODECAY-OMPONENTCAY isway ILNAY andway isthay emorymay "
"ouldcay ovemay uringday away CGAY,\n"
"  ouyay'd etterbay isableday itway aroundway ethay allcay otay isthay "
"unctionfay."

#: target:compiler/disassem.lisp
msgid " Address ~x not in the code component ~s."
msgstr " Addressway ~x otnay inway ethay odecay omponentcay ~s."

#: target:compiler/disassem.lisp
msgid ""
"Disassemble the machine code instructions associated with\n"
"  CODE-COMPONENT (this may include multiple entry points)."
msgstr ""
"Isassembleday ethay achinemay odecay instructionsway associatedway ithway\n"
"  ODECAY-OMPONENTCAY (isthay aymay includeway ultiplemay entryway ointspay)."

#: target:compiler/disassem.lisp
msgid ""
"Disassemble the machine code instructions associated with\n"
"  ASSEM-SEGMENT (of type new-assem:segment)."
msgstr ""
"Isassembleday ethay achinemay odecay instructionsway associatedway ithway\n"
"  ASSEMWAY-EGMENTSAY (ofway ypetay ewnay-assemway:egmentsay)."

#: target:compiler/disassem.lisp
msgid ""
"An alist of (SYMBOL-SLOT-OFFSET . ACCESS-FUNCTION-NAME) for slots in a\n"
"symbol object that we know about."
msgstr ""
"Anway alistway ofway (YMBOLSAY-OTSLAY-OFFSETWAY . ACCESSWAY-UNCTIONFAY-"
"AMENAY) orfay otsslay inway away\n"
"ymbolsay objectway atthay eway nowkay aboutway."

#: target:compiler/disassem.lisp
msgid ""
"Given ADDRESS, try and figure out if which slot of which symbol is being\n"
"  refered to.  Of course we can just give up, so it's not a big deal...\n"
"  Returns two values, the symbol and the name of the access function of the\n"
"  slot."
msgstr ""
"Ivengay ADDRESSWAY, ytray andway igurefay outway ifway ichwhay otslay ofway "
"ichwhay ymbolsay isway eingbay\n"
"  eferedray otay.  Ofway oursecay eway ancay ustjay ivegay upway, osay "
"itway's otnay away igbay ealday...\n"
"  Eturnsray wotay aluesvay, ethay ymbolsay andway ethay amenay ofway ethay "
"accessway unctionfay ofway ethay\n"
"  otslay."

#: target:compiler/disassem.lisp
msgid ""
"Given a BYTE-OFFSET from NIL, try and figure out if which slot of which\n"
"  symbol is being refered to.  Of course we can just give up, so it's not a "
"big\n"
"  deal...  Returns two values, the symbol and the access function."
msgstr ""
"Ivengay away YTEBAY-OFFSETWAY omfray ILNAY, ytray andway igurefay outway "
"ifway ichwhay otslay ofway ichwhay\n"
"  ymbolsay isway eingbay eferedray otay.  Ofway oursecay eway ancay ustjay "
"ivegay upway, osay itway's otnay away igbay\n"
"  ealday...  Eturnsray wotay aluesvay, ethay ymbolsay andway ethay accessway "
"unctionfay."

#: target:compiler/disassem.lisp
msgid "Returns the lisp object located BYTE-OFFSET from NIL."
msgstr ""
"Eturnsray ethay isplay objectway ocatedlay YTEBAY-OFFSETWAY omfray ILNAY."

#: target:compiler/disassem.lisp
msgid ""
"Returns two values; the lisp-object located at BYTE-OFFSET in the constant\n"
"  area of the code-object in the current segment and T, or NIL and NIL if\n"
"  there is no code-object in the current segment."
msgstr ""
"Eturnsray wotay aluesvay; ethay isplay-objectway ocatedlay atway YTEBAY-"
"OFFSETWAY inway ethay onstantcay\n"
"  areaway ofway ethay odecay-objectway inway ethay urrentcay egmentsay "
"andway T, orway ILNAY andway ILNAY ifway\n"
"  erethay isway onay odecay-objectway inway ethay urrentcay egmentsay."

#: target:compiler/disassem.lisp
msgid "Build an address-name hash-table from the name-address hash"
msgstr ""
"Uildbay anway addressway-amenay ashhay-abletay omfray ethay amenay-"
"addressway ashhay"

#: target:compiler/disassem.lisp
msgid ""
"Returns the name of the primitive lisp assembler routine or foreign\n"
"  symbol located at ADDRESS, or NIL if there isn't one."
msgstr ""
"Eturnsray ethay amenay ofway ethay imitivepray isplay assemblerway outineray "
"orway oreignfay\n"
"  ymbolsay ocatedlay atway ADDRESSWAY, orway ILNAY ifway erethay isnway't "
"oneway."

#: target:compiler/disassem.lisp
msgid ""
"Store NOTE (which can be either a string or a function with a single\n"
"  stream argument) to be printed as an end-of-line comment after the "
"current\n"
"  instruction is disassembled."
msgstr ""
"Toresay OTENAY (ichwhay ancay ebay eitherway away ingstray orway away "
"unctionfay ithway away inglesay\n"
"  eamstray argumentway) otay ebay intedpray asway anway endway-ofway-inelay "
"ommentcay afterway ethay urrentcay\n"
"  instructionway isway isassembledday."

#: target:compiler/disassem.lisp
msgid ""
"Store a note about the lisp constant located BYTE-OFFSET bytes from the\n"
"  current code-component, to be printed as an end-of-line comment after the\n"
"  current instruction is disassembled."
msgstr ""
"Toresay away otenay aboutway ethay isplay onstantcay ocatedlay YTEBAY-"
"OFFSETWAY ytesbay omfray ethay\n"
"  urrentcay odecay-omponentcay, otay ebay intedpray asway anway endway-ofway-"
"inelay ommentcay afterway ethay\n"
"  urrentcay instructionway isway isassembledday."

#: target:compiler/disassem.lisp
msgid ""
"Store a note about the lisp constant located at ADDR in the\n"
"  current code-component, to be printed as an end-of-line comment after the\n"
"  current instruction is disassembled."
msgstr ""
"Toresay away otenay aboutway ethay isplay onstantcay ocatedlay atway ADDRWAY "
"inway ethay\n"
"  urrentcay odecay-omponentcay, otay ebay intedpray asway anway endway-ofway-"
"inelay ommentcay afterway ethay\n"
"  urrentcay instructionway isway isassembledday."

#: target:compiler/disassem.lisp
msgid ""
"If the memory address located NIL-BYTE-OFFSET bytes from the constant NIL\n"
"  is a valid slot in a symbol, store a note describing which symbol and "
"slot,\n"
"  to be printed as an end-of-line comment after the current instruction is\n"
"  disassembled.  Returns non-NIL iff a note was recorded."
msgstr ""
"Ifway ethay emorymay addressway ocatedlay ILNAY-YTEBAY-OFFSETWAY ytesbay "
"omfray ethay onstantcay ILNAY\n"
"  isway away alidvay otslay inway away ymbolsay, toresay away otenay "
"escribingday ichwhay ymbolsay andway otslay,\n"
"  otay ebay intedpray asway anway endway-ofway-inelay ommentcay afterway "
"ethay urrentcay instructionway isway\n"
"  isassembledday.  Eturnsray onnay-ILNAY iffway away otenay asway ecordedray."

#: target:compiler/disassem.lisp
msgid ""
"If the memory address located NIL-BYTE-OFFSET bytes from the constant NIL\n"
"  is a valid lisp object, store a note describing which symbol and slot, to\n"
"  be printed as an end-of-line comment after the current instruction is\n"
"  disassembled.  Returns non-NIL iff a note was recorded."
msgstr ""
"Ifway ethay emorymay addressway ocatedlay ILNAY-YTEBAY-OFFSETWAY ytesbay "
"omfray ethay onstantcay ILNAY\n"
"  isway away alidvay isplay objectway, toresay away otenay escribingday "
"ichwhay ymbolsay andway otslay, otay\n"
"  ebay intedpray asway anway endway-ofway-inelay ommentcay afterway ethay "
"urrentcay instructionway isway\n"
"  isassembledday.  Eturnsray onnay-ILNAY iffway away otenay asway ecordedray."

#: target:compiler/disassem.lisp
msgid ""
"If ADDRESS is the address of a primitive assembler routine or\n"
"  foreign symbol, store a note describing which one, to be printed as\n"
"  an end-of-line comment after the current instruction is disassembled.\n"
"  Returns non-NIL iff a note was recorded.  If NOTE-ADDRESS-P is non-NIL, a\n"
"  note of the address is also made."
msgstr ""
"Ifway ADDRESSWAY isway ethay addressway ofway away imitivepray assemblerway "
"outineray orway\n"
"  oreignfay ymbolsay, toresay away otenay escribingday ichwhay oneway, otay "
"ebay intedpray asway\n"
"  anway endway-ofway-inelay ommentcay afterway ethay urrentcay "
"instructionway isway isassembledday.\n"
"  Eturnsray onnay-ILNAY iffway away otenay asway ecordedray.  Ifway OTENAY-"
"ADDRESSWAY-P isway onnay-ILNAY, away\n"
"  otenay ofway ethay addressway isway alsoway ademay."

#: target:compiler/disassem.lisp
msgid ""
"If NIL-BYTE-OFFSET is the offset of static function, store a note\n"
"  describing which one, to be printed as an end-of-line comment after\n"
"  the current instruction is disassembled.  Returns non-NIL iff a note\n"
"  was recorded."
msgstr ""
"Ifway ILNAY-YTEBAY-OFFSETWAY isway ethay offsetway ofway taticsay "
"unctionfay, toresay away otenay\n"
"  escribingday ichwhay oneway, otay ebay intedpray asway anway endway-ofway-"
"inelay ommentcay afterway\n"
"  ethay urrentcay instructionway isway isassembledday.  Eturnsray onnay-"
"ILNAY iffway away otenay\n"
"  asway ecordedray."

#: target:compiler/disassem.lisp
msgid ""
"If there's a valid mapping from OFFSET in the storage class SC-NAME to a\n"
"  source variable, make a note of the source-variable name, to be printed "
"as\n"
"  an end-of-line comment after the current instruction is disassembled.\n"
"  Returns non-NIL iff a note was recorded."
msgstr ""
"Ifway erethay's away alidvay appingmay omfray OFFSETWAY inway ethay "
"toragesay assclay SCAY-AMENAY otay away\n"
"  ourcesay ariablevay, akemay away otenay ofway ethay ourcesay-ariablevay "
"amenay, otay ebay intedpray asway\n"
"  anway endway-ofway-inelay ommentcay afterway ethay urrentcay "
"instructionway isway isassembledday.\n"
"  Eturnsray onnay-ILNAY iffway away otenay asway ecordedray."

#: target:compiler/disassem.lisp
msgid ""
"If there's a valid mapping from OFFSET in the storage-base called SB-NAME\n"
"  to a source variable, make a note equating ASSOC-WITH with the\n"
"  source-variable name, to be printed as an end-of-line comment after the\n"
"  current instruction is disassembled.  Returns non-NIL iff a note was\n"
"  recorded."
msgstr ""
"Ifway erethay's away alidvay appingmay omfray OFFSETWAY inway ethay "
"toragesay-asebay alledcay BSAY-AMENAY\n"
"  otay away ourcesay ariablevay, akemay away otenay equatingway ASSOCWAY-"
"ITHWAY ithway ethay\n"
"  ourcesay-ariablevay amenay, otay ebay intedpray asway anway endway-ofway-"
"inelay ommentcay afterway ethay\n"
"  urrentcay instructionway isway isassembledday.  Eturnsray onnay-ILNAY "
"iffway away otenay asway\n"
"  ecordedray."

#: target:compiler/disassem.lisp
msgid ""
"When called from an error break instruction's :DISASSEM-CONTROL (or\n"
"  :DISASSEM-PRINTER) function, will correctly deal with printing the\n"
"  arguments to the break.\n"
"\n"
"  ERROR-PARSE-FUN should be a function that accepts:\n"
"    1) a SYSTEM-AREA-POINTER\n"
"    2) a BYTE-OFFSET from the SAP to begin at\n"
"    3) optionally, LENGTH-ONLY, which if non-NIL, means to only return\n"
"       the byte length of the arguments (to avoid unnecessary consing)\n"
"  It should read information from the SAP starting at BYTE-OFFSET, and "
"return\n"
"  four values:\n"
"    1) the error number\n"
"    2) the total length, in bytes, of the information\n"
"    3) a list of SC-OFFSETs of the locations of the error parameters\n"
"    4) a list of the length (as read from the SAP), in bytes, of each of "
"the\n"
"       return-values."
msgstr ""
"Enwhay alledcay omfray anway errorway eakbray instructionway's :ISASSEMDAY-"
"ONTROLCAY (orway\n"
"  :ISASSEMDAY-INTERPRAY) unctionfay, illway orrectlycay ealday ithway "
"intingpray ethay\n"
"  argumentsway otay ethay eakbray.\n"
"\n"
"  ERRORWAY-ARSEPAY-UNFAY ouldshay ebay away unctionfay atthay acceptsway:\n"
"    1) away YSTEMSAY-AREAWAY-OINTERPAY\n"
"    2) away YTEBAY-OFFSETWAY omfray ethay APSAY otay eginbay atway\n"
"    3) optionallyway, ENGTHLAY-ONLYWAY, ichwhay ifway onnay-ILNAY, eansmay "
"otay onlyway eturnray\n"
"       ethay ytebay engthlay ofway ethay argumentsway (otay avoidway "
"unnecessaryway onsingcay)\n"
"  Itway ouldshay eadray informationway omfray ethay APSAY tartingsay atway "
"YTEBAY-OFFSETWAY, andway eturnray\n"
"  ourfay aluesvay:\n"
"    1) ethay errorway umbernay\n"
"    2) ethay otaltay engthlay, inway ytesbay, ofway ethay informationway\n"
"    3) away istlay ofway SCAY-Offsetsway ofway ethay ocationslay ofway ethay "
"errorway arameterspay\n"
"    4) away istlay ofway ethay engthlay (asway eadray omfray ethay APSAY), "
"inway ytesbay, ofway eachway ofway ethay\n"
"       eturnray-aluesvay."

#: target:compiler/new-assem.lisp
msgid "Set up the assembler."
msgstr "Etsay upway ethay assemblerway."

#: target:compiler/new-assem.lisp
msgid ""
"Execute BODY (as a progn) without scheduling any of the instructions\n"
"   generated inside it.  DO NOT throw or return-from out of it."
msgstr ""
"Executeway ODYBAY (asway away ognpray) ithoutway edulingschay anyway ofway "
"ethay instructionsway\n"
"   eneratedgay insideway itway.  ODAY OTNAY rowthay orway eturnray-omfray "
"outway ofway itway."

#: target:compiler/new-assem.lisp
msgid "~&~S reads ~S[~D for ~D]~%"
msgstr "~&~S eadsray ~S[~D orfay ~D]~%"

#: target:compiler/new-assem.lisp
msgid "~&~S writes ~S[~D for ~D]~%"
msgstr "~&~S iteswray ~S[~D orfay ~D]~%"

#: target:compiler/new-assem.lisp
msgid "~&Queuing ~S~%"
msgstr "~&Euingquay ~S~%"

#: target:compiler/new-assem.lisp
msgid "  reads ~S~%  writes ~S~%"
msgstr "  eadsray ~S~%  iteswray ~S~%"

#: target:compiler/new-assem.lisp
msgid "~&Scheduling pending instructions...~%"
msgstr "~&Edulingschay endingpay instructionsway...~%"

#: target:compiler/new-assem.lisp
msgid "Flushing ~S~%"
msgstr "Ushingflay ~S~%"

#: target:compiler/new-assem.lisp
msgid "Queued branches: ~S~%"
msgstr "Euedquay anchesbray: ~S~%"

#: target:compiler/new-assem.lisp
msgid "Initially emittable: ~S~%"
msgstr "Initiallyway emittableway: ~S~%"

#: target:compiler/new-assem.lisp
msgid "Initially delayed: ~S~%"
msgstr "Initiallyway elayedday: ~S~%"

#: target:compiler/new-assem.lisp
msgid "Filling branch delay slot with ~S~%"
msgstr "Illingfay anchbray elayday otslay ithway ~S~%"

#: target:compiler/new-assem.lisp
msgid "Emitting ~S~%"
msgstr "Emittingway ~S~%"

#: target:compiler/new-assem.lisp
msgid "Emitting a NOP.~%"
msgstr "Emittingway away OPNAY.~%"

#: target:compiler/new-assem.lisp
msgid "Now emittable: ~S~%"
msgstr "Ownay emittableway: ~S~%"

#: target:compiler/new-assem.lisp
msgid "Emit BYTE to SEGMENT."
msgstr "Emitway YTEBAY otay EGMENTSAY."

#: target:compiler/new-assem.lisp
msgid "Output AMOUNT zeros (in bytes) to SEGMENT."
msgstr "Outputway AMOUNTWAY eroszay (inway ytesbay) otay EGMENTSAY."

#: target:compiler/new-assem.lisp
msgid "Attempt to emit ~S for the second time."
msgstr "Attemptway otay emitway ~S orfay ethay econdsay imetay."

#: target:compiler/new-assem.lisp
msgid ""
"Note that the instruction stream has to be back-patched when label "
"positions\n"
"   are finally known.  SIZE bytes are reserved in SEGMENT, and function "
"will\n"
"   be called with two arguments: the segment and the position.  The "
"function\n"
"   should look at the position and the position of any labels it wants to\n"
"   and emit the correct sequence.  (And it better be the same size as "
"SIZE).\n"
"   SIZE can be zero, which is useful if you just want to find out where "
"things\n"
"   ended up."
msgstr ""
"Otenay atthay ethay instructionway eamstray ashay otay ebay ackbay-atchedpay "
"enwhay abellay ositionspay\n"
"   areway inallyfay nownkay.  IZESAY ytesbay areway eservedray inway "
"EGMENTSAY, andway unctionfay illway\n"
"   ebay alledcay ithway wotay argumentsway: ethay egmentsay andway ethay "
"ositionpay.  Ethay unctionfay\n"
"   ouldshay ooklay atway ethay ositionpay andway ethay ositionpay ofway "
"anyway abelslay itway antsway otay\n"
"   andway emitway ethay orrectcay equencesay.  (Andway itway etterbay ebay "
"ethay amesay izesay asway IZESAY).\n"
"   IZESAY ancay ebay erozay, ichwhay isway usefulway ifway ouyay ustjay "
"antway otay indfay outway erewhay ingsthay\n"
"   endedway upway."

#: target:compiler/new-assem.lisp
msgid ""
"Note that the instruction stream here depends on the actual positions of\n"
"   various labels, so can't be output until label positions are known.  "
"Space\n"
"   is made in SEGMENT for at least SIZE bytes.  When all output has been\n"
"   generated, the MAYBE-SHRINK functions for all choosers are called with\n"
"   three arguments: the segment, the position, and a magic value.  The "
"MAYBE-\n"
"   SHRINK decides if it can use a shorter sequence, and if so, emits that\n"
"   sequence to the segment and returns T.  If it can't do better than the\n"
"   worst case, it should return NIL (without emitting anything).  When "
"calling\n"
"   LABEL-POSITION, it should pass it the position and the magic-value it "
"was\n"
"   passed so that LABEL-POSITION can return the correct result.  If the "
"chooser\n"
"   never decides to use a shorter sequence, the WORST-CASE-FUN will be "
"called,\n"
"   just like a BACK-PATCH.  (See EMIT-BACK-PATCH.)"
msgstr ""
"Otenay atthay ethay instructionway eamstray erehay ependsday onway ethay "
"actualway ositionspay ofway\n"
"   ariousvay abelslay, osay ancay't ebay outputway untilway abellay "
"ositionspay areway nownkay.  Acespay\n"
"   isway ademay inway EGMENTSAY orfay atway eastlay IZESAY ytesbay.  Enwhay "
"allway outputway ashay eenbay\n"
"   eneratedgay, ethay AYBEMAY-RINKSHAY unctionsfay orfay allway ooserschay "
"areway alledcay ithway\n"
"   reethay argumentsway: ethay egmentsay, ethay ositionpay, andway away "
"agicmay aluevay.  Ethay AYBEMAY-\n"
"   RINKSHAY ecidesday ifway itway ancay useway away ortershay equencesay, "
"andway ifway osay, emitsway atthay\n"
"   equencesay otay ethay egmentsay andway eturnsray T.  Ifway itway ancay't "
"oday etterbay anthay ethay\n"
"   orstway asecay, itway ouldshay eturnray ILNAY (ithoutway emittingway "
"anythingway).  Enwhay allingcay\n"
"   ABELLAY-OSITIONPAY, itway ouldshay asspay itway ethay ositionpay andway "
"ethay agicmay-aluevay itway asway\n"
"   assedpay osay atthay ABELLAY-OSITIONPAY ancay eturnray ethay orrectcay "
"esultray.  Ifway ethay ooserchay\n"
"   evernay ecidesday otay useway away ortershay equencesay, ethay ORSTWAY-"
"ASECAY-UNFAY illway ebay alledcay,\n"
"   ustjay ikelay away ACKBAY-ATCHPAY.  (Eesay EMITWAY-ACKBAY-ATCHPAY.)"

#: target:compiler/new-assem.lisp
msgid "~S emitted ~D bytes, but claimed it's max was ~D"
msgstr "~S emittedway ~D ytesbay, utbay aimedclay itway's axmay asway ~D"

#: target:compiler/new-assem.lisp
msgid ""
"~S shrunk by ~D bytes, but claimed that it ~\n"
"\t\t\t    preserve ~D bits of alignment."
msgstr ""
"~S runkshay ybay ~D ytesbay, utbay aimedclay atthay itway ~\n"
"\t\t\t    eservepray ~D itsbay ofway alignmentway."

#: target:compiler/new-assem.lisp
msgid "Chooser ~S passed, but not before emitting ~D bytes."
msgstr "Ooserchay ~S assedpay, utbay otnay eforebay emittingway ~D ytesbay."

#: target:compiler/new-assem.lisp
msgid ""
"Alignment ~S needs more space now?  It was ~D, ~\n"
"\t\t\t    and is ~D now."
msgstr ""
"Alignmentway ~S eedsnay oremay acespay ownay?  Itway asway ~D, ~\n"
"\t\t\t    andway isway ~D ownay."

#: target:compiler/new-assem.lisp
msgid "~S emitted ~D bytes, but claimed it's was ~D"
msgstr "~S emittedway ~D ytesbay, utbay aimedclay itway's asway ~D"

#: target:compiler/new-assem.lisp
msgid "Execute BODY (as a progn) with SEGMENT as the current segment."
msgstr ""
"Executeway ODYBAY (asway away ognpray) ithway EGMENTSAY asway ethay "
"urrentcay egmentsay."

#: target:compiler/new-assem.lisp
msgid "Duplicate nested labels: ~S"
msgstr "Uplicateday estednay abelslay: ~S"

#: target:compiler/new-assem.lisp
msgid "Emit the specified instruction to the current segment."
msgstr ""
"Emitway ethay ecifiedspay instructionway otay ethay urrentcay egmentsay."

#: target:compiler/new-assem.lisp
msgid "Unknown instruction: ~S"
msgstr "Unknownway instructionway: ~S"

#: target:compiler/new-assem.lisp
msgid "Emit LABEL at this location in the current segment."
msgstr ""
"Emitway ABELLAY atway isthay ocationlay inway ethay urrentcay egmentsay."

#: target:compiler/new-assem.lisp
msgid "Emit an alignment restriction to the current segment."
msgstr ""
"Emitway anway alignmentway estrictionray otay ethay urrentcay egmentsay."

#: target:compiler/new-assem.lisp
msgid ""
"Return the current position for LABEL.  Chooser maybe-shrink functions\n"
"   should supply IF-AFTER and DELTA to assure correct results."
msgstr ""
"Eturnray ethay urrentcay ositionpay orfay ABELLAY.  Ooserchay aybemay-"
"rinkshay unctionsfay\n"
"   ouldshay upplysay IFWAY-AFTERWAY andway ELTADAY otay assureway orrectcay "
"esultsray."

#: target:compiler/new-assem.lisp
msgid ""
"Append OTHER-SEGMENT to the end of SEGMENT.  Don't use OTHER-SEGMENT\n"
"   for anything after this."
msgstr ""
"Appendway OTHERWAY-EGMENTSAY otay ethay endway ofway EGMENTSAY.  Onday't "
"useway OTHERWAY-EGMENTSAY\n"
"   orfay anythingway afterway isthay."

#: target:compiler/new-assem.lisp
msgid ""
"Does any final processing of SEGMENT and returns the total number of bytes\n"
"   covered by this segment."
msgstr ""
"Oesday anyway inalfay ocessingpray ofway EGMENTSAY andway eturnsray ethay "
"otaltay umbernay ofway ytesbay\n"
"   overedcay ybay isthay egmentsay."

#: target:compiler/new-assem.lisp
msgid ""
"Call FUNCTION on all the output accumulated in SEGMENT.  FUNCTION is called\n"
"   zero or more times with two arguments: a SAP and a number of bytes."
msgstr ""
"Allcay UNCTIONFAY onway allway ethay outputway accumulatedway inway "
"EGMENTSAY.  UNCTIONFAY isway alledcay\n"
"   erozay orway oremay imestay ithway wotay argumentsway: away APSAY andway "
"away umbernay ofway ytesbay."

#: target:compiler/new-assem.lisp
msgid "Releases any output buffers held on to by segment."
msgstr ""
"Eleasesray anyway outputway uffersbay eldhay onway otay ybay egmentsay."

#: target:compiler/new-assem.lisp
msgid "~D isn't an even multiple of ~D"
msgstr "~D isnway't anway evenway ultiplemay ofway ~D"

#: target:compiler/new-assem.lisp
msgid ""
"Byte spec ~S either overlaps another byte spec, or ~\n"
"\t\t    extends past the end."
msgstr ""
"Ytebay ecspay ~S eitherway overlapsway anotherway ytebay ecspay, orway ~\n"
"\t\t    extendsway astpay ethay endway."

#: target:compiler/new-assem.lisp
msgid "There are holes."
msgstr "Erethay areway oleshay."

#: target:compiler/new-assem.lisp
msgid "Can only specify one emitter per instruction."
msgstr "Ancay onlyway ecifyspay oneway emitterway erpay instructionway."

#: target:compiler/new-assem.lisp
msgid "Can only specify delay once per instruction."
msgstr "Ancay onlyway ecifyspay elayday onceway erpay instructionway."

#: target:compiler/new-assem.lisp
msgid "Can only specify :vop-var once."
msgstr "Ancay onlyway ecifyspay :opvay-arvay onceway."

#: target:compiler/new-assem.lisp
msgid "You can't use INST without an ASSEMBLE inside emitters."
msgstr ""
"Ouyay ancay't useway INSTWAY ithoutway anway ASSEMBLEWAY insideway "
"emittersway."

#: target:compiler/alloc.lisp
msgid ""
"defallocators {((name lambda-list [real-lambda-list]) thread-slot\n"
"                   (deinit-form*)\n"
"\t\t   (reinit-form*))}*"
msgstr ""
"efallocatorsday {((amenay ambdalay-istlay [ealray-ambdalay-istlay]) readthay-"
"otslay\n"
"                   (einitday-ormfay*)\n"
"\t\t   (einitray-ormfay*))}*"

#: target:compiler/alloc.lisp
msgid "~S already deallocated!"
msgstr "~S alreadyway eallocatedday!"

#: target:compiler/knownfun.lisp
msgid "optimize"
msgstr "optimizeway"

#: target:compiler/knownfun.lisp
msgid "~S is not a known function."
msgstr "~S isway otnay away nownkay unctionfay."

#: target:compiler/main.lisp
msgid "The default value for the :Block-Compile argument to COMPILE-FILE."
msgstr ""
"Ethay efaultday aluevay orfay ethay :Ockblay-Ompilecay argumentway otay "
"OMPILECAY-ILEFAY."

#: target:compiler/main.lisp
msgid "The default value for the :Byte-Compile argument to COMPILE-FILE."
msgstr ""
"Ethay efaultday aluevay orfay ethay :Ytebay-Ompilecay argumentway otay "
"OMPILECAY-ILEFAY."

#: target:compiler/main.lisp
msgid ""
"Similar to *BYTE-COMPILE-DEFAULT*, but controls the compilation of top-"
"level\n"
"   forms (evaluated at load-time) when the :BYTE-COMPILE argument is :MAYBE\n"
"   (the default.)  When true, we decide to byte-compile."
msgstr ""
"Imilarsay otay *YTEBAY-OMPILECAY-EFAULTDAY*, utbay ontrolscay ethay "
"ompilationcay ofway optay-evellay\n"
"   ormsfay (evaluatedway atway oadlay-imetay) enwhay ethay :YTEBAY-OMPILECAY "
"argumentway isway :AYBEMAY\n"
"   (ethay efaultday.)  Enwhay uetray, eway ecideday otay ytebay-ompilecay."

#: target:compiler/main.lisp
msgid "Whether loop analysis should be done or not."
msgstr "Etherwhay ooplay analysisway ouldshay ebay oneday orway otnay."

#: target:compiler/main.lisp
msgid "Whether the compiler should record cross-reference information."
msgstr ""
"Etherwhay ethay ompilercay ouldshay ecordray osscray-eferenceray "
"informationway."

#: target:compiler/main.lisp
msgid "The default for the :VERBOSE argument to COMPILE-FILE."
msgstr ""
"Ethay efaultday orfay ethay :ERBOSEVAY argumentway otay OMPILECAY-ILEFAY."

#: target:compiler/main.lisp
msgid "The default for the :PRINT argument to COMPILE-FILE."
msgstr ""
"Ethay efaultday orfay ethay :INTPRAY argumentway otay OMPILECAY-ILEFAY."

#: target:compiler/main.lisp
msgid "The default for the :PROGRESS argument to COMPILE-FILE."
msgstr ""
"Ethay efaultday orfay ethay :OGRESSPRAY argumentway otay OMPILECAY-ILEFAY."

#: target:compiler/main.lisp
msgid ""
"The defaulted pathname of the file currently being compiled, or NIL if not\n"
"  compiling."
msgstr ""
"Ethay efaultedday athnamepay ofway ethay ilefay urrentlycay eingbay "
"ompiledcay, orway ILNAY ifway otnay\n"
"  ompilingcay."

#: target:compiler/main.lisp
msgid ""
"The TRUENAME of the file currently being compiled, or NIL if not\n"
"  compiling."
msgstr ""
"Ethay UENAMETRAY ofway ethay ilefay urrentlycay eingbay ompiledcay, orway "
"ILNAY ifway otnay\n"
"  ompilingcay."

#: target:compiler/main.lisp
msgid ""
"The user supplied source-info for the current compilation.  \n"
"This is the :source-info argument to COMPILE-FROM-STREAM and will be\n"
"stored in the INFO slot of the DEBUG-SOURCE in code components and \n"
"in the user USER-INFO slot of STREAM-SOURCE-LOCATIONs."
msgstr ""
"Ethay userway uppliedsay ourcesay-infoway orfay ethay urrentcay "
"ompilationcay.  \n"
"Isthay isway ethay :ourcesay-infoway argumentway otay OMPILECAY-OMFRAY-"
"EAMSTRAY andway illway ebay\n"
"toredsay inway ethay INFOWAY otslay ofway ethay EBUGDAY-OURCESAY inway "
"odecay omponentscay andway \n"
"inway ethay userway USERWAY-INFOWAY otslay ofway EAMSTRAY-OURCESAY-"
"Ocationslay."

#: target:compiler/main.lisp
msgid ""
"The upper limit on the number of times that we will consecutively do IR1\n"
"  optimization that doesn't introduce any new code.  A finite limit is\n"
"  necessary, since type inference may take arbitrarily long to converge."
msgstr ""
"Ethay upperway imitlay onway ethay umbernay ofway imestay atthay eway illway "
"onsecutivelycay oday IRWAY1\n"
"  optimizationway atthay oesnday't introduceway anyway ewnay odecay.  Away "
"initefay imitlay isway\n"
"  ecessarynay, incesay ypetay inferenceway aymay aketay arbitrarilyway "
"onglay otay onvergecay."

#: target:compiler/main.lisp
msgid "*REOPTIMIZE-AFTER-TYPE-CHECK-MAX* exceeded."
msgstr "*EOPTIMIZERAY-AFTERWAY-YPETAY-ECKCHAY-AXMAY* exceededway."

#: target:compiler/main.lisp
msgid "~|~%Disassembly of code for ~S~2%"
msgstr "~|~%Isassemblyday ofway odecay orfay ~S~2%"

#: target:compiler/main.lisp
msgid "~:[~;Byte ~]Compiling ~A: "
msgstr "~:[~;Ytebay ~]Ompilingcay ~Away: "

#: target:compiler/main.lisp
msgid "Undefined ~(~A~) ~S~@[ ~A~]"
msgstr "Undefinedway ~(~Away~) ~S~@[ ~Away~]"

#: target:compiler/main.lisp
msgid "~D more use~:P of undefined ~(~A~) ~S."
msgstr "~D oremay useway~:P ofway undefinedway ~(~Away~) ~S."

#: target:compiler/main.lisp
msgid ""
"~:[This ~(~A~) is~;These ~(~A~)s are~] undefined:~\n"
"\t\t~%  ~{~<~%  ~1:;~S~>~^ ~}"
msgstr ""
"~:[Isthay ~(~Away~) isway~;Esethay ~(~Away~)s areway~] undefinedway:~\n"
"\t\t~%  ~{~<~%  ~1:;~S~>~^ ~}"

#: target:compiler/main.lisp
msgid ""
"~2&; Compilation unit ~:[finished~;aborted~].~\n"
"      ~[~:;~:*~&;   ~D fatal error~:P~]~\n"
"      ~[~:;~:*~&;   ~D error~:P~]~\n"
"      ~[~:;~:*~&;   ~D warning~:P~]~\n"
"      ~[~:;~:*~&;   ~D note~:P~]~2%"
msgstr ""
"~2&; Ompilationcay unitway ~:[inishedfay~;abortedway~].~\n"
"      ~[~:;~:*~&;   ~D atalfay errorway~:P~]~\n"
"      ~[~:;~:*~&;   ~D errorway~:P~]~\n"
"      ~[~:;~:*~&;   ~D arningway~:P~]~\n"
"      ~[~:;~:*~&;   ~D otenay~:P~]~2%"

#: target:compiler/main.lisp
msgid "~|~%;;;; Component: ~S~2%"
msgstr "~|~%;;;; Omponentcay: ~S~2%"

#: target:compiler/main.lisp
msgid "~%~|~%;;;; IR2 component: ~S~2%"
msgstr "~%~|~%;;;; IRWAY2 omponentcay: ~S~2%"

#: target:compiler/main.lisp
msgid "Entries:~%"
msgstr "Entriesway:~%"

#: target:compiler/main.lisp
msgid "~4TL~D: ~S~:[~; [Closure]~]~%"
msgstr "~4LTAY~D: ~S~:[~; [Osureclay]~]~%"

#: target:compiler/main.lisp
msgid "Read error at ~D:~% \"~A/\\~A\"~%~A"
msgstr "Eadray errorway atway ~D:~% \"~Away/\\~Away\"~%~Away"

#: target:compiler/main.lisp
msgid "Unable to recover from read error."
msgstr "Unableway otay ecoverray omfray eadray errorway."

#: target:compiler/main.lisp
msgid "Read error in form starting at ~D:~%~@[ \"~A\"~%~]~A"
msgstr ""
"Eadray errorway inway ormfay tartingsay atway ~D:~%~@[ \"~Away\"~%~]~Away"

#: target:compiler/main.lisp
msgid "Skip this form."
msgstr "Kipsay isthay ormfay."

#: target:compiler/main.lisp
msgid "Attempt to load a file having a compile-time read error."
msgstr ""
"Attemptway otay oadlay away ilefay avinghay away ompilecay-imetay eadray "
"errorway."

#: target:compiler/ir1tran.lisp target:compiler/main.lisp
msgid "(during macroexpansion)~%~A"
msgstr "(uringday acroexpansionmay)~%~Away"

#: target:compiler/main.lisp
msgid "Bad FILE-COMMENT form: ~S."
msgstr "Adbay ILEFAY-OMMENTCAY ormfay: ~S."

#: target:compiler/main.lisp
msgid "Ignoring extra file comment:~%  ~S."
msgstr "Ignoringway extraway ilefay ommentcay:~%  ~S."

#: target:compiler/main.lisp
msgid "~&; Comment: ~A~2&"
msgstr "~&; Ommentcay: ~Away~2&"

#: target:compiler/ir1tran.lisp target:compiler/main.lisp
msgid "Execution of a form compiled with errors:~% ~S"
msgstr "Executionway ofway away ormfay ompiledcay ithway errorsway:~% ~S"

#: target:compiler/main.lisp
msgid "EVAL-WHEN form is too short: ~S."
msgstr "EVALWAY-ENWHAY ormfay isway ootay ortshay: ~S."

#: target:compiler/main.lisp
msgid "MACROLET form is too short: ~S."
msgstr "ACROLETMAY ormfay isway ootay ortshay: ~S."

#: target:compiler/main.lisp
msgid "Load Time Value of ~S"
msgstr "Oadlay Imetay Aluevay ofway ~S"

#: target:compiler/main.lisp
msgid "(while making load form for ~S)~%~A"
msgstr "(ilewhay akingmay oadlay ormfay orfay ~S)~%~Away"

#: target:compiler/main.lisp
msgid "Creation Form for ~A"
msgstr "Eationcray Ormfay orfay ~Away"

#: target:compiler/main.lisp
msgid "Circular references in creation form for ~S"
msgstr "Ircularcay eferencesray inway eationcray ormfay orfay ~S"

#: target:compiler/main.lisp
msgid "Init Form~:[~;s~] for ~{~A~^, ~}"
msgstr "Initway Ormfay~:[~;s~] orfay ~{~Away~^, ~}"

#: target:compiler/main.lisp
msgid "~2&Fatal error, aborting compilation...~%"
msgstr "~2&Atalfay errorway, abortingway ompilationcay...~%"

#: target:compiler/main.lisp
msgid "Can't compile with no source files."
msgstr "Ancay't ompilecay ithway onay ourcesay ilesfay."

#: target:compiler/main.lisp
msgid ""
"Similar to COMPILE-FILE, but compiles text from Stream into the current "
"lisp\n"
"  environment.  Stream is closed when compilation is complete.  These "
"keywords\n"
"  are supported:\n"
"\n"
"  :Error-Stream\n"
"      The stream to write compiler error output to (default *ERROR-"
"OUTPUT*.)\n"
"  :Trace-Stream\n"
"      The stream that we write compiler trace output to, or NIL (the "
"default)\n"
"      to inhibit trace output.\n"
"  :Block-Compile {T, NIL, :SPECIFIED}\n"
"        If true, then function names may be resolved at compile time.\n"
"  :Source-Info\n"
"        Some object to be placed in the DEBUG-SOURCE-INFO.\n"
"  :Byte-Compile {T, NIL, :MAYBE}\n"
"        If true, then may compile to interpreted byte code."
msgstr ""
"Imilarsay otay OMPILECAY-ILEFAY, utbay ompilescay exttay omfray Eamstray "
"intoway ethay urrentcay isplay\n"
"  environmentway.  Eamstray isway osedclay enwhay ompilationcay isway "
"ompletecay.  Esethay eywordskay\n"
"  areway upportedsay:\n"
"\n"
"  :Errorway-Eamstray\n"
"      Ethay eamstray otay itewray ompilercay errorway outputway otay "
"(efaultday *ERRORWAY-OUTPUTWAY*.)\n"
"  :Acetray-Eamstray\n"
"      Ethay eamstray atthay eway itewray ompilercay acetray outputway otay, "
"orway ILNAY (ethay efaultday)\n"
"      otay inhibitway acetray outputway.\n"
"  :Ockblay-Ompilecay {T, ILNAY, :ECIFIEDSPAY}\n"
"        Ifway uetray, enthay unctionfay amesnay aymay ebay esolvedray atway "
"ompilecay imetay.\n"
"  :Ourcesay-Infoway\n"
"        Omesay objectway otay ebay acedplay inway ethay EBUGDAY-OURCESAY-"
"INFOWAY.\n"
"  :Ytebay-Ompilecay {T, ILNAY, :AYBEMAY}\n"
"        Ifway uetray, enthay aymay ompilecay otay interpretedway ytebay "
"odecay."

#: target:compiler/main.lisp
msgid "~2&; Python version ~A, VM version ~A on ~A.~%"
msgstr "~2&; Ythonpay ersionvay ~Away, MVAY ersionvay ~Away onway ~Away.~%"

#: target:compiler/main.lisp
msgid "; Compiling: ~A ~A~%"
msgstr "; Ompilingcay: ~Away ~Away~%"

#: target:compiler/main.lisp
msgid "~&; Compilation ~:[aborted after~;finished in~] ~A.~&"
msgstr "~&; Ompilationcay ~:[abortedway afterway~;inishedfay inway~] ~Away.~&"

#: target:compiler/main.lisp
msgid ""
"Compiles Source, producing a corresponding .FASL file.  Source may be a "
"list\n"
"   of files, in which case the files are compiled as a unit, producing a "
"single\n"
"   .FASL file.  The output file names are defaulted from the first (or "
"only)\n"
"   input file name.  Other options available via keywords:\n"
"   :Output-File\n"
"      The name of the fasl to output, NIL for none, T for the default.\n"
"   :Error-File\n"
"      The name of the error listing file, NIL for none (the default), T for\n"
"      .err.\n"
"   :Trace-File\n"
"      If specified, internal data structures are dumped to this file.  T "
"for\n"
"      the .trace default.\n"
"   :Error-Output\n"
"      If a stream, then error output is sent there as well as to the "
"listing\n"
"      file.  NIL suppresses this additional error output.  The default is "
"T,\n"
"      which means use *ERROR-OUTPUT*.\n"
"   :Block-Compile {NIL | :SPECIFIED | T}\n"
"      Determines whether multiple functions are compiled together as a "
"unit,\n"
"      resolving function references at compile time.  NIL means that global\n"
"      function names are never resolved at compilation time.  :SPECIFIED "
"means\n"
"      that names are resolved at compile-time when convenient (as in a\n"
"      self-recursive call), but the compiler doesn't combine top-level "
"DEFUNs.\n"
"      With :SPECIFIED, an explicit START-BLOCK declaration will enable "
"block\n"
"      compilation.  A value of T indicates that all forms in the file(s) "
"should\n"
"      be compiled as a unit.  The default is the value of\n"
"      EXT:*BLOCK-COMPILE-DEFAULT*, which is initially :SPECIFIED.\n"
"   :Entry-Points\n"
"      This specifies a list of function names for functions in the file(s) "
"that\n"
"      must be given global definitions.  This only applies to block\n"
"      compilation, and is useful mainly when :BLOCK-COMPILE T is specified "
"on a\n"
"      file that lacks START-BLOCK declarations.  If the value is NIL (the\n"
"      default) then all functions will be globally defined.\n"
"   :Byte-Compile {T | NIL | :MAYBE}\n"
"      Determines whether to compile into interpreted byte code instead of\n"
"      machine instructions.  Byte code is several times smaller, but much\n"
"      slower.  If :MAYBE, then only byte-compile when SPEED is 0 and\n"
"      DEBUG <= 1.  The default is the value of EXT:*BYTE-COMPILE-DEFAULT*,\n"
"      which is initially :MAYBE.\n"
"   :Xref\n"
"      If non-NIL, enable recording of cross-reference information.  The "
"default\n"
"      is the value of C:*RECORD-XREF-INFO*\n"
"   :External-Format\n"
"      The external format to use when opening the source file"
msgstr ""
"Ompilescay Ourcesay, oducingpray away orrespondingcay .ASLFAY ilefay.  "
"Ourcesay aymay ebay away istlay\n"
"   ofway ilesfay, inway ichwhay asecay ethay ilesfay areway ompiledcay asway "
"away unitway, oducingpray away inglesay\n"
"   .ASLFAY ilefay.  Ethay outputway ilefay amesnay areway efaultedday omfray "
"ethay irstfay (orway onlyway)\n"
"   inputway ilefay amenay.  Otherway optionsway availableway iavay "
"eywordskay:\n"
"   :Outputway-Ilefay\n"
"      Ethay amenay ofway ethay aslfay otay outputway, ILNAY orfay onenay, T "
"orfay ethay efaultday.\n"
"   :Errorway-Ilefay\n"
"      Ethay amenay ofway ethay errorway istinglay ilefay, ILNAY orfay onenay "
"(ethay efaultday), T orfay\n"
"      .errway.\n"
"   :Acetray-Ilefay\n"
"      Ifway ecifiedspay, internalway ataday ucturesstray areway umpedday "
"otay isthay ilefay.  T orfay\n"
"      ethay .acetray efaultday.\n"
"   :Errorway-Outputway\n"
"      Ifway away eamstray, enthay errorway outputway isway entsay erethay "
"asway ellway asway otay ethay istinglay\n"
"      ilefay.  ILNAY uppressessay isthay additionalway errorway outputway.  "
"Ethay efaultday isway T,\n"
"      ichwhay eansmay useway *ERRORWAY-OUTPUTWAY*.\n"
"   :Ockblay-Ompilecay {ILNAY | :ECIFIEDSPAY | T}\n"
"      Eterminesday etherwhay ultiplemay unctionsfay areway ompiledcay "
"ogethertay asway away unitway,\n"
"      esolvingray unctionfay eferencesray atway ompilecay imetay.  ILNAY "
"eansmay atthay obalglay\n"
"      unctionfay amesnay areway evernay esolvedray atway ompilationcay "
"imetay.  :ECIFIEDSPAY eansmay\n"
"      atthay amesnay areway esolvedray atway ompilecay-imetay enwhay "
"onvenientcay (asway inway away\n"
"      elfsay-ecursiveray allcay), utbay ethay ompilercay oesnday't ombinecay "
"optay-evellay Efunsday.\n"
"      Ithway :ECIFIEDSPAY, anway explicitway TARTSAY-OCKBLAY eclarationday "
"illway enableway ockblay\n"
"      ompilationcay.  Away aluevay ofway T indicatesway atthay allway "
"ormsfay inway ethay ilefay(s) ouldshay\n"
"      ebay ompiledcay asway away unitway.  Ethay efaultday isway ethay "
"aluevay ofway\n"
"      EXTWAY:*OCKBLAY-OMPILECAY-EFAULTDAY*, ichwhay isway initiallyway :"
"ECIFIEDSPAY.\n"
"   :Entryway-Ointspay\n"
"      Isthay ecifiesspay away istlay ofway unctionfay amesnay orfay "
"unctionsfay inway ethay ilefay(s) atthay\n"
"      ustmay ebay ivengay obalglay efinitionsday.  Isthay onlyway appliesway "
"otay ockblay\n"
"      ompilationcay, andway isway usefulway ainlymay enwhay :OCKBLAY-"
"OMPILECAY T isway ecifiedspay onway away\n"
"      ilefay atthay ackslay TARTSAY-OCKBLAY eclarationsday.  Ifway ethay "
"aluevay isway ILNAY (ethay\n"
"      efaultday) enthay allway unctionsfay illway ebay oballyglay "
"efinedday.\n"
"   :Ytebay-Ompilecay {T | ILNAY | :AYBEMAY}\n"
"      Eterminesday etherwhay otay ompilecay intoway interpretedway ytebay "
"odecay insteadway ofway\n"
"      achinemay instructionsway.  Ytebay odecay isway everalsay imestay "
"mallersay, utbay uchmay\n"
"      owerslay.  Ifway :AYBEMAY, enthay onlyway ytebay-ompilecay enwhay "
"EEDSPAY isway 0 andway\n"
"      EBUGDAY <= 1.  Ethay efaultday isway ethay aluevay ofway EXTWAY:"
"*YTEBAY-OMPILECAY-EFAULTDAY*,\n"
"      ichwhay isway initiallyway :AYBEMAY.\n"
"   :Refxay\n"
"      Ifway onnay-ILNAY, enableway ecordingray ofway osscray-eferenceray "
"informationway.  Ethay efaultday\n"
"      isway ethay aluevay ofway C:*ECORDRAY-REFXAY-INFOWAY*\n"
"   :Externalway-Ormatfay\n"
"      Ethay externalway ormatfay otay useway enwhay openingway ethay "
"ourcesay ilefay"

#: target:compiler/main.lisp
msgid "~2&; ~A written.~%"
msgstr "~2&; ~Away ittenwray.~%"

#: target:compiler/main.lisp
msgid "Can't :LOAD with no output file."
msgstr "Ancay't :OADLAY ithway onay outputway ilefay."

#: target:compiler/main.lisp
msgid "~S was defined in a non-null environment."
msgstr "~S asway efinedday inway away onnay-ullnay environmentway."

#: target:compiler/main.lisp
msgid "Can't find a definition for ~S."
msgstr "Ancay't indfay away efinitionday orfay ~S."

#: target:compiler/main.lisp
msgid ""
"Compiles the function whose name is NAME.  If DEFINITION is supplied,\n"
"  it should be a lambda expression that is compiled and then placed in the\n"
"  function cell of NAME.  If NAME is Nil, the compiled code object is\n"
"  returned."
msgstr ""
"Ompilescay ethay unctionfay osewhay amenay isway AMENAY.  Ifway EFINITIONDAY "
"isway uppliedsay,\n"
"  itway ouldshay ebay away ambdalay expressionway atthay isway ompiledcay "
"andway enthay acedplay inway ethay\n"
"  unctionfay ellcay ofway AMENAY.  Ifway AMENAY isway Ilnay, ethay "
"ompiledcay odecay objectway isway\n"
"  eturnedray."

#: target:compiler/main.lisp
msgid ""
"Attempt to replace Name's definition with an interpreted version of that\n"
"  definition.  If no interpreted definition is to be found, then signal an\n"
"  error."
msgstr ""
"Attemptway otay eplaceray Amenay's efinitionday ithway anway interpretedway "
"ersionvay ofway atthay\n"
"  efinitionday.  Ifway onay interpretedway efinitionday isway otay ebay "
"oundfay, enthay ignalsay anway\n"
"  errorway."

#: target:compiler/main.lisp
msgid "~S is already interpreted."
msgstr "~S isway alreadyway interpretedway."

#: target:compiler/main.lisp
msgid ""
"Return a pathname describing what file COMPILE-FILE would write to given\n"
"   these arguments."
msgstr ""
"Eturnray away athnamepay escribingday atwhay ilefay OMPILECAY-ILEFAY ouldway "
"itewray otay ivengay\n"
"   esethay argumentsway."

#: target:compiler/main.lisp
msgid ""
"The ~A parameter is a ~S, which is an invalid value ~@\n"
"            to COMPILE-FILE-PATHNAME."
msgstr ""
"Ethay ~Away arameterpay isway away ~S, ichwhay isway anway invalidway "
"aluevay ~@\n"
"            otay OMPILECAY-ILEFAY-ATHNAMEPAY."

#: target:compiler/ir1tran.lisp
msgid ""
"If true, argument and result type information derived from compilation of\n"
"  DEFUNs is used when compiling calls to that function.  If false, only\n"
"  information from FTYPE proclamations will be used."
msgstr ""
"Ifway uetray, argumentway andway esultray ypetay informationway erivedday "
"omfray ompilationcay ofway\n"
"  Efunsday isway usedway enwhay ompilingcay allscay otay atthay unctionfay.  "
"Ifway alsefay, onlyway\n"
"  informationway omfray TYPEFAY oclamationspray illway ebay usedway."

#: target:compiler/ir1tran.lisp
msgid ""
"If NIL, never trust dynamic-extent declarations.\n"
"\n"
"   If T, always trust dynamic-extent declarations.\n"
"\n"
"   Otherwise, the value of this variable must be a function of four\n"
"   arguments SAFETY, SPACE, SPEED, and DEBUG.  If the function returns\n"
"   true when called, dynamic-extent declarations are trusted,\n"
"   otherwise they are not trusted."
msgstr ""
"Ifway ILNAY, evernay usttray ynamicday-extentway eclarationsday.\n"
"\n"
"   Ifway T, alwaysway usttray ynamicday-extentway eclarationsday.\n"
"\n"
"   Otherwiseway, ethay aluevay ofway isthay ariablevay ustmay ebay away "
"unctionfay ofway ourfay\n"
"   argumentsway AFETYSAY, ACESPAY, EEDSPAY, andway EBUGDAY.  Ifway ethay "
"unctionfay eturnsray\n"
"   uetray enwhay alledcay, ynamicday-extentway eclarationsday areway "
"ustedtray,\n"
"   otherwiseway eythay areway otnay ustedtray."

#: target:compiler/ir1tran.lisp
msgid "~@<Invalid name ~s in a dynamic-extent declaration.~@:>"
msgstr ""
"~@<Invalidway amenay ~s inway away ynamicday-extentway eclarationday.~@:>"

#: target:compiler/ir1tran.lisp
msgid "Can't find slot ~S."
msgstr "Ancay't indfay otslay ~S."

#: target:compiler/ir1tran.lisp
msgid "Found macro name ~S ~A."
msgstr "Oundfay acromay amenay ~S ~Away."

#: target:compiler/ir1tran.lisp
msgid "Found special-form name ~S ~A."
msgstr "Oundfay ecialspay-ormfay amenay ~S ~Away."

#: target:compiler/ir1tran.lisp
msgid "Cannot dump objects of type ~S into fasl files."
msgstr "Annotcay umpday objectsway ofway ypetay ~S intoway aslfay ilesfay."

#: target:compiler/ir1tran.lisp
msgid "~S has already ended."
msgstr "~S ashay alreadyway endedway."

#: target:compiler/ir1tran.lisp
msgid "~S already has successors."
msgstr "~S alreadyway ashay uccessorssay."

#: target:compiler/ir1tran.lisp
msgid "~S is already a predecessor of ~S."
msgstr "~S isway alreadyway away edecessorpray ofway ~S."

#: target:compiler/ir1tran.lisp
msgid "Misplaced declaration."
msgstr "Isplacedmay eclarationday."

#: target:compiler/ir1tran.lisp
msgid "Illegal function call."
msgstr "Illegalway unctionfay allcay."

#: target:compiler/ir1tran.lisp
msgid "Attempt to reference undumpable constant."
msgstr "Attemptway otay eferenceray undumpableway onstantcay."

#: target:compiler/ir1tran.lisp
msgid "Reading an ignored variable: ~S."
msgstr "Eadingray anway ignoredway ariablevay: ~S."

#: target:compiler/ir1tran.lisp
msgid "~&dynamic-extent args ~:s in ~s~%"
msgstr "~&ynamicday-extentway argsway ~:s inway ~s~%"

#: target:compiler/ir1tran.lisp
msgid ""
"Conflicting type declarations ~\n"
"\t\t\t\t   ~S and ~S for ~S."
msgstr ""
"Onflictingcay ypetay eclarationsday ~\n"
"\t\t\t\t   ~S andway ~S orfay ~S."

#: target:compiler/ir1tran.lisp
msgid "Can't declare type of Alien variable: ~S."
msgstr "Ancay't eclareday ypetay ofway Alienway ariablevay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Declaring symbol-macro ~S special."
msgstr "Eclaringday ymbolsay-acromay ~S ecialspay."

#: target:compiler/ir1tran.lisp
msgid "Ignored variable ~S is being declared special."
msgstr "Ignoredway ariablevay ~S isway eingbay eclaredday ecialspay."

#: target:compiler/ir1tran.lisp
msgid ""
"Ignoring ~A declaration not at ~\n"
"\t\t\t\t   definition of local function:~%  ~S"
msgstr ""
"Ignoringway ~Away eclarationday otnay atway ~\n"
"\t\t\t\t   efinitionday ofway ocallay unctionfay:~%  ~S"

#: target:compiler/ir1tran.lisp
msgid "Unrecognizable function or variable name: ~S"
msgstr "Unrecognizableway unctionfay orway ariablevay amenay: ~S"

#: target:compiler/ir1tran.lisp
msgid "Ignoring free ignore declaration for ~S."
msgstr "Ignoringway eefray ignoreway eclarationday orfay ~S."

#: target:compiler/ir1tran.lisp
msgid "Ignore declaration for unknown variable ~S."
msgstr "Ignoreway eclarationday orfay unknownway ariablevay ~S."

#: target:compiler/ir1tran.lisp
msgid "Declaring special variable ~S to be ignored."
msgstr "Eclaringday ecialspay ariablevay ~S otay ebay ignoredway."

#: target:compiler/ir1tran.lisp
msgid "If true, processing of the VALUES declaration is inhibited."
msgstr ""
"Ifway uetray, ocessingpray ofway ethay ALUESVAY eclarationday isway "
"inhibitedway."

#: target:compiler/ir1tran.lisp
msgid "No type specified in FTYPE declaration: ~S."
msgstr "Onay ypetay ecifiedspay inway TYPEFAY eclarationday: ~S."

#: target:compiler/ir1tran.lisp
msgid "Abbreviated type declaration: ~S."
msgstr "Abbreviatedway ypetay eclarationday: ~S."

#: target:compiler/ir1tran.lisp
msgid "Unrecognized declaration: ~S."
msgstr "Unrecognizedway eclarationday: ~S."

#: target:compiler/ir1tran.lisp
msgid "Malformed declaration specifier ~S in ~S."
msgstr "Alformedmay eclarationday ecifierspay ~S inway ~S."

#: target:compiler/ir1tran.lisp
msgid "Declaring an alien variable to be special: ~S"
msgstr "Eclaringday anway alienway ariablevay otay ebay ecialspay: ~S"

#: target:compiler/ir1tran.lisp
msgid "Declaring a constant to be special: ~S."
msgstr "Eclaringday away onstantcay otay ebay ecialspay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Lambda-variable is not a symbol: ~S."
msgstr "Ambdalay-ariablevay isway otnay away ymbolsay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Repeated variable in lambda-list: ~S."
msgstr "Epeatedray ariablevay inway ambdalay-istlay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Name of lambda-variable is a constant: ~S."
msgstr "Amenay ofway ambdalay-ariablevay isway away onstantcay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Multiple uses of keyword ~S in lambda-list."
msgstr "Ultiplemay usesway ofway eywordkay ~S inway ambdalay-istlay."

#: target:compiler/ir1tran.lisp
msgid "Found a ~S when expecting a lambda expression:~%  ~S"
msgstr "Oundfay away ~S enwhay expectingway away ambdalay expressionway:~%  ~S"

#: target:compiler/ir1tran.lisp
msgid "Expecting a lambda, but form begins with ~S:~%  ~S"
msgstr "Expectingway away ambdalay, utbay ormfay eginsbay ithway ~S:~%  ~S"

#: target:compiler/ir1tran.lisp
msgid "Lambda-list absent or not a list:~%  ~S"
msgstr "Ambdalay-istlay absentway orway otnay away istlay:~%  ~S"

#: target:compiler/ir1tran.lisp
msgid "ir1-convert-lambda: called by: ~S, parent-form: ~S~%"
msgstr "irway1-onvertcay-ambdalay: alledcay ybay: ~S, arentpay-ormfay: ~S~%"

#: target:compiler/ir1tran.lisp
msgid "Arg specifier is too long: ~S."
msgstr "Argway ecifierspay isway ootay onglay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Malformed keyword arg specifier: ~S."
msgstr "Alformedmay eywordkay argway ecifierspay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Malformed &aux binding specifier: ~S."
msgstr "Alformedmay &auxway indingbay ecifierspay: ~S."

#: target:compiler/ir1tran.lisp
msgid ""
"Progn Form*\n"
"  Evaluates each Form in order, returing the values of the last form.  With "
"no\n"
"  forms, returns NIL."
msgstr ""
"Ognpray Ormfay*\n"
"  Evaluatesway eachway Ormfay inway orderway, eturingray ethay aluesvay "
"ofway ethay astlay ormfay.  Ithway onay\n"
"  ormsfay, eturnsray ILNAY."

#: target:compiler/ir1tran.lisp
msgid ""
"If Predicate Then [Else]\n"
"  If Predicate evaluates to non-null, evaluate Then and returns its values,\n"
"  otherwise evaluate Else and return its values.  Else defaults to NIL."
msgstr ""
"Ifway Edicatepray Enthay [Elseway]\n"
"  Ifway Edicatepray evaluatesway otay onnay-ullnay, evaluateway Enthay "
"andway eturnsray itsway aluesvay,\n"
"  otherwiseway evaluateway Elseway andway eturnray itsway aluesvay.  Elseway "
"efaultsday otay ILNAY."

#: target:compiler/ir1tran.lisp
msgid ""
"Block Name Form*\n"
"  Evaluate the Forms as a PROGN.  Within the lexical scope of the body,\n"
"  (RETURN-FROM Name Value-Form) can be used to exit the form, returning the\n"
"  result of Value-Form."
msgstr ""
"Ockblay Amenay Ormfay*\n"
"  Evaluateway ethay Ormsfay asway away OGNPRAY.  Ithinway ethay exicallay "
"opescay ofway ethay odybay,\n"
"  (ETURNRAY-OMFRAY Amenay Aluevay-Ormfay) ancay ebay usedway otay exitway "
"ethay ormfay, eturningray ethay\n"
"  esultray ofway Aluevay-Ormfay."

#: target:compiler/ir1tran.lisp
msgid "Block name is not a symbol: ~S."
msgstr "Ockblay amenay isway otnay away ymbolsay: ~S."

#: target:compiler/ir1tran.lisp
msgid ""
"Return-From Block-Name Value-Form\n"
"  Evaluate the Value-Form, returning its values from the lexically "
"enclosing\n"
"  BLOCK Block-Name.  This is constrained to be used only within the dynamic\n"
"  extent of the BLOCK."
msgstr ""
"Eturnray-Omfray Ockblay-Amenay Aluevay-Ormfay\n"
"  Evaluateway ethay Aluevay-Ormfay, eturningray itsway aluesvay omfray ethay "
"exicallylay enclosingway\n"
"  OCKBLAY Ockblay-Amenay.  Isthay isway onstrainedcay otay ebay usedway "
"onlyway ithinway ethay ynamicday\n"
"  extentway ofway ethay OCKBLAY."

#: target:compiler/ir1tran.lisp
msgid "Return for unknown block: ~S."
msgstr "Eturnray orfay unknownway ockblay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Repeated tagbody tag: ~S."
msgstr "Epeatedray agbodytay agtay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Illegal tagbody statement: ~S."
msgstr "Illegalway agbodytay tatementsay: ~S."

#: target:compiler/ir1tran.lisp
msgid ""
"Tagbody {Tag | Statement}*\n"
"  Define tags for used with GO.  The Statements are evaluated in order\n"
"  (skipping Tags) and NIL is returned.  If a statement contains a GO to a\n"
"  defined Tag within the lexical scope of the form, then control is "
"transferred\n"
"  to the next statement following that tag.  A Tag must an integer or a\n"
"  symbol.  A statement must be a list.  Other objects are illegal within "
"the\n"
"  body."
msgstr ""
"Agbodytay {Agtay | Tatementsay}*\n"
"  Efineday agstay orfay usedway ithway OGAY.  Ethay Tatementssay areway "
"evaluatedway inway orderway\n"
"  (kippingsay Agstay) andway ILNAY isway eturnedray.  Ifway away tatementsay "
"ontainscay away OGAY otay away\n"
"  efinedday Agtay ithinway ethay exicallay opescay ofway ethay ormfay, "
"enthay ontrolcay isway ansfertrayedray\n"
"  otay ethay extnay tatementsay ollowingfay atthay agtay.  Away Agtay ustmay "
"anway integerway orway away\n"
"  ymbolsay.  Away tatementsay ustmay ebay away istlay.  Otherway objectsway "
"areway illegalway ithinway ethay\n"
"  odybay."

#: target:compiler/ir1tran.lisp
msgid ""
"Go Tag\n"
"  Transfer control to the named Tag in the lexically enclosing TAGBODY.  "
"This\n"
"  is constrained to be used only within the dynamic extent of the TAGBODY."
msgstr ""
"Ogay Agtay\n"
"  Ansfertray ontrolcay otay ethay amednay Agtay inway ethay exicallylay "
"enclosingway AGBODYTAY.  Isthay\n"
"  isway onstrainedcay otay ebay usedway onlyway ithinway ethay ynamicday "
"extentway ofway ethay AGBODYTAY."

#: target:compiler/ir1tran.lisp
msgid "Go to nonexistent tag: ~S."
msgstr "Ogay otay onexistentnay agtay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Bad compiler-let binding spec: ~S."
msgstr "Adbay ompilercay-etlay indingbay ecspay: ~S."

#: target:compiler/ir1tran.lisp
msgid ""
"EVAL-WHEN (Situation*) Form*\n"
"  Evaluate the Forms in the specified Situations, any of :COMPILE-TOPLEVEL,\n"
"  :LOAD-TOPLEVEL, :EXECUTE."
msgstr ""
"EVALWAY-ENWHAY (Ituationsay*) Ormfay*\n"
"  Evaluateway ethay Ormsfay inway ethay ecifiedspay Ituationssay, anyway "
"ofway :OMPILECAY-OPLEVELTAY,\n"
"  :OADLAY-OPLEVELTAY, :EXECUTEWAY."

#: target:compiler/ir1tran.lisp
msgid "Macro name ~S is not a symbol."
msgstr "Acromay amenay ~S isway otnay away ymbolsay."

#: target:compiler/ir1tran.lisp
msgid "Local macro ~S has argument list that is not a list: ~S."
msgstr ""
"Ocallay acromay ~S ashay argumentway istlay atthay isway otnay away istlay: "
"~S."

#: target:compiler/ir1tran.lisp
msgid "Local macro ~S is too short to be a legal definition."
msgstr ""
"Ocallay acromay ~S isway ootay ortshay otay ebay away egallay efinitionday."

#: target:compiler/ir1tran.lisp
msgid ""
"MACROLET ({(Name Lambda-List Form*)}*) Body-Form*\n"
"  Evaluate the Body-Forms in an environment with the specified local macros\n"
"  defined.  Name is the local macro name, Lambda-List is the DEFMACRO style\n"
"  destructuring lambda list, and the Forms evaluate to the expansion."
msgstr ""
"ACROLETMAY ({(Amenay Ambdalay-Istlay Ormfay*)}*) Odybay-Ormfay*\n"
"  Evaluateway ethay Odybay-Ormsfay inway anway environmentway ithway ethay "
"ecifiedspay ocallay acrosmay\n"
"  efinedday.  Amenay isway ethay ocallay acromay amenay, Ambdalay-Istlay "
"isway ethay EFMACRODAY tylesay\n"
"  estructuringday ambdalay istlay, andway ethay Ormsfay evaluateway otay "
"ethay expansionway."

#: target:compiler/ir1tran.lisp
msgid ""
"Compiler-Option-Bind ({(Name Value-Form)}*) Body-Form*\n"
"   Establish the specified compiler options for the (lexical) duration of\n"
"   the body.  The Value-Forms are evaluated at compile time."
msgstr ""
"Ompilercay-Optionway-Indbay ({(Amenay Aluevay-Ormfay)}*) Odybay-Ormfay*\n"
"   Establishway ethay ecifiedspay ompilercay optionsway orfay ethay "
"(exicallay) urationday ofway\n"
"   ethay odybay.  Ethay Aluevay-Ormsfay areway evaluatedway atway ompilecay "
"imetay."

#: target:compiler/ir1tran.lisp
msgid ""
"Bogus binding for ~\n"
"\t\t\t\t\t\t     COMPILER-OPTION-BIND: ~S"
msgstr ""
"Ogusbay indingbay orfay ~\n"
"\t\t\t\t\t\t     OMPILERCAY-OPTIONWAY-INDBAY: ~S"

#: target:compiler/ir1tran.lisp
msgid "Lisp error during evaluation of info args:~%~A"
msgstr "Isplay errorway uringday evaluationway ofway infoway argsway:~%~Away"

#: target:compiler/ir1tran.lisp
msgid "%Primitive name is not a symbol: ~S."
msgstr "%Imitivepray amenay isway otnay away ymbolsay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Undefined primitive name: ~A."
msgstr "Undefinedway imitivepray amenay: ~Away."

#: target:compiler/ir1tran.lisp
msgid ""
"Primitive called with ~R argument~:P, ~\n"
"\t    \t\t         but wants at least ~R."
msgstr ""
"Imitivepray alledcay ithway ~R argumentway~:P, ~\n"
"\t    \t\t         utbay antsway atway eastlay ~R."

#: target:compiler/ir1tran.lisp
msgid ""
"Primitive called with ~R argument~:P, ~\n"
"\t\t\t\t but wants exactly ~R."
msgstr ""
"Imitivepray alledcay ithway ~R argumentway~:P, ~\n"
"\t\t\t\t utbay antsway exactlyway ~R."

#: target:compiler/ir1tran.lisp
msgid "%Primitive used with a conditional template."
msgstr "%Imitivepray usedway ithway away onditionalcay emplatetay."

#: target:compiler/ir1tran.lisp
msgid "%Primitive used with an unknown values template."
msgstr "%Imitivepray usedway ithway anway unknownway aluesvay emplatetay."

#: target:compiler/ir1tran.lisp
msgid ""
"QUOTE Value\n"
"  Return Value without evaluating it."
msgstr ""
"OTEQUAY Aluevay\n"
"  Eturnray Aluevay ithoutway evaluatingway itway."

#: target:compiler/ir1tran.lisp
msgid ""
"FUNCTION Name\n"
"  Return the lexically apparent definition of the function Name.  Name may "
"also\n"
"  be a lambda."
msgstr ""
"UNCTIONFAY Amenay\n"
"  Eturnray ethay exicallylay apparentway efinitionday ofway ethay unctionfay "
"Amenay.  Amenay aymay alsoway\n"
"  ebay away ambdalay."

#: target:compiler/ir1tran.lisp
msgid "Illegal function name: ~S"
msgstr "Illegalway unctionfay amenay: ~S"

#: target:compiler/ir1tran.lisp
msgid "Might be a symbol, so must call FDEFINITION at runtime."
msgstr ""
"Ightmay ebay away ymbolsay, osay ustmay allcay DEFINITIONFAY atway untimeray."

#: target:compiler/ir1tran.lisp
msgid ""
"SYMBOL-MACROLET ({(Name Expansion)}*) Decl* Form*\n"
"  Define the Names as symbol macros with the given Expansions.  Within the\n"
"  body, references to a Name will effectively be replaced with the Expansion."
msgstr ""
"YMBOLSAY-ACROLETMAY ({(Amenay Expansionway)}*) Eclday* Ormfay*\n"
"  Efineday ethay Amesnay asway ymbolsay acrosmay ithway ethay ivengay "
"Expansionsway.  Ithinway ethay\n"
"  odybay, eferencesray otay away Amenay illway effectivelyway ebay "
"eplacedray ithway ethay Expansionway."

#: target:compiler/ir1tran.lisp
msgid "Malformed symbol macro binding: ~S."
msgstr "Alformedmay ymbolsay acromay indingbay: ~S."

#: target:compiler/ir1tran.lisp
msgid ""
"Attempt to bind a special or constant variable with SYMBOL-MACROLET: ~S."
msgstr ""
"Attemptway otay indbay away ecialspay orway onstantcay ariablevay ithway "
"YMBOLSAY-ACROLETMAY: ~S."

#: target:compiler/ir1tran.lisp
msgid "Repeated name in SYMBOL-MACROLET: ~S."
msgstr "Epeatedray amenay inway YMBOLSAY-ACROLETMAY: ~S."

#: target:compiler/ir1tran.lisp
msgid "Name is not a symbol: ~S."
msgstr "Amenay isway otnay away ymbolsay: ~S."

#: target:compiler/ir1tran.lisp
msgid "New proclaimed type ~S for ~S conflicts with old type ~S."
msgstr ""
"Ewnay oclaimedpray ypetay ~S orfay ~S onflictscay ithway oldway ypetay ~S."

#: target:compiler/ir1tran.lisp
msgid "Attempt to proclaim constant ~S to be special."
msgstr "Attemptway otay oclaimpray onstantcay ~S otay ebay ecialspay."

#: target:compiler/ir1tran.lisp
msgid "Malformed TYPE proclamation: ~S."
msgstr "Alformedmay YPETAY oclamationpray: ~S."

#: target:compiler/ir1tran.lisp
msgid "Malformed FUNCTION proclamation: ~S."
msgstr "Alformedmay UNCTIONFAY oclamationpray: ~S."

#: target:compiler/ir1tran.lisp
msgid "Malformed FTYPE proclamation: ~S."
msgstr "Alformedmay TYPEFAY oclamationpray: ~S."

#: target:compiler/ir1tran.lisp
msgid "Malformed ~S binding spec: ~S."
msgstr "Alformedmay ~S indingbay ecspay: ~S."

#: target:compiler/ir1tran.lisp
msgid ""
"LET ({(Var [Value]) | Var}*) Declaration* Form*\n"
"  During evaluation of the Forms, Bind the Vars to the result of evaluating "
"the\n"
"  Value forms.  The variables are bound in parallel after all of the Values "
"are\n"
"  evaluated."
msgstr ""
"ETLAY ({(Arvay [Aluevay]) | Arvay}*) Eclarationday* Ormfay*\n"
"  Uringday evaluationway ofway ethay Ormsfay, Indbay ethay Arsvay otay ethay "
"esultray ofway evaluatingway ethay\n"
"  Aluevay ormsfay.  Ethay ariablesvay areway oundbay inway arallelpay "
"afterway allway ofway ethay Aluesvay areway\n"
"  evaluatedway."

#: target:compiler/ir1tran.lisp
msgid ""
"LOCALLY Declaration* Form*\n"
"   Sequentially evaluates a body of Form's in a lexical environment\n"
"   where the given Declaration's have effect."
msgstr ""
"OCALLYLAY Eclarationday* Ormfay*\n"
"   Equentiallysay evaluatesway away odybay ofway Ormfay's inway away "
"exicallay environmentway\n"
"   erewhay ethay ivengay Eclarationday's avehay effectway."

#: target:compiler/ir1tran.lisp
msgid ""
"LET* ({(Var [Value]) | Var}*) Declaration* Form*\n"
"  Similar to LET, but the variables are bound sequentially, allowing each "
"Value\n"
"  form to reference any of the previous Vars."
msgstr ""
"ETLAY* ({(Arvay [Aluevay]) | Arvay}*) Eclarationday* Ormfay*\n"
"  Imilarsay otay ETLAY, utbay ethay ariablesvay areway oundbay "
"equentiallysay, allowingway eachway Aluevay\n"
"  ormfay otay eferenceray anyway ofway ethay eviouspray Arsvay."

#: target:compiler/ir1tran.lisp
msgid "Malformed ~S definition spec: ~S."
msgstr "Alformedmay ~S efinitionday ecspay: ~S."

#: target:compiler/ir1tran.lisp
msgid ""
"FLET ({(Name Lambda-List Declaration* Form*)}*) Declaration* Body-Form*\n"
"  Evaluate the Body-Forms with some local function definitions.   The "
"bindings\n"
"  do not enclose the definitions; any use of Name in the Forms will refer "
"to\n"
"  the lexically apparent function definition in the enclosing environment."
msgstr ""
"ETFLAY ({(Amenay Ambdalay-Istlay Eclarationday* Ormfay*)}*) Eclarationday* "
"Odybay-Ormfay*\n"
"  Evaluateway ethay Odybay-Ormsfay ithway omesay ocallay unctionfay "
"efinitionsday.   Ethay indingsbay\n"
"  oday otnay encloseway ethay efinitionsday; anyway useway ofway Amenay "
"inway ethay Ormsfay illway eferray otay\n"
"  ethay exicallylay apparentway unctionfay efinitionday inway ethay "
"enclosingway environmentway."

#: target:compiler/ir1tran.lisp
msgid ""
"LABELS ({(Name Lambda-List Declaration* Form*)}*) Declaration* Body-Form*\n"
"  Evaluate the Body-Forms with some local function definitions.  The "
"bindings\n"
"  enclose the new definitions, so the defined functions can call themselves "
"or\n"
"  each other."
msgstr ""
"ABELSLAY ({(Amenay Ambdalay-Istlay Eclarationday* Ormfay*)}*) Eclarationday* "
"Odybay-Ormfay*\n"
"  Evaluateway ethay Odybay-Ormsfay ithway omesay ocallay unctionfay "
"efinitionsday.  Ethay indingsbay\n"
"  encloseway ethay ewnay efinitionsday, osay ethay efinedday unctionsfay "
"ancay allcay emselvesthay orway\n"
"  eachway otherway."

#: target:compiler/ir1tran.lisp
msgid "Type ~S in ~S declaration conflicts with enclosing assertion:~%   ~S"
msgstr ""
"Ypetay ~S inway ~S eclarationday onflictscay ithway enclosingway "
"assertionway:~%   ~S"

#: target:compiler/ir1tran.lisp
msgid ""
"THE Type Form\n"
"  Assert that Form evaluates to the specified type (which may be a VALUES\n"
"  type.)"
msgstr ""
"ETHAY Ypetay Ormfay\n"
"  Assertway atthay Ormfay evaluatesway otay ethay ecifiedspay ypetay "
"(ichwhay aymay ebay away ALUESVAY\n"
"  ypetay.)"

#: target:compiler/ir1tran.lisp
msgid ""
"Truly-The Type Value\n"
"  Like the THE special form, except that it believes whatever you tell it.  "
"It\n"
"  will never generate a type check, but will cause a warning if the "
"compiler\n"
"  can prove the assertion is wrong."
msgstr ""
"Ulytray-Ethay Ypetay Aluevay\n"
"  Ikelay ethay ETHAY ecialspay ormfay, exceptway atthay itway elievesbay "
"ateverwhay ouyay elltay itway.  Itway\n"
"  illway evernay enerategay away ypetay eckchay, utbay illway ausecay away "
"arningway ifway ethay ompilercay\n"
"  ancay ovepray ethay assertionway isway ongwray."

#: target:compiler/ir1tran.lisp
msgid ""
"SETQ {Var Value}*\n"
"  Set the variables to the values.  If more than one pair is supplied, the\n"
"  assignments are done sequentially.  If Var names a symbol macro, SETF the\n"
"  expansion."
msgstr ""
"ETQSAY {Arvay Aluevay}*\n"
"  Etsay ethay ariablesvay otay ethay aluesvay.  Ifway oremay anthay oneway "
"airpay isway uppliedsay, ethay\n"
"  assignmentsway areway oneday equentiallysay.  Ifway Arvay amesnay away "
"ymbolsay acromay, ETFSAY ethay\n"
"  expansionway."

#: target:compiler/ir1tran.lisp
msgid "Odd number of args to SETQ: ~S."
msgstr "Oddway umbernay ofway argsway otay ETQSAY: ~S."

#: target:compiler/ir1tran.lisp
msgid "Attempt to set constant ~S."
msgstr "Attemptway otay etsay onstantcay ~S."

#: target:compiler/ir1tran.lisp
msgid "Setting an ignored variable: ~S."
msgstr "Ettingsay anway ignoredway ariablevay: ~S."

#: target:compiler/ir1tran.lisp
msgid ""
"Throw Tag Form\n"
"  Do a non-local exit, return the values of Form from the CATCH whose tag\n"
"  evaluates to the same thing as Tag."
msgstr ""
"Rowthay Agtay Ormfay\n"
"  Oday away onnay-ocallay exitway, eturnray ethay aluesvay ofway Ormfay "
"omfray ethay ATCHCAY osewhay agtay\n"
"  evaluatesway otay ethay amesay ingthay asway Agtay."

#: target:compiler/ir1tran.lisp
msgid ""
"Catch Tag Form*\n"
"  Evaluates Tag and instantiates it as a catcher while the body forms are\n"
"  evaluated in an implicit PROGN.  If a THROW is done to Tag within the "
"dynamic\n"
"  scope of the body, then control will be transferred to the end of the "
"body\n"
"  and the thrown values will be returned."
msgstr ""
"Atchcay Agtay Ormfay*\n"
"  Evaluatesway Agtay andway instantiatesway itway asway away atchercay "
"ilewhay ethay odybay ormsfay areway\n"
"  evaluatedway inway anway implicitway OGNPRAY.  Ifway away ROWTHAY isway "
"oneday otay Agtay ithinway ethay ynamicday\n"
"  opescay ofway ethay odybay, enthay ontrolcay illway ebay ansferredtray "
"otay ethay endway ofway ethay odybay\n"
"  andway ethay rownthay aluesvay illway ebay eturnedray."

#: target:compiler/ir1tran.lisp
msgid ""
"Unwind-Protect Protected Cleanup*\n"
"  Evaluate the form Protected, returning its values.  The cleanup forms are\n"
"  evaluated whenever the dynamic scope of the Protected form is exited "
"(either\n"
"  due to normal completion or a non-local exit such as THROW)."
msgstr ""
"Unwindway-Otectpray Otectedpray Eanupclay*\n"
"  Evaluateway ethay ormfay Otectedpray, eturningray itsway aluesvay.  Ethay "
"eanupclay ormsfay areway\n"
"  evaluatedway eneverwhay ethay ynamicday opescay ofway ethay Otectedpray "
"ormfay isway exitedway (eitherway\n"
"  ueday otay ormalnay ompletioncay orway away onnay-ocallay exitway uchsay "
"asway ROWTHAY)."

#: target:compiler/ir1tran.lisp
msgid ""
"MULTIPLE-VALUE-CALL Function Values-Form*\n"
"  Call Function, passing all the values of each Values-Form as arguments,\n"
"  values from the first Values-Form making up the first argument, etc."
msgstr ""
"ULTIPLEMAY-ALUEVAY-ALLCAY Unctionfay Aluesvay-Ormfay*\n"
"  Allcay Unctionfay, assingpay allway ethay aluesvay ofway eachway Aluesvay-"
"Ormfay asway argumentsway,\n"
"  aluesvay omfray ethay irstfay Aluesvay-Ormfay akingmay upway ethay irstfay "
"argumentway, etcway."

#: target:compiler/ir1tran.lisp
msgid ""
"MULTIPLE-VALUE-PROG1 Values-Form Form*\n"
"  Evaluate Values-Form and then the Forms, but return all the values of\n"
"  Values-Form."
msgstr ""
"ULTIPLEMAY-ALUEVAY-OGPRAY1 Aluesvay-Ormfay Ormfay*\n"
"  Evaluateway Aluesvay-Ormfay andway enthay ethay Ormsfay, utbay eturnray "
"allway ethay aluesvay ofway\n"
"  Aluesvay-Ormfay."

#: target:compiler/ir1tran.lisp
msgid "Macro name is not a symbol: ~S."
msgstr "Acromay amenay isway otnay away ymbolsay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Defining ~S to be a macro when it was ~(~A~) to be a function."
msgstr ""
"Efiningday ~S otay ebay away acromay enwhay itway asway ~(~Away~) otay ebay "
"away unctionfay."

#: target:compiler/ir1tran.lisp
msgid "Attempt to redefine special form ~S as a macro."
msgstr "Attemptway otay edefineray ecialspay ormfay ~S asway away acromay."

#: target:compiler/ir1tran.lisp
msgid "~&; Converted ~S.~%"
msgstr "~&; Onvertedcay ~S.~%"

#: target:compiler/ir1tran.lisp
msgid "Attempt to define a compiler-macro for special form ~S."
msgstr ""
"Attemptway otay efineday away ompilercay-acromay orfay ecialspay ormfay ~S."

#: target:compiler/ir1tran.lisp
msgid "Constant name is not a symbol: ~S."
msgstr "Onstantcay amenay isway otnay away ymbolsay: ~S."

#: target:compiler/ir1tran.lisp
msgid "Can't change T."
msgstr "Ancay't angechay T."

#: target:compiler/ir1tran.lisp
msgid "Nihil ex nihil (Can't change NIL)."
msgstr "Ihilnay exway ihilnay (Ancay't angechay ILNAY)."

#: target:compiler/ir1tran.lisp
msgid "Can't change the value of keywords."
msgstr "Ancay't angechay ethay aluevay ofway eywordskay."

#: target:compiler/ir1tran.lisp
msgid "Redefining constant ~S as:~%  ~S"
msgstr "Edefiningray onstantcay ~S asway:~%  ~S"

#: target:compiler/ir1tran.lisp
msgid "Redefining ~(~A~) ~S to be a constant."
msgstr "Edefiningray ~(~Away~) ~S otay ebay away onstantcay."

#: target:compiler/ir1util.lisp
msgid "Return the TLF-NUMBER and FORM-NUMBER encoded as fixnum."
msgstr ""
"Eturnray ethay LFTAY-UMBERNAY andway ORMFAY-UMBERNAY encodedway asway "
"ixnumfay."

#: target:compiler/ir1util.lisp
msgid "Return the tlf-number and form-number from an encoded FIXNUM."
msgstr ""
"Eturnray ethay lftay-umbernay andway ormfay-umbernay omfray anway encodedway "
"IXNUMFAY."

#: target:compiler/ir1util.lisp
msgid "Return a source-location for the call site."
msgstr "Eturnray away ourcesay-ocationlay orfay ethay allcay itesay."

#: target:compiler/ir1util.lisp
msgid "Deleting unused function~:[.~;~:*~%  ~S~]"
msgstr "Eletingday unusedway unctionfay~:[.~;~:*~%  ~S~]"

#: target:compiler/ir1util.lisp
msgid "Block is already deleted."
msgstr "Ockblay isway alreadyway eletedday."

#: target:compiler/ir1util.lisp
msgid "Variable ~S defined but never used."
msgstr "Ariablevay ~S efinedday utbay evernay usedway."

#: target:compiler/ir1util.lisp
msgid "Deleting unreachable code."
msgstr "Eletingday unreachableway odecay."

#: target:compiler/ir1util.lisp
msgid ""
"If CONT is a call to FUN with NUM-ARGS args, change those arguments\n"
"   to feed directly to the continuation-dest of CONT, which must be\n"
"   a combination."
msgstr ""
"Ifway ONTCAY isway away allcay otay UNFAY ithway UMNAY-ARGSWAY argsway, "
"angechay osethay argumentsway\n"
"   otay eedfay irectlyday otay ethay ontinuationcay-estday ofway ONTCAY, "
"ichwhay ustmay ebay\n"
"   away ombinationcay."

#: target:compiler/ir1util.lisp
msgid ""
"An upper limit on the number of inline function calls that will be expanded\n"
"   in any given code object (single function or block compilation.)"
msgstr ""
"Anway upperway imitlay onway ethay umbernay ofway inlineway unctionfay "
"allscay atthay illway ebay expandedway\n"
"   inway anyway ivengay odecay objectway (inglesay unctionfay orway ockblay "
"ompilationcay.)"

#: target:compiler/ir1util.lisp
msgid ""
"*Inline-Expansion-Limit* (~D) exceeded, ~\n"
"\t\t\t     probably trying to~%  ~\n"
"\t\t\t     inline a recursive function."
msgstr ""
"*Inlineway-Expansionway-Imitlay* (~D) exceededway, ~\n"
"\t\t\t     obablypray yingtray otay~%  ~\n"
"\t\t\t     inlineway away ecursiveray unctionfay."

#: target:compiler/ir1util.lisp
msgid "The value for *Print-Level* when printing compiler error messages."
msgstr ""
"Ethay aluevay orfay *Intpray-Evellay* enwhay intingpray ompilercay errorway "
"essagesmay."

#: target:compiler/ir1util.lisp
msgid "The value for *Print-Length* when printing compiler error messages."
msgstr ""
"Ethay aluevay orfay *Intpray-Engthlay* enwhay intingpray ompilercay errorway "
"essagesmay."

#: target:compiler/ir1util.lisp
msgid "The value for *Print-Lines* when printing compiler error messages."
msgstr ""
"Ethay aluevay orfay *Intpray-Ineslay* enwhay intingpray ompilercay errorway "
"essagesmay."

#: target:compiler/ir1util.lisp
msgid ""
"The maximum number of enclosing non-original source forms (i.e. from\n"
"  macroexpansion) that we print in full.  For additional enclosing forms, "
"we\n"
"  print only the CAR."
msgstr ""
"Ethay aximummay umbernay ofway enclosingway onnay-originalway ourcesay "
"ormsfay (i.e. omfray\n"
"  acroexpansionmay) atthay eway intpray inway ullfay.  Orfay additionalway "
"enclosingway ormsfay, eway\n"
"  intpray onlyway ethay ARCAY."

#: target:compiler/ir1util.lisp
msgid ""
"DEF-SOURCE-CONTEXT Name Lambda-List Form*\n"
"   This macro defines how to extract an abbreviated source context from the\n"
"   Named form when it appears in the compiler input.  Lambda-List is a "
"DEFMACRO\n"
"   style lambda-list used to parse the arguments.  The Body should return a\n"
"   list of subforms suitable for a \"~{~S ~}\" format string."
msgstr ""
"EFDAY-OURCESAY-ONTEXTCAY Amenay Ambdalay-Istlay Ormfay*\n"
"   Isthay acromay efinesday owhay otay extractway anway abbreviatedway "
"ourcesay ontextcay omfray ethay\n"
"   Amednay ormfay enwhay itway appearsway inway ethay ompilercay inputway.  "
"Ambdalay-Istlay isway away EFMACRODAY\n"
"   tylesay ambdalay-istlay usedway otay arsepay ethay argumentsway.  Ethay "
"Odybay ouldshay eturnray away\n"
"   istlay ofway ubformssay uitablesay orfay away \"~{~S ~}\" ormatfay "
"ingstray."

#: target:compiler/ir1util.lisp
msgid "Compiler-Error with no bailout."
msgstr "Ompilercay-Errorway ithway onay ailoutbay."

#: target:compiler/ir1util.lisp
msgid ""
"This is the function called by the compiler to specially note a\n"
"warning, comment, or error. The function must take five arguments: the\n"
"severity, a string describing the nature of the notification, a string\n"
"for context, the file namestring, and the file position. The severity\n"
"is one of :note, :warning, or :error. Except for the severity, all of\n"
"these can be NIL if unavailable or inapplicable."
msgstr ""
"Isthay isway ethay unctionfay alledcay ybay ethay ompilercay otay "
"eciallyspay otenay away\n"
"arningway, ommentcay, orway errorway. Ethay unctionfay ustmay aketay ivefay "
"argumentsway: ethay\n"
"everitysay, away ingstray escribingday ethay aturenay ofway ethay "
"otificationnay, away ingstray\n"
"orfay ontextcay, ethay ilefay amestringnay, andway ethay ilefay ositionpay. "
"Ethay everitysay\n"
"isway oneway ofway :otenay, :arningway, orway :errorway. Exceptway orfay "
"ethay everitysay, allway ofway\n"
"esethay ancay ebay ILNAY ifway unavailableway orway inapplicableway."

#: target:compiler/ir1util.lisp
msgid "[Last message occurs ~D times]"
msgstr "[Astlay essagemay occursway ~D imestay]"

#: target:compiler/ir1util.lisp
msgid "~2&File: ~A"
msgstr "~2&Ilefay: ~Away"

#: target:compiler/ir1util.lisp
msgid ""
"If non-null, then an upper limit on the number of unknown function or type\n"
"  warnings that the compiler will print for any given name in a single\n"
"  compilation.  This prevents excessive amounts of output when there really "
"is\n"
"  a missing definition (as opposed to a typo in the use.)"
msgstr ""
"Ifway onnay-ullnay, enthay anway upperway imitlay onway ethay umbernay ofway "
"unknownway unctionfay orway ypetay\n"
"  arningsway atthay ethay ompilercay illway intpray orfay anyway ivengay "
"amenay inway away inglesay\n"
"  ompilationcay.  Isthay eventspray excessiveway amountsway ofway outputway "
"enwhay erethay eallyray isway\n"
"  away issingmay efinitionday (asway opposedway otay away ypotay inway ethay "
"useway.)"

#: target:compiler/ir1opt.lisp
msgid ""
"New inferred type ~S conflicts with old type:~\n"
"\t\t~%  ~S~%*** Bug?"
msgstr ""
"Ewnay inferredway ypetay ~S onflictscay ithway oldway ypetay:~\n"
"\t\t~%  ~S~%*** Ugbay?"

#: target:compiler/ir1opt.lisp
msgid "The return value of ~A should not be discarded."
msgstr "Ethay eturnray aluevay ofway ~Away ouldshay otnay ebay iscardedday."

#: target:compiler/ir1opt.lisp
msgid ""
"This function is used to throw out of an IR1 transform, aborting this\n"
"  attempt to transform the call, but admitting the possibility that this or\n"
"  some other transform will later suceed.  If arguments are supplied, they "
"are\n"
"  format arguments for an efficiency note."
msgstr ""
"Isthay unctionfay isway usedway otay rowthay outway ofway anway IRWAY1 "
"ansformtray, abortingway isthay\n"
"  attemptway otay ansformtray ethay allcay, utbay admittingway ethay "
"ossibilitypay atthay isthay orway\n"
"  omesay otherway ansformtray illway aterlay uceedsay.  Ifway argumentsway "
"areway uppliedsay, eythay areway\n"
"  ormatfay argumentsway orfay anway efficiencyway otenay."

#: target:compiler/ir1opt.lisp
msgid ""
"This function is used to throw out of an IR1 transform and force a normal\n"
"  call to the function at run time.  No further optimizations will be\n"
"  attempted."
msgstr ""
"Isthay unctionfay isway usedway otay rowthay outway ofway anway IRWAY1 "
"ansformtray andway orcefay away ormalnay\n"
"  allcay otay ethay unctionfay atway unray imetay.  Onay urtherfay "
"optimizationsway illway ebay\n"
"  attemptedway."

#: target:compiler/ir1opt.lisp
msgid ""
"This function is used to throw out of an IR1 transform, and delay the\n"
"  transform on the node until later. The reasons specifies when the "
"transform\n"
"  will be later retried. The :optimize reason causes the transform to be\n"
"  delayed until after the current IR1 optimization pass. The :constraint\n"
"  reason causes the transform to be delayed until after constraint\n"
"  propagation."
msgstr ""
"Isthay unctionfay isway usedway otay rowthay outway ofway anway IRWAY1 "
"ansformtray, andway elayday ethay\n"
"  ansformtray onway ethay odenay untilway aterlay. Ethay easonsray "
"ecifiesspay enwhay ethay ansfortraym\n"
"  illway ebay aterlay etriedray. Ethay :optimizeway easonray ausescay ethay "
"ansformtray otay ebay\n"
"  elayedday untilway afterway ethay urrentcay IRWAY1 optimizationway asspay. "
"Ethay :onstraintcay\n"
"  easonray ausescay ethay ansformtray otay ebay elayedday untilway afterway "
"onstraintcay\n"
"  opagationpray."

#: target:compiler/ir1opt.lisp
msgid ""
"MULTIPLE-VALUE-CALL with ~R values when the function expects ~\n"
"\t     at least ~R."
msgstr ""
"ULTIPLEMAY-ALUEVAY-ALLCAY ithway ~R aluesvay enwhay ethay unctionfay "
"expectsway ~\n"
"\t     atway eastlay ~R."

#: target:compiler/ir1opt.lisp
msgid ""
"MULTIPLE-VALUE-CALL with ~R values when the function expects ~\n"
"\t     at most ~R."
msgstr ""
"ULTIPLEMAY-ALUEVAY-ALLCAY ithway ~R aluesvay enwhay ethay unctionfay "
"expectsway ~\n"
"\t     atway ostmay ~R."

#: target:compiler/ir1final.lisp
msgid "Unable to ~A because:~%~6T~?"
msgstr "Unableway otay ~Away ecausebay:~%~6T~?"

#: target:compiler/ir1final.lisp
msgid ""
"Unable to ~A due to type uncertainty:~@\n"
"\t                      ~{~6T~?~^~&~}"
msgstr ""
"Unableway otay ~Away ueday otay ypetay uncertaintyway:~@\n"
"\t                      ~{~6T~?~^~&~}"

#: target:compiler/ir1final.lisp
msgid ""
"The result type from previous declaration:~%  ~S~@\n"
"\t\t\t\t  conflicts with the result type:~%  ~S"
msgstr ""
"Ethay esultray ypetay omfray eviouspray eclarationday:~%  ~S~@\n"
"\t\t\t\t  onflictscay ithway ethay esultray ypetay:~%  ~S"

#: target:compiler/array-tran.lisp
msgid "Element-Type is not constant."
msgstr "Elementway-Ypetay isway otnay onstantcay."

#: target:compiler/array-tran.lisp
msgid "Cannot open-code creation of ~S"
msgstr "Annotcay openway-odecay eationcray ofway ~S"

#: target:compiler/array-tran.lisp
msgid "Default initial element ~s is not a ~s."
msgstr "Efaultday initialway elementway ~s isway otnay away ~s."

#: target:compiler/array-tran.lisp
msgid "Element-type not constant; cannot open code array creation"
msgstr ""
"Elementway-ypetay otnay onstantcay; annotcay openway odecay arrayway "
"eationcray"

#: target:compiler/array-tran.lisp
msgid "Dimension list not constant; cannot open code array creation"
msgstr ""
"Imensionday istlay otnay onstantcay; annotcay openway odecay arrayway "
"eationcray"

#: target:compiler/array-tran.lisp
msgid "Dimension list contains something other than an integer: ~S"
msgstr ""
"Imensionday istlay ontainscay omethingsay otherway anthay anway integerway: "
"~S"

#: target:compiler/array-tran.lisp
msgid "Array rank not known at compile time: ~S"
msgstr "Arrayway ankray otnay nownkay atway ompilecay imetay: ~S"

#: target:compiler/array-tran.lisp
msgid "Axis not constant."
msgstr "Axisway otnay onstantcay."

#: target:compiler/array-tran.lisp
msgid "Array dimensions unknown, must call array-dimension at runtime."
msgstr ""
"Arrayway imensionsday unknownway, ustmay allcay arrayway-imensionday atway "
"untimeray."

#: target:compiler/array-tran.lisp
msgid "Array has dimensions ~S, ~D is too large."
msgstr "Arrayway ashay imensionsday ~S, ~D isway ootay argelay."

#: target:compiler/array-tran.lisp
msgid "Can't tell if array is simple."
msgstr "Ancay't elltay ifway arrayway isway implesay."

#: target:compiler/array-tran.lisp
msgid "Vector length unknown, must call length at runtime."
msgstr "Ectorvay engthlay unknownway, ustmay allcay engthlay atway untimeray."

#: target:compiler/array-tran.lisp
msgid "Can't tell the rank at compile time."
msgstr "Ancay't elltay ethay ankray atway ompilecay imetay."

#: target:compiler/array-tran.lisp
msgid ""
"Array type ambiguous; must call ~\n"
"\t              array-has-fill-pointer-p at runtime."
msgstr ""
"Arrayway ypetay ambiguousway; ustmay allcay ~\n"
"\t              arrayway-ashay-illfay-ointerpay-p atway untimeray."

#: target:compiler/srctran.lisp target:compiler/seqtran.lisp
msgid "open code"
msgstr "openway odecay"

#: target:compiler/seqtran.lisp
msgid "convert to EQ test"
msgstr "onvertcay otay EQWAY esttay"

#: target:compiler/seqtran.lisp
msgid "Item might be a number"
msgstr "Itemway ightmay ebay away umbernay"

#: target:compiler/seqtran.lisp
msgid "inline expand"
msgstr "inlineway expandway"

#: target:compiler/seqtran.lisp
msgid "Specified output type ~S is not a sequence type"
msgstr "Ecifiedspay outputway ypetay ~S isway otnay away equencesay ypetay"

#: target:compiler/typetran.lisp
msgid ""
"Define-Type-Predicate Name Type\n"
"  Establish an association between the type predicate Name and the\n"
"  corresponding Type.  This causes the type predicate to be recognized for\n"
"  purposes of optimization."
msgstr ""
"Efineday-Ypetay-Edicatepray Amenay Ypetay\n"
"  Establishway anway associationway etweenbay ethay ypetay edicatepray "
"Amenay andway ethay\n"
"  orrespondingcay Ypetay.  Isthay ausescay ethay ypetay edicatepray otay "
"ebay ecognizedray orfay\n"
"  urposespay ofway optimizationway."

#: target:compiler/typetran.lisp
msgid "Can't open-code test of non-constant type."
msgstr "Ancay't openway-odecay esttay ofway onnay-onstantcay ypetay."

#: target:compiler/typetran.lisp
msgid "Can't open-code test of unknown type ~S."
msgstr "Ancay't openway-odecay esttay ofway unknownway ypetay ~S."

#: target:compiler/typetran.lisp
msgid ""
"Can't compile TYPEP of anonymous or undefined ~\n"
"\t\t\tclass:~%  ~S"
msgstr ""
"Ancay't ompilecay YPEPTAY ofway anonymousway orway undefinedway ~\n"
"\t\t\tassclay:~%  ~S"

#: target:compiler/typetran.lisp
msgid "Illegal type specifier for Typep: ~S."
msgstr "Illegalway ypetay ecifierspay orfay Ypeptay: ~S."

#: target:compiler/float-tran.lisp
msgid "use inline fixnum operations"
msgstr "useway inlineway ixnumfay operationsway"

#: target:compiler/float-tran.lisp
msgid "use inline (unsigned-byte 32) operations"
msgstr "useway inlineway (unsignedway-ytebay 32) operationsway"

#: target:compiler/float-tran.lisp
msgid "use inline (signed-byte 32) operations"
msgstr "useway inlineway (ignedsay-ytebay 32) operationsway"

#: target:compiler/float-tran.lisp
msgid "Shouldn't happen"
msgstr "Ouldnshay't appenhay"

#: target:compiler/float-tran.lisp
msgid "Can't open-code float to rational comparison."
msgstr "Ancay't openway-odecay oatflay otay ationalray omparisoncay."

#: target:compiler/float-tran.lisp
msgid "~S doesn't have a precise float representation."
msgstr "~S oesnday't avehay away ecisepray oatflay epresentationray."

#: target:compiler/float-tran.lisp
msgid ""
"Unable to avoid inline argument range check~@\n"
"                      because the argument range (~s) was not within 2^~D"
msgstr ""
"Unableway otay avoidway inlineway argumentway angeray eckchay~@\n"
"                      ecausebay ethay argumentway angeray (~s) asway otnay "
"ithinway 2^~D"

#: target:compiler/float-tran.lisp
msgid ""
"Unable to avoid inline argument range check~@\n"
"                   because the argument range (~s) was not within 2^~D"
msgstr ""
"Unableway otay avoidway inlineway argumentway angeray eckchay~@\n"
"                   ecausebay ethay argumentway angeray (~s) asway otnay "
"ithinway 2^~D"

#: target:compiler/float-tran.lisp
msgid "Float zero bound ~s not correctly canonicalised?"
msgstr "Oatflay erozay oundbay ~s otnay orrectlycay anonicalisedcay?"

#: target:compiler/float-tran.lisp
msgid "Computes fl(a+b) and err(a+b), assuming |a| >= |b|"
msgstr ""
"Omputescay flay(away+b) andway errway(away+b), assumingway |away| >= |b|"

#: target:compiler/float-tran.lisp
msgid "Computes fl(a+b) and err(a+b)"
msgstr "Omputescay flay(away+b) andway errway(away+b)"

#: target:compiler/float-tran.lisp
msgid "Add the double-double A0,A1 to the double-double B0,B1"
msgstr ""
"Addway ethay oubleday-oubleday Away0,Away1 otay ethay oubleday-oubleday B0,B1"

#: target:compiler/float-tran.lisp
msgid "Compute fl(a-b) and err(a-b), assuming |a| >= |b|"
msgstr ""
"Omputecay flay(away-b) andway errway(away-b), assumingway |away| >= |b|"

#: target:compiler/float-tran.lisp
msgid "Compute fl(a-b) and err(a-b)"
msgstr "Omputecay flay(away-b) andway errway(away-b)"

#: target:compiler/float-tran.lisp
msgid "Subtract the double-double B0,B1 from A0,A1"
msgstr "Ubtractsay ethay oubleday-oubleday B0,B1 omfray Away0,Away1"

#: target:compiler/float-tran.lisp
msgid "Compute double-double = double - double-double"
msgstr "Omputecay oubleday-oubleday = oubleday - oubleday-oubleday"

#: target:compiler/float-tran.lisp
msgid "Subtract the double B from the double-double A0,A1"
msgstr "Ubtractsay ethay oubleday B omfray ethay oubleday-oubleday Away0,Away1"

#: target:compiler/float-tran.lisp
msgid ""
"Split the double-float number a into a-hi and a-lo such that a =\n"
"  a-hi + a-lo and a-hi contains the upper 26 significant bits of a and\n"
"  a-lo contains the lower 26 bits."
msgstr ""
"Litspay ethay oubleday-oatflay umbernay away intoway away-ihay andway away-"
"olay uchsay atthay away =\n"
"  away-ihay + away-olay andway away-ihay ontainscay ethay upperway 26 "
"ignificantsay itsbay ofway away andway\n"
"  away-olay ontainscay ethay owerlay 26 itsbay."

#: target:compiler/float-tran.lisp
msgid "Compute fl(a*b) and err(a*b)"
msgstr "Omputecay flay(away*b) andway errway(away*b)"

#: target:compiler/float-tran.lisp
msgid ""
"Compute fl(a*a) and err(a*b).  This is a more efficient\n"
"  implementation of two-prod"
msgstr ""
"Omputecay flay(away*away) andway errway(away*b).  Isthay isway away oremay "
"efficientway\n"
"  implementationway ofway wotay-odpray"

#: target:compiler/float-tran.lisp
msgid "Multiply the double-double A0,A1 with B0,B1"
msgstr "Ultiplymay ethay oubleday-oubleday Away0,Away1 ithway B0,B1"

#: target:compiler/float-tran.lisp
msgid "Add the double-double A0,A1 to the double B"
msgstr "Addway ethay oubleday-oubleday Away0,Away1 otay ethay oubleday B"

#: target:compiler/float-tran.lisp
msgid "Divide the double-double A0,A1 by B0,B1"
msgstr "Ivideday ethay oubleday-oubleday Away0,Away1 ybay B0,B1"

#: target:compiler/float-tran.lisp
msgid "Square"
msgstr "Quaresay"

#: target:compiler/saptran.lisp
msgid "FOREIGN-SYMBOL-ADDRESS flavor ~S is not :CODE or :DATA"
msgstr ""
"OREIGNFAY-YMBOLSAY-ADDRESSWAY avorflay ~S isway otnay :ODECAY orway :ATADAY"

#: target:compiler/srctran.lisp
msgid "Function doesn't have fixed argument count."
msgstr "Unctionfay oesnday't avehay ixedfay argumentway ountcay."

#: target:compiler/srctran.lisp
msgid "convert NTHCDR to CAxxR"
msgstr "onvertcay THCDRNAY otay Axxrcay"

#: target:compiler/srctran.lisp
msgid "Unknown bound type in make-interval!"
msgstr "Unknownway oundbay ypetay inway akemay-intervalway!"

#: target:compiler/srctran.lisp
msgid "This shouldn't happen!"
msgstr "Isthay ouldnshay't appenhay!"

#: target:compiler/srctran.lisp
msgid "convert to inline logical ops"
msgstr "onvertcay otay inlineway ogicallay opsway"

#: target:compiler/srctran.lisp
msgid "BOOLE code is not a constant."
msgstr "OOLEBAY odecay isway otnay away onstantcay."

#: target:compiler/srctran.lisp
msgid "~S illegal control arg to BOOLE."
msgstr "~S illegalway ontrolcay argway otay OOLEBAY."

#: target:compiler/srctran.lisp
msgid "convert x*2^k to shift"
msgstr "onvertcay x*2^k otay iftshay"

#: target:compiler/srctran.lisp
msgid "convert division by 2^k to shift"
msgstr "onvertcay ivisionday ybay 2^k otay iftshay"

#: target:compiler/srctran.lisp
msgid "convert remainder mod 2^k to LOGAND"
msgstr "onvertcay emainderray odmay 2^k otay OGANDLAY"

#: target:compiler/srctran.lisp
msgid "fold identity operations"
msgstr "oldfay identityway operationsway"

#: target:compiler/srctran.lisp
msgid "fold identity operation"
msgstr "oldfay identityway operationway"

#: target:compiler/srctran.lisp
msgid "convert (- 0 x) to negate"
msgstr "onvertcay (- 0 x) otay egatenay"

#: target:compiler/srctran.lisp
msgid "convert (* x 0) to 0."
msgstr "onvertcay (* x 0) otay 0."

#: target:compiler/srctran.lisp
msgid "fold zero arg"
msgstr "oldfay erozay argway"

#: target:compiler/srctran.lisp
msgid "Unexpected types: ~s ~s~%"
msgstr "Unexpectedway ypestay: ~s ~s~%"

#: target:compiler/srctran.lisp
msgid "recode as multiplication or sqrt"
msgstr "ecoderay asway ultiplicationmay orway qrtsay"

#: target:compiler/srctran.lisp
msgid "convert to simpler equality predicate"
msgstr "onvertcay otay implersay equalityway edicatepray"

#: target:compiler/srctran.lisp
msgid "Operands might not be the same type."
msgstr "Operandsway ightmay otnay ebay ethay amesay ypetay."

#: target:compiler/srctran.lisp
msgid "~s: too few args (~d), need at least ~d"
msgstr "~s: ootay ewfay argsway (~d), eednay atway eastlay ~d"

#: target:compiler/srctran.lisp
msgid "~s: too many args (~d), wants at most ~d"
msgstr "~s: ootay anymay argsway (~d), antsway atway ostmay ~d"

#: target:compiler/srctran.lisp
msgid "Control string is not a constant."
msgstr "Ontrolcay ingstray isway otnay away onstantcay."

#: target:compiler/srctran.lisp
msgid ""
"When non-NIL, the compiler will generate code utilizing modular\n"
"  arithmetic.  Set to NIL to disable this, if you don't want modular\n"
"  arithmetic in some cases."
msgstr ""
"Enwhay onnay-ILNAY, ethay ompilercay illway enerategay odecay utilizingway "
"odularmay\n"
"  arithmeticway.  Etsay otay ILNAY otay isableday isthay, ifway ouyay "
"onday't antway odularmay\n"
"  arithmeticway inway omesay asescay."

#: target:compiler/locall.lisp
msgid ""
"Couldn't inline expand because expansion ~\n"
"\t\t\t\t   calls this let-converted local function:~\n"
"\t\t\t\t   ~%  ~S"
msgstr ""
"Ouldncay't inlineway expandway ecausebay expansionway ~\n"
"\t\t\t\t   allscay isthay etlay-onvertedcay ocallay unctionfay:~\n"
"\t\t\t\t   ~%  ~S"

#: target:compiler/locall.lisp
msgid "Can't local-call functions with &MORE args."
msgstr "Ancay't ocallay-allcay unctionsfay ithway &OREMAY argsway."

#: target:compiler/locall.lisp
msgid ""
"Function called with odd number of ~\n"
"\t  \t\t     arguments in keyword portion."
msgstr ""
"Unctionfay alledcay ithway oddway umbernay ofway ~\n"
"\t  \t\t     argumentsway inway eywordkay ortionpay."

#: target:compiler/locall.lisp
msgid "Non-constant keyword in keyword call."
msgstr "Onnay-onstantcay eywordkay inway eywordkay allcay."

#: target:compiler/locall.lisp
msgid "non-constant :ALLOW-OTHER-KEYS value"
msgstr "onnay-onstantcay :ALLOWWAY-OTHERWAY-EYSKAY aluevay"

#: target:compiler/locall.lisp
msgid "Function called with unknown argument keyword ~S."
msgstr "Unctionfay alledcay ithway unknownway argumentway eywordkay ~S."

#: target:compiler/checkgen.lisp
msgid "~:[A possible~;The~] binding of ~S"
msgstr "~:[Away ossiblepay~;Ethay~] indingbay ofway ~S"

#: target:compiler/checkgen.lisp
msgid "~:[This~;~:*~A~] is not a ~<~%~9T~:;~S:~>~%  ~S"
msgstr "~:[Isthay~;~:*~Away~] isway otnay away ~<~%~9T~:;~S:~>~%  ~S"

#: target:compiler/checkgen.lisp
msgid "~:[Result~;~:*~A~] is a ~S, ~<~%~9T~:;not a ~S.~>"
msgstr "~:[Esultray~;~:*~Away~] isway away ~S, ~<~%~9T~:;otnay away ~S.~>"

#: target:compiler/constraint.lisp
msgid ""
"*** Unreachable code in constraint ~\n"
"\t\t\t  propagation...  Bug?"
msgstr ""
"*** Unreachableway odecay inway onstraintcay ~\n"
"\t\t\t  opagationpray...  Ugbay?"

#: target:compiler/tn.lisp
msgid ""
"Do-Packed-TNs (TN-Var Component [Result]) Declaration* Form*\n"
"  Iterate over all packed TNs allocated in Component."
msgstr ""
"Oday-Ackedpay-Nstay (NTAY-Arvay Omponentcay [Esultray]) Eclarationday* "
"Ormfay*\n"
"  Iterateway overway allway ackedpay Nstay allocatedway inway Omponentcay."

#: target:compiler/tn.lisp
msgid "SC ~S has no :unbounded :save-p NIL alternate SC."
msgstr "SCAY ~S ashay onay :unboundedway :avesay-p ILNAY alternateway SCAY."

#: target:compiler/life.lisp
msgid "More operand ~S used more than once in its VOP."
msgstr "Oremay operandway ~S usedway oremay anthay onceway inway itsway OPVAY."

#: target:compiler/debug-dump.lisp
msgid ""
"Extract the namestring from FILE-INFO for the DEBUG-SOURCE.  \n"
"Return FILE-INFO's untruename (e.g., target:foo) if it is absolute;\n"
"otherwise the truename."
msgstr ""
"Extractway ethay amestringnay omfray ILEFAY-INFOWAY orfay ethay EBUGDAY-"
"OURCESAY.  \n"
"Eturnray ILEFAY-INFOWAY's untruenameway (e.g., argettay:oofay) ifway itway "
"isway absoluteway;\n"
"otherwiseway ethay uenametray."

#: target:compiler/generic/utils.lisp
msgid "Make a fixnum out of NUM.  (i.e. shift by two bits if it will fit.)"
msgstr ""
"Akemay away ixnumfay outway ofway UMNAY.  (i.e. iftshay ybay wotay itsbay "
"ifway itway illway itfay.)"

#: target:compiler/generic/utils.lisp
msgid "~D is too big for a fixnum."
msgstr "~D isway ootay igbay orfay away ixnumfay."

#: target:compiler/generic/utils.lisp
msgid "Returns the byte offset of the static symbol Symbol."
msgstr ""
"Eturnsray ethay ytebay offsetway ofway ethay taticsay ymbolsay Ymbolsay."

#: target:compiler/generic/utils.lisp
msgid "~S is not a static symbol."
msgstr "~S isway otnay away taticsay ymbolsay."

#: target:compiler/generic/utils.lisp
msgid "Given a byte offset, Offset, returns the appropriate static symbol."
msgstr ""
"Ivengay away ytebay offsetway, Offsetway, eturnsray ethay appropriateway "
"taticsay ymbolsay."

#: target:compiler/generic/utils.lisp
msgid "Byte offset, ~D, is not correct."
msgstr "Ytebay offsetway, ~D, isway otnay orrectcay."

#: target:compiler/generic/utils.lisp
msgid ""
"Return the (byte) offset from NIL to the start of the fdefn object\n"
"   for the static function NAME."
msgstr ""
"Eturnray ethay (ytebay) offsetway omfray ILNAY otay ethay tartsay ofway "
"ethay defnfay objectway\n"
"   orfay ethay taticsay unctionfay AMENAY."

#: target:compiler/generic/utils.lisp
msgid "~S isn't a static function."
msgstr "~S isnway't away taticsay unctionfay."

#: target:compiler/generic/utils.lisp
msgid ""
"Given a byte offset, Offset, returns the appropriate static function\n"
"   symbol."
msgstr ""
"Ivengay away ytebay offsetway, Offsetway, eturnsray ethay appropriateway "
"taticsay unctionfay\n"
"   ymbolsay."

#: target:compiler/generic/primtype.lisp
msgid ""
"An a-list for mapping simple array element types to their\n"
"  corresponding primitive types."
msgstr ""
"Anway away-istlay orfay appingmay implesay arrayway elementway ypestay otay "
"eirthay\n"
"  orrespondingcay imitivepray ypestay."

#: target:compiler/aliencomp.lisp
msgid "Slot is not constant, so cannot open code access."
msgstr "Otslay isway otnay onstantcay, osay annotcay openway odecay accessway."

#: target:compiler/aliencomp.lisp
msgid "~S doesn't have a slot named ~S"
msgstr "~S oesnday't avehay away otslay amednay ~S"

#: target:compiler/aliencomp.lisp
msgid "Too many indices for pointer deref: ~D"
msgstr "Ootay anymay indicesway orfay ointerpay erefday: ~D"

#: target:compiler/aliencomp.lisp
msgid "Unknown element size."
msgstr "Unknownway elementway izesay."

#: target:compiler/aliencomp.lisp
msgid "Unknown element alignment."
msgstr "Unknownway elementway alignmentway."

#: target:compiler/aliencomp.lisp
msgid "Incorrect number of indices."
msgstr "Incorrectway umbernay ofway indicesway."

#: target:compiler/aliencomp.lisp
msgid "Element size unknown."
msgstr "Elementway izesay unknownway."

#: target:compiler/aliencomp.lisp
msgid "Element alignment unknown."
msgstr "Elementway alignmentway unknownway."

#: target:compiler/aliencomp.lisp
msgid "~S not either a pointer or array type."
msgstr "~S otnay eitherway away ointerpay orway arrayway ypetay."

#: target:compiler/aliencomp.lisp
msgid "Info not constant; can't open code."
msgstr "Infoway otnay onstantcay; ancay't openway odecay."

#: target:compiler/aliencomp.lisp
msgid "Local Alien Info isn't constant?"
msgstr "Ocallay Alienway Infoway isnway't onstantcay?"

#: target:compiler/aliencomp.lisp
msgid "Aliens of type ~S cannot be represented immediately."
msgstr "Aliensway ofway ypetay ~S annotcay ebay epresentedray immediatelyway."

#: target:compiler/aliencomp.lisp
msgid "This should be dead-code eleminated."
msgstr "Isthay ouldshay ebay eadday-odecay eleminatedway."

#: target:compiler/aliencomp.lisp
msgid "This shouldn't happen."
msgstr "Isthay ouldnshay't appenhay."

#: target:compiler/aliencomp.lisp
msgid "Alien type not constant; cannot open code."
msgstr "Alienway ypetay otnay onstantcay; annotcay openway odecay."

#: target:compiler/aliencomp.lisp
msgid ""
"Could not optimize away %SAP-ALIEN: forced to do runtime ~@\n"
"\t    allocation of alien-value structure."
msgstr ""
"Ouldcay otnay optimizeway awayway %APSAY-ALIENWAY: orcedfay otay oday "
"untimeray ~@\n"
"\t    allocationway ofway alienway-aluevay ucturestray."

#: target:compiler/aliencomp.lisp
msgid "Type not constant at compile time; can't open code."
msgstr ""
"Ypetay otnay onstantcay atway ompilecay imetay; ancay't openway odecay."

#: target:compiler/aliencomp.lisp
msgid "Can't tell function type at compile time."
msgstr "Ancay't elltay unctionfay ypetay atway ompilecay imetay."

#: target:compiler/aliencomp.lisp
msgid "Wrong number of arguments.  Expected ~D, got ~D."
msgstr "Ongwray umbernay ofway argumentsway.  Expectedway ~D, otgay ~D."

#: target:compiler/aliencomp.lisp
msgid "Something is broken."
msgstr "Omethingsay isway okenbray."

#: target:compiler/aliencomp.lisp
msgid "No unique move-arg-vop for moves in SC ~S."
msgstr "Onay uniqueway ovemay-argway-opvay orfay ovesmay inway SCAY ~S."

#: target:compiler/ltv.lisp
msgid ""
"Arrange for FORM to be evaluated at load-time and use the value produced\n"
"   as if it were a constant.  If READ-ONLY-P is non-NIL, then the resultant\n"
"   object is guaranteed to never be modified, so it can be put in read-only\n"
"   storage."
msgstr ""
"Arrangeway orfay ORMFAY otay ebay evaluatedway atway oadlay-imetay andway "
"useway ethay aluevay oducedpray\n"
"   asway ifway itway ereway away onstantcay.  Ifway EADRAY-ONLYWAY-P isway "
"onnay-ILNAY, enthay ethay esultantray\n"
"   objectway isway uaranteedgay otay evernay ebay odifiedmay, osay itway "
"ancay ebay utpay inway eadray-onlyway\n"
"   toragesay."

#: target:compiler/ltv.lisp
msgid "(during EVAL of LOAD-TIME-VALUE)~%~A"
msgstr "(uringday EVALWAY ofway OADLAY-IMETAY-ALUEVAY)~%~Away"

#: target:compiler/gtn.lisp
msgid ""
"Return value count mismatch prevents known return ~\n"
"\t\t       from these functions:~\n"
"\t\t       ~{~%  ~A~}"
msgstr ""
"Eturnray aluevay ountcay ismatchmay eventspray nownkay eturnray ~\n"
"\t\t       omfray esethay unctionsfay:~\n"
"\t\t       ~{~%  ~Away~}"

#: target:compiler/gtn.lisp
msgid ""
"Return type not fixed values, so can't use known return ~\n"
"\t\t      convention:~%  ~S"
msgstr ""
"Eturnray ypetay otnay ixedfay aluesvay, osay ancay't useway nownkay eturnray "
"~\n"
"\t\t      onventioncay:~%  ~S"

#: target:compiler/ltn.lisp
msgid ""
"Unable to check type assertion in unknown-values ~\n"
"\t                context:~% ~S"
msgstr ""
"Unableway otay eckchay ypetay assertionway inway unknownway-aluesvay ~\n"
"\t                ontextcay:~% ~S"

#: target:compiler/represent.lisp target:compiler/ir2tran.lisp
#: target:compiler/ltn.lisp
msgid "Neither CONT nor TN supplied."
msgstr "Eithernay ONTCAY ornay NTAY uppliedsay."

#: target:compiler/ltn.lisp
msgid "~S has :MORE results with :TRANSLATE."
msgstr "~S ashay :OREMAY esultsray ithway :ANSLATETRAY."

#: target:compiler/ltn.lisp
msgid ""
"This is the maximum number of possible optimization alternatives will be\n"
"  mentioned in a particular efficiency note.  NIL means no limit."
msgstr ""
"Isthay isway ethay aximummay umbernay ofway ossiblepay optimizationway "
"alternativesway illway ebay\n"
"  entionedmay inway away articularpay efficiencyway otenay.  ILNAY eansmay "
"onay imitlay."

#: target:compiler/ltn.lisp
msgid ""
"This is the minumum cost difference between the chosen implementation and\n"
"  the next alternative that justifies an efficiency note."
msgstr ""
"Isthay isway ethay inumummay ostcay ifferenceday etweenbay ethay osenchay "
"implementationway andway\n"
"  ethay extnay alternativeway atthay ustifiesjay anway efficiencyway otenay."

#: target:compiler/ltn.lisp
msgid "This shouldn't happen!  Bug?"
msgstr "Isthay ouldnshay't appenhay!  Ugbay?"

#: target:compiler/ltn.lisp
msgid "Template guard failed."
msgstr "Emplatetay uardgay ailedfay."

#: target:compiler/ltn.lisp
msgid "Template is not safe, yet we were counting on it."
msgstr ""
"Emplatetay isway otnay afesay, etyay eway ereway ountingcay onway itway."

#: target:compiler/ltn.lisp
msgid "Argument types invalid."
msgstr "Argumentway ypestay invalidway."

#: target:compiler/ltn.lisp
msgid "Argument primitive types:~%  ~S"
msgstr "Argumentway imitivepray ypestay:~%  ~S"

#: target:compiler/ltn.lisp
msgid "Argument type assertions:~%  ~S"
msgstr "Argumentway ypetay assertionsway:~%  ~S"

#: target:compiler/ltn.lisp
msgid "Conditional in a non-conditional context."
msgstr "Onditionalcay inway away onnay-onditionalcay ontextcay."

#: target:compiler/ltn.lisp
msgid "Result types invalid."
msgstr "Esultray ypestay invalidway."

#: target:compiler/ltn.lisp
msgid "Unable to do ~A (cost ~D) because:"
msgstr "Unableway otay oday ~Away (ostcay ~D) ecausebay:"

#: target:compiler/ltn.lisp
msgid ""
"Can't trust output type assertion under safe ~\n"
"\t\t       policy."
msgstr ""
"Ancay't usttray outputway ypetay assertionway underway afesay ~\n"
"\t\t       olicypay."

#: target:compiler/ltn.lisp
msgid "Recursive known function definition."
msgstr "Ecursiveray nownkay unctionfay efinitionday."

#: target:compiler/ir2tran.lisp
msgid ""
"Always perform stack clearing if non-NIL, independent of the\n"
"compilation policy"
msgstr ""
"Alwaysway erformpay tacksay earingclay ifway onnay-ILNAY, independentway "
"ofway ethay\n"
"ompilationcay olicypay"

#: target:compiler/ir2tran.lisp
msgid ""
"If non-NIL and the compilation policy allows, stack clearing is enabled."
msgstr ""
"Ifway onnay-ILNAY andway ethay ompilationcay olicypay allowsway, tacksay "
"earingclay isway enabledway."

#: target:compiler/ir2tran.lisp
msgid "~@<~2I~_~S ~_not found in ~_~S~:>"
msgstr "~@<~2Iway~_~S ~_otnay oundfay inway ~_~S~:>"

#: target:compiler/represent.lisp
msgid "Couldn't find REF?"
msgstr "Ouldncay't indfay EFRAY?"

#: target:compiler/represent.lisp
msgid ""
"Representation selection flamed out for no obvious reason.~@\n"
"\t          Try again after recompiling the VM definition."
msgstr ""
"Epresentationray electionsay amedflay outway orfay onay obviousway easonray."
"~@\n"
"\t          Ytray againway afterway ecompilingray ethay MVAY efinitionday."

#: target:compiler/represent.lisp
msgid ""
"~S is not valid as the ~:R ~:[result~;argument~] to the~@\n"
"\t        ~S VOP, since the TN's primitive type ~S allows SCs:~%  ~S~@\n"
"\t\t~:[which cannot be coerced or loaded into the allowed SCs:~\n"
"\t\t~%  ~S~;~*~]~:[~;~@\n"
"\t\tCurrent cost info inconsistent with that in effect at compile ~\n"
"\t\ttime.  Recompile.~%Compilation order may be incorrect.~]"
msgstr ""
"~S isway otnay alidvay asway ethay ~:R ~:[esultray~;argumentway~] otay "
"ethay~@\n"
"\t        ~S OPVAY, incesay ethay NTAY's imitivepray ypetay ~S allowsway "
"Sscay:~%  ~S~@\n"
"\t\t~:[ichwhay annotcay ebay oercedcay orway oadedlay intoway ethay "
"allowedway Sscay:~\n"
"\t\t~%  ~S~;~*~]~:[~;~@\n"
"\t\tUrrentcay ostcay infoway inconsistentway ithway atthay inway effectway "
"atway ompilecay ~\n"
"\t\timetay.  Ecompileray.~%Ompilationcay orderway aymay ebay incorrectway.~]"

#: target:compiler/represent.lisp
msgid ""
"Representation selection flamed out for no ~\n"
"\t\t             obvious reason."
msgstr ""
"Epresentationray electionsay amedflay outway orfay onay ~\n"
"\t\t             obviousway easonray."

#: target:compiler/represent.lisp
msgid ""
"~S is not valid as the ~:R ~:[result~;argument~] to VOP:~\n"
"\t        ~%  ~S~%Primitive type: ~S~@\n"
"\t\tSC restrictions:~%  ~S~@\n"
"\t\t~@[The primitive type disallows these loadable SCs:~%  ~S~%~]~\n"
"\t\t~@[No move VOPs are defined to coerce to these allowed SCs:~\n"
"\t\t~%  ~S~%~]~\n"
"\t\t~@[These move VOPs couldn't be used due to operand type ~\n"
"\t\trestrictions:~%  ~S~%~]~\n"
"\t\t~:[~;~@\n"
"\t\tCurrent cost info inconsistent with that in effect at compile ~\n"
"\t\ttime.  Recompile.~%Compilation order may be incorrect.~]"
msgstr ""
"~S isway otnay alidvay asway ethay ~:R ~:[esultray~;argumentway~] otay OPVAY:"
"~\n"
"\t        ~%  ~S~%Imitivepray ypetay: ~S~@\n"
"\t\tSCAY estrictionsray:~%  ~S~@\n"
"\t\t~@[Ethay imitivepray ypetay isallowsday esethay oadablelay Sscay:~%  ~S~%"
"~]~\n"
"\t\t~@[Onay ovemay Opsvay areway efinedday otay oercecay otay esethay "
"allowedway Sscay:~\n"
"\t\t~%  ~S~%~]~\n"
"\t\t~@[Esethay ovemay Opsvay ouldncay't ebay usedway ueday otay operandway "
"ypetay ~\n"
"\t\testrictionsray:~%  ~S~%~]~\n"
"\t\t~:[~;~@\n"
"\t\tUrrentcay ostcay infoway inconsistentway ithway atthay inway effectway "
"atway ompilecay ~\n"
"\t\timetay.  Ecompileray.~%Ompilationcay orderway aymay ebay incorrectway.~]"

#: target:compiler/represent.lisp
msgid ""
"No :MOVE-ARGUMENT VOP defined to move ~S (SC ~S) to ~\n"
"          ~S (SC ~S.)"
msgstr ""
"Onay :OVEMAY-ARGUMENTWAY OPVAY efinedday otay ovemay ~S (SCAY ~S) otay ~\n"
"          ~S (SCAY ~S.)"

#: target:compiler/represent.lisp
msgid ""
"No move function defined to load SC ~S from constant ~\n"
"\t             SC ~S."
msgstr ""
"Onay ovemay unctionfay efinedday otay oadlay SCAY ~S omfray onstantcay ~\n"
"\t             SCAY ~S."

#: target:compiler/represent.lisp
msgid ""
"No move function defined to load SC ~S from alternate ~\n"
"\t             SC ~S."
msgstr ""
"Onay ovemay unctionfay efinedday otay oadlay SCAY ~S omfray alternateway ~\n"
"\t             SCAY ~S."

#: target:compiler/represent.lisp
msgid ""
"No move function defined to save SC ~S to alternate ~\n"
"\t             SC ~S."
msgstr ""
"Onay ovemay unctionfay efinedday otay avesay SCAY ~S otay alternateway ~\n"
"\t             SCAY ~S."

#: target:compiler/represent.lisp
msgid "<return value>"
msgstr "<eturnray aluevay>"

#: target:compiler/represent.lisp
msgid "Couldn't fine op?  Bug!"
msgstr "Ouldncay't inefay opway?  Ugbay!"

#: target:compiler/represent.lisp
msgid ""
"Doing ~A (cost ~D)~:[~2*~; ~:[to~;from~] ~S~], for:~%~6T~\n"
"\t       The ~:R ~:[result~;argument~] of ~A."
msgstr ""
"Oingday ~Away (ostcay ~D)~:[~2*~; ~:[otay~;omfray~] ~S~], orfay:~%~6T~\n"
"\t       Ethay ~:R ~:[esultray~;argumentway~] ofway ~Away."

#: target:compiler/represent.lisp
msgid "Doing ~A (cost ~D)~@[ from ~S~]~@[ to ~S~]."
msgstr "Oingday ~Away (ostcay ~D)~@[ omfray ~S~]~@[ otay ~S~]."

#: target:compiler/generic/vm-tran.lisp
msgid ""
"Argument and result bit arrays not the same length:~\n"
"\t     \t     ~%  ~S~%  ~S"
msgstr ""
"Argumentway andway esultray itbay arraysway otnay ethay amesay engthlay:~\n"
"\t     \t     ~%  ~S~%  ~S"

#: target:compiler/codegen.lisp
msgid "Returns the number of bytes used by the code object header."
msgstr ""
"Eturnsray ethay umbernay ofway ytesbay usedway ybay ethay odecay objectway "
"eaderhay."

#: target:compiler/codegen.lisp
msgid ""
"The size of the Name'd SB in the currently compiled component.  Useful\n"
"  mainly for finding the size for allocating stack frames."
msgstr ""
"Ethay izesay ofway ethay Amenay'd BSAY inway ethay urrentlycay ompiledcay "
"omponentcay.  Usefulway\n"
"  ainlymay orfay indingfay ethay izesay orfay allocatingway tacksay amesfray."

#: target:compiler/codegen.lisp
msgid ""
"Return the TN that is used to hold the number stack frame-pointer in VOP's\n"
"  function.  Returns NIL if no number stack frame was allocated."
msgstr ""
"Eturnray ethay NTAY atthay isway usedway otay oldhay ethay umbernay tacksay "
"amefray-ointerpay inway OPVAY's\n"
"  unctionfay.  Eturnsray ILNAY ifway onay umbernay tacksay amefray asway "
"allocatedway."

#: target:compiler/codegen.lisp
msgid ""
"Return the TN that is used to hold the number stack frame-pointer in the\n"
"  function designated by 2env.  Returns NIL if no number stack frame was\n"
"  allocated."
msgstr ""
"Eturnray ethay NTAY atthay isway usedway otay oldhay ethay umbernay tacksay "
"amefray-ointerpay inway ethay\n"
"  unctionfay esignatedday ybay 2envway.  Eturnsray ILNAY ifway onay umbernay "
"tacksay amefray asway\n"
"  allocatedway."

#: target:compiler/codegen.lisp
msgid ""
"Return the TN used for passing the return PC in a local call to the "
"function\n"
"  designated by 2env."
msgstr ""
"Eturnray ethay NTAY usedway orfay assingpay ethay eturnray CPAY inway away "
"ocallay allcay otay ethay unctionfay\n"
"  esignatedday ybay 2envway."

#: target:compiler/codegen.lisp
msgid ""
"Set to NIL to inhibit assembly-level optimization.  For compiler debugging,\n"
"  rather than policy control."
msgstr ""
"Etsay otay ILNAY otay inhibitway assemblyway-evellay optimizationway.  Orfay "
"ompilercay ebuggingday,\n"
"  atherray anthay olicypay ontrolcay."

#: target:compiler/codegen.lisp
msgid "In the ~A segment:~%"
msgstr "Inway ethay ~Away egmentsay:~%"

#: target:compiler/codegen.lisp
msgid "~|~%Assembly code for ~S~2%"
msgstr "~|~%Assemblyway odecay orfay ~S~2%"

#: target:compiler/codegen.lisp
msgid "Missing generator for ~S.~%"
msgstr "Issingmay eneratorgay orfay ~S.~%"

#: target:compiler/debug.lisp
msgid ""
"This variable is bound to the format arguments when an error is signalled\n"
"  by Barf or Burp."
msgstr ""
"Isthay ariablevay isway oundbay otay ethay ormatfay argumentsway enwhay "
"anway errorway isway ignalledsay\n"
"  ybay Arfbay orway Urpbay."

#: target:compiler/debug.lisp
msgid ""
"Action taken by the Burp function when a possible compiler bug is detected.\n"
"  One of :Warn, :Error or :None."
msgstr ""
"Actionway akentay ybay ethay Urpbay unctionfay enwhay away ossiblepay "
"ompilercay ugbay isway etectedday.\n"
"  Oneway ofway :Arnway, :Errorway orway :Onenay."

#: target:compiler/debug.lisp
msgid ""
"Return a list of a the TNs that conflict with TN.  Sort of, kind of.  For\n"
"  debugging use only.  Probably doesn't work on :COMPONENT TNs."
msgstr ""
"Eturnray away istlay ofway away ethay Nstay atthay onflictcay ithway NTAY.  "
"Ortsay ofway, indkay ofway.  Orfay\n"
"  ebuggingday useway onlyway.  Obablypray oesnday't orkway onway :"
"OMPONENTCAY Nstay."

#: target:compiler/debug.lisp
msgid "Return the Nth VOP in the IR2-Block pointed to by Thing."
msgstr ""
"Eturnray ethay Thnay OPVAY inway ethay IRWAY2-Ockblay ointedpay otay ybay "
"Ingthay."

#: target:compiler/dump.lisp
msgid "Compiler bug: ~S not a legal fasload operator."
msgstr "Ompilercay ugbay: ~S otnay away egallay asloadfay operatorway."

#: target:compiler/dump.lisp
msgid "Tried to output ~D bytes, but only ~D made it."
msgstr "Iedtray otay outputway ~D ytesbay, utbay onlyway ~D ademay itway."

#: target:compiler/dump.lisp
msgid "This object cannot be dumped into a fasl file:~% ~S"
msgstr ""
"Isthay objectway annotcay ebay umpedday intoway away aslfay ilefay:~% ~S"

#: target:compiler/dump.lisp
msgid "~S already dumped?"
msgstr "~S alreadyway umpedday?"

#: target:compiler/dump.lisp
msgid "Warning: dumping ~s as 0l0~%"
msgstr "Arningway: umpingday ~s asway 0l0~%"

#: target:compiler/dump.lisp
msgid "Unable to dump long-float"
msgstr "Unableway otay umpday onglay-oatflay"

#: target:compiler/dump.lisp
msgid "Attempt to dump invalid structure:~%  ~S~%How did this happen?"
msgstr ""
"Attemptway otay umpday invalidway ucturestray:~%  ~S~%Owhay idday isthay "
"appenhay?"

#: target:compiler/dump.lisp
msgid "Dumping reference to obsolete class: ~S"
msgstr "Umpingday eferenceray otay obsoleteway assclay: ~S"

#: target:compiler/generic/core.lisp
msgid "Unresolved forward reference."
msgstr "Unresolvedway orwardfay eferenceray."

#: target:compiler/generic/core.lisp
msgid "#<Code Instruction Stream for ~S>"
msgstr "#<Odecay Instructionway Eamstray orfay ~S>"

#: target:compiler/generic/core.lisp
msgid "Writing ~D bytes to ~S would cause it to overflow."
msgstr "Itingwray ~D ytesbay otay ~S ouldway ausecay itway otay overflowway."

#: target:compiler/generic/core.lisp
msgid "Writing another byte to ~S would cause it to overflow."
msgstr ""
"Itingwray anotherway ytebay otay ~S ouldway ausecay itway otay overflowway."

#: target:compiler/eval-comp.lisp
msgid "Fatal error, aborting evaluation."
msgstr "Atalfay errorway, abortingway evaluationway."

#: target:compiler/eval-comp.lisp
msgid "Wrong argument count, wanted ~D and got ~D."
msgstr "Ongwray argumentway ountcay, antedway ~D andway otgay ~D."

#: target:compiler/eval-comp.lisp
msgid "Wrong number of arguments passed -- ~S."
msgstr "Ongwray umbernay ofway argumentsway assedpay -- ~S."

#: target:compiler/eval-comp.lisp
msgid "Function called with odd number of keyword arguments."
msgstr ""
"Unctionfay alledcay ithway oddway umbernay ofway eywordkay argumentsway."

#: target:compiler/eval-comp.lisp
msgid "Unknown keyword argument -- ~S."
msgstr "Unknownway eywordkay argumentway -- ~S."

#: target:compiler/eval.lisp
msgid "[PUSH: growing stack.]~%"
msgstr "[USHPAY: owinggray tacksay.]~%"

#: target:compiler/eval.lisp
msgid "pushing ~D.~%"
msgstr "ushingpay ~D.~%"

#: target:compiler/eval.lisp
msgid "Attempt to pop empty eval stack."
msgstr "Attemptway otay oppay emptyway evalway tacksay."

#: target:compiler/eval.lisp
msgid "popping ~D --> ~S.~%"
msgstr "oppingpay ~D --> ~S.~%"

#: target:compiler/eval.lisp
msgid "[EXTEND: growing stack.]~%"
msgstr "[EXTENDWAY: owinggray tacksay.]~%"

#: target:compiler/eval.lisp
msgid "extending to ~D.~%"
msgstr "extendingway otay ~D.~%"

#: target:compiler/eval.lisp
msgid "shrinking to ~D.~%"
msgstr "rinkingshay otay ~D.~%"

#: target:compiler/eval.lisp
msgid "setting top to ~D.~%"
msgstr "ettingsay optay otay ~D.~%"

#: target:compiler/eval.lisp
msgid ""
"If the interpreted function cache has more functions than this come GC "
"time,\n"
"  then attempt to prune it according to\n"
"  *INTERPRETED-FUNCTION-CACHE-THRESHOLD*."
msgstr ""
"Ifway ethay interpretedway unctionfay achecay ashay oremay unctionsfay "
"anthay isthay omecay CGAY imetay,\n"
"  enthay attemptway otay unepray itway accordingway otay\n"
"  *INTERPRETEDWAY-UNCTIONFAY-ACHECAY-RESHOLDTHAY*."

#: target:compiler/eval.lisp
msgid ""
"If an interpreted function goes uncalled for more than this many GCs, then\n"
"  it is eligible for flushing from the cache."
msgstr ""
"Ifway anway interpretedway unctionfay oesgay uncalledway orfay oremay anthay "
"isthay anymay Csgay, enthay\n"
"  itway isway eligibleway orfay ushingflay omfray ethay achecay."

#: target:compiler/eval.lisp
msgid ""
"Clear all entries in the eval function cache.  This allows the internal\n"
"  representation of the functions to be reclaimed, and also lazily forces\n"
"  macroexpansions to be recomputed."
msgstr ""
"Earclay allway entriesway inway ethay evalway unctionfay achecay.  Isthay "
"allowsway ethay internalway\n"
"  epresentationray ofway ethay unctionsfay otay ebay eclaimedray, andway "
"alsoway azilylay orcesfay\n"
"  acroexpansionsmay otay ebay ecomputedray."

#: target:compiler/eval.lisp
msgid "C::%UNKNOWN-VALUES should never be in interpreter's IR1."
msgstr ""
"C::%UNKNOWNWAY-ALUESVAY ouldshay evernay ebay inway interpreterway's IRWAY1."

#: target:compiler/byte-comp.lisp
msgid "Unknown XOP ~S"
msgstr "Unknownway OPXAY ~S"

#: target:compiler/byte-comp.lisp
msgid "Unknown inline function: ~S"
msgstr "Unknownway inlineway unctionfay: ~S"

#: target:compiler/byte-comp.lisp
msgid "Can't find ~S"
msgstr "Ancay't indfay ~S"

#: target:compiler/byte-comp.lisp
msgid "~|~%;;;; Byte component ~S~2%"
msgstr "~|~%;;;; Ytebay omponentcay ~S~2%"

#: target:compiler/byte-comp.lisp
msgid ";;; Functions:~%"
msgstr ";;; Unctionsfay:~%"

#: target:compiler/byte-comp.lisp
msgid "~%;;;Disassembly:~2%"
msgstr "~%;;;Isassemblyday:~2%"

#: target:compiler/byte-comp.lisp
msgid "<bogus index>"
msgstr "<ogusbay indexway>"

#: target:compiler/byte-comp.lisp
msgid "Entry point, frame-size=~D~%"
msgstr "Entryway ointpay, amefray-izesay=~D~%"

#: target:compiler/byte-comp.lisp
msgid "push-local ~D"
msgstr "ushpay-ocallay ~D"

#: target:compiler/byte-comp.lisp
msgid "push-arg ~D"
msgstr "ushpay-argway ~D"

#: target:compiler/byte-comp.lisp
msgid "push-const ~S"
msgstr "ushpay-onstcay ~S"

#: target:compiler/byte-comp.lisp
msgid "push-sys-const ~S"
msgstr "ushpay-yssay-onstcay ~S"

#: target:compiler/byte-comp.lisp
msgid "push-int ~D"
msgstr "ushpay-intway ~D"

#: target:compiler/byte-comp.lisp
msgid "push-neg-int ~D"
msgstr "ushpay-egnay-intway ~D"

#: target:compiler/byte-comp.lisp
msgid "pop-local ~D"
msgstr "oppay-ocallay ~D"

#: target:compiler/byte-comp.lisp
msgid "pop-n ~D"
msgstr "oppay-n ~D"

#: target:compiler/byte-comp.lisp
msgid "~:[~;named-~]call, ~D args"
msgstr "~:[~;amednay-~]allcay, ~D argsway"

#: target:compiler/byte-comp.lisp
msgid "~:[~;named-~]tail-call, ~D args"
msgstr "~:[~;amednay-~]ailtay-allcay, ~D argsway"

#: target:compiler/byte-comp.lisp
msgid "~:[~;named-~]multiple-call, ~D args"
msgstr "~:[~;amednay-~]ultiplemay-allcay, ~D argsway"

#: target:compiler/byte-comp.lisp
msgid "local call ~D, ~D args"
msgstr "ocallay allcay ~D, ~D argsway"

#: target:compiler/byte-comp.lisp
msgid "local tail-call ~D, ~D args"
msgstr "ocallay ailtay-allcay ~D, ~D argsway"

#: target:compiler/byte-comp.lisp
msgid "local multiple-call ~D, ~D args"
msgstr "ocallay ultiplemay-allcay ~D, ~D argsway"

#: target:compiler/byte-comp.lisp
msgid "return, ~D vals"
msgstr "eturnray, ~D alsvay"

#: target:compiler/byte-comp.lisp
msgid "branch ~D"
msgstr "anchbray ~D"

#: target:compiler/byte-comp.lisp
msgid "if-true ~D"
msgstr "ifway-uetray ~D"

#: target:compiler/byte-comp.lisp
msgid "if-false ~D"
msgstr "ifway-alsefay ~D"

#: target:compiler/byte-comp.lisp
msgid "if-eq ~D"
msgstr "ifway-eqway ~D"

#: target:compiler/byte-comp.lisp
msgid "xop ~A~@[ ~D~]"
msgstr "opxay ~Away~@[ ~D~]"

#: target:compiler/byte-comp.lisp
msgid "inline ~A"
msgstr "inlineway ~Away"

#: target:pcl/init.lisp target:pcl/defclass.lisp target:pcl/macros.lisp
msgid "Malformed plist in doplist, odd number of elements."
msgstr ""
"Alformedmay istplay inway oplistday, oddway umbernay ofway elementsway."

#: target:pcl/macros.lisp
msgid "~@<~S is not a legal class name.~@:>"
msgstr "~@<~S isway otnay away egallay assclay amenay.~@:>"

#: target:pcl/macros.lisp
msgid "No class named ~S."
msgstr "Onay assclay amednay ~S."

#: target:pcl/macros.lisp
msgid "~S is not a legal class name."
msgstr "~S isway otnay away egallay assclay amenay."

#: target:pcl/macros.lisp
msgid ""
"Returns the PCL class metaobject named by SYMBOL. An error of type\n"
"   SIMPLE-ERROR is signaled if the class does not exist unless ERRORP\n"
"   is NIL in which case NIL is returned. SYMBOL cannot be a keyword."
msgstr ""
"Eturnsray ethay CLPAY assclay etaobjectmay amednay ybay YMBOLSAY. Anway "
"errorway ofway ypetay\n"
"   IMPLESAY-ERRORWAY isway ignaledsay ifway ethay assclay oesday otnay "
"existway unlessway ERRORPWAY\n"
"   isway ILNAY inway ichwhay asecay ILNAY isway eturnedray. YMBOLSAY "
"annotcay ebay away eywordkay."

#: target:pcl/low.lisp
msgid "Set the name of a compiled function object and return the function."
msgstr ""
"Etsay ethay amenay ofway away ompiledcay unctionfay objectway andway "
"eturnray ethay unctionfay."

#: target:pcl/low.lisp
msgid ""
"PCL debugging aid that breaks into the debugger each time\n"
"`compile-lambda' is invoked."
msgstr ""
"CLPAY ebuggingday aidway atthay eaksbray intoway ethay ebuggerday eachway "
"imetay\n"
"`ompilecay-ambdalay' isway invokedway."

#: target:pcl/low.lisp
msgid ""
"If true (the default), then `compile-lambda' will try to silence\n"
"the compiler as completely as possible.  Currently this means that\n"
"`*compile-print*' will be bound to nil during compilation."
msgstr ""
"Ifway uetray (ethay efaultday), enthay `ompilecay-ambdalay' illway ytray "
"otay ilencesay\n"
"ethay ompilercay asway ompletelycay asway ossiblepay.  Urrentlycay isthay "
"eansmay atthay\n"
"`*ompilecay-intpray*' illway ebay oundbay otay ilnay uringday ompilationcay."

#: target:pcl/info.lisp
msgid ""
"~@<The declaration ~S is not understood by ~S. ~\n"
"                               Please put ~S on one of the lists ~S, ~S, or "
"~S. ~\n"
"                               (Assuming it is a variable declarations "
"without ~\n"
"                               argument).~@:>"
msgstr ""
"~@<Ethay eclarationday ~S isway otnay understoodway ybay ~S. ~\n"
"                               Easeplay utpay ~S onway oneway ofway ethay "
"istslay ~S, ~S, orway ~S. ~\n"
"                               (Assumingway itway isway away ariablevay "
"eclarationsday ithoutway ~\n"
"                               argumentway).~@:>"

#: target:pcl/info.lisp
msgid "~@<Invalid slot access specifier ~s in ~s.~@:>"
msgstr "~@<Invalidway otslay accessway ecifierspay ~s inway ~s.~@:>"

#: target:pcl/info.lisp
msgid "~@<Invalid slot access declaration ~s.~@:>"
msgstr "~@<Invalidway otslay accessway eclarationday ~s.~@:>"

#: target:pcl/info.lisp
msgid "~@<Invalid auto-compile specifier ~s in ~s.~@:>"
msgstr "~@<Invalidway autoway-ompilecay ecifierspay ~s inway ~s.~@:>"

#: target:pcl/info.lisp
msgid "~@<Invalid auto-compile declaration ~s.~@:>"
msgstr "~@<Invalidway autoway-ompilecay eclarationday ~s.~@:>"

#: target:pcl/fin.lisp
msgid ""
"~@<Attempt to funcall a funcallable instance without first ~\n"
"          setting its function.~@:>"
msgstr ""
"~@<Attemptway otay uncallfay away uncallablefay instanceway ithoutway "
"irstfay ~\n"
"          ettingsay itsway unctionfay.~@:>"

#: target:pcl/defclass.lisp
msgid "~S is not a legal defclass option."
msgstr "~S isway otnay away egallay efclassday optionway."

#: target:pcl/defclass.lisp
msgid ""
"~@<The value of the ~s option (~s) is not a legal ~\n"
"\t        class name.~@:>"
msgstr ""
"~@<Ethay aluevay ofway ethay ~s optionway (~s) isway otnay away egallay ~\n"
"\t        assclay amenay.~@:>"

#: target:pcl/defclass.lisp
msgid "~@<~S is not a legal slot specification.~@:>"
msgstr "~@<~S isway otnay away egallay otslay ecificationspay.~@:>"

#: target:pcl/defclass.lisp
msgid ""
"~@<In the class definintion of ~s, the slot specification ~s ~\n"
"                 is obsolete.  Convert it to ~s.~@:>"
msgstr ""
"~@<Inway ethay assclay efinintionday ofway ~s, ethay otslay ecificationspay "
"~s ~\n"
"                 isway obsoleteway.  Onvertcay itway otay ~s.~@:>"

#: target:pcl/defclass.lisp
msgid "~@<~S is not a class in *early-class-definitions*.~@:>"
msgstr ""
"~@<~S isway otnay away assclay inway *earlyway-assclay-efinitionsday*.~@:>"

#: target:pcl/defclass.lisp
msgid ""
"~@<More than one early class defines a slot with the ~\n"
"                    name ~S.  This can't work because the bootstrap ~\n"
"                    object system doesn't know how to compute effective ~\n"
"                    slots.~@:>"
msgstr ""
"~@<Oremay anthay oneway earlyway assclay efinesday away otslay ithway ethay "
"~\n"
"                    amenay ~S.  Isthay ancay't orkway ecausebay ethay "
"ootstrapbay ~\n"
"                    objectway ystemsay oesnday't nowkay owhay otay omputecay "
"effectiveway ~\n"
"                    otsslay.~@:>"

#: target:pcl/defclass.lisp
msgid "Discard it."
msgstr "Iscardday itway."

#: target:pcl/defclass.lisp
msgid ""
"~@<The defclass option ~S is not supported by ~\n"
"                                 the bootstrap object system.~@:>"
msgstr ""
"~@<Ethay efclassday optionway ~S isway otnay upportedsay ybay ~\n"
"                                 ethay ootstrapbay objectway ystemsay.~@:>"

#: target:pcl/defclass.lisp
msgid "Slot ~S not found in class ~S"
msgstr "Otslay ~S otnay oundfay inway assclay ~S"

#: target:pcl/defs.lisp
msgid ""
"~@<Trying to load (or compile) PCL in an environment in which it ~\n"
"            has already been loaded.  This doesn't work, you will have to ~\n"
"            get a fresh lisp (reboot) and then load PCL.~@:>"
msgstr ""
"~@<Yingtray otay oadlay (orway ompilecay) CLPAY inway anway environmentway "
"inway ichwhay itway ~\n"
"            ashay alreadyway eenbay oadedlay.  Isthay oesnday't orkway, "
"ouyay illway avehay otay ~\n"
"            etgay away eshfray isplay (ebootray) andway enthay oadlay CLPAY."
"~@:>"

#: target:pcl/defs.lisp
msgid "Try loading (or compiling) PCL anyways."
msgstr "Ytray oadinglay (orway ompilingcay) CLPAY anywaysway."

#: target:pcl/defs.lisp
msgid "~@<~S is not a legal specializer type.~@:>"
msgstr "~@<~S isway otnay away egallay ecializerspay ypetay.~@:>"

#: target:pcl/defs.lisp
msgid "~@<~s is neither a type nor a specializer.~@:>"
msgstr "~@<~s isway eithernay away ypetay ornay away ecializerspay.~@:>"

#: target:pcl/defs.lisp
msgid "Bad argument to type-class."
msgstr "Adbay argumentway otay ypetay-assclay."

#: target:pcl/defs.lisp
msgid "~s is not a type."
msgstr "~s isway otnay away ypetay."

#: target:pcl/defs.lisp
msgid ""
"For class slots, the class defininig the slot.\n"
"For inherited class slots, this is the superclass from which the slot\n"
"was inherited."
msgstr ""
"Orfay assclay otsslay, ethay assclay efininigday ethay otslay.\n"
"Orfay inheritedway assclay otsslay, isthay isway ethay uperclasssay omfray "
"ichwhay ethay otslay\n"
"asway inheritedway."

#: target:pcl/fngen.lisp
msgid ""
"Flush cached emf functions.  If GF is supplied, it should be a\n"
"   generic function metaobject or the name of a generic function, and\n"
"   this function flushes all cached emfs for the given generic\n"
"   function.  If GF is not supplied, all cached emfs are flushed."
msgstr ""
"Ushflay achedcay emfway unctionsfay.  Ifway FGAY isway uppliedsay, itway "
"ouldshay ebay away\n"
"   enericgay unctionfay etaobjectmay orway ethay amenay ofway away enericgay "
"unctionfay, andway\n"
"   isthay unctionfay ushesflay allway achedcay emfsway orfay ethay ivengay "
"enericgay\n"
"   unctionfay.  Ifway FGAY isway otnay uppliedsay, allway achedcay emfsway "
"areway ushedflay."

#: target:pcl/cache.lisp
msgid "Wrapper ~S"
msgstr "Apperwray ~S"

#: target:pcl/cache.lisp
msgid "Unknown wrapper state"
msgstr "Unknownway apperwray tatesay"

#: target:pcl/cache.lisp
msgid ""
"~@<PCL cannot handle the specializer ~S ~\n"
"                                (meta-specializer ~S).~@:>"
msgstr ""
"~@<CLPAY annotcay andlehay ethay ecializerspay ~S ~\n"
"                                (etamay-ecializerspay ~S).~@:>"

#: target:pcl/cache.lisp
msgid "Line is reserved."
msgstr "Inelay isway eservedray."

#: target:pcl/cache.lisp
msgid ""
"~@<Bad cache ~S: Value at location ~D is ~D ~\n"
"                               lines from its home, limit is ~D.~@:>"
msgstr ""
"~@<Adbay achecay ~S: Aluevay atway ocationlay ~D isway ~D ~\n"
"                               ineslay omfray itsway omehay, imitlay isway "
"~D.~@:>"

#: target:pcl/cache.lisp
msgid "Attempt to fill a reserved cache line."
msgstr "Attemptway otay illfay away eservedray achecay inelay."

#: target:pcl/cache.lisp
msgid "Transfering something into a reserved cache line."
msgstr "Ansferingtray omethingsay intoway away eservedray achecay inelay."

#: target:pcl/dlisp.lisp
msgid "Every metatype is T."
msgstr "Everyway etatypemay isway T."

#: target:pcl/dlisp.lisp
msgid "Can't do a slot reg for this metatype."
msgstr "Ancay't oday away otslay egray orfay isthay etatypemay."

#: target:pcl/boot.lisp
msgid "~~@<Generic function ~a: ~?.~~@:>"
msgstr "~~@<Enericgay unctionfay ~away: ~?.~~@:>"

#: target:pcl/boot.lisp
msgid "Invalid generic function parameter name ~a"
msgstr "Invalidway enericgay unctionfay arameterpay amenay ~away"

#: target:pcl/boot.lisp
msgid ""
"Optional and key parameters of generic functions ~\n"
"                   may not have default values or supplied-p ~\n"
"                   parameters: ~<~s~>"
msgstr ""
"Optionalway andway eykay arameterspay ofway enericgay unctionsfay ~\n"
"                   aymay otnay avehay efaultday aluesvay orway uppliedsay-p "
"~\n"
"                   arameterspay: ~<~s~>"

#: target:pcl/boot.lisp
msgid "~s is not allowed in generic function lambda lists"
msgstr "~s isway otnay allowedway inway enericgay unctionfay ambdalay istslay"

#: target:pcl/boot.lisp
msgid "~~@<Generic function ~~s: ~?.~~@:>"
msgstr "~~@<Enericgay unctionfay ~~s: ~?.~~@:>"

#: target:pcl/boot.lisp
msgid "The option ~s appears more than once"
msgstr "Ethay optionway ~s appearsway oremay anthay onceway"

#: target:pcl/boot.lisp
msgid "Declaration specifier ~s is not allowed"
msgstr "Eclarationday ecifierspay ~s isway otnay allowedway"

#: target:pcl/boot.lisp
msgid ""
"Argument precedence order must list all ~\n"
"                           required parameters and only those: ~s"
msgstr ""
"Argumentway ecedencepray orderway ustmay istlay allway ~\n"
"                           equiredray arameterspay andway onlyway osethay: ~s"

#: target:pcl/boot.lisp
msgid ""
"Duplicate parameter names in argument ~\n"
"                           precedence order: ~s"
msgstr ""
"Uplicateday arameterpay amesnay inway argumentway ~\n"
"                           ecedencepray orderway: ~s"

#: target:pcl/boot.lisp
msgid "Special operators cannot be made generic functions"
msgstr "Ecialspay operatorsway annotcay ebay ademay enericgay unctionsfay"

#: target:pcl/boot.lisp
msgid "Unsupported option ~s"
msgstr "Unsupportedway optionway ~s"

#: target:pcl/boot.lisp
msgid "If true, allow inlining of methods in effective methods."
msgstr ""
"Ifway uetray, allowway inliningway ofway ethodsmay inway effectiveway "
"ethodsmay."

#: target:pcl/boot.lisp
msgid ""
"~@<Defining method ~s ~s ~s using inline slot access in a ~\n"
"                   non-null lexical environment means that it cannot be ~\n"
"                   automatically recompiled.~@:>"
msgstr ""
"~@<Efiningday ethodmay ~s ~s ~s usingway inlineway otslay accessway inway "
"away ~\n"
"                   onnay-ullnay exicallay environmentway eansmay atthay "
"itway annotcay ebay ~\n"
"                   automaticallyway ecompiledray.~@:>"

#: target:pcl/boot.lisp
msgid ""
"The method-lambda argument to make-method-function, ~S,~\n"
"            is not a lambda form"
msgstr ""
"Ethay ethodmay-ambdalay argumentway otay akemay-ethodmay-unctionfay, ~S,~\n"
"            isway otnay away ambdalay ormfay"

#: target:pcl/boot.lisp
msgid "~@<The ~s argument to ~s, ~s, is not a lambda form.~@:>"
msgstr ""
"~@<Ethay ~s argumentway otay ~s, ~s, isway otnay away ambdalay ormfay.~@:>"

#: target:pcl/boot.lisp
msgid ""
"Assignment to method parameter~p ~{~s~^, ~} ~\n"
"                           might prevent CLOS optimizations"
msgstr ""
"Assignmentway otay ethodmay arameterpay~p ~{~s~^, ~} ~\n"
"                           ightmay eventpray OSCLAY optimizationsway"

#: target:pcl/boot.lisp
msgid "Wrong number of args."
msgstr "Ongwray umbernay ofway argsway."

#: target:pcl/boot.lisp
msgid "1 or 2 args expected."
msgstr "1 orway 2 argsway expectedway."

#: target:pcl/boot.lisp
msgid "1 arg expected."
msgstr "1 argway expectedway."

#: target:pcl/boot.lisp
msgid ""
"~@<The set of methods ~s applicable to argument~p ~\n"
"                ~{~s~^, ~} to call-next-method is different from ~\n"
"                the set of methods ~s applicable to the original ~\n"
"                method argument~p ~{~s~^, ~}.~@:>"
msgstr ""
"~@<Ethay etsay ofway ethodsmay ~s applicableway otay argumentway~p ~\n"
"                ~{~s~^, ~} otay allcay-extnay-ethodmay isway ifferentday "
"omfray ~\n"
"                ethay etsay ofway ethodsmay ~s applicableway otay ethay "
"originalway ~\n"
"                ethodmay argumentway~p ~{~s~^, ~}.~@:>"

#: target:pcl/boot.lisp
msgid "When true, compile interpreted method functions."
msgstr "Enwhay uetray, ompilecay interpretedway ethodmay unctionsfay."

#: target:pcl/boot.lisp
msgid ""
"~&~@<At the time the method with qualifiers ~S and ~\n"
"               specializers ~S on the generic function ~S ~\n"
"               was compiled, the method class for that generic function was "
"~\n"
"               ~S.  But, the method class is now ~S, this ~\n"
"               may mean that this method was compiled improperly.~@:>"
msgstr ""
"~&~@<Atway ethay imetay ethay ethodmay ithway alifiersquay ~S andway ~\n"
"               ecializersspay ~S onway ethay enericgay unctionfay ~S ~\n"
"               asway ompiledcay, ethay ethodmay assclay orfay atthay "
"enericgay unctionfay asway ~\n"
"               ~S.  Utbay, ethay ethodmay assclay isway ownay ~S, isthay ~\n"
"               aymay eanmay atthay isthay ethodmay asway ompiledcay "
"improperlyway.~@:>"

#: target:pcl/boot.lisp
msgid ""
"~@<~S already names an ordinary function or a macro.  ~\n"
"\tIf you want to replace it with a generic function, you should remove ~\n"
"        the existing definition beforehand.~@:>"
msgstr ""
"~@<~S alreadyway amesnay anway ordinaryway unctionfay orway away acromay.  "
"~\n"
"\tIfway ouyay antway otay eplaceray itway ithway away enericgay unctionfay, "
"ouyay ouldshay emoveray ~\n"
"        ethay existingway efinitionday eforehandbay.~@:>"

#: target:pcl/boot.lisp
msgid "~@<Discard the existing definition of ~S.~@:>"
msgstr "~@<Iscardday ethay existingway efinitionday ofway ~S.~@:>"

#: target:pcl/boot.lisp
msgid ""
"~@<The lambda-list ~S is incompatible with ~\n"
"                      existing methods of ~S.~@:>"
msgstr ""
"~@<Ethay ambdalay-istlay ~S isway incompatibleway ithway ~\n"
"                      existingway ethodsmay ofway ~S.~@:>"

#: target:pcl/boot.lisp
msgid ""
"~~@<Attempt to add the method ~~S to the generic ~\n"
"                           function ~~S, but ~?.~~@:>"
msgstr ""
"~~@<Attemptway otay addway ethay ethodmay ~~S otay ethay enericgay ~\n"
"                           unctionfay ~~S, utbay ~?.~~@:>"

#: target:pcl/boot.lisp
msgid "more"
msgstr "oremay"

#: target:pcl/boot.lisp
msgid "fewer"
msgstr "ewerfay"

#: target:pcl/boot.lisp
msgid ""
"the method has ~A required arguments than the ~\n"
"                 generic function"
msgstr ""
"ethay ethodmay ashay ~Away equiredray argumentsway anthay ethay ~\n"
"                 enericgay unctionfay"

#: target:pcl/boot.lisp
msgid ""
"the method has ~S optional arguments than the ~\n"
"                 generic function"
msgstr ""
"ethay ethodmay ashay ~S optionalway argumentsway anthay ethay ~\n"
"                 enericgay unctionfay"

#: target:pcl/boot.lisp
msgid ""
"the method and generic function differ in whether ~\n"
"                 they accept rest or keyword arguments"
msgstr ""
"ethay ethodmay andway enericgay unctionfay ifferday inway etherwhay ~\n"
"                 eythay acceptway estray orway eywordkay argumentsway"

#: target:pcl/boot.lisp
msgid ""
"the method does not accept each of the keyword ~\n"
"                   arguments ~S"
msgstr ""
"ethay ethodmay oesday otnay acceptway eachway ofway ethay eywordkay ~\n"
"                   argumentsway ~S"

#: target:pcl/boot.lisp
msgid "~@<The function ~S is not already defined.~@:>"
msgstr "~@<Ethay unctionfay ~S isway otnay alreadyway efinedday.~@:>"

#: target:pcl/boot.lisp
msgid "~@<~S should be on the list ~S.~@:>"
msgstr "~@<~S ouldshay ebay onway ethay istlay ~S.~@:>"

#: target:pcl/boot.lisp
msgid ""
"~@<The function of the funcallable instance ~S ~\n"
"\t\t\t has not been set.~@:>"
msgstr ""
"~@<Ethay unctionfay ofway ethay uncallablefay instanceway ~S ~\n"
"\t\t\t ashay otnay eenbay etsay.~@:>"

#: target:pcl/boot.lisp
msgid "~@<No way to determine the lambda list~@:>"
msgstr "~@<Onay ayway otay etermineday ethay ambdalay istlay~@:>"

#: target:pcl/boot.lisp
msgid ""
"~@<The ~s argument (~S) was neither a class nor a ~\n"
"                    symbol naming a class.~@:>"
msgstr ""
"~@<Ethay ~s argumentway (~S) asway eithernay away assclay ornay away ~\n"
"                    ymbolsay amingnay away assclay.~@:>"

#: target:pcl/boot.lisp
msgid "~S is not an early-method."
msgstr "~S isway otnay anway earlyway-ethodmay."

#: target:pcl/boot.lisp
msgid "Early add-method didn't get a funcallable instance."
msgstr ""
"Earlyway addway-ethodmay idnday't etgay away uncallablefay instanceway."

#: target:pcl/boot.lisp
msgid "Early add-method didn't get an early method."
msgstr "Earlyway addway-ethodmay idnday't etgay anway earlyway ethodmay."

#: target:pcl/boot.lisp
msgid "Early remove-method didn't get a funcallable instance."
msgstr ""
"Earlyway emoveray-ethodmay idnday't etgay away uncallablefay instanceway."

#: target:pcl/boot.lisp
msgid "Early remove-method didn't get an early method."
msgstr "Earlyway emoveray-ethodmay idnday't etgay anway earlyway ethodmay."

#: target:pcl/boot.lisp
msgid "Can't get early method."
msgstr "Ancay't etgay earlyway ethodmay."

#: target:pcl/boot.lisp
msgid "~@<Qualifiers must be non-null atoms: ~s~@:>"
msgstr "~@<Alifiersquay ustmay ebay onnay-ullnay atomsway: ~s~@:>"

#: target:pcl/boot.lisp
msgid ""
"~@<~S used as a specializer, ~\n"
"                             but is not the name of a class.~@:>"
msgstr ""
"~@<~S usedway asway away ecializerspay, ~\n"
"                             utbay isway otnay ethay amenay ofway away "
"assclay.~@:>"

#: target:pcl/boot.lisp
msgid "~S is not a legal specializer."
msgstr "~S isway otnay away egallay ecializerspay."

#: target:pcl/method-slot-access-optimization.lisp
msgid "Set to true to activate the inline slot access optimization."
msgstr ""
"Etsay otay uetray otay activateway ethay inlineway otslay accessway "
"optimizationway."

#: target:pcl/method-slot-access-optimization.lisp
msgid "When true, check slot values against specified slot types."
msgstr ""
"Enwhay uetray, eckchay otslay aluesvay againstway ecifiedspay otslay ypestay."

#: target:pcl/method-slot-access-optimization.lisp
msgid "When true, optimize slot access through slot reader/writer functions."
msgstr ""
"Enwhay uetray, optimizeway otslay accessway roughthay otslay eaderray/"
"iterwray unctionsfay."

#: target:pcl/method-slot-access-optimization.lisp
msgid "Cannot optimize slot access to"
msgstr "Annotcay optimizeway otslay accessway otay"

#: target:pcl/method-slot-access-optimization.lisp
msgid "The class is not a standard class"
msgstr "Ethay assclay isway otnay away tandardsay assclay"

#: target:pcl/method-slot-access-optimization.lisp
msgid "The class doesn't contain a slot with name ~s"
msgstr "Ethay assclay oesnday't ontaincay away otslay ithway amenay ~s"

#: target:pcl/method-slot-access-optimization.lisp
msgid "Slot ~s is a class slot"
msgstr "Otslay ~s isway away assclay otslay"

#: target:pcl/method-slot-access-optimization.lisp
msgid "There are non-standard accessors for slot ~s"
msgstr "Erethay areway onnay-tandardsay accessorsway orfay otslay ~s"

#: target:pcl/method-slot-access-optimization.lisp
msgid ""
"Slot ~s is not at the same location ~\n"
"                               in the class and all of its subclasses"
msgstr ""
"Otslay ~s isway otnay atway ethay amesay ocationlay ~\n"
"                               inway ethay assclay andway allway ofway "
"itsway ubclassessay"

#: target:pcl/method-slot-access-optimization.lisp
msgid "Auto-compiling method ~s."
msgstr "Autoway-ompilingcay ethodmay ~s."

#: target:pcl/method-slot-access-optimization.lisp
msgid ""
"Methods may need to be recompiled for the changed ~\n"
"                    class layout of"
msgstr ""
"Ethodsmay aymay eednay otay ebay ecompiledray orfay ethay angedchay ~\n"
"                    assclay ayoutlay ofway"

#: target:pcl/method-slot-access-optimization.lisp
msgid "The class is not defined at compile time"
msgstr "Ethay assclay isway otnay efinedday atway ompilecay imetay"

#: target:pcl/method-slot-access-optimization.lisp
msgid ""
"~s has a method that is not a standard ~\n"
"                                    slot accessor"
msgstr ""
"~s ashay away ethodmay atthay isway otnay away tandardsay ~\n"
"                                    otslay accessorway"

#: target:pcl/method-slot-access-optimization.lisp
msgid "Methods of ~s access different slots"
msgstr "Ethodsmay ofway ~s accessway ifferentday otsslay"

#: target:pcl/slots-boot.lisp
msgid "~@<~S is not a standard-class.~@:>"
msgstr "~@<~S isway otnay away tandardsay-assclay.~@:>"

#: target:pcl/slots-boot.lisp
msgid ""
"~@<Slot ~S in class ~S ~\n"
"                       does not have standard allocation.~@:>"
msgstr ""
"~@<Otslay ~S inway assclay ~S ~\n"
"                       oesday otnay avehay tandardsay allocationway.~@:>"

#: target:pcl/slots-boot.lisp
msgid ""
"~@<Slot ~S in class ~S ~\n"
"                      does not have standard allocation.~@:>"
msgstr ""
"~@<Otslay ~S inway assclay ~S ~\n"
"                      oesday otnay avehay tandardsay allocationway.~@:>"

#: target:pcl/slots-boot.lisp
msgid ""
"~@<The wrapper for class ~S does not have ~\n"
"                               the slot ~S.~@:>"
msgstr ""
"~@<Ethay apperwray orfay assclay ~S oesday otnay avehay ~\n"
"                               ethay otslay ~S.~@:>"

#: target:pcl/defcombin.lisp target:pcl/combin.lisp
msgid "has more than one qualifier"
msgstr "ashay oremay anthay oneway alifierquay"

#: target:pcl/combin.lisp
msgid "has an invalid qualifier"
msgstr "ashay anway invalidway alifierquay"

#: target:pcl/combin.lisp
msgid ""
"~@<~s was called outside the dynamic scope ~\n"
"            of a method combination function (inside the body of ~\n"
"            ~s or a method on the generic function ~s).~@:>"
msgstr ""
"~@<~s asway alledcay outsideway ethay ynamicday opescay ~\n"
"            ofway away ethodmay ombinationcay unctionfay (insideway ethay "
"odybay ofway ~\n"
"            ~s orway away ethodmay onway ethay enericgay unctionfay ~s).~@:>"

#: target:pcl/combin.lisp
msgid "~@<~S used outside of a effective method form.~@:>"
msgstr "~@<~S usedway outsideway ofway away effectiveway ethodmay ormfay.~@:>"

#: target:pcl/combin.lisp
msgid ""
"~@<Invalid keyword argument~p ~{~s~^, ~}.  ~\n"
"               Valid keywords are: ~{~s~^, ~}.~@:>"
msgstr ""
"~@<Invalidway eywordkay argumentway~p ~{~s~^, ~}.  ~\n"
"               Alidvay eywordskay areway: ~{~s~^, ~}.~@:>"

#: target:pcl/combin.lisp
msgid "Invalid keyword argument ~s"
msgstr "Invalidway eywordkay argumentway ~s"

#: target:pcl/dfun.lisp
msgid "~@<Slot ~s of class ~s is unbound in object ~s~@:>"
msgstr "~@<Otslay ~s ofway assclay ~s isway unboundway inway objectway ~s~@:>"

#: target:pcl/dfun.lisp
msgid ""
"~@<Cannot get standard value of slot ~s of class ~s ~\n"
"                in object ~s~@:>"
msgstr ""
"~@<Annotcay etgay tandardsay aluevay ofway otslay ~s ofway assclay ~s ~\n"
"                inway objectway ~s~@:>"

#: target:pcl/dfun.lisp
msgid "~&Name ~S  caching cost ~D  dispatch cost ~D~%"
msgstr "~&Amenay ~S  achingcay ostcay ~D  ispatchday ostcay ~D~%"

#: target:pcl/dfun.lisp
msgid ""
"Precompute effective methods at method load time if the generic\n"
"   function has less than this number of methods.  If zero,\n"
"   no effective methods are precomputed at method load time."
msgstr ""
"Ecomputepray effectiveway ethodsmay atway ethodmay oadlay imetay ifway ethay "
"enericgay\n"
"   unctionfay ashay esslay anthay isthay umbernay ofway ethodsmay.  Ifway "
"erozay,\n"
"   onay effectiveway ethodsmay areway ecomputedpray atway ethodmay oadlay "
"imetay."

#: target:pcl/dfun.lisp
msgid "~@<The function ~S requires at least ~D arguments.~@:>"
msgstr "~@<Ethay unctionfay ~S equiresray atway eastlay ~D argumentsway.~@:>"

#: target:pcl/dfun.lisp
msgid "~<The function ~S requires at least ~D arguments.~@:>"
msgstr "~<Ethay unctionfay ~S equiresray atway eastlay ~D argumentsway.~@:>"

#: target:pcl/dfun.lisp
msgid ""
"~@<Vicious metacircle:  The computation of an ~\n"
"\t   effective method of ~s for arguments of types ~s uses ~\n"
"\t   the effective method being computed.~@:>"
msgstr ""
"~@<Iciousvay etacirclemay:  Ethay omputationcay ofway anway ~\n"
"\t   effectiveway ethodmay ofway ~s orfay argumentsway ofway ypestay ~s "
"usesway ~\n"
"\t   ethay effectiveway ethodmay eingbay omputedcay.~@:>"

#: target:pcl/dfun.lisp
msgid "This can't happen."
msgstr "Isthay ancay't appenhay."

#: target:pcl/dfun.lisp
msgid "~@<~s cannot handle the second argument ~s.~@:>"
msgstr "~@<~s annotcay andlehay ethay econdsay argumentway ~s.~@:>"

#: target:pcl/dfun.lisp
msgid "~&There are ~4d dfuns of type ~s"
msgstr "~&Erethay areway ~4d funsday ofway ypetay ~s"

#: target:pcl/dfun.lisp
msgid "~&DFUN constructor caching is ~A."
msgstr "~&FUNDAY onstructorcay achingcay isway ~Away."

#: target:pcl/dfun.lisp
msgid "enabled"
msgstr "enabledway"

#: target:pcl/dfun.lisp
msgid "disabled"
msgstr "isabledday"

#: target:pcl/ctor.lisp
msgid "~@<Not a property list: ~S.~@:>"
msgstr "~@<Otnay away opertypray istlay: ~S.~@:>"

#: target:pcl/braid.lisp
msgid ""
"~@<The function of the funcallable instance ~S ~\n"
"                 has not been set.~@:>"
msgstr ""
"~@<Ethay unctionfay ofway ethay uncallablefay instanceway ~S ~\n"
"                 ashay otnay eenbay etsay.~@:>"

#: target:pcl/braid.lisp
msgid ""
"~@<Slot allocation ~S is not supported ~\n"
"                          in bootstrap.~@:>"
msgstr ""
"~@<Otslay allocationway ~S isway otnay upportedsay ~\n"
"                          inway ootstrapbay.~@:>"

#: target:pcl/braid.lisp
msgid "The standard method combination."
msgstr "Ethay tandardsay ethodmay ombinationcay."

#: target:pcl/braid.lisp
msgid ""
"In *built-in-classes*: ~S has ~S as a superclass,~%~\n"
"                but ~S is not itself a class in *built-in-classes*."
msgstr ""
"Inway *uiltbay-inway-assesclay*: ~S ashay ~S asway away uperclasssay,~%~\n"
"                utbay ~S isway otnay itselfway away assclay inway *uiltbay-"
"inway-assesclay*."

#: target:pcl/braid.lisp
msgid "~@<~S is not the name of a class.~@:>"
msgstr "~@<~S isway otnay ethay amenay ofway away assclay.~@:>"

#: target:pcl/braid.lisp
msgid ""
"~@<No matching method for the generic function ~\n"
"                             ~S, when called with arguments ~S.~@:>"
msgstr ""
"~@<Onay atchingmay ethodmay orfay ethay enericgay unctionfay ~\n"
"                             ~S, enwhay alledcay ithway argumentsway ~S.~@:>"

#: target:pcl/braid.lisp
msgid "Retry call to ~S."
msgstr "Etryray allcay otay ~S."

#: target:pcl/braid.lisp
msgid "~@<In method ~S: No next method for arguments ~S.~@:>"
msgstr "~@<Inway ethodmay ~S: Onay extnay ethodmay orfay argumentsway ~S.~@:>"

#: target:pcl/braid.lisp
msgid ""
"~@<Generic function ~S: ~\n"
"                             No primary method given arguments ~S~@:>"
msgstr ""
"~@<Enericgay unctionfay ~S: ~\n"
"                             Onay imarypray ethodmay ivengay argumentsway "
"~S~@:>"

#: target:pcl/braid.lisp
msgid ""
"~@<In a call to ~s with arguments ~:s: ~\n"
"              The method ~s has invalid qualifiers for method ~\n"
"              combination ~s.~@:>"
msgstr ""
"~@<Inway away allcay otay ~s ithway argumentsway ~:s: ~\n"
"              Ethay ethodmay ~s ashay invalidway alifiersquay orfay ethodmay "
"~\n"
"              ombinationcay ~s.~@:>"

#: target:pcl/braid.lisp
msgid ""
"~@<In a call to ~s with arguments ~:s: ~\n"
"              The methods ~{~s~^, ~} have invalid qualifiers for ~\n"
"              method combination ~s.~@:>"
msgstr ""
"~@<Inway away allcay otay ~s ithway argumentsway ~:s: ~\n"
"              Ethay ethodsmay ~{~s~^, ~} avehay invalidway alifiersquay "
"orfay ~\n"
"              ethodmay ombinationcay ~s.~@:>"

#: target:pcl/slots.lisp
msgid "~@<The slot ~S is unbound in the object ~S.~@:>"
msgstr "~@<Ethay otslay ~S isway unboundway inway ethay objectway ~S.~@:>"

#: target:pcl/slots.lisp
msgid "is not a symbol and so cannot be bound"
msgstr "isway otnay away ymbolsay andway osay annotcay ebay oundbay"

#: target:pcl/slots.lisp
msgid "is a keyword and so cannot be bound"
msgstr "isway away eywordkay andway osay annotcay ebay oundbay"

#: target:pcl/slots.lisp
msgid "cannot be bound"
msgstr "annotcay ebay oundbay"

#: target:pcl/slots.lisp
msgid "is a constant and so cannot be bound"
msgstr "isway away onstantcay andway osay annotcay ebay oundbay"

#: target:pcl/slots.lisp
msgid ""
"~@<The slot ~s has neither ~s nor ~s ~\n"
"                           allocation, so it can't be read by the default ~s "
"~\n"
"                           method.~@:>"
msgstr ""
"~@<Ethay otslay ~s ashay eithernay ~s ornay ~s ~\n"
"                           allocationway, osay itway ancay't ebay eadray "
"ybay ethay efaultday ~s ~\n"
"                           ethodmay.~@:>"

#: target:pcl/slots.lisp
msgid ""
"~@<The slot ~s has neither ~s nor ~s allocation, ~\n"
"               so it can't be written by the default ~s method.~@:>"
msgstr ""
"~@<Ethay otslay ~s ashay eithernay ~s ornay ~s allocationway, ~\n"
"               osay itway ancay't ebay ittenwray ybay ethay efaultday ~s "
"ethodmay.~@:>"

#: target:pcl/slots.lisp
msgid ""
"~@<The slot ~s has neither ~s nor ~s ~\n"
"                           allocation, so it can't be read by the default ~s "
"~\n"
"\t\t\t   method.~@:>"
msgstr ""
"~@<Ethay otslay ~s ashay eithernay ~s ornay ~s ~\n"
"                           allocationway, osay itway ancay't ebay eadray "
"ybay ethay efaultday ~s ~\n"
"\t\t\t   ethodmay.~@:>"

#: target:pcl/slots.lisp
msgid "Structure slots cannot be unbound."
msgstr "Ucturestray otsslay annotcay ebay unboundway."

#: target:pcl/slots.lisp
msgid "Condition slots cannot be unbound."
msgstr "Onditioncay otsslay annotcay ebay unboundway."

#: target:pcl/slots.lisp
msgid ""
"~~@<When attempting to ~A, the slot ~S is missing ~\n"
"                from the object ~S.~~@:>"
msgstr ""
"~~@<Enwhay attemptingway otay ~Away, ethay otslay ~S isway issingmay ~\n"
"                omfray ethay objectway ~S.~~@:>"

#: target:pcl/slots.lisp
msgid "read the slot's value (slot-value)"
msgstr "eadray ethay otslay's aluevay (otslay-aluevay)"

#: target:pcl/slots.lisp
msgid "set the slot's value to ~S (setf of slot-value)"
msgstr "etsay ethay otslay's aluevay otay ~S (etfsay ofway otslay-aluevay)"

#: target:pcl/slots.lisp
msgid "test to see if slot is bound (slot-boundp)"
msgstr "esttay otay eesay ifway otslay isway oundbay (otslay-oundpbay)"

#: target:pcl/slots.lisp
msgid "make the slot unbound (slot-makunbound)"
msgstr "akemay ethay otslay unboundway (otslay-akunboundmay)"

#: target:pcl/slots.lisp
msgid "~@<Can't allocate an instance of class ~S.~@:>"
msgstr "~@<Ancay't allocateway anway instanceway ofway assclay ~S.~@:>"

#: target:pcl/init.lisp
msgid ""
"~@<Invalid initialization argument~P ~2I~_~\n"
"                         ~<~{~S~^, ~}~@:> ~I~_in call for class ~S.~:>"
msgstr ""
"~@<Invalidway initializationway argumentway~P ~2Iway~_~\n"
"                         ~<~{~S~^, ~}~@:> ~Iway~_inway allcay orfay assclay "
"~S.~:>"

#: target:pcl/seal.lisp
msgid "~@<Invalid sealing specifier ~s.~@:>"
msgstr "~@<Invalidway ealingsay ecifierspay ~s.~@:>"

#: target:pcl/seal.lisp
msgid "~s is sealed wrt ~a"
msgstr "~s isway ealedsay twray ~away"

#: target:pcl/cpl.lisp
msgid ""
"~~@<While computing the class precedence list ~\n"
"                of the class ~A: ~?.~~@:>"
msgstr ""
"~~@<Ilewhay omputingcay ethay assclay ecedencepray istlay ~\n"
"                ofway ethay assclay ~Away: ~?.~~@:>"

#: target:pcl/cpl.lisp
msgid "named ~S"
msgstr "amednay ~S"

#: target:pcl/cpl.lisp
msgid "The class ~A is a forward referenced class"
msgstr "Ethay assclay ~Away isway away orwardfay eferencedray assclay"

#: target:pcl/cpl.lisp
msgid ""
"The class ~A is a forward referenced class. ~\n"
"                      The class ~A is ~A."
msgstr ""
"Ethay assclay ~Away isway away orwardfay eferencedray assclay. ~\n"
"                      Ethay assclay ~Away isway ~Away."

#: target:pcl/cpl.lisp
msgid "a direct superclass of the class ~A"
msgstr "away irectday uperclasssay ofway ethay assclay ~Away"

#: target:pcl/cpl.lisp
msgid ""
"reached from the class ~A by following~@\n"
"                                  the direct superclass chain through: ~A~\n"
"                                  ~%  ending at the class ~A"
msgstr ""
"eachedray omfray ethay assclay ~Away ybay ollowingfay~@\n"
"                                  ethay irectday uperclasssay ainchay "
"roughthay: ~Away~\n"
"                                  ~%  endingway atway ethay assclay ~Away"

#: target:pcl/cpl.lisp
msgid "~{~%  the class ~A,~}"
msgstr "~{~%  ethay assclay ~Away,~}"

#: target:pcl/cpl.lisp
msgid ""
"It is not possible to compute the class precedence list because ~\n"
"       there ~A in the local precedence relations.  ~\n"
"       ~A because:~{~%  ~A~}."
msgstr ""
"Itway isway otnay ossiblepay otay omputecay ethay assclay ecedencepray "
"istlay ecausebay ~\n"
"       erethay ~Away inway ethay ocallay ecedencepray elationsray.  ~\n"
"       ~Away ecausebay:~{~%  ~Away~}."

#: target:pcl/cpl.lisp
msgid "are circularities"
msgstr "areway ircularitiescay"

#: target:pcl/cpl.lisp
msgid "is a circularity"
msgstr "isway away ircularitycay"

#: target:pcl/cpl.lisp
msgid "These arise"
msgstr "Esethay ariseway"

#: target:pcl/cpl.lisp
msgid "This arises"
msgstr "Isthay arisesway"

#: target:pcl/cpl.lisp
msgid "the class ~A appears in the supers of the class ~A"
msgstr ""
"ethay assclay ~Away appearsway inway ethay uperssay ofway ethay assclay ~Away"

#: target:pcl/cpl.lisp
msgid "the class ~A follows the class ~A in the supers of the class ~A"
msgstr ""
"ethay assclay ~Away ollowsfay ethay assclay ~Away inway ethay uperssay ofway "
"ethay assclay ~Away"

#: target:pcl/methods.lisp
msgid "Instance"
msgstr "Instanceway"

#: target:pcl/methods.lisp
msgid "~@<Structure slots must have ~s allocation.~@:>"
msgstr "~@<Ucturestray otsslay ustmay avehay ~s allocationway.~@:>"

#: target:pcl/methods.lisp
msgid "~@<~S doesn't seem to have a method function.~@:>"
msgstr "~@<~S oesnday't eemsay otay avehay away ethodmay unctionfay.~@:>"

#: target:pcl/methods.lisp
msgid ""
"~@<Attempt to reinitialize the method ~S.  ~\n"
"          Method objects cannot be reinitialized.~@:>"
msgstr ""
"~@<Attemptway otay einitializeray ethay ethodmay ~S.  ~\n"
"          Ethodmay objectsway annotcay ebay einitializedray.~@:>"

#: target:pcl/methods.lisp
msgid ""
"~@<When initializing the method ~S, ~\n"
"                   the ~S initialization argument was ~S, ~\n"
"                   which ~A.~@:>"
msgstr ""
"~@<Enwhay initializingway ethay ethodmay ~S, ~\n"
"                   ethay ~S initializationway argumentway asway ~S, ~\n"
"                   ichwhay ~Away.~@:>"

#: target:pcl/methods.lisp
msgid "is not a string or NULL"
msgstr "isway otnay away ingstray orway ULLNAY"

#: target:pcl/methods.lisp
msgid "is not a function"
msgstr "isway otnay away unctionfay"

#: target:pcl/methods.lisp
msgid "Contains ~S which ~A"
msgstr "Ontainscay ~S ichwhay ~Away"

#: target:pcl/methods.lisp
msgid "is not a non-null atom"
msgstr "isway otnay away onnay-ullnay atomway"

#: target:pcl/methods.lisp
msgid "is neither a class object nor an eql specializer"
msgstr ""
"isway eithernay away assclay objectway ornay anway eqlway ecializerspay"

#: target:pcl/methods.lisp
msgid "The value of the ~s initarg, ~s, ~A."
msgstr "Ethay aluevay ofway ethay ~s initargway, ~s, ~Away."

#: target:pcl/methods.lisp
msgid ""
"~~@<When initializing the generic-function ~S: ~\n"
"                               The ~S initialization argument was ~A.  ~\n"
"                               It must be ~A.~~@:>"
msgstr ""
"~~@<Enwhay initializingway ethay enericgay-unctionfay ~S: ~\n"
"                               Ethay ~S initializationway argumentway asway "
"~Away.  ~\n"
"                               Itway ustmay ebay ~Away.~~@:>"

#: target:pcl/methods.lisp
msgid "~@<~S does not name a generic function.~@:>"
msgstr "~@<~S oesday otnay amenay away enericgay unctionfay.~@:>"

#: target:pcl/methods.lisp
msgid ""
"~@<There is no method for the generic function ~S ~\n"
"                   matching argument specifiers ~S.~@:>"
msgstr ""
"~@<Erethay isway onay ethodmay orfay ethay enericgay unctionfay ~S ~\n"
"                   atchingmay argumentway ecifiersspay ~S.~@:>"

#: target:pcl/methods.lisp
msgid ""
"~@<No method on ~S with qualifiers ~S and ~\n"
"           specializers ~S.~@:>"
msgstr ""
"~@<Onay ethodmay onway ~S ithway alifiersquay ~S andway ~\n"
"           ecializersspay ~S.~@:>"

#: target:pcl/methods.lisp
msgid ""
"~@<No method on ~S with qualifiers ~S and ~\n"
"            specializers ~S.~@:>"
msgstr ""
"~@<Onay ethodmay onway ~S ithway alifiersquay ~S andway ~\n"
"            ecializersspay ~S.~@:>"

#: target:pcl/methods.lisp
msgid "~@<The generic function ~s takes ~d required argument~p.~@:>"
msgstr ""
"~@<Ethay enericgay unctionfay ~s akestay ~d equiredray argumentway~p.~@:>"

#: target:pcl/methods.lisp
msgid ""
"~@<The method ~S is already part of the generic ~\n"
"            function ~S.  It can't be added to another generic ~\n"
"            function until it is removed from the first one.~@:>"
msgstr ""
"~@<Ethay ethodmay ~S isway alreadyway artpay ofway ethay enericgay ~\n"
"            unctionfay ~S.  Itway ancay't ebay addedway otay anotherway "
"enericgay ~\n"
"            unctionfay untilway itway isway emovedray omfray ethay irstfay "
"oneway.~@:>"

#: target:pcl/methods.lisp
msgid ""
"~@<Method ~s contains invalid qualifiers for ~\n"
"                        the standard method combination.~@:>"
msgstr ""
"~@<Ethodmay ~s ontainscay invalidway alifiersquay orfay ~\n"
"                        ethay tandardsay ethodmay ombinationcay.~@:>"

#: target:pcl/methods.lisp
msgid ""
"~@<Method ~s contains invalid qualifiers for ~\n"
"                          the method combination ~s.~@:>"
msgstr ""
"~@<Ethodmay ~s ontainscay invalidway alifiersquay orfay ~\n"
"                          ethay ethodmay ombinationcay ~s.~@:>"

#: target:pcl/methods.lisp
msgid "~@<Generic function ~S requires at least ~D arguments.~@:>"
msgstr ""
"~@<Enericgay unctionfay ~S equiresray atway eastlay ~D argumentsway.~@:>"

#: target:pcl/methods.lisp
msgid "In get-accessor-method-function."
msgstr "Inway etgay-accessorway-ethodmay-unctionfay."

#: target:pcl/methods.lisp
msgid "The key for the last case arg to mcase was not T."
msgstr ""
"Ethay eykay orfay ethay astlay asecay argway otay casemay asway otnay T."

#: target:pcl/defcombin.lisp
msgid ""
"~@<Invalid options to a short method combination type.  ~\n"
"            The method combination type ~S accepts one option which ~\n"
"            must be either ~s or ~s.~@:>"
msgstr ""
"~@<Invalidway optionsway otay away ortshay ethodmay ombinationcay ypetay.  "
"~\n"
"            Ethay ethodmay ombinationcay ypetay ~S acceptsway oneway "
"optionway ichwhay ~\n"
"            ustmay ebay eitherway ~s orway ~s.~@:>"

#: target:pcl/defcombin.lisp
msgid ""
"~@<The method ~S ~A.  ~\n"
"                    The method combination type ~S was defined with the ~\n"
"                    short form of ~s and so requires all methods have ~\n"
"\t\t    either the single qualifier ~S or the single qualifier ~\n"
"\t\t    ~s.~@:>"
msgstr ""
"~@<Ethay ethodmay ~S ~Away.  ~\n"
"                    Ethay ethodmay ombinationcay ypetay ~S asway efinedday "
"ithway ethay ~\n"
"                    ortshay ormfay ofway ~s andway osay equiresray allway "
"ethodsmay avehay ~\n"
"\t\t    eitherway ethay inglesay alifierquay ~S orway ethay inglesay "
"alifierquay ~\n"
"\t\t    ~s.~@:>"

#: target:pcl/defcombin.lisp
msgid "has no qualifiers"
msgstr "ashay onay alifiersquay"

#: target:pcl/defcombin.lisp
msgid "has an illegal qualifier"
msgstr "ashay anway illegalway alifierquay"

#: target:pcl/defcombin.lisp
msgid ""
"~@<More than one method of type ~S ~\n"
"                                     with the same specializers.~@:>"
msgstr ""
"~@<Oremay anthay oneway ethodmay ofway ypetay ~S ~\n"
"                                     ithway ethay amesay ecializersspay.~@:>"

#: target:pcl/defcombin.lisp
msgid "No ~S methods."
msgstr "Onay ~S ethodsmay."

#: target:pcl/defcombin.lisp
msgid ""
"~@<In the method group specifier ~S, ~\n"
"                   ~S isn't a valid qualifier pattern.~@:>"
msgstr ""
"~@<Inway ethay ethodmay oupgray ecifierspay ~S, ~\n"
"                   ~S isnway't away alidvay alifierquay atternpay.~@:>"

#: target:pcl/defcombin.lisp
msgid "methods matching one of the patterns: ~{~S, ~} ~S"
msgstr "ethodsmay atchingmay oneway ofway ethay atternspay: ~{~S, ~} ~S"

#: target:pcl/defcombin.lisp
msgid "methods matching the pattern: ~S"
msgstr "ethodsmay atchingmay ethay atternpay: ~S"

#: target:pcl/defcombin.lisp
msgid "Invalid parameter specifier: ~s"
msgstr "Invalidway arameterpay ecifierspay: ~s"

#: target:pcl/env.lisp
msgid "~%~S is an instance of class ~S:"
msgstr "~%~S isway anway instanceway ofway assclay ~S:"

#: target:pcl/env.lisp
msgid "~% The following slots have :INSTANCE allocation:"
msgstr "~% Ethay ollowingfay otsslay avehay :INSTANCEWAY allocationway:"

#: target:pcl/env.lisp
msgid "~% The following slots have :CLASS allocation:"
msgstr "~% Ethay ollowingfay otsslay avehay :ASSCLAY allocationway:"

#: target:pcl/env.lisp
msgid "~% The following slots have allocation as shown:"
msgstr "~% Ethay ollowingfay otsslay avehay allocationway asway ownshay:"

#: target:pcl/env.lisp
msgid "~A is a generic function.~%"
msgstr "~Away isway away enericgay unctionfay.~%"

#: target:pcl/env.lisp
msgid "Its lambda-list is:~%  ~S~%"
msgstr "Itsway ambdalay-istlay isway:~%  ~S~%"

#: target:pcl/env.lisp
msgid "Generic function documentation:~%  ~s~%"
msgstr "Enericgay unctionfay ocumentationday:~%  ~s~%"

#: target:pcl/env.lisp
msgid "Its methods are:~%"
msgstr "Itsway ethodsmay areway:~%"

#: target:pcl/env.lisp
msgid "    Method documentation: ~s~%"
msgstr "    Ethodmay ocumentationday: ~s~%"

#: target:pcl/env.lisp
msgid "~&~@<~S is a class, it is an instance of ~S.~@:>~%"
msgstr ""
"~&~@<~S isway away assclay, itway isway anway instanceway ofway ~S.~@:>~%"

#: target:pcl/env.lisp
msgid "Its proper name is ~S.~%"
msgstr "Itsway operpray amenay isway ~S.~%"

#: target:pcl/env.lisp
msgid "Its name is ~S, but this is not a proper name.~%"
msgstr ""
"Itsway amenay isway ~S, utbay isthay isway otnay away operpray amenay.~%"

#: target:pcl/env.lisp
msgid "It has no name (the name is NIL).~%"
msgstr "Itway ashay onay amenay (ethay amenay isway ILNAY).~%"

#: target:pcl/env.lisp
msgid ""
"The direct superclasses are: ~:S, and the direct~%~\n"
"           subclasses are: ~:S.  The class is ~:[not ~;~]finalized.  ~\n"
"           The class precedence list is:~%~S~%~\n"
"           There are ~D methods specialized for this class."
msgstr ""
"Ethay irectday uperclassessay areway: ~:S, andway ethay irectday~%~\n"
"           ubclassessay areway: ~:S.  Ethay assclay isway ~:[otnay ~;~]"
"inalizedfay.  ~\n"
"           Ethay assclay ecedencepray istlay isway:~%~S~%~\n"
"           Erethay areway ~D ethodsmay ecializedspay orfay isthay assclay."

#: target:pcl/env.lisp
msgid "~&Its direct slots are:~%"
msgstr "~&Itsway irectday otsslay areway:~%"

#: target:pcl/env.lisp
msgid "  ~a, documentation ~s~%"
msgstr "  ~away, ocumentationday ~s~%"

#: target:pcl/env.lisp
msgid "~&~S is a ~S.~%"
msgstr "~&~S isway away ~S.~%"

#: target:pcl/env.lisp
msgid "You can also call it~@[ ~{~S~^, ~} or~] ~S.~%"
msgstr "Ouyay ancay alsoway allcay itway~@[ ~{~S~^, ~} orway~] ~S.~%"

#: target:pcl/env.lisp
msgid "It has ~D internal and ~D external symbols (~D total).~%"
msgstr ""
"Itway ashay ~D internalway andway ~D externalway ymbolssay (~D otaltay).~%"

#: target:pcl/env.lisp
msgid "It uses the packages ~{~S~^, ~}.~%"
msgstr "Itway usesway ethay ackagespay ~{~S~^, ~}.~%"

#: target:pcl/env.lisp
msgid "It is used by the packages ~{~S~^, ~}.~%"
msgstr "Itway isway usedway ybay ethay ackagespay ~{~S~^, ~}.~%"

#: target:pcl/env.lisp
msgid "~&~S is an ~a hash table."
msgstr "~&~S isway anway ~away ashhay abletay."

#: target:pcl/env.lisp
msgid "~&Its size is ~d buckets."
msgstr "~&Itsway izesay isway ~d ucketsbay."

#: target:pcl/env.lisp
msgid "~&Its rehash-size is ~d."
msgstr "~&Itsway ehashray-izesay isway ~d."

#: target:pcl/env.lisp
msgid "~&Its rehash-threshold is ~d."
msgstr "~&Itsway ehashray-resholdthay isway ~d."

#: target:pcl/env.lisp
msgid "~@<Default ~s method for ~s called.~@>"
msgstr "~@<Efaultday ~s ethodmay orfay ~s alledcay.~@>"

#: target:pcl/env.lisp
msgid "~@<Can't dump wrapper for anonymous class ~S.~@:>"
msgstr "~@<Ancay't umpday apperwray orfay anonymousway assclay ~S.~@:>"

#: target:pcl/env.lisp
msgid "~@<Can't use anonymous or undefined class as constant: ~S~:@>"
msgstr ""
"~@<Ancay't useway anonymousway orway undefinedway assclay asway onstantcay: "
"~S~:@>"

#: target:pcl/cmucl-documentation.lisp
msgid "Invalid function name ~s"
msgstr "Invalidway unctionfay amenay ~s"

#: target:pcl/cmucl-documentation.lisp
msgid "~@<~S is not the name of a structure type.~@:>"
msgstr "~@<~S isway otnay ethay amenay ofway away ucturestray ypetay.~@:>"

#: target:pcl/gray-streams.lisp
msgid ""
"Returns a type specifier for the kind of object returned by the\n"
"  Stream. Class FUNDAMENTAL-CHARACTER-STREAM provides a default method\n"
"  which returns CHARACTER."
msgstr ""
"Eturnsray away ypetay ecifierspay orfay ethay indkay ofway objectway "
"eturnedray ybay ethay\n"
"  Eamstray. Assclay UNDAMENTALFAY-ARACTERCHAY-EAMSTRAY ovidespray away "
"efaultday ethodmay\n"
"  ichwhay eturnsray ARACTERCHAY."

#: target:pcl/gray-streams.lisp
msgid ""
"Return true if Stream is not closed.  A default method is provided\n"
"  by class FUNDAMENTAL-STREAM which returns true if CLOSE has not been\n"
"  called on the stream."
msgstr ""
"Eturnray uetray ifway Eamstray isway otnay osedclay.  Away efaultday "
"ethodmay isway ovidedpray\n"
"  ybay assclay UNDAMENTALFAY-EAMSTRAY ichwhay eturnsray uetray ifway OSECLAY "
"ashay otnay eenbay\n"
"  alledcay onway ethay eamstray."

#: target:pcl/gray-streams.lisp
msgid ""
"Closes the given Stream.  No more I/O may be performed, but\n"
"  inquiries may still be made.  If :Abort is non-nil, an attempt is made\n"
"  to clean up the side effects of having created the stream."
msgstr ""
"Osesclay ethay ivengay Eamstray.  Onay oremay Iway/O aymay ebay erformedpay, "
"utbay\n"
"  inquiriesway aymay tillsay ebay ademay.  Ifway :Abortway isway onnay-"
"ilnay, anway attemptway isway ademay\n"
"  otay eanclay upway ethay idesay effectsway ofway avinghay eatedcray ethay "
"eamstray."

#: target:pcl/gray-streams.lisp
msgid ""
"This reads one character from the stream.  It returns either a\n"
"  character object, or the symbol :EOF if the stream is at end-of-file.\n"
"  Every subclass of FUNDAMENTAL-CHARACTER-INPUT-STREAM must define a\n"
"  method for this function."
msgstr ""
"Isthay eadsray oneway aracterchay omfray ethay eamstray.  Itway eturnsray "
"eitherway away\n"
"  aracterchay objectway, orway ethay ymbolsay :EOFWAY ifway ethay eamstray "
"isway atway endway-ofway-ilefay.\n"
"  Everyway ubclasssay ofway UNDAMENTALFAY-ARACTERCHAY-INPUTWAY-EAMSTRAY "
"ustmay efineday away\n"
"  ethodmay orfay isthay unctionfay."

#: target:pcl/gray-streams.lisp
msgid ""
"Un-does the last call to STREAM-READ-CHAR, as in UNREAD-CHAR.\n"
"  Returns NIL.  Every subclass of FUNDAMENTAL-CHARACTER-INPUT-STREAM\n"
"  must define a method for this function."
msgstr ""
"Unway-oesday ethay astlay allcay otay EAMSTRAY-EADRAY-ARCHAY, asway inway "
"UNREADWAY-ARCHAY.\n"
"  Eturnsray ILNAY.  Everyway ubclasssay ofway UNDAMENTALFAY-ARACTERCHAY-"
"INPUTWAY-EAMSTRAY\n"
"  ustmay efineday away ethodmay orfay isthay unctionfay."

#: target:pcl/gray-streams.lisp
msgid ""
"This is used to implement READ-CHAR-NO-HANG.  It returns either a\n"
"  character, or NIL if no input is currently available, or :EOF if\n"
"  end-of-file is reached.  The default method provided by\n"
"  FUNDAMENTAL-CHARACTER-INPUT-STREAM simply calls STREAM-READ-CHAR; this\n"
"  is sufficient for file streams, but interactive streams should define\n"
"  their own method."
msgstr ""
"Isthay isway usedway otay implementway EADRAY-ARCHAY-ONAY-ANGHAY.  Itway "
"eturnsray eitherway away\n"
"  aracterchay, orway ILNAY ifway onay inputway isway urrentlycay "
"availableway, orway :EOFWAY ifway\n"
"  endway-ofway-ilefay isway eachedray.  Ethay efaultday ethodmay ovidedpray "
"ybay\n"
"  UNDAMENTALFAY-ARACTERCHAY-INPUTWAY-EAMSTRAY implysay allscay EAMSTRAY-"
"EADRAY-ARCHAY; isthay\n"
"  isway ufficientsay orfay ilefay eamsstray, utbay interactiveway eamsstray "
"ouldshay efineday\n"
"  eirthay ownway ethodmay."

#: target:pcl/gray-streams.lisp
msgid ""
"Used to implement PEEK-CHAR; this corresponds to peek-type of NIL.\n"
"  It returns either a character or :EOF.  The default method calls\n"
"  STREAM-READ-CHAR and STREAM-UNREAD-CHAR."
msgstr ""
"Usedway otay implementway EEKPAY-ARCHAY; isthay orrespondscay otay eekpay-"
"ypetay ofway ILNAY.\n"
"  Itway eturnsray eitherway away aracterchay orway :EOFWAY.  Ethay efaultday "
"ethodmay allscay\n"
"  EAMSTRAY-EADRAY-ARCHAY andway EAMSTRAY-UNREADWAY-ARCHAY."

#: target:pcl/gray-streams.lisp
msgid ""
"Used by LISTEN.  Returns true or false.  The default method uses\n"
"  STREAM-READ-CHAR-NO-HANG and STREAM-UNREAD-CHAR.  Most streams should \n"
"  define their own method since it will usually be trivial and will\n"
"  always be more efficient than the default method."
msgstr ""
"Usedway ybay ISTENLAY.  Eturnsray uetray orway alsefay.  Ethay efaultday "
"ethodmay usesway\n"
"  EAMSTRAY-EADRAY-ARCHAY-ONAY-ANGHAY andway EAMSTRAY-UNREADWAY-ARCHAY.  "
"Ostmay eamsstray ouldshay \n"
"  efineday eirthay ownway ethodmay incesay itway illway usuallyway ebay "
"ivialtray andway illway\n"
"  alwaysway ebay oremay efficientway anthay ethay efaultday ethodmay."

#: target:pcl/gray-streams.lisp
msgid ""
"Used by READ-LINE.  A string is returned as the first value.  The\n"
"  second value is true if the string was terminated by end-of-file\n"
"  instead of the end of a line.  The default method uses repeated\n"
"  calls to STREAM-READ-CHAR."
msgstr ""
"Usedway ybay EADRAY-INELAY.  Away ingstray isway eturnedray asway ethay "
"irstfay aluevay.  Ethay\n"
"  econdsay aluevay isway uetray ifway ethay ingstray asway erminatedtay ybay "
"endway-ofway-ilefay\n"
"  insteadway ofway ethay endway ofway away inelay.  Ethay efaultday ethodmay "
"usesway epeatedray\n"
"  allscay otay EAMSTRAY-EADRAY-ARCHAY."

#: target:pcl/gray-streams.lisp
msgid ""
"Implements CLEAR-INPUT for the stream, returning NIL.  The default\n"
"  method does nothing."
msgstr ""
"Implementsway EARCLAY-INPUTWAY orfay ethay eamstray, eturningray ILNAY.  "
"Ethay efaultday\n"
"  ethodmay oesday othingnay."

#: target:pcl/gray-streams.lisp
msgid "Implements READ-SEQUENCE for the stream."
msgstr "Implementsway EADRAY-EQUENCESAY orfay ethay eamstray."

#: target:pcl/gray-streams.lisp
msgid ""
"Writes character to the stream and returns the character.  Every\n"
"  subclass of FUNDAMENTAL-CHARACTER-OUTPUT-STREAM must have a method\n"
"  defined for this function."
msgstr ""
"Iteswray aracterchay otay ethay eamstray andway eturnsray ethay "
"aracterchay.  Everyway\n"
"  ubclasssay ofway UNDAMENTALFAY-ARACTERCHAY-OUTPUTWAY-EAMSTRAY ustmay "
"avehay away ethodmay\n"
"  efinedday orfay isthay unctionfay."

#: target:pcl/gray-streams.lisp
msgid ""
"This function returns the column number where the next character\n"
"  will be written, or NIL if that is not meaningful for this stream.\n"
"  The first column on a line is numbered 0.  This function is used in\n"
"  the implementation of PPRINT and the FORMAT ~T directive.  For every\n"
"  character output stream class that is defined, a method must be\n"
"  defined for this function, although it is permissible for it to\n"
"  always return NIL."
msgstr ""
"Isthay unctionfay eturnsray ethay olumncay umbernay erewhay ethay extnay "
"aracterchay\n"
"  illway ebay ittenwray, orway ILNAY ifway atthay isway otnay eaningfulmay "
"orfay isthay eamstray.\n"
"  Ethay irstfay olumncay onway away inelay isway umberednay 0.  Isthay "
"unctionfay isway usedway inway\n"
"  ethay implementationway ofway PRINTPAY andway ethay ORMATFAY ~T "
"irectiveday.  Orfay everyway\n"
"  aracterchay outputway eamstray assclay atthay isway efinedday, away "
"ethodmay ustmay ebay\n"
"  efinedday orfay isthay unctionfay, althoughway itway isway ermissiblepay "
"orfay itway otay\n"
"  alwaysway eturnray ILNAY."

#: target:pcl/gray-streams.lisp
msgid "Return the stream line length or Nil."
msgstr "Eturnray ethay eamstray inelay engthlay orway Ilnay."

#: target:pcl/gray-streams.lisp
msgid ""
"This is a predicate which returns T if the stream is positioned at\n"
"  the beginning of a line, else NIL.  It is permissible to always return\n"
"  NIL.  This is used in the implementation of FRESH-LINE.  Note that\n"
"  while a value of 0 from STREAM-LINE-COLUMN also indicates the\n"
"  beginning of a line, there are cases where STREAM-START-LINE-P can be\n"
"  meaningfully implemented although STREAM-LINE-COLUMN can't be.  For\n"
"  example, for a window using variable-width characters, the column\n"
"  number isn't very meaningful, but the beginning of the line does have\n"
"  a clear meaning.  The default method for STREAM-START-LINE-P on class\n"
"  FUNDAMENTAL-CHARACTER-OUTPUT-STREAM uses STREAM-LINE-COLUMN, so if\n"
"  that is defined to return NIL, then a method should be provided for\n"
"  either STREAM-START-LINE-P or STREAM-FRESH-LINE."
msgstr ""
"Isthay isway away edicatepray ichwhay eturnsray T ifway ethay eamstray isway "
"ositionedpay atway\n"
"  ethay eginningbay ofway away inelay, elseway ILNAY.  Itway isway "
"ermissiblepay otay alwaysway eturnray\n"
"  ILNAY.  Isthay isway usedway inway ethay implementationway ofway ESHFRAY-"
"INELAY.  Otenay atthay\n"
"  ilewhay away aluevay ofway 0 omfray EAMSTRAY-INELAY-OLUMNCAY alsoway "
"indicatesway ethay\n"
"  eginningbay ofway away inelay, erethay areway asescay erewhay EAMSTRAY-"
"TARTSAY-INELAY-P ancay ebay\n"
"  eaningfullymay implementedway althoughway EAMSTRAY-INELAY-OLUMNCAY ancay't "
"ebay.  Orfay\n"
"  exampleway, orfay away indowway usingway ariablevay-idthway aracterschay, "
"ethay olumncay\n"
"  umbernay isnway't eryvay eaningfulmay, utbay ethay eginningbay ofway ethay "
"inelay oesday avehay\n"
"  away earclay eaningmay.  Ethay efaultday ethodmay orfay EAMSTRAY-TARTSAY-"
"INELAY-P onway assclay\n"
"  UNDAMENTALFAY-ARACTERCHAY-OUTPUTWAY-EAMSTRAY usesway EAMSTRAY-INELAY-"
"OLUMNCAY, osay ifway\n"
"  atthay isway efinedday otay eturnray ILNAY, enthay away ethodmay ouldshay "
"ebay ovidedpray orfay\n"
"  eitherway EAMSTRAY-TARTSAY-INELAY-P orway EAMSTRAY-ESHFRAY-INELAY."

#: target:pcl/gray-streams.lisp
msgid ""
"This is used by WRITE-STRING.  It writes the string to the stream,\n"
"  optionally delimited by start and end, which default to 0 and NIL.\n"
"  The string argument is returned.  The default method provided by\n"
"  FUNDAMENTAL-CHARACTER-OUTPUT-STREAM uses repeated calls to\n"
"  STREAM-WRITE-CHAR."
msgstr ""
"Isthay isway usedway ybay ITEWRAY-INGSTRAY.  Itway iteswray ethay ingstray "
"otay ethay eamstray,\n"
"  optionallyway elimitedday ybay tartsay andway endway, ichwhay efaultday "
"otay 0 andway ILNAY.\n"
"  Ethay ingstray argumentway isway eturnedray.  Ethay efaultday ethodmay "
"ovidedpray ybay\n"
"  UNDAMENTALFAY-ARACTERCHAY-OUTPUTWAY-EAMSTRAY usesway epeatedray allscay "
"otay\n"
"  EAMSTRAY-ITEWRAY-ARCHAY."

#: target:pcl/gray-streams.lisp
msgid ""
"Writes an end of line, as for TERPRI.  Returns NIL.  The default\n"
"  method does (STREAM-WRITE-CHAR stream #NEWLINE)."
msgstr ""
"Iteswray anway endway ofway inelay, asway orfay ERPRITAY.  Eturnsray ILNAY.  "
"Ethay efaultday\n"
"  ethodmay oesday (EAMSTRAY-ITEWRAY-ARCHAY eamstray #EWLINENAY)."

#: target:pcl/gray-streams.lisp
msgid ""
"Outputs a new line to the Stream if it is not positioned at the\n"
"  begining of a line.  Returns T if it output a new line, nil\n"
"  otherwise. Used by FRESH-LINE. The default method uses\n"
"  STREAM-START-LINE-P and STREAM-TERPRI."
msgstr ""
"Outputsway away ewnay inelay otay ethay Eamstray ifway itway isway otnay "
"ositionedpay atway ethay\n"
"  eginingbay ofway away inelay.  Eturnsray T ifway itway outputway away "
"ewnay inelay, ilnay\n"
"  otherwiseway. Usedway ybay ESHFRAY-INELAY. Ethay efaultday ethodmay "
"usesway\n"
"  EAMSTRAY-TARTSAY-INELAY-P andway EAMSTRAY-ERPRITAY."

#: target:pcl/gray-streams.lisp
msgid ""
"Attempts to ensure that all output sent to the Stream has reached\n"
"  its destination, and only then returns false. Implements\n"
"  FINISH-OUTPUT.  The default method does nothing."
msgstr ""
"Attemptsway otay ensureway atthay allway outputway entsay otay ethay "
"Eamstray ashay eachedray\n"
"  itsway estinationday, andway onlyway enthay eturnsray alsefay. "
"Implementsway\n"
"  INISHFAY-OUTPUTWAY.  Ethay efaultday ethodmay oesday othingnay."

#: target:pcl/gray-streams.lisp
msgid ""
"Attempts to force any buffered output to be sent. Implements\n"
"  FORCE-OUTPUT.  The default method does nothing."
msgstr ""
"Attemptsway otay orcefay anyway ufferedbay outputway otay ebay entsay. "
"Implementsway\n"
"  ORCEFAY-OUTPUTWAY.  Ethay efaultday ethodmay oesday othingnay."

#: target:pcl/gray-streams.lisp
msgid ""
"Clears the given output Stream. Implements CLEAR-OUTPUT.  The\n"
"  default method does nothing."
msgstr ""
"Earsclay ethay ivengay outputway Eamstray. Implementsway EARCLAY-OUTPUTWAY.  "
"Ethay\n"
"  efaultday ethodmay oesday othingnay."

#: target:pcl/gray-streams.lisp
msgid ""
"Writes enough blank space so that the next character will be\n"
"  written at the specified column.  Returns true if the operation is\n"
"  successful, or NIL if it is not supported for this stream.  This is\n"
"  intended for use by by PPRINT and FORMAT ~T.  The default method uses\n"
"  STREAM-LINE-COLUMN and repeated calls to STREAM-WRITE-CHAR with a\n"
"  #SPACE character; it returns NIL if STREAM-LINE-COLUMN returns NIL."
msgstr ""
"Iteswray enoughway ankblay acespay osay atthay ethay extnay aracterchay "
"illway ebay\n"
"  ittenwray atway ethay ecifiedspay olumncay.  Eturnsray uetray ifway ethay "
"operationway isway\n"
"  uccessfulsay, orway ILNAY ifway itway isway otnay upportedsay orfay isthay "
"eamstray.  Isthay isway\n"
"  intendedway orfay useway ybay ybay PRINTPAY andway ORMATFAY ~T.  Ethay "
"efaultday ethodmay usesway\n"
"  EAMSTRAY-INELAY-OLUMNCAY andway epeatedray allscay otay EAMSTRAY-ITEWRAY-"
"ARCHAY ithway away\n"
"  #ACESPAY aracterchay; itway eturnsray ILNAY ifway EAMSTRAY-INELAY-OLUMNCAY "
"eturnsray ILNAY."

#: target:pcl/gray-streams.lisp
msgid "Implements WRITE-SEQUENCE for the stream."
msgstr "Implementsway ITEWRAY-EQUENCESAY orfay ethay eamstray."

#: target:pcl/gray-streams.lisp
msgid ""
"Used by READ-BYTE; returns either an integer, or the symbol :EOF\n"
"  if the stream is at end-of-file."
msgstr ""
"Usedway ybay EADRAY-YTEBAY; eturnsray eitherway anway integerway, orway "
"ethay ymbolsay :EOFWAY\n"
"  ifway ethay eamstray isway atway endway-ofway-ilefay."

#: target:pcl/gray-streams.lisp
msgid ""
"Implements WRITE-BYTE; writes the integer to the stream and\n"
"  returns the integer as the result."
msgstr ""
"Implementsway ITEWRAY-YTEBAY; iteswray ethay integerway otay ethay eamstray "
"andway\n"
"  eturnsray ethay integerway asway ethay esultray."

#: target:pcl/gray-streams.lisp
msgid "    Gray Streams Protocol Support"
msgstr "    Aygray Eamsstray Otocolpray Upportsay"
