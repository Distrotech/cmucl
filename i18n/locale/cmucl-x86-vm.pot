#@ cmucl-x86-vm

# SOME DESCRIPTIVE TITLE
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI +ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: src/code/x86-vm.lisp
msgid "Returns a string describing the type of the local machine."
msgstr ""

#: src/code/x86-vm.lisp
msgid "Returns a string describing the version of the local machine."
msgstr ""

#: src/code/x86-vm.lisp
msgid "Unknown code-object-fixup kind ~s."
msgstr ""

#: src/code/x86-vm.lisp
msgid ""
"Atomically compare object's slot value to test-value and if EQ store\n"
"   new-value in the slot. The original value of the slot is returned."
msgstr ""

#: src/code/x86-vm.lisp
msgid ""
"Atomically compare symbol's value to test-value and if EQ store\n"
"  new-value in symbol's value slot and return the original value."
msgstr ""

#: src/code/x86-vm.lisp
msgid ""
"Atomically compare the car of CONS to test-value and if EQ store\n"
"  new-value its car and return the original value."
msgstr ""

#: src/code/x86-vm.lisp
msgid ""
"Atomically compare the cdr of CONS to test-value and if EQ store\n"
"  new-value its cdr and return the original value."
msgstr ""

#: src/code/x86-vm.lisp
msgid ""
"Atomically compare an element of vector to test-value and if EQ store\n"
"  new-value the element and return the original value."
msgstr ""

#: src/code/x86-vm.lisp
msgid "Thread safe push of val onto the list in the symbol global value."
msgstr ""

#: src/code/x86-vm.lisp
msgid "Thread safe pop from the list in the symbol global value."
msgstr ""

#: src/code/x86-vm.lisp
msgid "Thread safe push of val onto the list in the car of cons."
msgstr ""

#: src/code/x86-vm.lisp
msgid "Thread safe push of val onto the list in the cdr of cons."
msgstr ""

#: src/code/x86-vm.lisp
msgid "Thread safe push of val onto the list in the vector element."
msgstr ""

#: src/compiler/x86/c-call.lisp src/compiler/x86/insts.lisp
msgid "Class not yet defined: ~S"
msgstr ""

#: src/compiler/x86/macros.lisp
msgid "Move SRC into DST unless they are location=."
msgstr ""

#: src/compiler/x86/macros.lisp
msgid ""
"Loads the type bits of a pointer into target independent of\n"
"   byte-ordering issues."
msgstr ""

#: src/compiler/x86/macros.lisp
msgid ""
"Allocate an object with a size in bytes given by Size.\n"
"   The size may be an integer or a TN.\n"
"   If Inline is a VOP node-var then it is used to make an appropriate\n"
"   speed vs size decision.  If Dynamic-Extent is true, and otherwise\n"
"   appropriate, allocate from the stack."
msgstr ""

#: src/compiler/x86/macros.lisp
msgid ""
"Allocate an other-pointer object of fixed Size with a single\n"
"   word header having the specified Type-Code.  The result is placed in\n"
"   Result-TN."
msgstr ""

#: src/compiler/x86/macros.lisp
msgid "Cause an error.  ERROR-CODE is the error to cause."
msgstr ""

#: src/compiler/x86/macros.lisp
msgid ""
"Cause a continuable error.  If the error is continued, execution resumes at\n"
"  LABEL."
msgstr ""

#: src/compiler/x86/macros.lisp
msgid ""
"Generate-Error-Code Error-code Value*\n"
"  Emit code for an error with the specified Error-Code and context Values."
msgstr ""

#: src/compiler/x86/macros.lisp
msgid ""
"Generate-CError-Code Error-code Value*\n"
"  Emit code for a continuable error with the specified Error-Code and\n"
"  context Values.  If the error is continued, execution resumes after\n"
"  the GENERATE-CERROR-CODE form."
msgstr ""

#: src/compiler/x86/array.lisp src/compiler/x86/call.lisp
#: src/compiler/x86/alloc.lisp src/compiler/x86/cell.lisp
#: src/compiler/x86/debug.lisp src/compiler/x86/arith.lisp
#: src/compiler/x86/memory.lisp src/compiler/x86/char.lisp
#: src/compiler/x86/float.lisp src/compiler/x86/move.lisp
msgid "Unknown SC to SC-Case for ~S:~%  ~S"
msgstr ""

#: src/compiler/x86/move.lisp
msgid "fixnum untagging"
msgstr ""

#: src/compiler/x86/move.lisp
msgid "constant load"
msgstr ""

#: src/compiler/x86/call.lisp src/compiler/x86/debug.lisp
#: src/compiler/x86/char.lisp src/compiler/x86/float.lisp
#: src/compiler/x86/move.lisp
msgid ""
"Load TN allocated, but no move function?~@\n"
"	           VM definition inconsistent, recompile and try again."
msgstr ""

#: src/compiler/x86/move.lisp
msgid "integer to untagged word coercion"
msgstr ""

#: src/compiler/x86/move.lisp
msgid "fixnum tagging"
msgstr ""

#: src/compiler/x86/move.lisp
msgid "signed word to integer coercion"
msgstr ""

#: src/compiler/x86/move.lisp
msgid "unsigned word to integer coercion"
msgstr ""

#: src/compiler/x86/move.lisp
msgid "word integer move"
msgstr ""

#: src/compiler/x86/move.lisp
msgid "word integer argument move"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "Ignoring bogus i387 Constant ~a"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "float move"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "complex float move"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "float to pointer coercion"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "pointer to float coercion"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "complex float to pointer coercion"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "complex double-double float to pointer coercion"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "pointer to complex float coercion"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "float argument move"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "complex float argument move"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "complex double-double-float argument move"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline float arithmetic"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline float comparison"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline float coercion"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline float truncate"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline NPX function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline tan function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline sin/cos function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline exp function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline expm1 function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline log function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline log10 function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline pow function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline scalbn function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline scalb function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline log1p function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline log1p with limited x range function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline logb function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline atan function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline atan2 function"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline complex single-float creation"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline complex double-float creation"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline complex long-float creation"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "complex float realpart"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "complex float imagpart"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline dummy FP register bias"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "double-double float move"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "double double float to pointer coercion"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "pointer to double-double-float coercion"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "double double-float argument move"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline double-double-float creation"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "double-double high part"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "double-double low part"
msgstr ""

#: src/compiler/x86/float.lisp
msgid "inline complex double-double-float creation"
msgstr ""

#: src/compiler/x86/char.lisp
msgid "character untagging"
msgstr ""

#: src/compiler/x86/char.lisp
msgid "character tagging"
msgstr ""

#: src/compiler/x86/char.lisp
msgid "character move"
msgstr ""

#: src/compiler/x86/char.lisp
msgid "character arg move"
msgstr ""

#: src/compiler/x86/char.lisp
msgid "inline comparison"
msgstr ""

#: src/compiler/x86/arith.lisp
msgid "inline fixnum arithmetic"
msgstr ""

#: src/compiler/x86/arith.lisp
msgid "inline (signed-byte 32) arithmetic"
msgstr ""

#: src/compiler/x86/arith.lisp
msgid "inline (unsigned-byte 32) arithmetic"
msgstr ""

#: src/compiler/x86/arith.lisp
msgid "inline ASH"
msgstr ""

#: src/compiler/x86/arith.lisp
msgid "inline (signed-byte 32) integer-length"
msgstr ""

#: src/compiler/x86/arith.lisp
msgid "inline (unsigned-byte 32) logcount"
msgstr ""

#: src/compiler/x86/arith.lisp
msgid "inline fixnum comparison"
msgstr ""

#: src/compiler/x86/arith.lisp
msgid "inline (signed-byte 32) comparison"
msgstr ""

#: src/compiler/x86/arith.lisp
msgid "inline (unsigned-byte 32) comparison"
msgstr ""

#: src/compiler/x86/arith.lisp
msgid "SHIFT-TOWARDS-START"
msgstr ""

#: src/compiler/x86/arith.lisp
msgid "SHIFT-TOWARDS-END"
msgstr ""

#: src/compiler/x86/c-call.lisp
msgid "Too many result values from c-call."
msgstr ""

#: src/compiler/x86/c-call.lisp
msgid "Method ~S not defined for ~S"
msgstr ""

#: src/compiler/x86/c-call.lisp
msgid ""
"Cons up a piece of code which calls call-callback with INDEX and a\n"
"pointer to the arguments."
msgstr ""

#: src/compiler/x86/call.lisp
msgid "more-arg-context"
msgstr ""

#: src/compiler/x86/array.lisp
msgid "inline array access"
msgstr ""

#: src/compiler/x86/array.lisp
msgid "inline array store"
msgstr ""

